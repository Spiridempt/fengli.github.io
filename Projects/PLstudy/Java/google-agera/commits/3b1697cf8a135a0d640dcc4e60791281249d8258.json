{"sha":"3b1697cf8a135a0d640dcc4e60791281249d8258","commit":{"author":{"name":"Magnus Ernstsson","email":"magnus@ernstsson.net","date":"2016-05-31T13:06:04Z"},"committer":{"name":"Magnus Ernstsson","email":"magnus@ernstsson.net","date":"2016-05-31T13:06:04Z"},"message":"Tidied up BaseObservable and improved performance (#59)\n\nChanged BaseObservable to use a private lock\r\nChanged BaseObservable to sendUpdate to read more easily\r\n\r\nUse a boolean and multimap to track update from/to observable/updatable\r\ninstead of using the much slower handler.hasMessage method\r\n\r\nAlso removed the check for myLooper() in sendUpdate that slows down\r\nupdates (especially from other threads). This makes an update execute\r\nfaster but one cycle later, instead of slower, but this cycle","tree":{"sha":"f8065057f7fe31b3f01b20b8ed35368984150a71","url":"https://api.github.com/repos/google/agera/git/trees/f8065057f7fe31b3f01b20b8ed35368984150a71"},"url":"https://api.github.com/repos/google/agera/git/commits/3b1697cf8a135a0d640dcc4e60791281249d8258","comment_count":0},"url":"https://api.github.com/repos/google/agera/commits/3b1697cf8a135a0d640dcc4e60791281249d8258","html_url":"https://github.com/google/agera/commit/3b1697cf8a135a0d640dcc4e60791281249d8258","comments_url":"https://api.github.com/repos/google/agera/commits/3b1697cf8a135a0d640dcc4e60791281249d8258/comments","author":{"login":"ernstsson","id":378389,"avatar_url":"https://avatars2.githubusercontent.com/u/378389?v=3","gravatar_id":"","url":"https://api.github.com/users/ernstsson","html_url":"https://github.com/ernstsson","followers_url":"https://api.github.com/users/ernstsson/followers","following_url":"https://api.github.com/users/ernstsson/following{/other_user}","gists_url":"https://api.github.com/users/ernstsson/gists{/gist_id}","starred_url":"https://api.github.com/users/ernstsson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ernstsson/subscriptions","organizations_url":"https://api.github.com/users/ernstsson/orgs","repos_url":"https://api.github.com/users/ernstsson/repos","events_url":"https://api.github.com/users/ernstsson/events{/privacy}","received_events_url":"https://api.github.com/users/ernstsson/received_events","type":"User","site_admin":false},"committer":{"login":"ernstsson","id":378389,"avatar_url":"https://avatars2.githubusercontent.com/u/378389?v=3","gravatar_id":"","url":"https://api.github.com/users/ernstsson","html_url":"https://github.com/ernstsson","followers_url":"https://api.github.com/users/ernstsson/followers","following_url":"https://api.github.com/users/ernstsson/following{/other_user}","gists_url":"https://api.github.com/users/ernstsson/gists{/gist_id}","starred_url":"https://api.github.com/users/ernstsson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ernstsson/subscriptions","organizations_url":"https://api.github.com/users/ernstsson/orgs","repos_url":"https://api.github.com/users/ernstsson/repos","events_url":"https://api.github.com/users/ernstsson/events{/privacy}","received_events_url":"https://api.github.com/users/ernstsson/received_events","type":"User","site_admin":false},"parents":[{"sha":"b4842bd387626000288c179287a531a57a35117c","url":"https://api.github.com/repos/google/agera/commits/b4842bd387626000288c179287a531a57a35117c","html_url":"https://github.com/google/agera/commit/b4842bd387626000288c179287a531a57a35117c"}],"stats":{"total":179,"additions":142,"deletions":37},"files":[{"sha":"b2d0615500b040bb347ec6fba3fc59b14736c9d7","filename":"agera/src/main/java/com/google/android/agera/BaseObservable.java","status":"modified","additions":45,"deletions":34,"changes":79,"blob_url":"https://github.com/google/agera/blob/3b1697cf8a135a0d640dcc4e60791281249d8258/agera/src/main/java/com/google/android/agera/BaseObservable.java","raw_url":"https://github.com/google/agera/raw/3b1697cf8a135a0d640dcc4e60791281249d8258/agera/src/main/java/com/google/android/agera/BaseObservable.java","contents_url":"https://api.github.com/repos/google/agera/contents/agera/src/main/java/com/google/android/agera/BaseObservable.java?ref=3b1697cf8a135a0d640dcc4e60791281249d8258","patch":"@@ -43,12 +43,14 @@\n   private static final Object[] NO_UPDATABLES_OR_HANDLERS = new Object[0];\n   @NonNull\n   private final WorkerHandler handler;\n+  @NonNull\n+  private final Object token = new Object();\n   private final int shortestUpdateWindowMillis;\n-\n   @NonNull\n   private Object[] updatablesAndHandlers;\n   private int size;\n   private long lastUpdateTimestamp;\n+  private boolean pendingUpdate = false;\n \n   protected BaseObservable() {\n     this(0);\n@@ -63,40 +65,47 @@ protected BaseObservable() {\n   }\n \n   @Override\n-  public synchronized final void addUpdatable(@NonNull final Updatable updatable) {\n+  public final void addUpdatable(@NonNull final Updatable updatable) {\n     checkState(Looper.myLooper() != null, \"Can only be added on a Looper thread\");\n     checkNotNull(updatable);\n-    add(updatable, workerHandler());\n-    if (size == 1) {\n-      if (handler.hasMessages(MSG_LAST_REMOVED, this)) {\n-        handler.removeMessages(MSG_LAST_REMOVED, this);\n-      } else {\n-        handler.obtainMessage(WorkerHandler.MSG_FIRST_ADDED, this).sendToTarget();\n+    synchronized (token) {\n+      add(updatable, workerHandler());\n+      if (size == 1) {\n+        if (handler.hasMessages(MSG_LAST_REMOVED, this)) {\n+          handler.removeMessages(MSG_LAST_REMOVED, this);\n+        } else {\n+          handler.obtainMessage(WorkerHandler.MSG_FIRST_ADDED, this).sendToTarget();\n+        }\n       }\n     }\n   }\n \n   @Override\n-  public synchronized final void removeUpdatable(@NonNull final Updatable updatable) {\n+  public final void removeUpdatable(@NonNull final Updatable updatable) {\n     checkState(Looper.myLooper() != null, \"Can only be removed on a Looper thread\");\n     checkNotNull(updatable);\n-    remove(updatable);\n-    if (size == 0) {\n-      handler.obtainMessage(MSG_LAST_REMOVED, this).sendToTarget();\n-      handler.removeMessages(MSG_UPDATE, this);\n+    synchronized (token) {\n+      remove(updatable);\n+      if (size == 0) {\n+        handler.obtainMessage(MSG_LAST_REMOVED, this).sendToTarget();\n+        handler.removeMessages(MSG_UPDATE, this);\n+        pendingUpdate = false;\n+      }\n     }\n   }\n \n   /**\n    * Notifies all registered {@link Updatable}s.\n    */\n   protected final void dispatchUpdate() {\n-    if (!handler.hasMessages(MSG_UPDATE, this)) {\n-      handler.obtainMessage(MSG_UPDATE, this).sendToTarget();\n+    synchronized (token) {\n+      if (!pendingUpdate) {\n+        pendingUpdate = true;\n+        handler.obtainMessage(MSG_UPDATE, this).sendToTarget();\n+      }\n     }\n   }\n \n-\n   private void add(@NonNull final Updatable updatable, @NonNull final Handler handler) {\n     int indexToAdd = -1;\n     for (int index = 0; index < updatablesAndHandlers.length; index += 2) {\n@@ -120,8 +129,8 @@ private void add(@NonNull final Updatable updatable, @NonNull final Handler hand\n   private void remove(@NonNull final Updatable updatable) {\n     for (int index = 0; index < updatablesAndHandlers.length; index += 2) {\n       if (updatablesAndHandlers[index] == updatable) {\n-        ((WorkerHandler) updatablesAndHandlers[index + 1]).removeMessages(\n-            WorkerHandler.MSG_CALL_UPDATABLE, updatable);\n+        WorkerHandler handler = (WorkerHandler) updatablesAndHandlers[index + 1];\n+        handler.removeUpdatable(updatable, token);\n         updatablesAndHandlers[index] = null;\n         updatablesAndHandlers[index + 1] = null;\n         size--;\n@@ -131,29 +140,31 @@ private void remove(@NonNull final Updatable updatable) {\n     throw new IllegalStateException(\"Updatable not added, cannot remove.\");\n   }\n \n-  synchronized void sendUpdate() {\n-    handler.removeMessages(WorkerHandler.MSG_UPDATE, this);\n-    final long elapsedRealtimeMillis =\n-        shortestUpdateWindowMillis > 0 ? elapsedRealtime() : 0;\n-    final long timeFromLastUpdate = elapsedRealtimeMillis - lastUpdateTimestamp;\n-    if (timeFromLastUpdate >= shortestUpdateWindowMillis) {\n-      lastUpdateTimestamp = elapsedRealtimeMillis;\n+  void sendUpdate() {\n+    synchronized (token) {\n+      if (!pendingUpdate) {\n+        return;\n+      }\n+      if (shortestUpdateWindowMillis > 0) {\n+        final long elapsedRealtimeMillis = elapsedRealtime();\n+        final long timeFromLastUpdate = elapsedRealtimeMillis - lastUpdateTimestamp;\n+        if (timeFromLastUpdate  < shortestUpdateWindowMillis) {\n+          handler.sendMessageDelayed(handler.obtainMessage(WorkerHandler.MSG_UPDATE, this),\n+              shortestUpdateWindowMillis - timeFromLastUpdate);\n+          pendingUpdate = true;\n+          return;\n+        }\n+        lastUpdateTimestamp = elapsedRealtimeMillis;\n+      }\n+      pendingUpdate = false;\n       for (int index = 0; index < updatablesAndHandlers.length; index = index + 2) {\n         final Updatable updatable = (Updatable) updatablesAndHandlers[index];\n         final WorkerHandler handler =\n             (WorkerHandler) updatablesAndHandlers[index + 1];\n         if (updatable != null) {\n-          if (handler.getLooper() == Looper.myLooper()) {\n-            handler.removeMessages(WorkerHandler.MSG_CALL_UPDATABLE, updatable);\n-            updatable.update();\n-          } else if (!handler.hasMessages(WorkerHandler.MSG_CALL_UPDATABLE, updatable)) {\n-            handler.obtainMessage(WorkerHandler.MSG_CALL_UPDATABLE, updatable).sendToTarget();\n-          }\n+          handler.update(updatable, token);\n         }\n       }\n-    } else {\n-      handler.sendMessageDelayed(handler.obtainMessage(WorkerHandler.MSG_UPDATE, this),\n-          shortestUpdateWindowMillis - timeFromLastUpdate);\n     }\n   }\n "},{"sha":"c7805798cea03f7448a7a87ff075340c5518582e","filename":"agera/src/main/java/com/google/android/agera/IdentityMultiMap.java","status":"added","additions":71,"deletions":0,"changes":71,"blob_url":"https://github.com/google/agera/blob/3b1697cf8a135a0d640dcc4e60791281249d8258/agera/src/main/java/com/google/android/agera/IdentityMultiMap.java","raw_url":"https://github.com/google/agera/raw/3b1697cf8a135a0d640dcc4e60791281249d8258/agera/src/main/java/com/google/android/agera/IdentityMultiMap.java","contents_url":"https://api.github.com/repos/google/agera/contents/agera/src/main/java/com/google/android/agera/IdentityMultiMap.java?ref=3b1697cf8a135a0d640dcc4e60791281249d8258","patch":"@@ -0,0 +1,71 @@\n+package com.google.android.agera;\n+\n+import android.support.annotation.NonNull;\n+\n+import java.util.Arrays;\n+\n+final class IdentityMultiMap<K, V> {\n+  @NonNull\n+  private static final Object[] NO_KEY_VALUES = new Object[0];\n+\n+  @NonNull\n+  private Object[] keysValues;\n+\n+  IdentityMultiMap() {\n+    this.keysValues = NO_KEY_VALUES;\n+  }\n+\n+  @NonNull\n+  Object[] getKeysValues() {\n+    return keysValues;\n+  }\n+\n+  synchronized boolean addKeyValuePair(@NonNull final K key, @NonNull final V value) {\n+    int size = 0;\n+    int indexToAdd = -1;\n+    boolean hasValue = false;\n+    for (int index = 0; index < keysValues.length; index += 2) {\n+      final Object keysValue = keysValues[index];\n+      if (keysValue == null) {\n+        indexToAdd = index;\n+      }\n+      if (keysValue == key) {\n+        size++;\n+        if (keysValues[index + 1] == value) {\n+          indexToAdd = index;\n+          hasValue = true;\n+        }\n+      }\n+    }\n+    if (indexToAdd == -1) {\n+      indexToAdd = keysValues.length;\n+      keysValues = Arrays.copyOf(keysValues, indexToAdd < 2 ? 2 : indexToAdd * 2);\n+    }\n+    if (!hasValue) {\n+      keysValues[indexToAdd] = key;\n+      keysValues[indexToAdd + 1] = value;\n+    }\n+    return size == 0;\n+  }\n+\n+  synchronized void removeKeyValuePair(@NonNull final K key, @NonNull final V value) {\n+    for (int index = 0; index < keysValues.length; index += 2) {\n+      if (keysValues[index] == keysValues && keysValues[index + 1] == value) {\n+        keysValues[index] = null;\n+        keysValues[index + 1] = null;\n+      }\n+    }\n+  }\n+\n+  synchronized boolean removeKey(@NonNull final K key) {\n+    boolean removed = false;\n+    for (int index = 0; index < keysValues.length; index += 2) {\n+      if (keysValues[index] == key) {\n+        keysValues[index] = null;\n+        keysValues[index + 1] = null;\n+        removed = true;\n+      }\n+    }\n+    return removed;\n+  }\n+}"},{"sha":"732074ff6490e2cea50641ee5ec08d8dae0f13e3","filename":"agera/src/main/java/com/google/android/agera/WorkerHandler.java","status":"modified","additions":19,"deletions":2,"changes":21,"blob_url":"https://github.com/google/agera/blob/3b1697cf8a135a0d640dcc4e60791281249d8258/agera/src/main/java/com/google/android/agera/WorkerHandler.java","raw_url":"https://github.com/google/agera/raw/3b1697cf8a135a0d640dcc4e60791281249d8258/agera/src/main/java/com/google/android/agera/WorkerHandler.java","contents_url":"https://api.github.com/repos/google/agera/contents/agera/src/main/java/com/google/android/agera/WorkerHandler.java?ref=3b1697cf8a135a0d640dcc4e60791281249d8258","patch":"@@ -17,6 +17,8 @@\n   static final int MSG_CALL_MAYBE_START_FLOW = 4;\n   static final int MSG_CALL_ACKNOWLEDGE_CANCEL = 5;\n   private static final ThreadLocal<WeakReference<WorkerHandler>> handlers = new ThreadLocal<>();\n+  @NonNull\n+  private final IdentityMultiMap<Updatable, Object> updatableObservable;\n \n   @NonNull\n   static WorkerHandler workerHandler() {\n@@ -29,7 +31,20 @@ static WorkerHandler workerHandler() {\n     return handler;\n   }\n \n-  private WorkerHandler() {}\n+  private WorkerHandler() {\n+    this.updatableObservable = new IdentityMultiMap<>();\n+  }\n+\n+  synchronized void removeUpdatable(@NonNull final Updatable updatable,\n+      @NonNull final Object token) {\n+    updatableObservable.removeKeyValuePair(updatable, token);\n+  }\n+\n+  synchronized void update(@NonNull final Updatable updatable, @NonNull final Object token) {\n+    if (updatableObservable.addKeyValuePair(updatable, token)) {\n+      obtainMessage(WorkerHandler.MSG_CALL_UPDATABLE, updatable).sendToTarget();\n+    }\n+  }\n \n   @Override\n   public void handleMessage(final Message message) {\n@@ -44,7 +59,9 @@ public void handleMessage(final Message message) {\n         ((BaseObservable) message.obj).observableDeactivated();\n         break;\n       case MSG_CALL_UPDATABLE:\n-        ((Updatable) message.obj).update();\n+        final Updatable updatable = (Updatable) message.obj;\n+        updatableObservable.removeKey(updatable);\n+        updatable.update();\n         break;\n       case MSG_CALL_MAYBE_START_FLOW:\n         ((CompiledRepository) message.obj).maybeStartFlow();"},{"sha":"0e7a6f27e2f35aa56c0adfe42e704ed83a857c30","filename":"agera/src/test/java/com/google/android/agera/test/matchers/UpdatableUpdated.java","status":"modified","additions":7,"deletions":1,"changes":8,"blob_url":"https://github.com/google/agera/blob/3b1697cf8a135a0d640dcc4e60791281249d8258/agera/src/test/java/com/google/android/agera/test/matchers/UpdatableUpdated.java","raw_url":"https://github.com/google/agera/raw/3b1697cf8a135a0d640dcc4e60791281249d8258/agera/src/test/java/com/google/android/agera/test/matchers/UpdatableUpdated.java","contents_url":"https://api.github.com/repos/google/agera/contents/agera/src/test/java/com/google/android/agera/test/matchers/UpdatableUpdated.java?ref=3b1697cf8a135a0d640dcc4e60791281249d8258","patch":"@@ -39,7 +39,13 @@ protected boolean matchesSafely(@NonNull final MockUpdatable updatable) {\n \n   @Override\n   public void describeTo(final Description description) {\n-    description.appendText(updated ? \"was updated\" : \"not updated\");\n+    description.appendText(updated ? \"was updated\" : \"was not updated\");\n+  }\n+\n+  @Override\n+  protected void describeMismatchSafely(final MockUpdatable item,\n+      final Description mismatchDescription) {\n+    mismatchDescription.appendText(updated ? \"was not updated\" : \"was updated\");\n   }\n \n   @NonNull"}]}