{"sha":"41df9c753de25a17845cce20c2dade1918a0f165","commit":{"author":{"name":"Magnus Ernstsson","email":"magnus@ernstsson.net","date":"2016-12-21T14:40:25Z"},"committer":{"name":"GitHub","email":"noreply@github.com","date":"2016-12-21T14:40:25Z"},"message":"Changed testapp to demonstrate horizontal scrolling (#133)","tree":{"sha":"3402d7e203c88de5ae6455af7b93c063ca3fc795","url":"https://api.github.com/repos/google/agera/git/trees/3402d7e203c88de5ae6455af7b93c063ca3fc795"},"url":"https://api.github.com/repos/google/agera/git/commits/41df9c753de25a17845cce20c2dade1918a0f165","comment_count":0},"url":"https://api.github.com/repos/google/agera/commits/41df9c753de25a17845cce20c2dade1918a0f165","html_url":"https://github.com/google/agera/commit/41df9c753de25a17845cce20c2dade1918a0f165","comments_url":"https://api.github.com/repos/google/agera/commits/41df9c753de25a17845cce20c2dade1918a0f165/comments","author":{"login":"ernstsson","id":378389,"avatar_url":"https://avatars2.githubusercontent.com/u/378389?v=3","gravatar_id":"","url":"https://api.github.com/users/ernstsson","html_url":"https://github.com/ernstsson","followers_url":"https://api.github.com/users/ernstsson/followers","following_url":"https://api.github.com/users/ernstsson/following{/other_user}","gists_url":"https://api.github.com/users/ernstsson/gists{/gist_id}","starred_url":"https://api.github.com/users/ernstsson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ernstsson/subscriptions","organizations_url":"https://api.github.com/users/ernstsson/orgs","repos_url":"https://api.github.com/users/ernstsson/repos","events_url":"https://api.github.com/users/ernstsson/events{/privacy}","received_events_url":"https://api.github.com/users/ernstsson/received_events","type":"User","site_admin":false},"committer":{"login":"web-flow","id":19864447,"avatar_url":"https://avatars0.githubusercontent.com/u/19864447?v=3","gravatar_id":"","url":"https://api.github.com/users/web-flow","html_url":"https://github.com/web-flow","followers_url":"https://api.github.com/users/web-flow/followers","following_url":"https://api.github.com/users/web-flow/following{/other_user}","gists_url":"https://api.github.com/users/web-flow/gists{/gist_id}","starred_url":"https://api.github.com/users/web-flow/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/web-flow/subscriptions","organizations_url":"https://api.github.com/users/web-flow/orgs","repos_url":"https://api.github.com/users/web-flow/repos","events_url":"https://api.github.com/users/web-flow/events{/privacy}","received_events_url":"https://api.github.com/users/web-flow/received_events","type":"User","site_admin":false},"parents":[{"sha":"70c3b6ccacceae1bb633dd0c3429db6b00669d45","url":"https://api.github.com/repos/google/agera/commits/70c3b6ccacceae1bb633dd0c3429db6b00669d45","html_url":"https://github.com/google/agera/commit/70c3b6ccacceae1bb633dd0c3429db6b00669d45"}],"stats":{"total":331,"additions":307,"deletions":24},"files":[{"sha":"53d27e0e897a034990602a3bb1d34a4afb4800be","filename":"testapp/src/main/java/com/google/android/agera/testapp/NoteGroup.java","status":"added","additions":64,"deletions":0,"changes":64,"blob_url":"https://github.com/google/agera/blob/41df9c753de25a17845cce20c2dade1918a0f165/testapp/src/main/java/com/google/android/agera/testapp/NoteGroup.java","raw_url":"https://github.com/google/agera/raw/41df9c753de25a17845cce20c2dade1918a0f165/testapp/src/main/java/com/google/android/agera/testapp/NoteGroup.java","contents_url":"https://api.github.com/repos/google/agera/contents/testapp/src/main/java/com/google/android/agera/testapp/NoteGroup.java?ref=41df9c753de25a17845cce20c2dade1918a0f165","patch":"@@ -0,0 +1,64 @@\n+/*\n+ * Copyright 2016 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera.testapp;\n+\n+import android.support.annotation.NonNull;\n+\n+import java.util.List;\n+\n+public final class NoteGroup {\n+  private final long id;\n+  @NonNull\n+  private final List<Note> notes;\n+\n+  private NoteGroup(final long id, @NonNull final List<Note> notes) {\n+    this.id = id;\n+    this.notes = notes;\n+  }\n+\n+  @NonNull\n+  public static NoteGroup noteGroup(final long id, @NonNull final List<Note> notes) {\n+    return new NoteGroup(id, notes);\n+  }\n+\n+  public long getId() {\n+    return id;\n+  }\n+\n+  @NonNull\n+  public List<Note> getNotes() {\n+    return notes;\n+  }\n+\n+  @Override\n+  public boolean equals(final Object o) {\n+    if (this == o) { return true; }\n+    if (o == null || getClass() != o.getClass()) { return false; }\n+\n+    final NoteGroup noteGroup = (NoteGroup) o;\n+\n+    if (id != noteGroup.id) { return false; }\n+    return notes.equals(noteGroup.notes);\n+\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    int result = (int) (id ^ (id >>> 32));\n+    result = 31 * result + notes.hashCode();\n+    return result;\n+  }\n+}"},{"sha":"2929405bdf752ec67eacf45004fbcefc6708d43f","filename":"testapp/src/main/java/com/google/android/agera/testapp/NotesFragment.java","status":"modified","additions":31,"deletions":17,"changes":48,"blob_url":"https://github.com/google/agera/blob/41df9c753de25a17845cce20c2dade1918a0f165/testapp/src/main/java/com/google/android/agera/testapp/NotesFragment.java","raw_url":"https://github.com/google/agera/raw/41df9c753de25a17845cce20c2dade1918a0f165/testapp/src/main/java/com/google/android/agera/testapp/NotesFragment.java","contents_url":"https://api.github.com/repos/google/agera/contents/testapp/src/main/java/com/google/android/agera/testapp/NotesFragment.java?ref=41df9c753de25a17845cce20c2dade1918a0f165","patch":"@@ -16,14 +16,17 @@\n package com.google.android.agera.testapp;\n \n import static android.graphics.BitmapFactory.decodeByteArray;\n+import static android.support.v7.widget.LinearLayoutManager.HORIZONTAL;\n import static com.google.android.agera.Repositories.repositoryWithInitialValue;\n import static com.google.android.agera.RepositoryConfig.SEND_INTERRUPT;\n import static com.google.android.agera.Result.absentIfNull;\n import static com.google.android.agera.net.HttpFunctions.httpFunction;\n import static com.google.android.agera.net.HttpRequests.httpGetRequest;\n import static com.google.android.agera.rvadapter.RepositoryAdapter.repositoryAdapter;\n+import static com.google.android.agera.rvadapter.RepositoryPresenters.repositoryPresenterOf;\n import static com.google.android.agera.rvdatabinding.DataBindingRepositoryPresenters.dataBindingRepositoryPresenterOf;\n import static com.google.android.agera.testapp.NotesStore.notesStore;\n+import static com.google.android.agera.testapp.RowHandler.rowBinder;\n import static java.util.concurrent.Executors.newSingleThreadExecutor;\n \n import com.google.android.agera.Receiver;\n@@ -46,6 +49,7 @@\n import android.widget.EditText;\n import android.widget.ImageView;\n \n+import java.util.List;\n import java.util.concurrent.Executor;\n \n public final class NotesFragment extends Fragment {\n@@ -64,24 +68,34 @@ public void onCreate(@Nullable final Bundle savedInstanceState) {\n     setRetainInstance(true);\n     notesStore = notesStore(getContext().getApplicationContext());\n \n+    final RowHandler<NoteGroup, List<Note>> rowHandler = rowBinder(\n+        (r) -> new LinearLayoutManager(getContext(), HORIZONTAL, false),\n+        NoteGroup::getId, NoteGroup::getNotes, (r) ->\n+            dataBindingRepositoryPresenterOf(Note.class)\n+                .layout(R.layout.text_layout)\n+                .itemId(BR.note)\n+                .stableIdForItem(Note::getId)\n+                .handler(BR.click,\n+                    (Receiver<Note>) (note) -> {\n+                      final EditText editText = new EditText(getContext());\n+                      editText.setId(R.id.edit);\n+                      editText.setText(note.getNote());\n+                      new AlertDialog.Builder(getContext())\n+                          .setTitle(R.string.edit_note)\n+                          .setView(editText)\n+                          .setPositiveButton(R.string.edit, (d, i) ->\n+                              notesStore.updateNote(note, editText.getText().toString()))\n+                          .create().show();\n+                    })\n+                .handler(BR.longClick, (Receiver<Note>) notesStore::deleteNote)\n+                .forList());\n+\n     adapter = repositoryAdapter()\n-        .add(notesStore.getNotesRepository(), dataBindingRepositoryPresenterOf(Note.class)\n-            .layout(R.layout.text_layout)\n-            .itemId(BR.note)\n-            .stableIdForItem(Note::getId)\n-            .handler(BR.click,\n-                (Receiver<Note>) note -> {\n-                  final EditText editText = new EditText(getContext());\n-                  editText.setId(R.id.edit);\n-                  editText.setText(note.getNote());\n-                  new AlertDialog.Builder(getContext())\n-                      .setTitle(R.string.edit_note)\n-                      .setView(editText)\n-                      .setPositiveButton(R.string.edit,\n-                          (d, i) -> notesStore.updateNote(note, editText.getText().toString()))\n-                      .create().show();\n-                })\n-            .handler(BR.longClick, (Receiver<Note>) notesStore::deleteNote)\n+        .add(notesStore.getNotesRepository(), repositoryPresenterOf(NoteGroup.class)\n+            .layout(R.layout.note_group_layout)\n+            .stableIdForItem(NoteGroup::getId)\n+            .bindWith(rowHandler)\n+            .recycleWith(rowHandler)\n             .forList())\n         .build();\n     adapter.setHasStableIds(true);"},{"sha":"02dfad8a2b41a3550027200f5bdc036d614cec86","filename":"testapp/src/main/java/com/google/android/agera/testapp/NotesSqlDatabaseSupplier.java","status":"modified","additions":19,"deletions":0,"changes":19,"blob_url":"https://github.com/google/agera/blob/41df9c753de25a17845cce20c2dade1918a0f165/testapp/src/main/java/com/google/android/agera/testapp/NotesSqlDatabaseSupplier.java","raw_url":"https://github.com/google/agera/raw/41df9c753de25a17845cce20c2dade1918a0f165/testapp/src/main/java/com/google/android/agera/testapp/NotesSqlDatabaseSupplier.java","contents_url":"https://api.github.com/repos/google/agera/contents/testapp/src/main/java/com/google/android/agera/testapp/NotesSqlDatabaseSupplier.java?ref=41df9c753de25a17845cce20c2dade1918a0f165","patch":"@@ -17,6 +17,7 @@\n \n import com.google.android.agera.database.SqlDatabaseSupplier;\n \n+import android.content.ContentValues;\n import android.content.Context;\n import android.database.sqlite.SQLiteDatabase;\n import android.support.annotation.NonNull;\n@@ -30,6 +31,19 @@\n       + NOTES_NOTE_COLUMN + \" VARCHAR(255));\";\n   private static final String DATABASE_NAME = \"NotesDatabase\";\n   private static final int VERSION = 1;\n+  @NonNull\n+  private static final String[] VALUES = {\n+      \"a1\", \"b1\", \"c1\", \"d1\", \"e1\", \"f1\", \"g1\", \"h1\", \"i1\", \"j1\", \"k1\", \"l1\", \"m1\", \"n1\",\n+      \"o1\", \"p1\", \"q1\", \"r1\", \"s1\", \"t1\", \"u1\", \"v1\", \"w1\", \"x1\", \"y1\", \"z1\",\n+      \"a2\", \"b2\", \"c2\", \"d2\", \"e2\", \"f2\", \"g2\", \"h2\", \"i2\", \"j2\", \"k2\", \"l2\", \"m2\", \"n2\",\n+      \"o2\", \"p2\", \"q2\", \"r2\", \"s2\", \"t2\", \"u2\", \"v2\", \"w2\", \"x2\", \"y2\", \"z2\",\n+      \"a3\", \"b3\", \"c3\", \"d3\", \"e3\", \"f3\", \"g3\", \"h3\", \"i3\", \"j3\", \"k3\", \"l3\", \"m3\", \"n3\",\n+      \"o3\", \"p3\", \"q3\", \"r3\", \"s3\", \"t3\", \"u3\", \"v3\", \"w3\", \"x3\", \"y3\", \"z3\",\n+      \"a4\", \"b4\", \"c4\", \"d4\", \"e4\", \"f4\", \"g4\", \"h4\", \"i4\", \"j4\", \"k4\", \"l4\", \"m4\", \"n4\",\n+      \"o4\", \"p4\", \"q4\", \"r4\", \"s4\", \"t4\", \"u4\", \"v4\", \"w4\", \"x4\", \"y4\", \"z4\",\n+      \"a5\", \"b5\", \"c5\", \"d5\", \"e5\", \"f5\", \"g5\", \"h5\", \"i5\", \"j5\", \"k5\", \"l5\", \"m5\", \"n5\",\n+      \"o5\", \"p5\", \"q5\", \"r5\", \"s5\", \"t5\", \"u5\", \"v5\", \"w5\", \"x5\", \"y5\", \"z5\"\n+  };\n \n   private NotesSqlDatabaseSupplier(@NonNull final Context context) {\n     super(context, DATABASE_NAME, null, VERSION);\n@@ -43,6 +57,11 @@ public static NotesSqlDatabaseSupplier databaseSupplier(@NonNull final Context c\n   @Override\n   public void onCreate(@NonNull final SQLiteDatabase sqLiteDatabase) {\n     sqLiteDatabase.execSQL(CREATE_TABLE);\n+    for (final String value : VALUES) {\n+      final ContentValues contentValues = new ContentValues();\n+      contentValues.put(NOTES_NOTE_COLUMN, value);\n+      sqLiteDatabase.insert(NOTES_TABLE, null, contentValues);\n+    }\n   }\n \n   @Override"},{"sha":"b9e7d8aa3c549672596ebffe91279a6e70b16e96","filename":"testapp/src/main/java/com/google/android/agera/testapp/NotesStore.java","status":"modified","additions":28,"deletions":5,"changes":33,"blob_url":"https://github.com/google/agera/blob/41df9c753de25a17845cce20c2dade1918a0f165/testapp/src/main/java/com/google/android/agera/testapp/NotesStore.java","raw_url":"https://github.com/google/agera/raw/41df9c753de25a17845cce20c2dade1918a0f165/testapp/src/main/java/com/google/android/agera/testapp/NotesStore.java","contents_url":"https://api.github.com/repos/google/agera/contents/testapp/src/main/java/com/google/android/agera/testapp/NotesStore.java?ref=41df9c753de25a17845cce20c2dade1918a0f165","patch":"@@ -15,6 +15,7 @@\n  */\n package com.google.android.agera.testapp;\n \n+import static android.text.TextUtils.isEmpty;\n import static com.google.android.agera.Functions.staticFunction;\n import static com.google.android.agera.Observables.updateDispatcher;\n import static com.google.android.agera.Repositories.repositoryWithInitialValue;\n@@ -28,6 +29,7 @@\n import static com.google.android.agera.database.SqlRequests.sqlRequest;\n import static com.google.android.agera.database.SqlRequests.sqlUpdateRequest;\n import static com.google.android.agera.testapp.Note.note;\n+import static com.google.android.agera.testapp.NoteGroup.noteGroup;\n import static com.google.android.agera.testapp.NotesSqlDatabaseSupplier.NOTES_NOTE_COLUMN;\n import static com.google.android.agera.testapp.NotesSqlDatabaseSupplier.NOTES_NOTE_ID_COLUMN;\n import static com.google.android.agera.testapp.NotesSqlDatabaseSupplier.NOTES_TABLE;\n@@ -48,7 +50,10 @@\n import android.content.Context;\n import android.support.annotation.NonNull;\n \n+import java.util.ArrayList;\n import java.util.List;\n+import java.util.Map;\n+import java.util.TreeMap;\n import java.util.concurrent.Executor;\n \n /**\n@@ -63,20 +68,20 @@\n           + \" ORDER BY \" + NOTES_NOTE_COLUMN;\n   private static final int ID_COLUMN_INDEX = 0;\n   private static final int NOTE_COLUMN_INDEX = 1;\n-  private static final List<Note> INITIAL_VALUE = emptyList();\n+  private static final List<NoteGroup> INITIAL_VALUE = emptyList();\n   @NonNull\n   private static final Executor STORE_EXECUTOR = newSingleThreadExecutor();\n \n   @NonNull\n-  private final Repository<List<Note>> notesRepository;\n+  private final Repository<List<NoteGroup>> notesRepository;\n   @NonNull\n   private final Receiver<SqlInsertRequest> insert;\n   @NonNull\n   private final Receiver<SqlUpdateRequest> update;\n   @NonNull\n   private final Receiver<SqlDeleteRequest> delete;\n \n-  private NotesStore(@NonNull final Repository<List<Note>> notesRepository,\n+  private NotesStore(@NonNull final Repository<List<NoteGroup>> notesRepository,\n       @NonNull final Receiver<SqlInsertRequest> insert,\n       @NonNull final Receiver<SqlUpdateRequest> update,\n       @NonNull final Receiver<SqlDeleteRequest> delete) {\n@@ -123,16 +128,34 @@ synchronized static NotesStore notesStore(@NonNull final Context applicationCont\n         .onUpdatesPerLoop()\n         .goTo(STORE_EXECUTOR)\n         .getFrom(() -> sqlRequest().sql(GET_NOTES_FROM_TABLE).compile())\n-        .thenAttemptTransform(databaseQueryFunction(databaseSupplier,\n+        .attemptTransform(databaseQueryFunction(databaseSupplier,\n             cursor -> note(cursor.getInt(ID_COLUMN_INDEX), cursor.getString(NOTE_COLUMN_INDEX))))\n         .orEnd(staticFunction(INITIAL_VALUE))\n+        .thenTransform(notes -> {\n+          final Map<Character, List<Note>> notesGroupsData = new TreeMap<>();\n+          for (final Note note : notes) {\n+            final String noteText = note.getNote();\n+            final char groupId = isEmpty(noteText) ? 0 : noteText.charAt(0);\n+            List<Note> notesGroupData = notesGroupsData.get(groupId);\n+            if (notesGroupData == null) {\n+              notesGroupData = new ArrayList<>();\n+              notesGroupsData.put(groupId, notesGroupData);\n+            }\n+            notesGroupData.add(note);\n+          }\n+          final List<NoteGroup> notesGroups = new ArrayList<>();\n+          for (final Map.Entry<Character, List<Note>> groupData : notesGroupsData.entrySet()) {\n+            notesGroups.add(noteGroup(groupData.getKey(), groupData.getValue()));\n+          }\n+          return notesGroups;\n+        })\n         .onConcurrentUpdate(SEND_INTERRUPT)\n         .onDeactivation(SEND_INTERRUPT)\n         .compile(), insert, update, delete);\n   }\n \n   @NonNull\n-  Repository<List<Note>> getNotesRepository() {\n+  Repository<List<NoteGroup>> getNotesRepository() {\n     return notesRepository;\n   }\n "},{"sha":"fc1587872eb17adebf058dfcbfdbfe68c5ab1805","filename":"testapp/src/main/java/com/google/android/agera/testapp/RowHandler.java","status":"added","additions":142,"deletions":0,"changes":142,"blob_url":"https://github.com/google/agera/blob/41df9c753de25a17845cce20c2dade1918a0f165/testapp/src/main/java/com/google/android/agera/testapp/RowHandler.java","raw_url":"https://github.com/google/agera/raw/41df9c753de25a17845cce20c2dade1918a0f165/testapp/src/main/java/com/google/android/agera/testapp/RowHandler.java","contents_url":"https://api.github.com/repos/google/agera/contents/testapp/src/main/java/com/google/android/agera/testapp/RowHandler.java?ref=41df9c753de25a17845cce20c2dade1918a0f165","patch":"@@ -0,0 +1,142 @@\n+/*\n+ * Copyright 2016 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera.testapp;\n+\n+import static com.google.android.agera.Preconditions.checkNotNull;\n+import static com.google.android.agera.Repositories.mutableRepository;\n+import static com.google.android.agera.rvadapter.RepositoryAdapter.repositoryAdapter;\n+\n+import com.google.android.agera.Binder;\n+import com.google.android.agera.Function;\n+import com.google.android.agera.MutableRepository;\n+import com.google.android.agera.Receiver;\n+import com.google.android.agera.rvadapter.RepositoryAdapter;\n+import com.google.android.agera.rvadapter.RepositoryPresenter;\n+\n+import android.os.Parcelable;\n+import android.support.annotation.NonNull;\n+import android.support.v7.widget.RecyclerView;\n+import android.support.v7.widget.RecyclerView.Adapter;\n+import android.support.v7.widget.RecyclerView.LayoutManager;\n+import android.support.v7.widget.RecyclerView.OnScrollListener;\n+import android.support.v7.widget.RecyclerView.RecycledViewPool;\n+import android.view.View;\n+\n+import java.util.HashSet;\n+import java.util.IdentityHashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n+final class RowHandler<TRow, TRowItems> extends OnScrollListener\n+    implements Binder<TRow, View>, Receiver<View> {\n+  @NonNull\n+  private final Set<RepositoryAdapter> startedAdapters;\n+  @NonNull\n+  private final Map<Long, Parcelable> itemRowStates;\n+  @NonNull\n+  private final Map<Adapter, MutableRepository<TRowItems>> adapterRepositories;\n+  @NonNull\n+  private final Map<Adapter, Long> previousStableIds;\n+  @NonNull\n+  private final Function<TRow, TRowItems> data;\n+  @NonNull\n+  private final Function<TRow, Long> stableId;\n+  @NonNull\n+  private final Function<TRow, RepositoryPresenter<TRowItems>> presenter;\n+  @NonNull\n+  private final Function<TRow, LayoutManager> layoutManager;\n+  @NonNull\n+  private final RecycledViewPool pool;\n+\n+  private RowHandler(@NonNull final Function<TRow, TRowItems> data,\n+      @NonNull final Function<TRow, Long> stableId,\n+      @NonNull final Function<TRow, RepositoryPresenter<TRowItems>> presenter,\n+      @NonNull final Function<TRow, LayoutManager> layoutManager) {\n+    this.data = checkNotNull(data);\n+    this.stableId = checkNotNull(stableId);\n+    this.presenter = checkNotNull(presenter);\n+    this.layoutManager = layoutManager;\n+    this.itemRowStates = new IdentityHashMap<>();\n+    this.previousStableIds = new IdentityHashMap<>();\n+    this.adapterRepositories = new IdentityHashMap<>();\n+    this.startedAdapters = new HashSet<>();\n+    this.pool = new RecycledViewPool();\n+  }\n+\n+  @NonNull\n+  static <TRow, TRowItems> RowHandler<TRow, TRowItems> rowBinder(\n+      @NonNull final Function<TRow, LayoutManager> layoutManager,\n+      @NonNull final Function<TRow, Long> stableIdFunction,\n+      @NonNull final Function<TRow, TRowItems> dataFunction,\n+      @NonNull final Function<TRow, RepositoryPresenter<TRowItems>> presenterFromView) {\n+    return new RowHandler<>(dataFunction, stableIdFunction, presenterFromView, layoutManager);\n+  }\n+\n+  @Override\n+  public void bind(@NonNull final TRow row, @NonNull final View view) {\n+    final RecyclerView recyclerView = (RecyclerView) view;\n+    final long id = stableId.apply(row);\n+    final TRowItems rowItems = data.apply(row);\n+    if (!(recyclerView.getAdapter() instanceof RepositoryAdapter)) {\n+      final MutableRepository<TRowItems> newRepository = mutableRepository(rowItems);\n+      final RepositoryPresenter<TRowItems> newPresenter = presenter.apply(row);\n+      final RepositoryAdapter newAdapter = repositoryAdapter()\n+          .add(newRepository, newPresenter)\n+          .build();\n+      recyclerView.setRecycledViewPool(pool);\n+      recyclerView.setLayoutManager(layoutManager.apply(row));\n+      adapterRepositories.put(newAdapter, newRepository);\n+      startedAdapters.add(newAdapter);\n+      newAdapter.setHasStableIds(true);\n+      recyclerView.setAdapter(newAdapter);\n+      recyclerView.addOnScrollListener(this);\n+      previousStableIds.put(newAdapter, id);\n+      newAdapter.startObserving();\n+    } else {\n+      final RepositoryAdapter adapter = (RepositoryAdapter) recyclerView.getAdapter();\n+      adapterRepositories.get(adapter).accept(rowItems);\n+      previousStableIds.put(adapter, id);\n+      if (!startedAdapters.contains(adapter)) {\n+        adapter.startObserving();\n+        startedAdapters.add(adapter);\n+      }\n+    }\n+    final LayoutManager layoutManager = recyclerView.getLayoutManager();\n+    final Parcelable state = itemRowStates.get(id);\n+    layoutManager.onRestoreInstanceState(state);\n+    if (state == null) {\n+      layoutManager.scrollToPosition(0);\n+    }\n+  }\n+\n+  @Override\n+  public void onScrollStateChanged(final RecyclerView recyclerView, final int newState) {\n+    if (recyclerView != null\n+        && recyclerView.getLayoutManager() != null) {\n+      itemRowStates.put(previousStableIds.get(recyclerView.getAdapter()),\n+          recyclerView.getLayoutManager().onSaveInstanceState());\n+    }\n+  }\n+\n+  @Override\n+  public void accept(@NonNull final View view) {\n+    final RecyclerView recyclerView = (RecyclerView) view;\n+    final RepositoryAdapter adapter = (RepositoryAdapter) recyclerView.getAdapter();\n+    if (startedAdapters.remove(adapter)) {\n+      adapter.stopObserving();\n+    }\n+  }\n+}"},{"sha":"4fb8a26aa0cc50f2fb604ce993014d3066f0d21a","filename":"testapp/src/main/res/layout/note_group_layout.xml","status":"added","additions":21,"deletions":0,"changes":21,"blob_url":"https://github.com/google/agera/blob/41df9c753de25a17845cce20c2dade1918a0f165/testapp/src/main/res/layout/note_group_layout.xml","raw_url":"https://github.com/google/agera/raw/41df9c753de25a17845cce20c2dade1918a0f165/testapp/src/main/res/layout/note_group_layout.xml","contents_url":"https://api.github.com/repos/google/agera/contents/testapp/src/main/res/layout/note_group_layout.xml?ref=41df9c753de25a17845cce20c2dade1918a0f165","patch":"@@ -0,0 +1,21 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<!--\n+  ~ Copyright 2016 Google Inc. All Rights Reserved.\n+  ~\n+  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n+  ~ you may not use this file except in compliance with the License.\n+  ~ You may obtain a copy of the License at\n+  ~\n+  ~     http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+<android.support.v7.widget.RecyclerView\n+    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n+    android:layout_width=\"match_parent\"\n+    android:layout_margin=\"2dp\"\n+    android:layout_height=\"wrap_content\"/>\n\\ No newline at end of file"},{"sha":"8a6f54a4dd273a5ecbdf275e93202ae75fc8a607","filename":"testapp/src/main/res/layout/text_layout.xml","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/google/agera/blob/41df9c753de25a17845cce20c2dade1918a0f165/testapp/src/main/res/layout/text_layout.xml","raw_url":"https://github.com/google/agera/raw/41df9c753de25a17845cce20c2dade1918a0f165/testapp/src/main/res/layout/text_layout.xml","contents_url":"https://api.github.com/repos/google/agera/contents/testapp/src/main/res/layout/text_layout.xml?ref=41df9c753de25a17845cce20c2dade1918a0f165","patch":"@@ -22,8 +22,8 @@\n     <variable name=\"longClick\" type=\"com.google.android.agera.Receiver\"/>\n   </data>\n   <TextView\n-      android:layout_width=\"match_parent\"\n-      android:layout_height=\"wrap_content\"\n+      android:layout_width=\"150dp\"\n+      android:layout_height=\"match_parent\"\n       android:layout_marginLeft=\"10dp\"\n       android:layout_marginRight=\"10dp\"\n       android:layout_marginTop=\"10dp\""}]}