{"sha":"45f0d26d72eeebd4ff73cd5b6052cdc4aef11e93","commit":{"author":{"name":"Magnus Ernstsson","email":"magnus@ernstsson.net","date":"2016-12-19T11:06:19Z"},"committer":{"name":"GitHub","email":"noreply@github.com","date":"2016-12-19T11:06:19Z"},"message":"Moved applicable testapp fragment logic to onCreate (#128)\n\nAlso allowed to make the store non-global","tree":{"sha":"933da63314381b44fa0d15ab6fb921564c0ff5d2","url":"https://api.github.com/repos/google/agera/git/trees/933da63314381b44fa0d15ab6fb921564c0ff5d2"},"url":"https://api.github.com/repos/google/agera/git/commits/45f0d26d72eeebd4ff73cd5b6052cdc4aef11e93","comment_count":0},"url":"https://api.github.com/repos/google/agera/commits/45f0d26d72eeebd4ff73cd5b6052cdc4aef11e93","html_url":"https://github.com/google/agera/commit/45f0d26d72eeebd4ff73cd5b6052cdc4aef11e93","comments_url":"https://api.github.com/repos/google/agera/commits/45f0d26d72eeebd4ff73cd5b6052cdc4aef11e93/comments","author":{"login":"ernstsson","id":378389,"avatar_url":"https://avatars2.githubusercontent.com/u/378389?v=3","gravatar_id":"","url":"https://api.github.com/users/ernstsson","html_url":"https://github.com/ernstsson","followers_url":"https://api.github.com/users/ernstsson/followers","following_url":"https://api.github.com/users/ernstsson/following{/other_user}","gists_url":"https://api.github.com/users/ernstsson/gists{/gist_id}","starred_url":"https://api.github.com/users/ernstsson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ernstsson/subscriptions","organizations_url":"https://api.github.com/users/ernstsson/orgs","repos_url":"https://api.github.com/users/ernstsson/repos","events_url":"https://api.github.com/users/ernstsson/events{/privacy}","received_events_url":"https://api.github.com/users/ernstsson/received_events","type":"User","site_admin":false},"committer":{"login":"web-flow","id":19864447,"avatar_url":"https://avatars0.githubusercontent.com/u/19864447?v=3","gravatar_id":"","url":"https://api.github.com/users/web-flow","html_url":"https://github.com/web-flow","followers_url":"https://api.github.com/users/web-flow/followers","following_url":"https://api.github.com/users/web-flow/following{/other_user}","gists_url":"https://api.github.com/users/web-flow/gists{/gist_id}","starred_url":"https://api.github.com/users/web-flow/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/web-flow/subscriptions","organizations_url":"https://api.github.com/users/web-flow/orgs","repos_url":"https://api.github.com/users/web-flow/repos","events_url":"https://api.github.com/users/web-flow/events{/privacy}","received_events_url":"https://api.github.com/users/web-flow/received_events","type":"User","site_admin":false},"parents":[{"sha":"bc4565eb7c96da101143d66da57e5bbea8dad4c2","url":"https://api.github.com/repos/google/agera/commits/bc4565eb7c96da101143d66da57e5bbea8dad4c2","html_url":"https://github.com/google/agera/commit/bc4565eb7c96da101143d66da57e5bbea8dad4c2"}],"stats":{"total":89,"additions":39,"deletions":50},"files":[{"sha":"8376fdb04547d3292b8d698794f90165678c13ea","filename":"testapp/src/main/java/com/google/android/agera/testapp/NotesFragment.java","status":"modified","additions":31,"deletions":33,"changes":64,"blob_url":"https://github.com/google/agera/blob/45f0d26d72eeebd4ff73cd5b6052cdc4aef11e93/testapp/src/main/java/com/google/android/agera/testapp/NotesFragment.java","raw_url":"https://github.com/google/agera/raw/45f0d26d72eeebd4ff73cd5b6052cdc4aef11e93/testapp/src/main/java/com/google/android/agera/testapp/NotesFragment.java","contents_url":"https://api.github.com/repos/google/agera/contents/testapp/src/main/java/com/google/android/agera/testapp/NotesFragment.java?ref=45f0d26d72eeebd4ff73cd5b6052cdc4aef11e93","patch":"@@ -55,38 +55,13 @@\n   private Repository<Result<Bitmap>> backgroundRepository;\n   private Updatable updatable;\n   private RepositoryAdapter adapter;\n+  private NotesStore notesStore;\n \n   @Override\n   public void onCreate(@Nullable final Bundle savedInstanceState) {\n     super.onCreate(savedInstanceState);\n     setRetainInstance(true);\n-  }\n-\n-  @Nullable\n-  @Override\n-  public View onCreateView(final LayoutInflater inflater, @Nullable final ViewGroup container,\n-      @Nullable final Bundle savedInstanceState) {\n-    final View view = inflater.inflate(R.layout.notes_fragment, container, false);\n-\n-    // Create the notes store, containing all async IO\n-    final NotesStore notesStore = notesStore(getContext().getApplicationContext());\n-\n-    // Find the clear button and wire the click listener to call the clear notes updatable\n-    view.findViewById(R.id.clear).setOnClickListener(v -> notesStore.clearNotes());\n-\n-    // Find the add button and wire the click listener to show a dialog that in turn calls the add\n-    // note from text from the notes store when adding notes\n-    view.findViewById(R.id.add).setOnClickListener(v -> {\n-      final EditText editText = new EditText(v.getContext());\n-      editText.setId(R.id.edit);\n-      new AlertDialog.Builder(v.getContext())\n-          .setTitle(R.string.add_note)\n-          .setView(editText)\n-          .setPositiveButton(R.string.add, (d, i) -> {\n-            notesStore.insertNoteFromText(editText.getText().toString());\n-          })\n-          .create().show();\n-    });\n+    notesStore = notesStore(getContext().getApplicationContext());\n \n     adapter = repositoryAdapter()\n         .add(notesStore.getNotesRepository(), dataBindingRepositoryPresenterOf(Note.class)\n@@ -110,11 +85,6 @@ public View onCreateView(final LayoutInflater inflater, @Nullable final ViewGrou\n         .build();\n     adapter.setHasStableIds(true);\n \n-    // Setup the recycler view using the repository adapter\n-    final RecyclerView recyclerView = (RecyclerView) view.findViewById(R.id.result);\n-    recyclerView.setAdapter(adapter);\n-    recyclerView.setLayoutManager(new LinearLayoutManager(getContext()));\n-\n     final DisplayMetrics displayMetrics = getResources().getDisplayMetrics();\n \n     backgroundRepository = repositoryWithInitialValue(Result.<Bitmap>absent())\n@@ -132,9 +102,36 @@ public View onCreateView(final LayoutInflater inflater, @Nullable final ViewGrou\n         })\n         .onDeactivation(SEND_INTERRUPT)\n         .compile();\n+  }\n \n-    final ImageView imageView = (ImageView) view.findViewById(R.id.background);\n+  @Nullable\n+  @Override\n+  public View onCreateView(final LayoutInflater inflater, @Nullable final ViewGroup container,\n+      @Nullable final Bundle savedInstanceState) {\n+    final View view = inflater.inflate(R.layout.notes_fragment, container, false);\n \n+    // Find the clear button and wire the click listener to call the clear notes updatable\n+    view.findViewById(R.id.clear).setOnClickListener(v -> notesStore.clearNotes());\n+\n+    // Find the add button and wire the click listener to show a dialog that in turn calls the add\n+    // note from text from the notes store when adding notes\n+    view.findViewById(R.id.add).setOnClickListener(v -> {\n+      final EditText editText = new EditText(v.getContext());\n+      editText.setId(R.id.edit);\n+      new AlertDialog.Builder(v.getContext())\n+          .setTitle(R.string.add_note)\n+          .setView(editText)\n+          .setPositiveButton(R.string.add, (d, i) -> {\n+            notesStore.insertNoteFromText(editText.getText().toString());\n+          })\n+          .create().show();\n+    });\n+\n+    // Setup the recycler view using the repository adapter\n+    final RecyclerView recyclerView = (RecyclerView) view.findViewById(R.id.result);\n+    recyclerView.setAdapter(adapter);\n+    recyclerView.setLayoutManager(new LinearLayoutManager(getContext()));\n+    final ImageView imageView = (ImageView) view.findViewById(R.id.background);\n     updatable = () -> backgroundRepository.get().ifSucceededSendTo(imageView::setImageBitmap);\n     return view;\n   }\n@@ -144,6 +141,7 @@ public void onStart() {\n     super.onStart();\n     adapter.startObserving();\n     backgroundRepository.addUpdatable(updatable);\n+    updatable.update();\n   }\n \n   @Override"},{"sha":"bf018a781b26d627038cded6857e8f4c199ee12a","filename":"testapp/src/main/java/com/google/android/agera/testapp/NotesStore.java","status":"modified","additions":8,"deletions":17,"changes":25,"blob_url":"https://github.com/google/agera/blob/45f0d26d72eeebd4ff73cd5b6052cdc4aef11e93/testapp/src/main/java/com/google/android/agera/testapp/NotesStore.java","raw_url":"https://github.com/google/agera/raw/45f0d26d72eeebd4ff73cd5b6052cdc4aef11e93/testapp/src/main/java/com/google/android/agera/testapp/NotesStore.java","contents_url":"https://api.github.com/repos/google/agera/contents/testapp/src/main/java/com/google/android/agera/testapp/NotesStore.java?ref=45f0d26d72eeebd4ff73cd5b6052cdc4aef11e93","patch":"@@ -39,7 +39,6 @@\n import com.google.android.agera.Function;\n import com.google.android.agera.Receiver;\n import com.google.android.agera.Repository;\n-import com.google.android.agera.Reservoir;\n import com.google.android.agera.Result;\n import com.google.android.agera.UpdateDispatcher;\n import com.google.android.agera.database.SqlDeleteRequest;\n@@ -55,8 +54,7 @@\n /**\n  * Encapsulates all database interactions for {@link Note}s. Getting a list of all notes is\n  * implemented with a {@link #getNotesRepository()} Repository} that can be activated by and\n- * observed from the Activity. Write operations are implemented using a {@link Reservoir} and a\n- * reacting repository.\n+ * observed from the Activity.\n  */\n final class NotesStore {\n   private static final String MODIFY_NOTE_WHERE = NOTES_NOTE_ID_COLUMN + \"=?\";\n@@ -66,8 +64,8 @@\n   private static final int ID_COLUMN_INDEX = 0;\n   private static final int NOTE_COLUMN_INDEX = 1;\n   private static final List<Note> INITIAL_VALUE = emptyList();\n-\n-  private static NotesStore notesStore;\n+  @NonNull\n+  private static final Executor STORE_EXECUTOR = newSingleThreadExecutor();\n \n   @NonNull\n   private final Repository<List<Note>> notesRepository;\n@@ -90,12 +88,6 @@ private NotesStore(@NonNull final Repository<List<Note>> notesRepository,\n \n   @NonNull\n   synchronized static NotesStore notesStore(@NonNull final Context applicationContext) {\n-    if (notesStore != null) {\n-      return notesStore;\n-    }\n-    // Create a thread executor to execute all database operations on.\n-    final Executor executor = newSingleThreadExecutor();\n-\n     // Create a database supplier that initializes the database. This is also used to supply the\n     // database in all database operations.\n     final NotesSqlDatabaseSupplier databaseSupplier = databaseSupplier(applicationContext);\n@@ -110,34 +102,33 @@ synchronized static NotesStore notesStore(@NonNull final Context applicationCont\n \n     final UpdateDispatcher updateDispatcher = updateDispatcher();\n \n-    final Receiver<SqlDeleteRequest> delete = value -> executor.execute(() -> {\n+    final Receiver<SqlDeleteRequest> delete = value -> STORE_EXECUTOR.execute(() -> {\n       deleteNoteFunction.apply(value);\n       updateDispatcher.update();\n     });\n \n-    final Receiver<SqlUpdateRequest> update = value -> executor.execute(() -> {\n+    final Receiver<SqlUpdateRequest> update = value -> STORE_EXECUTOR.execute(() -> {\n       updateNoteFunction.apply(value);\n       updateDispatcher.update();\n     });\n \n-    final Receiver<SqlInsertRequest> insert = value -> executor.execute(() -> {\n+    final Receiver<SqlInsertRequest> insert = value -> STORE_EXECUTOR.execute(() -> {\n       insertNoteFunction.apply(value);\n       updateDispatcher.update();\n     });\n \n     // Create the wired up notes store\n-    notesStore = new NotesStore(repositoryWithInitialValue(INITIAL_VALUE)\n+    return new NotesStore(repositoryWithInitialValue(INITIAL_VALUE)\n         .observe(updateDispatcher)\n         .onUpdatesPerLoop()\n-        .goTo(executor)\n+        .goTo(STORE_EXECUTOR)\n         .getFrom(() -> sqlRequest().sql(GET_NOTES_FROM_TABLE).compile())\n         .thenAttemptTransform(databaseQueryFunction(databaseSupplier,\n             cursor -> note(cursor.getInt(ID_COLUMN_INDEX), cursor.getString(NOTE_COLUMN_INDEX))))\n         .orEnd(staticFunction(INITIAL_VALUE))\n         .onConcurrentUpdate(SEND_INTERRUPT)\n         .onDeactivation(SEND_INTERRUPT)\n         .compile(), insert, update, delete);\n-    return notesStore;\n   }\n \n   @NonNull"}]}