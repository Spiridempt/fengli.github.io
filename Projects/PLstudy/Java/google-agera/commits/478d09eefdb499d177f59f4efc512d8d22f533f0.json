{"sha":"478d09eefdb499d177f59f4efc512d8d22f533f0","commit":{"author":{"name":"Magnus Ernstsson","email":"magnus@ernstsson.net","date":"2016-05-14T21:25:58Z"},"committer":{"name":"Magnus Ernstsson","email":"magnus@ernstsson.net","date":"2016-05-14T21:25:58Z"},"message":"Added another network unit test","tree":{"sha":"10ee7b8f08b087574f900e44e127fd02a54d58a5","url":"https://api.github.com/repos/google/agera/git/trees/10ee7b8f08b087574f900e44e127fd02a54d58a5"},"url":"https://api.github.com/repos/google/agera/git/commits/478d09eefdb499d177f59f4efc512d8d22f533f0","comment_count":0},"url":"https://api.github.com/repos/google/agera/commits/478d09eefdb499d177f59f4efc512d8d22f533f0","html_url":"https://github.com/google/agera/commit/478d09eefdb499d177f59f4efc512d8d22f533f0","comments_url":"https://api.github.com/repos/google/agera/commits/478d09eefdb499d177f59f4efc512d8d22f533f0/comments","author":{"login":"ernstsson","id":378389,"avatar_url":"https://avatars2.githubusercontent.com/u/378389?v=3","gravatar_id":"","url":"https://api.github.com/users/ernstsson","html_url":"https://github.com/ernstsson","followers_url":"https://api.github.com/users/ernstsson/followers","following_url":"https://api.github.com/users/ernstsson/following{/other_user}","gists_url":"https://api.github.com/users/ernstsson/gists{/gist_id}","starred_url":"https://api.github.com/users/ernstsson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ernstsson/subscriptions","organizations_url":"https://api.github.com/users/ernstsson/orgs","repos_url":"https://api.github.com/users/ernstsson/repos","events_url":"https://api.github.com/users/ernstsson/events{/privacy}","received_events_url":"https://api.github.com/users/ernstsson/received_events","type":"User","site_admin":false},"committer":{"login":"ernstsson","id":378389,"avatar_url":"https://avatars2.githubusercontent.com/u/378389?v=3","gravatar_id":"","url":"https://api.github.com/users/ernstsson","html_url":"https://github.com/ernstsson","followers_url":"https://api.github.com/users/ernstsson/followers","following_url":"https://api.github.com/users/ernstsson/following{/other_user}","gists_url":"https://api.github.com/users/ernstsson/gists{/gist_id}","starred_url":"https://api.github.com/users/ernstsson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ernstsson/subscriptions","organizations_url":"https://api.github.com/users/ernstsson/orgs","repos_url":"https://api.github.com/users/ernstsson/repos","events_url":"https://api.github.com/users/ernstsson/events{/privacy}","received_events_url":"https://api.github.com/users/ernstsson/received_events","type":"User","site_admin":false},"parents":[{"sha":"34c6c31de0887d471a8077896a9608a7555bace6","url":"https://api.github.com/repos/google/agera/commits/34c6c31de0887d471a8077896a9608a7555bace6","html_url":"https://github.com/google/agera/commit/34c6c31de0887d471a8077896a9608a7555bace6"}],"stats":{"total":17,"additions":17,"deletions":0},"files":[{"sha":"33ed111c890a564a879438fe9af5341d22e31102","filename":"extensions/net/src/test/java/com/google/android/agera/net/HttpFunctionsTest.java","status":"modified","additions":17,"deletions":0,"changes":17,"blob_url":"https://github.com/google/agera/blob/478d09eefdb499d177f59f4efc512d8d22f533f0/extensions/net/src/test/java/com/google/android/agera/net/HttpFunctionsTest.java","raw_url":"https://github.com/google/agera/raw/478d09eefdb499d177f59f4efc512d8d22f533f0/extensions/net/src/test/java/com/google/android/agera/net/HttpFunctionsTest.java","contents_url":"https://api.github.com/repos/google/agera/contents/extensions/net/src/test/java/com/google/android/agera/net/HttpFunctionsTest.java?ref=478d09eefdb499d177f59f4efc512d8d22f533f0","patch":"@@ -171,6 +171,23 @@ public void shouldPassOnResponseHeadersAsLowerCase() throws Throwable {\n   }\n \n   @Test\n+  public void shouldNotPassOnNullResponseHeader() throws Throwable {\n+    final ByteArrayInputStream inputStream = new ByteArrayInputStream(RESPONSE_BODY);\n+    when(mockHttpURLConnection.getInputStream()).thenReturn(inputStream);\n+    when(mockHttpURLConnection.getContentLength()).thenReturn(RESPONSE_BODY.length);\n+    final Map<String, List<String>> headerFields = new HashMap<>();\n+    headerFields.put(null, singletonList(\"value\"));\n+    headerFields.put(\"naMe2\", singletonList(\"value2\"));\n+    when(mockHttpURLConnection.getHeaderFields()).thenReturn(headerFields);\n+\n+    final HttpResponse httpResponse = httpFunction().apply(HTTP_GET_REQUEST).get();\n+\n+    assertThat(httpResponse.header.size(), is(1));\n+    assertThat(httpResponse.header, hasEntry(\"name2\", \"value2\"));\n+    verify(mockHttpURLConnection).disconnect();\n+  }\n+\n+  @Test\n   public void shouldGetOutputStreamForPutWithBody() throws Throwable {\n     final ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n     final ByteArrayInputStream inputStream = new ByteArrayInputStream(RESPONSE_BODY);"}]}