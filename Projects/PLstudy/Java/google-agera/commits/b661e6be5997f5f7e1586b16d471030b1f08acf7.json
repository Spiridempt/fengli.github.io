{"sha":"b661e6be5997f5f7e1586b16d471030b1f08acf7","commit":{"author":{"name":"Magnus Ernstsson","email":"magnus@ernstsson.net","date":"2017-03-07T16:15:39Z"},"committer":{"name":"GitHub","email":"noreply@github.com","date":"2017-03-07T16:15:39Z"},"message":"Added data binding repository presenter recycling config (#146)","tree":{"sha":"4c0724b4942e81fc003f7ba227bd605beb334eaa","url":"https://api.github.com/repos/google/agera/git/trees/4c0724b4942e81fc003f7ba227bd605beb334eaa"},"url":"https://api.github.com/repos/google/agera/git/commits/b661e6be5997f5f7e1586b16d471030b1f08acf7","comment_count":0},"url":"https://api.github.com/repos/google/agera/commits/b661e6be5997f5f7e1586b16d471030b1f08acf7","html_url":"https://github.com/google/agera/commit/b661e6be5997f5f7e1586b16d471030b1f08acf7","comments_url":"https://api.github.com/repos/google/agera/commits/b661e6be5997f5f7e1586b16d471030b1f08acf7/comments","author":{"login":"ernstsson","id":378389,"avatar_url":"https://avatars2.githubusercontent.com/u/378389?v=3","gravatar_id":"","url":"https://api.github.com/users/ernstsson","html_url":"https://github.com/ernstsson","followers_url":"https://api.github.com/users/ernstsson/followers","following_url":"https://api.github.com/users/ernstsson/following{/other_user}","gists_url":"https://api.github.com/users/ernstsson/gists{/gist_id}","starred_url":"https://api.github.com/users/ernstsson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ernstsson/subscriptions","organizations_url":"https://api.github.com/users/ernstsson/orgs","repos_url":"https://api.github.com/users/ernstsson/repos","events_url":"https://api.github.com/users/ernstsson/events{/privacy}","received_events_url":"https://api.github.com/users/ernstsson/received_events","type":"User","site_admin":false},"committer":{"login":"web-flow","id":19864447,"avatar_url":"https://avatars0.githubusercontent.com/u/19864447?v=3","gravatar_id":"","url":"https://api.github.com/users/web-flow","html_url":"https://github.com/web-flow","followers_url":"https://api.github.com/users/web-flow/followers","following_url":"https://api.github.com/users/web-flow/following{/other_user}","gists_url":"https://api.github.com/users/web-flow/gists{/gist_id}","starred_url":"https://api.github.com/users/web-flow/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/web-flow/subscriptions","organizations_url":"https://api.github.com/users/web-flow/orgs","repos_url":"https://api.github.com/users/web-flow/repos","events_url":"https://api.github.com/users/web-flow/events{/privacy}","received_events_url":"https://api.github.com/users/web-flow/received_events","type":"User","site_admin":false},"parents":[{"sha":"d870cef353ce3577438e5c72bc3b91b47a4de75b","url":"https://api.github.com/repos/google/agera/commits/d870cef353ce3577438e5c72bc3b91b47a4de75b","html_url":"https://github.com/google/agera/commit/d870cef353ce3577438e5c72bc3b91b47a4de75b"}],"stats":{"total":526,"additions":494,"deletions":32},"files":[{"sha":"3eb55d75d2c09136e17dad49c5663aacc4edb7e4","filename":"extensions/rvdatabinding/src/main/java/com/google/android/agera/rvdatabinding/DataBindingRepositoryPresenterCompiler.java","status":"modified","additions":69,"deletions":18,"changes":87,"blob_url":"https://github.com/google/agera/blob/b661e6be5997f5f7e1586b16d471030b1f08acf7/extensions/rvdatabinding/src/main/java/com/google/android/agera/rvdatabinding/DataBindingRepositoryPresenterCompiler.java","raw_url":"https://github.com/google/agera/raw/b661e6be5997f5f7e1586b16d471030b1f08acf7/extensions/rvdatabinding/src/main/java/com/google/android/agera/rvdatabinding/DataBindingRepositoryPresenterCompiler.java","contents_url":"https://api.github.com/repos/google/agera/contents/extensions/rvdatabinding/src/main/java/com/google/android/agera/rvdatabinding/DataBindingRepositoryPresenterCompiler.java?ref=b661e6be5997f5f7e1586b16d471030b1f08acf7","patch":"@@ -15,46 +15,50 @@\n  */\n package com.google.android.agera.rvdatabinding;\n \n-import static android.support.v4.util.Pair.create;\n import static com.google.android.agera.Functions.staticFunction;\n import static com.google.android.agera.Preconditions.checkNotNull;\n import static com.google.android.agera.rvadapter.RepositoryPresenters.repositoryPresenterOf;\n-import static com.google.android.agera.rvdatabinding.DataBindingRepositoryPresenterCompilerStates.DBRPHandlerBindingCompile;\n+import static com.google.android.agera.rvdatabinding.RecycleConfig.CLEAR_HANDLERS;\n+import static com.google.android.agera.rvdatabinding.RecycleConfig.CLEAR_ITEM;\n+import static com.google.android.agera.rvdatabinding.RecycleConfig.DO_NOTHING;\n \n import android.databinding.DataBindingUtil;\n import android.databinding.ViewDataBinding;\n import android.support.annotation.LayoutRes;\n import android.support.annotation.NonNull;\n-import android.support.v4.util.Pair;\n import android.support.v7.widget.RecyclerView;\n+import android.util.SparseArray;\n import android.view.View;\n import com.google.android.agera.Binder;\n import com.google.android.agera.Function;\n+import com.google.android.agera.Receiver;\n import com.google.android.agera.Result;\n import com.google.android.agera.rvadapter.RepositoryPresenter;\n import com.google.android.agera.rvadapter.RepositoryPresenterCompilerStates.RPLayout;\n+import com.google.android.agera.rvdatabinding.DataBindingRepositoryPresenterCompilerStates.DBRPHandlerStableIdRecycleCompile;\n import com.google.android.agera.rvdatabinding.DataBindingRepositoryPresenterCompilerStates.DBRPItemBinding;\n-import java.util.ArrayList;\n import java.util.List;\n \n @SuppressWarnings(\"unchecked\")\n final class DataBindingRepositoryPresenterCompiler\n-    implements DBRPItemBinding, DBRPHandlerBindingCompile, RPLayout {\n+    implements DBRPItemBinding, DBRPHandlerStableIdRecycleCompile, RPLayout {\n   @NonNull\n-  private final List<Pair<Integer, Object>> handlers;\n+  private final SparseArray<Object> handlers;\n   private Function<Object, Integer> layoutFactory;\n   private Function itemId;\n   @NonNull\n   private Function<Object, Long> stableIdForItem = staticFunction(RecyclerView.NO_ID);\n+  @RecycleConfig\n+  private int recycleConfig = DO_NOTHING;\n \n   DataBindingRepositoryPresenterCompiler() {\n-    this.handlers = new ArrayList<>();\n+    this.handlers = new SparseArray<>();\n   }\n \n   @NonNull\n   @Override\n   public Object handler(final int handlerId, @NonNull final Object handler) {\n-    handlers.add(create(handlerId, handler));\n+    handlers.put(handlerId, handler);\n     return this;\n   }\n \n@@ -72,14 +76,14 @@ public Object itemIdForItem(@NonNull final Function itemIdForItem) {\n     return this;\n   }\n \n-\n   @NonNull\n   @Override\n   public RepositoryPresenter forItem() {\n     return repositoryPresenterOf(null)\n         .layoutForItem(layoutFactory)\n         .stableIdForItem(stableIdForItem)\n-        .bindWith(new ViewBinder(itemId, new ArrayList<>(handlers)))\n+        .bindWith(new ViewBinder(itemId, handlers))\n+        .recycleWith(new ViewRecycler(recycleConfig, handlers))\n         .forItem();\n   }\n \n@@ -89,7 +93,8 @@ public RepositoryPresenter forItem() {\n     return repositoryPresenterOf(null)\n         .layoutForItem(layoutFactory)\n         .stableIdForItem(stableIdForItem)\n-        .bindWith(new ViewBinder(itemId, new ArrayList<>(handlers)))\n+        .bindWith(new ViewBinder(itemId, handlers))\n+        .recycleWith(new ViewRecycler(recycleConfig, handlers))\n         .forList();\n   }\n \n@@ -99,7 +104,8 @@ public RepositoryPresenter forItem() {\n     return repositoryPresenterOf(Object.class)\n         .layoutForItem(layoutFactory)\n         .stableIdForItem(stableIdForItem)\n-        .bindWith(new ViewBinder(itemId, new ArrayList<>(handlers)))\n+        .bindWith(new ViewBinder(itemId, handlers))\n+        .recycleWith(new ViewRecycler(recycleConfig, handlers))\n         .forResult();\n   }\n \n@@ -109,7 +115,8 @@ public RepositoryPresenter forItem() {\n     return repositoryPresenterOf(null)\n         .layoutForItem(layoutFactory)\n         .stableIdForItem(stableIdForItem)\n-        .bindWith(new ViewBinder(itemId, new ArrayList<>(handlers)))\n+        .bindWith(new ViewBinder(itemId, handlers))\n+        .recycleWith(new ViewRecycler(recycleConfig, handlers))\n         .forResultList();\n   }\n \n@@ -134,25 +141,69 @@ public Object stableIdForItem(@NonNull final Function stableIdForItem) {\n     return this;\n   }\n \n+  @NonNull\n+  @Override\n+  public Object onRecycle(@RecycleConfig final int recycleConfig) {\n+    this.recycleConfig = recycleConfig;\n+    return this;\n+  }\n+\n   private static final class ViewBinder implements Binder<Object, View> {\n     private final Function<Object, Integer> itemId;\n     @NonNull\n-    private final List<Pair<Integer, Object>> handlers;\n+    private final SparseArray<Object> handlers;\n \n     ViewBinder(@NonNull final Function<Object, Integer> itemId,\n-        @NonNull final List<Pair<Integer, Object>> handlers) {\n+        @NonNull final SparseArray<Object> handlers) {\n       this.itemId = itemId;\n       this.handlers = checkNotNull(handlers);\n     }\n \n     @Override\n     public void bind(@NonNull final Object item, @NonNull final View view) {\n       final ViewDataBinding viewDataBinding = DataBindingUtil.bind(view);\n-      viewDataBinding.setVariable(itemId.apply(item), item);\n-      for (final Pair<Integer, Object> handler : handlers) {\n-        viewDataBinding.setVariable(handler.first, handler.second);\n+      final Integer itemVariable = itemId.apply(item);\n+      viewDataBinding.setVariable(itemVariable, item);\n+      view.setTag(R.id.agera__rvdatabinding__item_id, itemVariable);\n+      for (int i = 0; i < handlers.size(); i++) {\n+        final int variableId = handlers.keyAt(i);\n+        viewDataBinding.setVariable(variableId, handlers.valueAt(i));\n       }\n       viewDataBinding.executePendingBindings();\n     }\n   }\n+\n+  private static final class ViewRecycler implements Receiver<View> {\n+    @RecycleConfig\n+    private final int recycleConfig;\n+    @NonNull\n+    private SparseArray<Object> handlers;\n+\n+    ViewRecycler(\n+        @RecycleConfig final int recycleConfig,\n+        @NonNull final SparseArray<Object> handlers) {\n+      this.recycleConfig = recycleConfig;\n+      this.handlers = checkNotNull(handlers);\n+    }\n+\n+    @Override\n+    public void accept(@NonNull final View view) {\n+      if (recycleConfig != 0) {\n+        final ViewDataBinding viewDataBinding = DataBindingUtil.bind(view);\n+        if ((recycleConfig & CLEAR_ITEM) != 0) {\n+          final Object tag = view.getTag(R.id.agera__rvdatabinding__item_id);\n+          view.setTag(R.id.agera__rvdatabinding__item_id, null);\n+          if (tag instanceof Integer) {\n+            viewDataBinding.setVariable((int) tag, null);\n+          }\n+        }\n+        if ((recycleConfig & CLEAR_HANDLERS) != 0) {\n+          for (int i = 0; i < handlers.size(); i++) {\n+            viewDataBinding.setVariable(handlers.keyAt(i), null);\n+          }\n+        }\n+        viewDataBinding.executePendingBindings();\n+      }\n+    }\n+  }\n }"},{"sha":"7237694caa2cb95498238a536deea5f85a5a7878","filename":"extensions/rvdatabinding/src/main/java/com/google/android/agera/rvdatabinding/DataBindingRepositoryPresenterCompilerStates.java","status":"modified","additions":27,"deletions":4,"changes":31,"blob_url":"https://github.com/google/agera/blob/b661e6be5997f5f7e1586b16d471030b1f08acf7/extensions/rvdatabinding/src/main/java/com/google/android/agera/rvdatabinding/DataBindingRepositoryPresenterCompilerStates.java","raw_url":"https://github.com/google/agera/raw/b661e6be5997f5f7e1586b16d471030b1f08acf7/extensions/rvdatabinding/src/main/java/com/google/android/agera/rvdatabinding/DataBindingRepositoryPresenterCompilerStates.java","contents_url":"https://api.github.com/repos/google/agera/contents/extensions/rvdatabinding/src/main/java/com/google/android/agera/rvdatabinding/DataBindingRepositoryPresenterCompilerStates.java?ref=b661e6be5997f5f7e1586b16d471030b1f08acf7","patch":"@@ -61,9 +61,32 @@\n   }\n \n   /**\n-   * Compiler state allowing to specify handlers, Recycle, StableId or compile.\n+   * Compiler state to specify a recycle config.\n    */\n-  interface DBRPHandlerBindingCompile<TVal>\n-      extends RPCompile<TVal>, DBRPHandlerBinding<DBRPHandlerBindingCompile<TVal>>,\n-      RPStableId<TVal, DBRPHandlerBindingCompile<TVal>> {}\n+  interface DBRPRecycle<TRet> {\n+    /**\n+     * Specifies what {@code handler} is associated with the {@code handlerId} in the previously\n+     * given {@code layout}.\n+     */\n+    @NonNull\n+    TRet onRecycle(@RecycleConfig int recycleConfig);\n+  }\n+\n+  /**\n+   * Compiler state allowing to specify handlers, stable id, recycle strategy or compile.\n+   */\n+  interface DBRPHandlerStableIdRecycleCompile<TVal>\n+      extends DBRPHandlerBinding<DBRPHandlerStableIdRecycleCompile<TVal>>,\n+      DBRPStableIdRecycleCompile<TVal> {}\n+\n+  /**\n+   * Compiler state allowing to specify stable id, recycle strategy or compile.\n+   */\n+  interface DBRPStableIdRecycleCompile<TVal>\n+      extends RPStableId<TVal, DBRPRecycleCompile<TVal>>, DBRPRecycleCompile<TVal> {}\n+\n+  /**\n+   * Compiler state allowing to specify recycle strategy or compile.\n+   */\n+  interface DBRPRecycleCompile<TVal> extends RPCompile<TVal>, DBRPRecycle<RPCompile<TVal>> {}\n }"},{"sha":"267c0d61de9bf7eab31c4f91cfb060840bbe6515","filename":"extensions/rvdatabinding/src/main/java/com/google/android/agera/rvdatabinding/DataBindingRepositoryPresenters.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/google/agera/blob/b661e6be5997f5f7e1586b16d471030b1f08acf7/extensions/rvdatabinding/src/main/java/com/google/android/agera/rvdatabinding/DataBindingRepositoryPresenters.java","raw_url":"https://github.com/google/agera/raw/b661e6be5997f5f7e1586b16d471030b1f08acf7/extensions/rvdatabinding/src/main/java/com/google/android/agera/rvdatabinding/DataBindingRepositoryPresenters.java","contents_url":"https://api.github.com/repos/google/agera/contents/extensions/rvdatabinding/src/main/java/com/google/android/agera/rvdatabinding/DataBindingRepositoryPresenters.java?ref=b661e6be5997f5f7e1586b16d471030b1f08acf7","patch":"@@ -20,7 +20,7 @@\n import com.google.android.agera.Repository;\n import com.google.android.agera.rvadapter.RepositoryPresenter;\n import com.google.android.agera.rvadapter.RepositoryPresenterCompilerStates.RPLayout;\n-import com.google.android.agera.rvdatabinding.DataBindingRepositoryPresenterCompilerStates.DBRPHandlerBindingCompile;\n+import com.google.android.agera.rvdatabinding.DataBindingRepositoryPresenterCompilerStates.DBRPHandlerStableIdRecycleCompile;\n import com.google.android.agera.rvdatabinding.DataBindingRepositoryPresenterCompilerStates.DBRPItemBinding;\n \n /**\n@@ -75,7 +75,7 @@\n \n   @SuppressWarnings(\"unchecked\")\n   @NonNull\n-  public static <T> RPLayout<T, DBRPItemBinding<T, DBRPHandlerBindingCompile<T>>>\n+  public static <T> RPLayout<T, DBRPItemBinding<T, DBRPHandlerStableIdRecycleCompile<T>>>\n   dataBindingRepositoryPresenterOf(@Nullable final Class<T> type) {\n     return new DataBindingRepositoryPresenterCompiler();\n   }"},{"sha":"b1d4f7d8628e71b112a6dff3ab6362dc290ce32f","filename":"extensions/rvdatabinding/src/main/java/com/google/android/agera/rvdatabinding/RecycleConfig.java","status":"added","additions":58,"deletions":0,"changes":58,"blob_url":"https://github.com/google/agera/blob/b661e6be5997f5f7e1586b16d471030b1f08acf7/extensions/rvdatabinding/src/main/java/com/google/android/agera/rvdatabinding/RecycleConfig.java","raw_url":"https://github.com/google/agera/raw/b661e6be5997f5f7e1586b16d471030b1f08acf7/extensions/rvdatabinding/src/main/java/com/google/android/agera/rvdatabinding/RecycleConfig.java","contents_url":"https://api.github.com/repos/google/agera/contents/extensions/rvdatabinding/src/main/java/com/google/android/agera/rvdatabinding/RecycleConfig.java?ref=b661e6be5997f5f7e1586b16d471030b1f08acf7","patch":"@@ -0,0 +1,58 @@\n+/*\n+ * Copyright 2016 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera.rvdatabinding;\n+\n+import android.support.annotation.IntDef;\n+import android.support.v7.widget.RecyclerView;\n+import com.google.android.agera.Repository;\n+import com.google.android.agera.rvadapter.RepositoryPresenter;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+\n+/**\n+ * Constants controlling the recycle behavior of the compiled data binding\n+ * {@link RepositoryPresenter}.\n+ */\n+@Retention(RetentionPolicy.SOURCE)\n+@IntDef(flag = true, value = {\n+    RecycleConfig.DO_NOTHING,\n+    RecycleConfig.CLEAR_ITEM,\n+    RecycleConfig.CLEAR_HANDLERS,\n+    RecycleConfig.CLEAR_ALL,\n+})\n+public @interface RecycleConfig {\n+  /**\n+   * When the {@link RecyclerView} recycles a view, do nothing. This is the default behavior.\n+   */\n+  int DO_NOTHING = 0;\n+\n+  /**\n+   * When the {@link RecyclerView} recycles a view, rebind the item from the {@link Repository}\n+   * with {@code null}. Item independent handlers will not be affected.\n+   */\n+  int CLEAR_ITEM = 1;\n+\n+  /**\n+   * When the {@link RecyclerView} recycles a view, rebind and all handlers with {@code null}.\n+   */\n+  int CLEAR_HANDLERS = 2;\n+\n+  /**\n+   * When the {@link RecyclerView} recycles a view, rebind both the item from the {@link Repository}\n+   * and all handlers with {@code null}.\n+   */\n+  int CLEAR_ALL = CLEAR_ITEM | CLEAR_HANDLERS;\n+}"},{"sha":"072b4b1feca922a162cf9a1d4985b1599e58c0cb","filename":"extensions/rvdatabinding/src/main/res/values/values.xml","status":"added","additions":19,"deletions":0,"changes":19,"blob_url":"https://github.com/google/agera/blob/b661e6be5997f5f7e1586b16d471030b1f08acf7/extensions/rvdatabinding/src/main/res/values/values.xml","raw_url":"https://github.com/google/agera/raw/b661e6be5997f5f7e1586b16d471030b1f08acf7/extensions/rvdatabinding/src/main/res/values/values.xml","contents_url":"https://api.github.com/repos/google/agera/contents/extensions/rvdatabinding/src/main/res/values/values.xml?ref=b661e6be5997f5f7e1586b16d471030b1f08acf7","patch":"@@ -0,0 +1,19 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<!--\n+  ~ Copyright 2016 Google Inc. All Rights Reserved.\n+  ~\n+  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n+  ~ you may not use this file except in compliance with the License.\n+  ~ You may obtain a copy of the License at\n+  ~\n+  ~     http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+<resources>\n+    <item name=\"agera__rvdatabinding__item_id\" type=\"id\"/>\n+</resources>"},{"sha":"a18c6fe513eda6b3a9247b4dba0815ed6fd7a5f8","filename":"extensions/rvdatabinding/src/test/java/com/google/android/agera/rvdatabinding/DataBindingRepositoryPresentersTest.java","status":"modified","additions":318,"deletions":7,"changes":325,"blob_url":"https://github.com/google/agera/blob/b661e6be5997f5f7e1586b16d471030b1f08acf7/extensions/rvdatabinding/src/test/java/com/google/android/agera/rvdatabinding/DataBindingRepositoryPresentersTest.java","raw_url":"https://github.com/google/agera/raw/b661e6be5997f5f7e1586b16d471030b1f08acf7/extensions/rvdatabinding/src/test/java/com/google/android/agera/rvdatabinding/DataBindingRepositoryPresentersTest.java","contents_url":"https://api.github.com/repos/google/agera/contents/extensions/rvdatabinding/src/test/java/com/google/android/agera/rvdatabinding/DataBindingRepositoryPresentersTest.java?ref=b661e6be5997f5f7e1586b16d471030b1f08acf7","patch":"@@ -1,17 +1,25 @@\n package com.google.android.agera.rvdatabinding;\n \n import static android.databinding.DataBinderMapper.setDataBinding;\n+import static com.google.android.agera.Result.failure;\n import static com.google.android.agera.Result.present;\n import static com.google.android.agera.Result.success;\n import static com.google.android.agera.rvadapter.test.matchers.HasPrivateConstructor.hasPrivateConstructor;\n import static com.google.android.agera.rvdatabinding.DataBindingRepositoryPresenters.dataBindingRepositoryPresenterOf;\n+import static com.google.android.agera.rvdatabinding.RecycleConfig.CLEAR_ALL;\n+import static com.google.android.agera.rvdatabinding.RecycleConfig.CLEAR_HANDLERS;\n+import static com.google.android.agera.rvdatabinding.RecycleConfig.CLEAR_ITEM;\n+import static com.google.android.agera.rvdatabinding.RecycleConfig.DO_NOTHING;\n import static java.util.Arrays.asList;\n import static org.hamcrest.MatcherAssert.assertThat;\n import static org.hamcrest.Matchers.is;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoMoreInteractions;\n import static org.mockito.Mockito.when;\n import static org.mockito.MockitoAnnotations.initMocks;\n \n import android.databinding.ViewDataBinding;\n+import android.support.annotation.LayoutRes;\n import android.support.v7.widget.RecyclerView;\n import android.view.View;\n import com.google.android.agera.Binder;\n@@ -35,16 +43,16 @@\n   private static final Result<String> STRING_RESULT = present(STRING);\n   private static final List<String> STRING_LIST = asList(STRING, SECOND_STRING);\n   private static final Result<List<String>> STRING_LIST_RESULT = success(STRING_LIST);\n-  private static final Result<String> FAILURE = Result.<String>failure();\n-  private static final Result<List<String>> LIST_FAILURE = Result.<List<String>>failure();\n+  private static final Result<String> FAILURE = failure();\n+  private static final Result<List<String>> LIST_FAILURE = failure();\n   private static final Object HANDLER = new Object();\n   private static final Object SECOND_HANDLER = new Object();\n+  @LayoutRes\n   private static final int LAYOUT_ID = 1;\n   private static final int DYNAMIC_LAYOUT_ID = 2;\n   private static final int ITEM_ID = 3;\n-  private static final int DYNAMIC_ITEM_ID = 4;\n-  private static final int HANDLER_ID = 5;\n-  private static final int SECOND_HANDLER_ID = 6;\n+  private static final int HANDLER_ID = 4;\n+  private static final int SECOND_HANDLER_ID = 5;\n   private static final long STABLE_ID = 2;\n   @Mock\n   private Binder<String, View> binder;\n@@ -78,19 +86,92 @@ public void shouldBindRepositoryPresenterOfResult() {\n             .handler(HANDLER_ID, HANDLER)\n             .handler(SECOND_HANDLER_ID, SECOND_HANDLER)\n             .forResult();\n+\n     resultRepositoryPresenter.bind(STRING_RESULT, 0, viewHolder);\n+\n+    verify(view).setTag(R.id.agera__rvdatabinding__item_id, ITEM_ID);\n+    verify(viewDataBinding).setVariable(ITEM_ID, STRING);\n+    verify(viewDataBinding).setVariable(HANDLER_ID, HANDLER);\n+    verify(viewDataBinding).setVariable(SECOND_HANDLER_ID, SECOND_HANDLER);\n+    verify(viewDataBinding).executePendingBindings();\n+    verifyNoMoreInteractions(viewDataBinding);\n   }\n \n   @Test\n-  public void shouldBindRepositoryPresenterOfResultWithoutBinder() {\n+  public void shouldNotRecycleRepositoryPresenterOfResultWithNoRecycling() {\n     final RepositoryPresenter<Result<String>> resultRepositoryPresenter =\n         dataBindingRepositoryPresenterOf(String.class)\n             .layout(LAYOUT_ID)\n             .itemId(ITEM_ID)\n             .handler(HANDLER_ID, HANDLER)\n             .handler(SECOND_HANDLER_ID, SECOND_HANDLER)\n+            .onRecycle(DO_NOTHING)\n             .forResult();\n-    resultRepositoryPresenter.bind(STRING_RESULT, 0, viewHolder);\n+\n+    resultRepositoryPresenter.recycle(viewHolder);\n+\n+    verifyNoMoreInteractions(viewDataBinding);\n+  }\n+\n+  @Test\n+  public void shouldRecycleRepositoryPresenterOfResultWithItemRecycling() {\n+    when(view.getTag(R.id.agera__rvdatabinding__item_id)).thenReturn(ITEM_ID);\n+\n+    final RepositoryPresenter<Result<String>> resultRepositoryPresenter =\n+        dataBindingRepositoryPresenterOf(String.class)\n+            .layout(LAYOUT_ID)\n+            .itemId(ITEM_ID)\n+            .handler(HANDLER_ID, HANDLER)\n+            .handler(SECOND_HANDLER_ID, SECOND_HANDLER)\n+            .onRecycle(CLEAR_ITEM)\n+            .forResult();\n+\n+    resultRepositoryPresenter.recycle(viewHolder);\n+\n+    verify(viewDataBinding).setVariable(ITEM_ID, null);\n+    verify(viewDataBinding).executePendingBindings();\n+    verifyNoMoreInteractions(viewDataBinding);\n+  }\n+\n+  @Test\n+  public void shouldRecycleRepositoryPresenterOfResultWithAllRecycling() {\n+    when(view.getTag(R.id.agera__rvdatabinding__item_id)).thenReturn(ITEM_ID);\n+    final RepositoryPresenter<Result<String>> resultRepositoryPresenter =\n+        dataBindingRepositoryPresenterOf(String.class)\n+            .layout(LAYOUT_ID)\n+            .itemId(ITEM_ID)\n+            .handler(HANDLER_ID, HANDLER)\n+            .handler(SECOND_HANDLER_ID, SECOND_HANDLER)\n+            .onRecycle(CLEAR_ALL)\n+            .forResult();\n+\n+    resultRepositoryPresenter.recycle(viewHolder);\n+\n+    verify(viewDataBinding).setVariable(ITEM_ID, null);\n+    verify(viewDataBinding).setVariable(HANDLER_ID, null);\n+    verify(viewDataBinding).setVariable(SECOND_HANDLER_ID, null);\n+    verify(viewDataBinding).executePendingBindings();\n+    verifyNoMoreInteractions(viewDataBinding);\n+  }\n+\n+  @Test\n+  public void shouldRecycleRepositoryPresenterOfResultWithHandlerRecycling() {\n+    when(view.getTag(R.id.agera__rvdatabinding__item_id)).thenReturn(ITEM_ID);\n+    final RepositoryPresenter<Result<String>> resultRepositoryPresenter =\n+        dataBindingRepositoryPresenterOf(String.class)\n+            .layout(LAYOUT_ID)\n+            .itemId(ITEM_ID)\n+            .handler(HANDLER_ID, HANDLER)\n+            .handler(SECOND_HANDLER_ID, SECOND_HANDLER)\n+            .onRecycle(CLEAR_HANDLERS)\n+            .forResult();\n+\n+    resultRepositoryPresenter.recycle(viewHolder);\n+\n+    verify(viewDataBinding).setVariable(HANDLER_ID, null);\n+    verify(viewDataBinding).setVariable(SECOND_HANDLER_ID, null);\n+    verify(viewDataBinding).executePendingBindings();\n+    verifyNoMoreInteractions(viewDataBinding);\n   }\n \n   @Test\n@@ -101,7 +182,152 @@ public void shouldBindRepositoryPresenterOfResultList() {\n             .itemId(ITEM_ID)\n             .handler(HANDLER_ID, HANDLER)\n             .forResultList();\n+\n     resultListRepositoryPresenter.bind(STRING_LIST_RESULT, 1, viewHolder);\n+\n+    verify(view).setTag(R.id.agera__rvdatabinding__item_id, ITEM_ID);\n+    verify(viewDataBinding).setVariable(ITEM_ID, SECOND_STRING);\n+    verify(viewDataBinding).setVariable(HANDLER_ID, HANDLER);\n+    verify(viewDataBinding).executePendingBindings();\n+    verifyNoMoreInteractions(viewDataBinding);\n+  }\n+\n+  @Test\n+  public void shouldNotRecycleRepositoryPresenterOfResultListWithNoRecycling() {\n+    final RepositoryPresenter<Result<List<String>>> resultRepositoryPresenter =\n+        dataBindingRepositoryPresenterOf(String.class)\n+            .layout(LAYOUT_ID)\n+            .itemId(ITEM_ID)\n+            .handler(HANDLER_ID, HANDLER)\n+            .handler(SECOND_HANDLER_ID, SECOND_HANDLER)\n+            .onRecycle(DO_NOTHING)\n+            .forResultList();\n+\n+    resultRepositoryPresenter.recycle(viewHolder);\n+\n+    verifyNoMoreInteractions(viewDataBinding);\n+  }\n+\n+  @Test\n+  public void shouldRecycleRepositoryPresenterOfResultListWithItemRecycling() {\n+    when(view.getTag(R.id.agera__rvdatabinding__item_id)).thenReturn(ITEM_ID);\n+\n+    final RepositoryPresenter<Result<List<String>>> resultRepositoryPresenter =\n+        dataBindingRepositoryPresenterOf(String.class)\n+            .layout(LAYOUT_ID)\n+            .itemId(ITEM_ID)\n+            .handler(HANDLER_ID, HANDLER)\n+            .handler(SECOND_HANDLER_ID, SECOND_HANDLER)\n+            .onRecycle(CLEAR_ITEM)\n+            .forResultList();\n+\n+    resultRepositoryPresenter.recycle(viewHolder);\n+\n+    verify(viewDataBinding).setVariable(ITEM_ID, null);\n+    verify(viewDataBinding).executePendingBindings();\n+    verifyNoMoreInteractions(viewDataBinding);\n+  }\n+\n+  @Test\n+  public void shouldRecycleRepositoryPresenterOfResultListWithAllRecycling() {\n+    when(view.getTag(R.id.agera__rvdatabinding__item_id)).thenReturn(ITEM_ID);\n+    final RepositoryPresenter<Result<List<String>>> resultRepositoryPresenter =\n+        dataBindingRepositoryPresenterOf(String.class)\n+            .layout(LAYOUT_ID)\n+            .itemId(ITEM_ID)\n+            .handler(HANDLER_ID, HANDLER)\n+            .handler(SECOND_HANDLER_ID, SECOND_HANDLER)\n+            .onRecycle(CLEAR_ALL)\n+            .forResultList();\n+\n+    resultRepositoryPresenter.recycle(viewHolder);\n+\n+    verify(viewDataBinding).setVariable(ITEM_ID, null);\n+    verify(viewDataBinding).setVariable(HANDLER_ID, null);\n+    verify(viewDataBinding).setVariable(SECOND_HANDLER_ID, null);\n+    verify(viewDataBinding).executePendingBindings();\n+    verifyNoMoreInteractions(viewDataBinding);\n+  }\n+\n+  @Test\n+  public void shouldRecycleRepositoryPresenterOfResultListWithHandlerRecycling() {\n+    when(view.getTag(R.id.agera__rvdatabinding__item_id)).thenReturn(ITEM_ID);\n+    final RepositoryPresenter<Result<List<String>>> resultRepositoryPresenter =\n+        dataBindingRepositoryPresenterOf(String.class)\n+            .layout(LAYOUT_ID)\n+            .itemId(ITEM_ID)\n+            .handler(HANDLER_ID, HANDLER)\n+            .handler(SECOND_HANDLER_ID, SECOND_HANDLER)\n+            .onRecycle(CLEAR_HANDLERS)\n+            .forResultList();\n+\n+    resultRepositoryPresenter.recycle(viewHolder);\n+\n+    verify(viewDataBinding).setVariable(HANDLER_ID, null);\n+    verify(viewDataBinding).setVariable(SECOND_HANDLER_ID, null);\n+    verify(viewDataBinding).executePendingBindings();\n+    verifyNoMoreInteractions(viewDataBinding);\n+  }\n+\n+  @Test\n+  public void shouldRecycleRepositoryPresenterOfItemWithItemRecycling() {\n+    when(view.getTag(R.id.agera__rvdatabinding__item_id)).thenReturn(ITEM_ID);\n+\n+    final RepositoryPresenter<String> resultRepositoryPresenter =\n+        dataBindingRepositoryPresenterOf(String.class)\n+            .layout(LAYOUT_ID)\n+            .itemId(ITEM_ID)\n+            .handler(HANDLER_ID, HANDLER)\n+            .handler(SECOND_HANDLER_ID, SECOND_HANDLER)\n+            .onRecycle(CLEAR_ITEM)\n+            .forItem();\n+\n+    resultRepositoryPresenter.recycle(viewHolder);\n+\n+    verify(viewDataBinding).setVariable(ITEM_ID, null);\n+    verify(viewDataBinding).executePendingBindings();\n+    verifyNoMoreInteractions(viewDataBinding);\n+  }\n+\n+  @Test\n+  public void shouldRecycleRepositoryPresenterOfItemWithAllRecycling() {\n+    when(view.getTag(R.id.agera__rvdatabinding__item_id)).thenReturn(ITEM_ID);\n+    final RepositoryPresenter<String> resultRepositoryPresenter =\n+        dataBindingRepositoryPresenterOf(String.class)\n+            .layout(LAYOUT_ID)\n+            .itemId(ITEM_ID)\n+            .handler(HANDLER_ID, HANDLER)\n+            .handler(SECOND_HANDLER_ID, SECOND_HANDLER)\n+            .onRecycle(CLEAR_ALL)\n+            .forItem();\n+\n+    resultRepositoryPresenter.recycle(viewHolder);\n+\n+    verify(viewDataBinding).setVariable(ITEM_ID, null);\n+    verify(viewDataBinding).setVariable(HANDLER_ID, null);\n+    verify(viewDataBinding).setVariable(SECOND_HANDLER_ID, null);\n+    verify(viewDataBinding).executePendingBindings();\n+    verifyNoMoreInteractions(viewDataBinding);\n+  }\n+\n+  @Test\n+  public void shouldRecycleRepositoryPresenterOfItemWithHandlerRecycling() {\n+    when(view.getTag(R.id.agera__rvdatabinding__item_id)).thenReturn(ITEM_ID);\n+    final RepositoryPresenter<String> resultRepositoryPresenter =\n+        dataBindingRepositoryPresenterOf(String.class)\n+            .layout(LAYOUT_ID)\n+            .itemId(ITEM_ID)\n+            .handler(HANDLER_ID, HANDLER)\n+            .handler(SECOND_HANDLER_ID, SECOND_HANDLER)\n+            .onRecycle(CLEAR_HANDLERS)\n+            .forItem();\n+\n+    resultRepositoryPresenter.recycle(viewHolder);\n+\n+    verify(viewDataBinding).setVariable(HANDLER_ID, null);\n+    verify(viewDataBinding).setVariable(SECOND_HANDLER_ID, null);\n+    verify(viewDataBinding).executePendingBindings();\n+    verifyNoMoreInteractions(viewDataBinding);\n   }\n \n   @Test\n@@ -121,10 +347,95 @@ public void shouldBindRepositoryPresenterOfList() {\n             .layout(LAYOUT_ID)\n             .itemId(ITEM_ID)\n             .forList();\n+\n     listRepositoryPresenter.bind(STRING_LIST, 1, viewHolder);\n+\n+    verify(view).setTag(R.id.agera__rvdatabinding__item_id, ITEM_ID);\n+    verify(viewDataBinding).setVariable(ITEM_ID, SECOND_STRING);\n+    verify(viewDataBinding).executePendingBindings();\n+    verifyNoMoreInteractions(viewDataBinding);\n+  }\n+\n+  @Test\n+  public void shouldNotRecycleRepositoryPresenterOfListWithNoRecycling() {\n+    final RepositoryPresenter<List<String>> resultRepositoryPresenter =\n+        dataBindingRepositoryPresenterOf(String.class)\n+            .layout(LAYOUT_ID)\n+            .itemId(ITEM_ID)\n+            .handler(HANDLER_ID, HANDLER)\n+            .handler(SECOND_HANDLER_ID, SECOND_HANDLER)\n+            .onRecycle(DO_NOTHING)\n+            .forList();\n+\n+    resultRepositoryPresenter.recycle(viewHolder);\n+\n+    verifyNoMoreInteractions(viewDataBinding);\n+  }\n+\n+  @Test\n+  public void shouldRecycleRepositoryPresenterOfListWithItemRecycling() {\n+    when(view.getTag(R.id.agera__rvdatabinding__item_id)).thenReturn(ITEM_ID);\n+\n+    final RepositoryPresenter<List<String>> resultRepositoryPresenter =\n+        dataBindingRepositoryPresenterOf(String.class)\n+            .layout(LAYOUT_ID)\n+            .itemId(ITEM_ID)\n+            .handler(HANDLER_ID, HANDLER)\n+            .handler(SECOND_HANDLER_ID, SECOND_HANDLER)\n+            .onRecycle(CLEAR_ITEM)\n+            .forList();\n+\n+    resultRepositoryPresenter.recycle(viewHolder);\n+\n+    verify(viewDataBinding).setVariable(ITEM_ID, null);\n+    verify(viewDataBinding).executePendingBindings();\n+    verifyNoMoreInteractions(viewDataBinding);\n   }\n \n   @Test\n+  public void shouldRecycleRepositoryPresenterOfListWithAllRecycling() {\n+    when(view.getTag(R.id.agera__rvdatabinding__item_id)).thenReturn(ITEM_ID);\n+    final RepositoryPresenter<List<String>> resultRepositoryPresenter =\n+        dataBindingRepositoryPresenterOf(String.class)\n+            .layout(LAYOUT_ID)\n+            .itemId(ITEM_ID)\n+            .handler(HANDLER_ID, HANDLER)\n+            .handler(SECOND_HANDLER_ID, SECOND_HANDLER)\n+            .onRecycle(CLEAR_ALL)\n+            .forList();\n+\n+    resultRepositoryPresenter.recycle(viewHolder);\n+\n+    verify(viewDataBinding).setVariable(ITEM_ID, null);\n+    verify(viewDataBinding).setVariable(HANDLER_ID, null);\n+    verify(viewDataBinding).setVariable(SECOND_HANDLER_ID, null);\n+    verify(viewDataBinding).executePendingBindings();\n+    verifyNoMoreInteractions(viewDataBinding);\n+  }\n+\n+\n+  @Test\n+  public void shouldRecycleRepositoryPresenterOfListWithHandlerRecycling() {\n+    when(view.getTag(R.id.agera__rvdatabinding__item_id)).thenReturn(ITEM_ID);\n+    final RepositoryPresenter<List<String>> resultRepositoryPresenter =\n+        dataBindingRepositoryPresenterOf(String.class)\n+            .layout(LAYOUT_ID)\n+            .itemId(ITEM_ID)\n+            .handler(HANDLER_ID, HANDLER)\n+            .handler(SECOND_HANDLER_ID, SECOND_HANDLER)\n+            .onRecycle(CLEAR_HANDLERS)\n+            .forList();\n+\n+    resultRepositoryPresenter.recycle(viewHolder);\n+\n+    verify(viewDataBinding).setVariable(HANDLER_ID, null);\n+    verify(viewDataBinding).setVariable(SECOND_HANDLER_ID, null);\n+    verify(viewDataBinding).executePendingBindings();\n+    verifyNoMoreInteractions(viewDataBinding);\n+  }\n+\n+\n+  @Test\n   public void shouldReturnZeroForCountOfRepositoryPresenterOfFailedResult() {\n     final RepositoryPresenter<Result<String>> resultRepositoryPresenter =\n         dataBindingRepositoryPresenterOf(String.class)"},{"sha":"d953e91d621c87d69fc888ddc79dd49fd5ff0da3","filename":"testapp/src/main/java/com/google/android/agera/testapp/NotesFragment.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/google/agera/blob/b661e6be5997f5f7e1586b16d471030b1f08acf7/testapp/src/main/java/com/google/android/agera/testapp/NotesFragment.java","raw_url":"https://github.com/google/agera/raw/b661e6be5997f5f7e1586b16d471030b1f08acf7/testapp/src/main/java/com/google/android/agera/testapp/NotesFragment.java","contents_url":"https://api.github.com/repos/google/agera/contents/testapp/src/main/java/com/google/android/agera/testapp/NotesFragment.java?ref=b661e6be5997f5f7e1586b16d471030b1f08acf7","patch":"@@ -75,7 +75,6 @@ public void onCreate(@Nullable final Bundle savedInstanceState) {\n             dataBindingRepositoryPresenterOf(Note.class)\n                 .layout(R.layout.text_layout)\n                 .itemId(BR.note)\n-                .stableIdForItem(Note::getId)\n                 .handler(BR.click,\n                     (Receiver<Note>) (note) -> {\n                       final EditText editText = new EditText(getContext());\n@@ -89,6 +88,7 @@ public void onCreate(@Nullable final Bundle savedInstanceState) {\n                           .create().show();\n                     })\n                 .handler(BR.longClick, (Receiver<Note>) notesStore::deleteNote)\n+                .stableIdForItem(Note::getId)\n                 .forList());\n \n     adapter = repositoryAdapter()"}]}