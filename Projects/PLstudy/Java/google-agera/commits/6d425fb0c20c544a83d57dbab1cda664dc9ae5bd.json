{"sha":"6d425fb0c20c544a83d57dbab1cda664dc9ae5bd","commit":{"author":{"name":"drakeet","email":"drakeet.me@gmail.com","date":"2016-08-16T08:44:31Z"},"committer":{"name":"Magnus Ernstsson","email":"magnus@ernstsson.net","date":"2016-08-16T08:44:31Z"},"message":"Changed DBColumn columns' value to be nullable (#101)\n\nPrior to this, the column does not support null value, leading us have\r\nto use NonNull column value, and in fact, we may need Nullable value in\r\nDB and the puts method of ContentValues support Nullable value, Maybe\r\nyou'll say emptyColumn can do it, but actually it's hard to use it. So\r\nI use Nullable instead of Nullable for the value argument. It will be\r\nconvenient.","tree":{"sha":"75511a2ebe83414727b5a60fc8c0d747e935497b","url":"https://api.github.com/repos/google/agera/git/trees/75511a2ebe83414727b5a60fc8c0d747e935497b"},"url":"https://api.github.com/repos/google/agera/git/commits/6d425fb0c20c544a83d57dbab1cda664dc9ae5bd","comment_count":0},"url":"https://api.github.com/repos/google/agera/commits/6d425fb0c20c544a83d57dbab1cda664dc9ae5bd","html_url":"https://github.com/google/agera/commit/6d425fb0c20c544a83d57dbab1cda664dc9ae5bd","comments_url":"https://api.github.com/repos/google/agera/commits/6d425fb0c20c544a83d57dbab1cda664dc9ae5bd/comments","author":{"login":"drakeet","id":5214214,"avatar_url":"https://avatars2.githubusercontent.com/u/5214214?v=3","gravatar_id":"","url":"https://api.github.com/users/drakeet","html_url":"https://github.com/drakeet","followers_url":"https://api.github.com/users/drakeet/followers","following_url":"https://api.github.com/users/drakeet/following{/other_user}","gists_url":"https://api.github.com/users/drakeet/gists{/gist_id}","starred_url":"https://api.github.com/users/drakeet/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/drakeet/subscriptions","organizations_url":"https://api.github.com/users/drakeet/orgs","repos_url":"https://api.github.com/users/drakeet/repos","events_url":"https://api.github.com/users/drakeet/events{/privacy}","received_events_url":"https://api.github.com/users/drakeet/received_events","type":"User","site_admin":false},"committer":{"login":"ernstsson","id":378389,"avatar_url":"https://avatars2.githubusercontent.com/u/378389?v=3","gravatar_id":"","url":"https://api.github.com/users/ernstsson","html_url":"https://github.com/ernstsson","followers_url":"https://api.github.com/users/ernstsson/followers","following_url":"https://api.github.com/users/ernstsson/following{/other_user}","gists_url":"https://api.github.com/users/ernstsson/gists{/gist_id}","starred_url":"https://api.github.com/users/ernstsson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ernstsson/subscriptions","organizations_url":"https://api.github.com/users/ernstsson/orgs","repos_url":"https://api.github.com/users/ernstsson/repos","events_url":"https://api.github.com/users/ernstsson/events{/privacy}","received_events_url":"https://api.github.com/users/ernstsson/received_events","type":"User","site_admin":false},"parents":[{"sha":"f7b24a991a740cd4cefae388838ac38809897fae","url":"https://api.github.com/repos/google/agera/commits/f7b24a991a740cd4cefae388838ac38809897fae","html_url":"https://github.com/google/agera/commit/f7b24a991a740cd4cefae388838ac38809897fae"}],"stats":{"total":146,"additions":119,"deletions":27},"files":[{"sha":"e80debffab35c32ee7eb9223d925d51750b48bc4","filename":"extensions/database/src/main/java/com/google/android/agera/database/SqlRequestCompiler.java","status":"modified","additions":19,"deletions":18,"changes":37,"blob_url":"https://github.com/google/agera/blob/6d425fb0c20c544a83d57dbab1cda664dc9ae5bd/extensions/database/src/main/java/com/google/android/agera/database/SqlRequestCompiler.java","raw_url":"https://github.com/google/agera/raw/6d425fb0c20c544a83d57dbab1cda664dc9ae5bd/extensions/database/src/main/java/com/google/android/agera/database/SqlRequestCompiler.java","contents_url":"https://api.github.com/repos/google/agera/contents/extensions/database/src/main/java/com/google/android/agera/database/SqlRequestCompiler.java?ref=6d425fb0c20c544a83d57dbab1cda664dc9ae5bd","patch":"@@ -32,6 +32,7 @@\n \n import android.content.ContentValues;\n import android.support.annotation.NonNull;\n+import android.support.annotation.Nullable;\n \n @SuppressWarnings({\"unchecked, rawtypes\"})\n final class SqlRequestCompiler\n@@ -90,73 +91,73 @@ public SqlRequestCompiler sql(@NonNull final String query) {\n \n   @NonNull\n   @Override\n-  public Object column(@NonNull final String column, @NonNull final String value) {\n+  public Object column(@NonNull final String column, @Nullable final String value) {\n     checkState(!compiled, ERROR_MESSAGE);\n-    contentValues.put(checkNotNull(column), checkNotNull(value));\n+    contentValues.put(checkNotNull(column), value);\n     return this;\n   }\n \n   @NonNull\n   @Override\n-  public Object column(@NonNull final String column, @NonNull final Byte value) {\n+  public Object column(@NonNull final String column, @Nullable final Byte value) {\n     checkState(!compiled, ERROR_MESSAGE);\n-    contentValues.put(checkNotNull(column), checkNotNull(value));\n+    contentValues.put(checkNotNull(column), value);\n     return this;\n   }\n \n   @NonNull\n   @Override\n-  public Object column(@NonNull final String column, @NonNull final Short value) {\n+  public Object column(@NonNull final String column, @Nullable final Short value) {\n     checkState(!compiled, ERROR_MESSAGE);\n-    contentValues.put(checkNotNull(column), checkNotNull(value));\n+    contentValues.put(checkNotNull(column), value);\n     return this;\n   }\n \n   @NonNull\n   @Override\n-  public Object column(@NonNull final String column, @NonNull final Integer value) {\n+  public Object column(@NonNull final String column, @Nullable final Integer value) {\n     checkState(!compiled, ERROR_MESSAGE);\n-    contentValues.put(checkNotNull(column), checkNotNull(value));\n+    contentValues.put(checkNotNull(column), value);\n     return this;\n   }\n \n   @NonNull\n   @Override\n-  public Object column(@NonNull final String column, @NonNull final Long value) {\n+  public Object column(@NonNull final String column, @Nullable final Long value) {\n     checkState(!compiled, ERROR_MESSAGE);\n-    contentValues.put(checkNotNull(column), checkNotNull(value));\n+    contentValues.put(checkNotNull(column), value);\n     return this;\n   }\n \n   @NonNull\n   @Override\n-  public Object column(@NonNull final String column, @NonNull final Float value) {\n+  public Object column(@NonNull final String column, @Nullable final Float value) {\n     checkState(!compiled, ERROR_MESSAGE);\n-    contentValues.put(checkNotNull(column), checkNotNull(value));\n+    contentValues.put(checkNotNull(column), value);\n     return this;\n   }\n \n   @NonNull\n   @Override\n-  public Object column(@NonNull final String column, @NonNull final Double value) {\n+  public Object column(@NonNull final String column, @Nullable final Double value) {\n     checkState(!compiled, ERROR_MESSAGE);\n-    contentValues.put(checkNotNull(column), checkNotNull(value));\n+    contentValues.put(checkNotNull(column), value);\n     return this;\n   }\n \n   @NonNull\n   @Override\n-  public Object column(@NonNull final String column, @NonNull final Boolean value) {\n+  public Object column(@NonNull final String column, @Nullable final Boolean value) {\n     checkState(!compiled, ERROR_MESSAGE);\n-    contentValues.put(checkNotNull(column), checkNotNull(value));\n+    contentValues.put(checkNotNull(column), value);\n     return this;\n   }\n \n   @NonNull\n   @Override\n-  public Object column(@NonNull final String column, @NonNull final byte[] value) {\n+  public Object column(@NonNull final String column, @Nullable final byte[] value) {\n     checkState(!compiled, ERROR_MESSAGE);\n-    contentValues.put(checkNotNull(column), checkNotNull(value));\n+    contentValues.put(checkNotNull(column), value);\n     return this;\n   }\n "},{"sha":"570918c864a449e0aa434575ca825183ff15319c","filename":"extensions/database/src/main/java/com/google/android/agera/database/SqlRequestCompilerStates.java","status":"modified","additions":10,"deletions":9,"changes":19,"blob_url":"https://github.com/google/agera/blob/6d425fb0c20c544a83d57dbab1cda664dc9ae5bd/extensions/database/src/main/java/com/google/android/agera/database/SqlRequestCompilerStates.java","raw_url":"https://github.com/google/agera/raw/6d425fb0c20c544a83d57dbab1cda664dc9ae5bd/extensions/database/src/main/java/com/google/android/agera/database/SqlRequestCompilerStates.java","contents_url":"https://api.github.com/repos/google/agera/contents/extensions/database/src/main/java/com/google/android/agera/database/SqlRequestCompilerStates.java?ref=6d425fb0c20c544a83d57dbab1cda664dc9ae5bd","patch":"@@ -16,6 +16,7 @@\n package com.google.android.agera.database;\n \n import android.support.annotation.NonNull;\n+import android.support.annotation.Nullable;\n \n /**\n  * Container of the compiler state interfaces supporting the creation of sql requests.\n@@ -75,55 +76,55 @@\n      * Adds a {@code column} with a {@link String} {@code value}.\n      */\n     @NonNull\n-    T column(@NonNull String column, @NonNull String value);\n+    T column(@NonNull String column, @Nullable String value);\n \n     /**\n      * Adds a {@code column} with a {@link Byte} {@code value}.\n      */\n     @NonNull\n-    T column(@NonNull String column, @NonNull Byte value);\n+    T column(@NonNull String column, @Nullable Byte value);\n \n     /**\n      * Adds a {@code column} with a {@link Short} {@code value}.\n      */\n     @NonNull\n-    T column(@NonNull String column, @NonNull Short value);\n+    T column(@NonNull String column, @Nullable Short value);\n \n     /**\n      * Adds a {@code column} with a {@link Integer} {@code value}.\n      */\n     @NonNull\n-    T column(@NonNull String column, @NonNull Integer value);\n+    T column(@NonNull String column, @Nullable Integer value);\n \n     /**\n      * Adds a {@code column} with a {@link Long} {@code value}.\n      */\n     @NonNull\n-    T column(@NonNull String column, @NonNull Long value);\n+    T column(@NonNull String column, @Nullable Long value);\n \n     /**\n      * Adds a {@code column} with a {@link Float} {@code value}.\n      */\n     @NonNull\n-    T column(@NonNull String column, @NonNull Float value);\n+    T column(@NonNull String column, @Nullable Float value);\n \n     /**\n      * Adds a {@code column} with a {@link Double} {@code value}.\n      */\n     @NonNull\n-    T column(@NonNull String column, @NonNull Double value);\n+    T column(@NonNull String column, @Nullable Double value);\n \n     /**\n      * Adds a {@code column} with a {@link Boolean} {@code value}.\n      */\n     @NonNull\n-    T column(@NonNull String column, @NonNull Boolean value);\n+    T column(@NonNull String column, @Nullable Boolean value);\n \n     /**\n      * Adds a {@code column} with a {@code byte} array {@code value}.\n      */\n     @NonNull\n-    T column(@NonNull String column, @NonNull byte[] value);\n+    T column(@NonNull String column, @Nullable byte[] value);\n \n     /**\n      * Adds an empty {@code column}."},{"sha":"944264e265975982e2730f95d929e6fcf012123b","filename":"extensions/database/src/test/java/com/google/android/agera/database/SqlDatabaseFunctionsTest.java","status":"modified","additions":90,"deletions":0,"changes":90,"blob_url":"https://github.com/google/agera/blob/6d425fb0c20c544a83d57dbab1cda664dc9ae5bd/extensions/database/src/test/java/com/google/android/agera/database/SqlDatabaseFunctionsTest.java","raw_url":"https://github.com/google/agera/raw/6d425fb0c20c544a83d57dbab1cda664dc9ae5bd/extensions/database/src/test/java/com/google/android/agera/database/SqlDatabaseFunctionsTest.java","contents_url":"https://api.github.com/repos/google/agera/contents/extensions/database/src/test/java/com/google/android/agera/database/SqlDatabaseFunctionsTest.java?ref=6d425fb0c20c544a83d57dbab1cda664dc9ae5bd","patch":"@@ -347,6 +347,16 @@ public void shouldAddBooleanColumnForInsert() {\n   }\n \n   @Test\n+  public void shouldAddNullBooleanColumnForInsert() {\n+    final Boolean nullValue = null;\n+    assertThat(sqlInsertRequest()\n+            .table(TABLE)\n+            .column(COLUMN, nullValue)\n+            .compile().contentValues.getAsBoolean(COLUMN),\n+        is(nullValue));\n+  }\n+\n+  @Test\n   public void shouldAddStringColumnForInsert() {\n     final String value = \"string\";\n     assertThat(sqlInsertRequest()\n@@ -357,6 +367,16 @@ public void shouldAddStringColumnForInsert() {\n   }\n \n   @Test\n+  public void shouldAddNullStringColumnForInsert() {\n+    final String nullValue = null;\n+    assertThat(sqlInsertRequest()\n+            .table(TABLE)\n+            .column(COLUMN, nullValue)\n+            .compile().contentValues.getAsString(COLUMN),\n+        is(nullValue));\n+  }\n+\n+  @Test\n   public void shouldAddByteColumnForInsert() {\n     final byte value = 2;\n     assertThat(sqlInsertRequest()\n@@ -367,6 +387,16 @@ public void shouldAddByteColumnForInsert() {\n   }\n \n   @Test\n+  public void shouldAddNullByteColumnForInsert() {\n+    final Byte nullValue = null;\n+    assertThat(sqlInsertRequest()\n+            .table(TABLE)\n+            .column(COLUMN, nullValue)\n+            .compile().contentValues.getAsByte(COLUMN),\n+        is(nullValue));\n+  }\n+\n+  @Test\n   public void shouldAddIntegerColumnForInsert() {\n     final int value = 2;\n     assertThat(sqlInsertRequest()\n@@ -377,6 +407,16 @@ public void shouldAddIntegerColumnForInsert() {\n   }\n \n   @Test\n+  public void shouldAddNullIntegerColumnForInsert() {\n+    final Integer nullValue = null;\n+    assertThat(sqlInsertRequest()\n+            .table(TABLE)\n+            .column(COLUMN, nullValue)\n+            .compile().contentValues.getAsInteger(COLUMN),\n+        is(nullValue));\n+  }\n+\n+  @Test\n   public void shouldAddShortColumnForInsert() {\n     final short value = 2;\n     assertThat(sqlInsertRequest()\n@@ -387,6 +427,16 @@ public void shouldAddShortColumnForInsert() {\n   }\n \n   @Test\n+  public void shouldAddNullShortColumnForInsert() {\n+    final Short nullValue = null;\n+    assertThat(sqlInsertRequest()\n+            .table(TABLE)\n+            .column(COLUMN, nullValue)\n+            .compile().contentValues.getAsShort(COLUMN),\n+        is(nullValue));\n+  }\n+\n+  @Test\n   public void shouldAddDoubleColumnForInsert() {\n     final double value = 2;\n     assertThat(sqlInsertRequest()\n@@ -397,6 +447,16 @@ public void shouldAddDoubleColumnForInsert() {\n   }\n \n   @Test\n+  public void shouldAddNullDoubleColumnForInsert() {\n+    final Double nullValue = null;\n+    assertThat(sqlInsertRequest()\n+            .table(TABLE)\n+            .column(COLUMN, nullValue)\n+            .compile().contentValues.getAsDouble(COLUMN),\n+        is(nullValue));\n+  }\n+\n+  @Test\n   public void shouldAddFloatColumnForInsert() {\n     final float value = 2;\n     assertThat(sqlInsertRequest()\n@@ -407,6 +467,16 @@ public void shouldAddFloatColumnForInsert() {\n   }\n \n   @Test\n+  public void shouldAddNullFloatColumnForInsert() {\n+    final Float nullValue = null;\n+    assertThat(sqlInsertRequest()\n+            .table(TABLE)\n+            .column(COLUMN, nullValue)\n+            .compile().contentValues.getAsFloat(COLUMN),\n+        is(nullValue));\n+  }\n+\n+  @Test\n   public void shouldAddLongColumnForInsert() {\n     final long value = 2;\n     assertThat(sqlInsertRequest()\n@@ -417,6 +487,16 @@ public void shouldAddLongColumnForInsert() {\n   }\n \n   @Test\n+  public void shouldAddNullLongColumnForInsert() {\n+    final Long nullValue = null;\n+    assertThat(sqlInsertRequest()\n+            .table(TABLE)\n+            .column(COLUMN, nullValue)\n+            .compile().contentValues.getAsLong(COLUMN),\n+        is(nullValue));\n+  }\n+\n+  @Test\n   public void shouldAddByteArrayColumnForInsert() {\n     final byte[] value = \"value\".getBytes();\n     assertThat(sqlInsertRequest()\n@@ -427,6 +507,16 @@ public void shouldAddByteArrayColumnForInsert() {\n   }\n \n   @Test\n+  public void shouldAddNullByteArrayColumnForInsert() {\n+    final byte[] nullValue = null;\n+    assertThat(sqlInsertRequest()\n+            .table(TABLE)\n+            .column(COLUMN, nullValue)\n+            .compile().contentValues.getAsByteArray(COLUMN),\n+        is(nullValue));\n+  }\n+\n+  @Test\n   public void shouldHavePrivateConstructor() {\n     assertThat(SqlDatabaseFunctions.class, hasPrivateConstructor());\n   }"}]}