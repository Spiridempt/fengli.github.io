{"sha":"5555880a4997cacc83fd9bbd8be8cd01d8d7cc77","commit":{"author":{"name":"Magnus Ernstsson","email":"magnus@ernstsson.net","date":"2016-05-26T12:40:54Z"},"committer":{"name":"Magnus Ernstsson","email":"magnus@ernstsson.net","date":"2016-05-26T12:40:54Z"},"message":"Added ability to bind to failures in Result (#54)","tree":{"sha":"ab062969e63c87e8b73a940d6bad89082b42a207","url":"https://api.github.com/repos/google/agera/git/trees/ab062969e63c87e8b73a940d6bad89082b42a207"},"url":"https://api.github.com/repos/google/agera/git/commits/5555880a4997cacc83fd9bbd8be8cd01d8d7cc77","comment_count":0},"url":"https://api.github.com/repos/google/agera/commits/5555880a4997cacc83fd9bbd8be8cd01d8d7cc77","html_url":"https://github.com/google/agera/commit/5555880a4997cacc83fd9bbd8be8cd01d8d7cc77","comments_url":"https://api.github.com/repos/google/agera/commits/5555880a4997cacc83fd9bbd8be8cd01d8d7cc77/comments","author":{"login":"ernstsson","id":378389,"avatar_url":"https://avatars2.githubusercontent.com/u/378389?v=3","gravatar_id":"","url":"https://api.github.com/users/ernstsson","html_url":"https://github.com/ernstsson","followers_url":"https://api.github.com/users/ernstsson/followers","following_url":"https://api.github.com/users/ernstsson/following{/other_user}","gists_url":"https://api.github.com/users/ernstsson/gists{/gist_id}","starred_url":"https://api.github.com/users/ernstsson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ernstsson/subscriptions","organizations_url":"https://api.github.com/users/ernstsson/orgs","repos_url":"https://api.github.com/users/ernstsson/repos","events_url":"https://api.github.com/users/ernstsson/events{/privacy}","received_events_url":"https://api.github.com/users/ernstsson/received_events","type":"User","site_admin":false},"committer":{"login":"ernstsson","id":378389,"avatar_url":"https://avatars2.githubusercontent.com/u/378389?v=3","gravatar_id":"","url":"https://api.github.com/users/ernstsson","html_url":"https://github.com/ernstsson","followers_url":"https://api.github.com/users/ernstsson/followers","following_url":"https://api.github.com/users/ernstsson/following{/other_user}","gists_url":"https://api.github.com/users/ernstsson/gists{/gist_id}","starred_url":"https://api.github.com/users/ernstsson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ernstsson/subscriptions","organizations_url":"https://api.github.com/users/ernstsson/orgs","repos_url":"https://api.github.com/users/ernstsson/repos","events_url":"https://api.github.com/users/ernstsson/events{/privacy}","received_events_url":"https://api.github.com/users/ernstsson/received_events","type":"User","site_admin":false},"parents":[{"sha":"45df37bbf4dbc7fa1a4f673da47e283ce2979183","url":"https://api.github.com/repos/google/agera/commits/45df37bbf4dbc7fa1a4f673da47e283ce2979183","html_url":"https://github.com/google/agera/commit/45df37bbf4dbc7fa1a4f673da47e283ce2979183"}],"stats":{"total":225,"additions":224,"deletions":1},"files":[{"sha":"b1666e2eac0ee69cb1a787628917b0814c79c46f","filename":"agera/src/main/java/com/google/android/agera/Result.java","status":"modified","additions":90,"deletions":0,"changes":90,"blob_url":"https://github.com/google/agera/blob/5555880a4997cacc83fd9bbd8be8cd01d8d7cc77/agera/src/main/java/com/google/android/agera/Result.java","raw_url":"https://github.com/google/agera/raw/5555880a4997cacc83fd9bbd8be8cd01d8d7cc77/agera/src/main/java/com/google/android/agera/Result.java","contents_url":"https://api.github.com/repos/google/agera/contents/agera/src/main/java/com/google/android/agera/Result.java?ref=5555880a4997cacc83fd9bbd8be8cd01d8d7cc77","patch":"@@ -254,6 +254,51 @@ public Throwable failureOrNull() {\n   }\n \n   /**\n+   * Binds the output value with {@code bindValue} using {@code binder} if the attempt has failed;\n+   * otherwise does nothing.\n+   *\n+   * @return This instance, for chaining.\n+   */\n+  @NonNull\n+  public <U> Result<T> ifFailedBind(@NonNull final U bindValue,\n+      @NonNull final Binder<Throwable, ? super U> binder) {\n+    if (failure != null) {\n+      binder.bind(failure, bindValue);\n+    }\n+    return this;\n+  }\n+\n+  /**\n+   * Binds the output value with {@code bindValue} using {@code binder} if the failure is absent;\n+   * otherwise does nothing.\n+   *\n+   * @return This instance, for chaining.\n+   */\n+  @NonNull\n+  public <U> Result<T> ifAbsentFailureBind(@NonNull final U bindValue,\n+      @NonNull final Binder<Throwable, ? super U> binder) {\n+    if (failure == ABSENT_THROWABLE) {\n+      binder.bind(failure, bindValue);\n+    }\n+    return this;\n+  }\n+\n+  /**\n+   * Binds the output value with {@code bindValue} using {@code binder} if the attempt has failed,\n+   * except for the failure absent; otherwise does nothing.\n+   *\n+   * @return This instance, for chaining.\n+   */\n+  @NonNull\n+  public <U> Result<T> ifNonAbsentFailureBind(@NonNull final U bindValue,\n+      @NonNull final Binder<Throwable, ? super U> binder) {\n+    if (failure != null && failure != ABSENT_THROWABLE) {\n+      binder.bind(failure, bindValue);\n+    }\n+    return this;\n+  }\n+\n+  /**\n    * Binds the output value with the value from the {@code supplier} using {@code binder} if the\n    * attempt has succeeded; otherwise does nothing, not calling either the binder or the supplier.\n    *\n@@ -269,6 +314,51 @@ public Throwable failureOrNull() {\n   }\n \n   /**\n+   * Binds the output value with the value from the {@code supplier} using {@code binder} if the\n+   * attempt has failed; otherwise does nothing.\n+   *\n+   * @return This instance, for chaining.\n+   */\n+  @NonNull\n+  public <U> Result<T> ifFailedBindFrom(@NonNull final Supplier<U> supplier,\n+      @NonNull final Binder<Throwable, ? super U> binder) {\n+    if (failure != null) {\n+      binder.bind(failure, supplier.get());\n+    }\n+    return this;\n+  }\n+\n+  /**\n+   * Binds the output value with the value from the {@code supplier} using {@code binder} if the\n+   * failure is absent; otherwise does nothing.\n+   *\n+   * @return This instance, for chaining.\n+   */\n+  @NonNull\n+  public <U> Result<T> ifAbsentFailureBindFrom(@NonNull final Supplier<U> supplier,\n+      @NonNull final Binder<Throwable, ? super U> binder) {\n+    if (failure == ABSENT_THROWABLE) {\n+      binder.bind(failure, supplier.get());\n+    }\n+    return this;\n+  }\n+\n+  /**\n+   * Binds the output value with the value from the {@code supplier} using {@code binder} if the\n+   * attempt has failed, except for the failure absent; otherwise does nothing.\n+   *\n+   * @return This instance, for chaining.\n+   */\n+  @NonNull\n+  public <U> Result<T> ifNonAbsentFailureBindFrom(@NonNull final Supplier<U> supplier,\n+      @NonNull final Binder<Throwable, ? super U> binder) {\n+    if (failure != null && failure != ABSENT_THROWABLE) {\n+      binder.bind(failure, supplier.get());\n+    }\n+    return this;\n+  }\n+\n+  /**\n    * Returns a result denoting a failed attempt to obtain a value of a different type, with the same\n    * failure.\n    *"},{"sha":"683947cf0d28ede1f3e3e48a1a8add4f3e15e093","filename":"agera/src/test/java/com/google/android/agera/ResultTest.java","status":"modified","additions":134,"deletions":1,"changes":135,"blob_url":"https://github.com/google/agera/blob/5555880a4997cacc83fd9bbd8be8cd01d8d7cc77/agera/src/test/java/com/google/android/agera/ResultTest.java","raw_url":"https://github.com/google/agera/raw/5555880a4997cacc83fd9bbd8be8cd01d8d7cc77/agera/src/test/java/com/google/android/agera/ResultTest.java","contents_url":"https://api.github.com/repos/google/agera/contents/agera/src/test/java/com/google/android/agera/ResultTest.java?ref=5555880a4997cacc83fd9bbd8be8cd01d8d7cc77","patch":"@@ -80,6 +80,8 @@\n   @Mock\n   private Receiver<Throwable> mockThrowableReceiver;\n   @Mock\n+  private Binder<Throwable, String> mockThrowableStringBinder;\n+  @Mock\n   private Supplier<Integer> mockOtherValueSupplier;\n   @Mock\n   private Supplier<Result<Integer>> mockOtherValueSuccessfulAttemptSupplier;\n@@ -337,6 +339,138 @@ public void shouldNotApplySendIfFailedAbsentIfSucceeded() {\n   }\n \n   @Test\n+  public void shouldApplyBindIfFailed() {\n+    failure(THROWABLE).ifFailedBind(STRING_VALUE, mockThrowableStringBinder);\n+\n+    verify(mockThrowableStringBinder).bind(THROWABLE, STRING_VALUE);\n+  }\n+\n+  @Test\n+  public void shouldApplyBindIfFailedExceptAbsent() {\n+    failure(THROWABLE).ifNonAbsentFailureBind(STRING_VALUE, mockThrowableStringBinder);\n+\n+    verify(mockThrowableStringBinder).bind(THROWABLE, STRING_VALUE);\n+  }\n+\n+  @Test\n+  public void shouldNotApplyBindIfSucceededIfAbsent() {\n+    SUCCESS_WITH_VALUE.ifNonAbsentFailureBind(STRING_VALUE, mockThrowableStringBinder);\n+\n+    verifyZeroInteractions(mockThrowableStringBinder);\n+  }\n+\n+  @Test\n+  public void shouldNotApplyBindIfFailedIfSucceeded() {\n+    SUCCESS_WITH_VALUE.ifFailedBind(STRING_VALUE, mockThrowableStringBinder);\n+\n+    verifyZeroInteractions(mockThrowableStringBinder);\n+  }\n+\n+  @Test\n+  public void shouldNotApplyBindIfFailedExceptAbsentIfSucceeded() {\n+    SUCCESS_WITH_VALUE.ifFailedBind(STRING_VALUE, mockThrowableStringBinder);\n+\n+    verifyZeroInteractions(mockThrowableStringBinder);\n+  }\n+\n+  @Test\n+  public void shouldNotApplyBindIfFailedExceptAbsentIfAbsent() {\n+    absent().ifNonAbsentFailureBind(STRING_VALUE, mockThrowableStringBinder);\n+\n+    verifyZeroInteractions(mockThrowableStringBinder);\n+  }\n+\n+  @Test\n+  public void shouldApplyBindIfFailedAbsent() {\n+    absent().ifAbsentFailureBind(STRING_VALUE, mockThrowableStringBinder);\n+\n+    verify(mockThrowableStringBinder).bind(absent().getFailure(), STRING_VALUE);\n+  }\n+\n+  @Test\n+  public void shouldNotApplyBindIfFailedAbsentIfAbsent() {\n+    failure(THROWABLE).ifAbsentFailureBind(STRING_VALUE, mockThrowableStringBinder);\n+\n+    verifyZeroInteractions(mockThrowableStringBinder);\n+  }\n+\n+  @Test\n+  public void shouldNotApplyBindIfFailedAbsentIfSucceeded() {\n+    failure(THROWABLE).ifAbsentFailureBind(STRING_VALUE, mockThrowableStringBinder);\n+\n+    verifyZeroInteractions(mockThrowableStringBinder);\n+  }\n+\n+  @Test\n+  public void shouldApplyBindFromIfFailed() {\n+    failure(THROWABLE).ifFailedBindFrom(mockSupplier, mockThrowableStringBinder);\n+\n+    verify(mockThrowableStringBinder).bind(THROWABLE, STRING_VALUE);\n+  }\n+\n+  @Test\n+  public void shouldApplyBindFromIfFailedExceptAbsent() {\n+    failure(THROWABLE).ifNonAbsentFailureBindFrom(mockSupplier, mockThrowableStringBinder);\n+\n+    verify(mockThrowableStringBinder).bind(THROWABLE, STRING_VALUE);\n+  }\n+\n+  @Test\n+  public void shouldNotApplyBindFromIfSucceededIfAbsent() {\n+    SUCCESS_WITH_VALUE.ifNonAbsentFailureBindFrom(mockSupplier, mockThrowableStringBinder);\n+\n+    verifyZeroInteractions(mockThrowableStringBinder);\n+    verifyZeroInteractions(mockSupplier);\n+  }\n+\n+  @Test\n+  public void shouldNotApplyBindFromIfFailedIfSucceeded() {\n+    SUCCESS_WITH_VALUE.ifFailedBindFrom(mockSupplier, mockThrowableStringBinder);\n+\n+    verifyZeroInteractions(mockThrowableStringBinder);\n+    verifyZeroInteractions(mockSupplier);\n+  }\n+\n+  @Test\n+  public void shouldNotApplyBindFromIfFailedExceptAbsentIfSucceeded() {\n+    SUCCESS_WITH_VALUE.ifFailedBindFrom(mockSupplier, mockThrowableStringBinder);\n+\n+    verifyZeroInteractions(mockThrowableStringBinder);\n+    verifyZeroInteractions(mockSupplier);\n+  }\n+\n+  @Test\n+  public void shouldNotApplyBindFromIfFailedExceptAbsentIfAbsent() {\n+    absent().ifNonAbsentFailureBindFrom(mockSupplier, mockThrowableStringBinder);\n+\n+    verifyZeroInteractions(mockThrowableStringBinder);\n+    verifyZeroInteractions(mockSupplier);\n+  }\n+\n+  @Test\n+  public void shouldApplyBindFromIfFailedAbsent() {\n+    absent().ifAbsentFailureBindFrom(mockSupplier, mockThrowableStringBinder);\n+\n+    verify(mockThrowableStringBinder).bind(absent().getFailure(), STRING_VALUE);\n+  }\n+\n+  @Test\n+  public void shouldNotApplyBindFromIfFailedAbsentIfAbsent() {\n+    failure(THROWABLE).ifAbsentFailureBindFrom(mockSupplier, mockThrowableStringBinder);\n+\n+    verifyZeroInteractions(mockThrowableStringBinder);\n+    verifyZeroInteractions(mockSupplier);\n+  }\n+\n+  @Test\n+  public void shouldNotApplyBindFromIfFailedAbsentIfSucceeded() {\n+    failure(THROWABLE).ifAbsentFailureBindFrom(mockSupplier, mockThrowableStringBinder);\n+\n+    verifyZeroInteractions(mockThrowableStringBinder);\n+    verifyZeroInteractions(mockSupplier);\n+  }\n+\n+  @Test\n   public void shouldAllowForChainedCallsToSendIfFailed() {\n     assertThat(SUCCESS_WITH_VALUE.ifSucceededSendTo(mockReceiver),\n         sameInstance(SUCCESS_WITH_VALUE));\n@@ -534,7 +668,6 @@ public void shouldVerifyEqualsForSqlDeleteRequest() {\n     EqualsVerifier.forClass(Result.class).verify();\n   }\n \n-\n   @Test\n   public void shouldPrintStringRepresentationForSuccess() {\n     assertThat(SUCCESS_WITH_VALUE, hasToString(not(isEmptyOrNullString())));"}]}