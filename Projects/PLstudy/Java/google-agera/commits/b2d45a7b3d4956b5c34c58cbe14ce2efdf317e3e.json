{
  "sha": "b2d45a7b3d4956b5c34c58cbe14ce2efdf317e3e",
  "commit": {
    "author": {
      "name": "Magnus Ernstsson",
      "email": "magnus@ernstsson.net",
      "date": "2016-12-19T10:23:37Z"
    },
    "committer": {
      "name": "GitHub",
      "email": "noreply@github.com",
      "date": "2016-12-19T10:23:37Z"
    },
    "message": "Removed unorthodox use of repository in NotesStore (#126)",
    "tree": {
      "sha": "45834a61cc93a2d9462116ed595eeff513a47a24",
      "url": "https://api.github.com/repos/google/agera/git/trees/45834a61cc93a2d9462116ed595eeff513a47a24"
    },
    "url": "https://api.github.com/repos/google/agera/git/commits/b2d45a7b3d4956b5c34c58cbe14ce2efdf317e3e",
    "comment_count": 0
  },
  "url": "https://api.github.com/repos/google/agera/commits/b2d45a7b3d4956b5c34c58cbe14ce2efdf317e3e",
  "html_url": "https://github.com/google/agera/commit/b2d45a7b3d4956b5c34c58cbe14ce2efdf317e3e",
  "comments_url": "https://api.github.com/repos/google/agera/commits/b2d45a7b3d4956b5c34c58cbe14ce2efdf317e3e/comments",
  "author": {
    "login": "ernstsson",
    "id": 378389,
    "avatar_url": "https://avatars2.githubusercontent.com/u/378389?v=3",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ernstsson",
    "html_url": "https://github.com/ernstsson",
    "followers_url": "https://api.github.com/users/ernstsson/followers",
    "following_url": "https://api.github.com/users/ernstsson/following{/other_user}",
    "gists_url": "https://api.github.com/users/ernstsson/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ernstsson/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ernstsson/subscriptions",
    "organizations_url": "https://api.github.com/users/ernstsson/orgs",
    "repos_url": "https://api.github.com/users/ernstsson/repos",
    "events_url": "https://api.github.com/users/ernstsson/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ernstsson/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "web-flow",
    "id": 19864447,
    "avatar_url": "https://avatars0.githubusercontent.com/u/19864447?v=3",
    "gravatar_id": "",
    "url": "https://api.github.com/users/web-flow",
    "html_url": "https://github.com/web-flow",
    "followers_url": "https://api.github.com/users/web-flow/followers",
    "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
    "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
    "organizations_url": "https://api.github.com/users/web-flow/orgs",
    "repos_url": "https://api.github.com/users/web-flow/repos",
    "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
    "received_events_url": "https://api.github.com/users/web-flow/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "96e0902ae0248942a07da130058537baf4048391",
      "url": "https://api.github.com/repos/google/agera/commits/96e0902ae0248942a07da130058537baf4048391",
      "html_url": "https://github.com/google/agera/commit/96e0902ae0248942a07da130058537baf4048391"
    }
  ],
  "stats": {
    "total": 106,
    "additions": 45,
    "deletions": 61
  },
  "files": [
    {
      "sha": "7cce248c769508cb3a7650f1edeb757ee3ee86cf",
      "filename": "testapp/src/main/java/com/google/android/agera/testapp/NotesStore.java",
      "status": "modified",
      "additions": 45,
      "deletions": 61,
      "changes": 106,
      "blob_url": "https://github.com/google/agera/blob/b2d45a7b3d4956b5c34c58cbe14ce2efdf317e3e/testapp/src/main/java/com/google/android/agera/testapp/NotesStore.java",
      "raw_url": "https://github.com/google/agera/raw/b2d45a7b3d4956b5c34c58cbe14ce2efdf317e3e/testapp/src/main/java/com/google/android/agera/testapp/NotesStore.java",
      "contents_url": "https://api.github.com/repos/google/agera/contents/testapp/src/main/java/com/google/android/agera/testapp/NotesStore.java?ref=b2d45a7b3d4956b5c34c58cbe14ce2efdf317e3e",
      "patch": "@@ -16,11 +16,9 @@\n package com.google.android.agera.testapp;\n \n import static com.google.android.agera.Functions.staticFunction;\n-import static com.google.android.agera.Mergers.staticMerger;\n+import static com.google.android.agera.Observables.updateDispatcher;\n import static com.google.android.agera.Repositories.repositoryWithInitialValue;\n import static com.google.android.agera.RepositoryConfig.SEND_INTERRUPT;\n-import static com.google.android.agera.Reservoirs.reservoir;\n-import static com.google.android.agera.Result.failure;\n import static com.google.android.agera.database.SqlDatabaseFunctions.databaseDeleteFunction;\n import static com.google.android.agera.database.SqlDatabaseFunctions.databaseInsertFunction;\n import static com.google.android.agera.database.SqlDatabaseFunctions.databaseQueryFunction;\n@@ -34,16 +32,16 @@\n import static com.google.android.agera.testapp.NotesSqlDatabaseSupplier.NOTES_NOTE_ID_COLUMN;\n import static com.google.android.agera.testapp.NotesSqlDatabaseSupplier.NOTES_TABLE;\n import static com.google.android.agera.testapp.NotesSqlDatabaseSupplier.databaseSupplier;\n+import static java.lang.String.valueOf;\n import static java.util.Collections.emptyList;\n import static java.util.concurrent.Executors.newSingleThreadExecutor;\n \n import com.google.android.agera.Function;\n-import com.google.android.agera.Merger;\n-import com.google.android.agera.Observable;\n import com.google.android.agera.Receiver;\n import com.google.android.agera.Repository;\n import com.google.android.agera.Reservoir;\n import com.google.android.agera.Result;\n+import com.google.android.agera.UpdateDispatcher;\n import com.google.android.agera.database.SqlDeleteRequest;\n import com.google.android.agera.database.SqlInsertRequest;\n import com.google.android.agera.database.SqlUpdateRequest;\n@@ -72,18 +70,26 @@\n   private static NotesStore notesStore;\n \n   @NonNull\n-  private final Receiver<Object> writeRequestReceiver;\n-  @NonNull\n   private final Repository<List<Note>> notesRepository;\n+  @NonNull\n+  private final Receiver<SqlInsertRequest> insert;\n+  @NonNull\n+  private final Receiver<SqlUpdateRequest> update;\n+  @NonNull\n+  private final Receiver<SqlDeleteRequest> delete;\n \n   private NotesStore(@NonNull final Repository<List<Note>> notesRepository,\n-      @NonNull final Receiver<Object> writeRequestReceiver) {\n-    this.writeRequestReceiver = writeRequestReceiver;\n+      @NonNull final Receiver<SqlInsertRequest> insert,\n+      @NonNull final Receiver<SqlUpdateRequest> update,\n+      @NonNull final Receiver<SqlDeleteRequest> delete) {\n+    this.insert = insert;\n+    this.update = update;\n+    this.delete = delete;\n     this.notesRepository = notesRepository;\n   }\n \n   @NonNull\n-  public synchronized static NotesStore notesStore(@NonNull final Context applicationContext) {\n+  synchronized static NotesStore notesStore(@NonNull final Context applicationContext) {\n     if (notesStore != null) {\n       return notesStore;\n     }\n@@ -102,48 +108,26 @@ public synchronized static NotesStore notesStore(@NonNull final Context applicat\n     final Function<SqlDeleteRequest, Result<Integer>> deleteNoteFunction =\n         databaseDeleteFunction(databaseSupplier);\n \n-    // Create a reservoir of database write requests. This will be used as the receiver of write\n-    // requests submitted to the NotesStore, and the event/data source of the reacting repository.\n-    final Reservoir<Object> writeRequestReservoir = reservoir();\n-\n-    // Create a reacting repository that processes all write requests. The value of the repository\n-    // is unimportant, but it must be able to notify the notes repository on completing each write\n-    // operation. The database thread executor is single-threaded to optimize for disk I/O, but if\n-    // the executor can be multi-threaded, then this is the ideal place to multiply the reacting\n-    // repository to achieve parallelism. The notes repository should observe all these instances.\n-    final Number unimportantValue = 0;\n-    final Merger<Number, Number, Boolean> alwaysNotify = staticMerger(true);\n-    final Observable writeReaction = repositoryWithInitialValue(unimportantValue)\n-        .observe(writeRequestReservoir)\n-        .onUpdatesPerLoop()\n-        .goTo(executor)\n-        .attemptGetFrom(writeRequestReservoir).orSkip()\n-        .thenAttemptTransform(input -> {\n-          if (input instanceof SqlInsertRequest) {\n-            return insertNoteFunction.apply((SqlInsertRequest) input);\n-          }\n-          if (input instanceof SqlUpdateRequest) {\n-            return updateNoteFunction.apply((SqlUpdateRequest) input);\n-          }\n-          if (input instanceof SqlDeleteRequest) {\n-            return deleteNoteFunction.apply((SqlDeleteRequest) input);\n-          }\n-          return failure();\n-        }).orSkip()\n-        .notifyIf(alwaysNotify)\n-        .compile();\n-\n-    // Keep the reacting repository in this lazy singleton activated for the full app life cycle.\n-    // This is optional -- it allows the write requests submitted when the notes repository is not\n-    // active to still be processed asap.\n-    writeReaction.addUpdatable(() -> {});\n-\n-    // Create the repository of notes, wire it up to update on each database write, set it to fetch\n-    // notes from the database on the database thread executor.\n+    final UpdateDispatcher updateDispatcher = updateDispatcher();\n+\n+    final Receiver<SqlDeleteRequest> delete = value -> executor.execute(() -> {\n+      deleteNoteFunction.apply(value);\n+      updateDispatcher.update();\n+    });\n+\n+    final Receiver<SqlUpdateRequest> update = value -> executor.execute(() -> {\n+      updateNoteFunction.apply(value);\n+      updateDispatcher.update();\n+    });\n+\n+    final Receiver<SqlInsertRequest> insert = value -> executor.execute(() -> {\n+      insertNoteFunction.apply(value);\n+      updateDispatcher.update();\n+    });\n \n     // Create the wired up notes store\n     notesStore = new NotesStore(repositoryWithInitialValue(INITIAL_VALUE)\n-        .observe(writeReaction)\n+        .observe(updateDispatcher)\n         .onUpdatesPerLoop()\n         .goTo(executor)\n         .getFrom(() -> sqlRequest().sql(GET_NOTES_FROM_TABLE).compile())\n@@ -152,41 +136,41 @@ public synchronized static NotesStore notesStore(@NonNull final Context applicat\n         .orEnd(staticFunction(INITIAL_VALUE))\n         .onConcurrentUpdate(SEND_INTERRUPT)\n         .onDeactivation(SEND_INTERRUPT)\n-        .compile(), writeRequestReservoir);\n+        .compile(), insert, update, delete);\n     return notesStore;\n   }\n \n   @NonNull\n-  public Repository<List<Note>> getNotesRepository() {\n+  Repository<List<Note>> getNotesRepository() {\n     return notesRepository;\n   }\n \n-  public void insertNoteFromText(@NonNull final String noteText) {\n-    writeRequestReceiver.accept(sqlInsertRequest()\n+  void insertNoteFromText(@NonNull final String noteText) {\n+    insert.accept(sqlInsertRequest()\n         .table(NOTES_TABLE)\n         .column(NOTES_NOTE_COLUMN, noteText)\n         .compile());\n   }\n \n-  public void deleteNote(@NonNull final Note note) {\n-    writeRequestReceiver.accept(sqlDeleteRequest()\n+  void deleteNote(@NonNull final Note note) {\n+    delete.accept(sqlDeleteRequest()\n         .table(NOTES_TABLE)\n         .where(MODIFY_NOTE_WHERE)\n-        .arguments(String.valueOf(note.getId()))\n+        .arguments(valueOf(note.getId()))\n         .compile());\n   }\n \n-  public void updateNote(@NonNull final Note note, @NonNull final String noteText) {\n-    writeRequestReceiver.accept(sqlUpdateRequest()\n+  void updateNote(@NonNull final Note note, @NonNull final String noteText) {\n+    update.accept(sqlUpdateRequest()\n         .table(NOTES_TABLE)\n         .column(NOTES_NOTE_COLUMN, noteText)\n         .where(MODIFY_NOTE_WHERE)\n-        .arguments(String.valueOf(note.getId()))\n+        .arguments(valueOf(note.getId()))\n         .compile());\n   }\n \n-  public void clearNotes() {\n-    writeRequestReceiver.accept(sqlDeleteRequest()\n+  void clearNotes() {\n+    delete.accept(sqlDeleteRequest()\n         .table(NOTES_TABLE)\n         .compile());\n   }"
    }
  ]
}
