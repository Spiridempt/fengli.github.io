{"sha":"bbf914627a36ff5b61828ae8842adf4d3309c109","commit":{"author":{"name":"Magnus Ernstsson","email":"magnus@ernstsson.net","date":"2016-05-14T17:40:32Z"},"committer":{"name":"Magnus Ernstsson","email":"magnus@ernstsson.net","date":"2016-05-14T17:40:32Z"},"message":"Added sql request compiler tests","tree":{"sha":"3772d63f680054dbde36ce4b613e36931559a6d8","url":"https://api.github.com/repos/google/agera/git/trees/3772d63f680054dbde36ce4b613e36931559a6d8"},"url":"https://api.github.com/repos/google/agera/git/commits/bbf914627a36ff5b61828ae8842adf4d3309c109","comment_count":0},"url":"https://api.github.com/repos/google/agera/commits/bbf914627a36ff5b61828ae8842adf4d3309c109","html_url":"https://github.com/google/agera/commit/bbf914627a36ff5b61828ae8842adf4d3309c109","comments_url":"https://api.github.com/repos/google/agera/commits/bbf914627a36ff5b61828ae8842adf4d3309c109/comments","author":{"login":"ernstsson","id":378389,"avatar_url":"https://avatars2.githubusercontent.com/u/378389?v=3","gravatar_id":"","url":"https://api.github.com/users/ernstsson","html_url":"https://github.com/ernstsson","followers_url":"https://api.github.com/users/ernstsson/followers","following_url":"https://api.github.com/users/ernstsson/following{/other_user}","gists_url":"https://api.github.com/users/ernstsson/gists{/gist_id}","starred_url":"https://api.github.com/users/ernstsson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ernstsson/subscriptions","organizations_url":"https://api.github.com/users/ernstsson/orgs","repos_url":"https://api.github.com/users/ernstsson/repos","events_url":"https://api.github.com/users/ernstsson/events{/privacy}","received_events_url":"https://api.github.com/users/ernstsson/received_events","type":"User","site_admin":false},"committer":{"login":"ernstsson","id":378389,"avatar_url":"https://avatars2.githubusercontent.com/u/378389?v=3","gravatar_id":"","url":"https://api.github.com/users/ernstsson","html_url":"https://github.com/ernstsson","followers_url":"https://api.github.com/users/ernstsson/followers","following_url":"https://api.github.com/users/ernstsson/following{/other_user}","gists_url":"https://api.github.com/users/ernstsson/gists{/gist_id}","starred_url":"https://api.github.com/users/ernstsson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ernstsson/subscriptions","organizations_url":"https://api.github.com/users/ernstsson/orgs","repos_url":"https://api.github.com/users/ernstsson/repos","events_url":"https://api.github.com/users/ernstsson/events{/privacy}","received_events_url":"https://api.github.com/users/ernstsson/received_events","type":"User","site_admin":false},"parents":[{"sha":"37a5eb9630ab9a943ac16e0b9fc3ad30135ac3dc","url":"https://api.github.com/repos/google/agera/commits/37a5eb9630ab9a943ac16e0b9fc3ad30135ac3dc","html_url":"https://github.com/google/agera/commit/37a5eb9630ab9a943ac16e0b9fc3ad30135ac3dc"}],"stats":{"total":112,"additions":111,"deletions":1},"files":[{"sha":"f266e978835afdb9001706d233dd75c18fb85a07","filename":"extensions/database/src/test/java/com/google/android/agera/database/SqlRequestsTest.java","status":"modified","additions":111,"deletions":1,"changes":112,"blob_url":"https://github.com/google/agera/blob/bbf914627a36ff5b61828ae8842adf4d3309c109/extensions/database/src/test/java/com/google/android/agera/database/SqlRequestsTest.java","raw_url":"https://github.com/google/agera/raw/bbf914627a36ff5b61828ae8842adf4d3309c109/extensions/database/src/test/java/com/google/android/agera/database/SqlRequestsTest.java","contents_url":"https://api.github.com/repos/google/agera/contents/extensions/database/src/test/java/com/google/android/agera/database/SqlRequestsTest.java?ref=bbf914627a36ff5b61828ae8842adf4d3309c109","patch":"@@ -21,12 +21,19 @@\n import static com.google.android.agera.database.SqlRequests.sqlUpdateRequest;\n import static com.google.android.agera.database.test.matchers.HasPrivateConstructor.hasPrivateConstructor;\n import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.hamcrest.Matchers.equalTo;\n import static org.hamcrest.Matchers.hasToString;\n import static org.hamcrest.Matchers.isEmptyOrNullString;\n import static org.hamcrest.Matchers.not;\n import static org.robolectric.annotation.Config.NONE;\n \n+import com.google.android.agera.database.SqlRequestCompilerStates.DBArgumentCompile;\n+import com.google.android.agera.database.SqlRequestCompilerStates.DBColumn;\n+import com.google.android.agera.database.SqlRequestCompilerStates.DBColumnConflictCompile;\n+import com.google.android.agera.database.SqlRequestCompilerStates.DBCompile;\n+import com.google.android.agera.database.SqlRequestCompilerStates.DBSql;\n+import com.google.android.agera.database.SqlRequestCompilerStates.DBTable;\n+import com.google.android.agera.database.SqlRequestCompilerStates.DBWhereCompile;\n+\n import nl.jqno.equalsverifier.EqualsVerifier;\n import org.junit.Before;\n import org.junit.Test;\n@@ -102,6 +109,109 @@ public void shouldCreateStringRepresentationForUpdate() {\n     assertThat(sqlUpdateRequest, hasToString(not(isEmptyOrNullString())));\n   }\n \n+  @Test(expected = IllegalStateException.class)\n+  public void shouldThrowExceptionForReuseOfCompilerOfCompile() {\n+    final DBColumnConflictCompile<SqlInsertRequest, ?> incompleteRequest =\n+        sqlInsertRequest()\n+            .table(TABLE_2)\n+            .column(\"column\", \"value\");\n+    incompleteRequest.compile();\n+\n+    incompleteRequest.compile();\n+  }\n+\n+  @Test(expected = IllegalStateException.class)\n+  public void shouldThrowExceptionForReuseOfCompilerOfFailOnConflict() {\n+    final DBColumnConflictCompile<SqlInsertRequest, ?> incompleteRequest =\n+        sqlInsertRequest()\n+            .table(TABLE_2)\n+            .column(\"column\", \"value\");\n+    incompleteRequest.failOnConflict().compile();\n+\n+    incompleteRequest.failOnConflict();\n+  }\n+\n+  @Test(expected = IllegalStateException.class)\n+  public void shouldThrowExceptionForReuseOfCompilerOfIgnoreOnConflict() {\n+    final DBColumnConflictCompile<SqlInsertRequest, ?> incompleteRequest =\n+        sqlInsertRequest()\n+            .table(TABLE_2)\n+            .column(\"column\", \"value\");\n+    incompleteRequest.ignoreOnConflict().compile();\n+\n+    incompleteRequest.ignoreOnConflict();\n+  }\n+\n+  @Test(expected = IllegalStateException.class)\n+  public void shouldThrowExceptionForReuseOfCompilerOfReplaceOnConflict() {\n+    final DBColumnConflictCompile<SqlInsertRequest, ?> incompleteRequest =\n+        sqlInsertRequest()\n+            .table(TABLE_2)\n+            .column(\"column\", \"value\");\n+    incompleteRequest.replaceOnConflict().compile();\n+\n+    incompleteRequest.replaceOnConflict();\n+  }\n+\n+  @Test(expected = IllegalStateException.class)\n+  public void shouldThrowExceptionForReuseOfCompilerOfColumn() {\n+    final DBColumn<DBColumnConflictCompile<SqlInsertRequest, ?>> incompleteRequest =\n+        sqlInsertRequest()\n+            .table(TABLE_2);\n+    incompleteRequest.column(\"column\", \"value\").compile();\n+\n+    incompleteRequest.column(\"column\", \"value\");\n+  }\n+\n+  @Test(expected = IllegalStateException.class)\n+  public void shouldThrowExceptionForReuseOfCompilerOfEmptyColumn() {\n+    final DBColumn<DBColumnConflictCompile<SqlInsertRequest, ?>> incompleteRequest =\n+        sqlInsertRequest()\n+            .table(TABLE_2);\n+    incompleteRequest.emptyColumn(\"column\").compile();\n+\n+    incompleteRequest.emptyColumn(\"column\");\n+  }\n+\n+  @Test(expected = IllegalStateException.class)\n+  public void shouldThrowExceptionForReuseOfCompilerOfTable() {\n+    final DBTable<DBColumn<DBColumnConflictCompile<SqlInsertRequest, ?>>>\n+        incompleteRequest = sqlInsertRequest();\n+    incompleteRequest.table(TABLE).column(\"column\", \"value\").compile();\n+\n+    incompleteRequest.table(TABLE);\n+  }\n+\n+  @Test(expected = IllegalStateException.class)\n+  public void shouldThrowExceptionForReuseOfCompilerOfSql() {\n+    final DBSql<DBArgumentCompile<SqlRequest, DBArgumentCompile<SqlRequest, DBCompile<SqlRequest>>>>\n+        incompleteRequest = sqlRequest();\n+    incompleteRequest.sql(\"sql\").compile();\n+\n+    incompleteRequest.sql(\"sql\");\n+  }\n+\n+  @Test(expected = IllegalStateException.class)\n+  public void shouldThrowExceptionForReuseOfCompilerOfArguments() {\n+    final DBArgumentCompile<SqlRequest, DBArgumentCompile<SqlRequest, DBCompile<SqlRequest>>>\n+        incompleteRequest = sqlRequest().sql(\"sql\");\n+    incompleteRequest.arguments(\"arg\", \"arg\").compile();\n+\n+    incompleteRequest.arguments(\"arg\", \"arg\");\n+  }\n+\n+\n+  @Test(expected = IllegalStateException.class)\n+  public void shouldThrowExceptionForReuseOfCompilerOfWhere() {\n+    final DBWhereCompile<SqlDeleteRequest,\n+        DBArgumentCompile<SqlDeleteRequest, DBCompile<SqlDeleteRequest>>>\n+        incompleteRequest = sqlDeleteRequest()\n+        .table(TABLE);\n+    incompleteRequest.where(\"column=a\").compile();\n+\n+    incompleteRequest.where(\"column=a\");\n+  }\n+\n   @Test\n   public void shouldVerifyEqualsForSqlRequest() {\n     EqualsVerifier.forClass(SqlRequest.class).verify();"}]}