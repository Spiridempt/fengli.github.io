{
  "sha": "30b98a19ec0c0f775489e9a03be8ff1d89ae9a77",
  "commit": {
    "author": {
      "name": "Magnus Ernstsson",
      "email": "magnus@ernstsson.net",
      "date": "2016-05-12T18:54:04Z"
    },
    "committer": {
      "name": "Magnus Ernstsson",
      "email": "magnus@ernstsson.net",
      "date": "2016-05-12T18:54:04Z"
    },
    "message": "Added missing nonnull/finals",
    "tree": {
      "sha": "cedeaadc4a56d476ca7fa17e28dbe15d20a86343",
      "url": "https://api.github.com/repos/google/agera/git/trees/cedeaadc4a56d476ca7fa17e28dbe15d20a86343"
    },
    "url": "https://api.github.com/repos/google/agera/git/commits/30b98a19ec0c0f775489e9a03be8ff1d89ae9a77",
    "comment_count": 0
  },
  "url": "https://api.github.com/repos/google/agera/commits/30b98a19ec0c0f775489e9a03be8ff1d89ae9a77",
  "html_url": "https://github.com/google/agera/commit/30b98a19ec0c0f775489e9a03be8ff1d89ae9a77",
  "comments_url": "https://api.github.com/repos/google/agera/commits/30b98a19ec0c0f775489e9a03be8ff1d89ae9a77/comments",
  "author": {
    "login": "ernstsson",
    "id": 378389,
    "avatar_url": "https://avatars2.githubusercontent.com/u/378389?v=3",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ernstsson",
    "html_url": "https://github.com/ernstsson",
    "followers_url": "https://api.github.com/users/ernstsson/followers",
    "following_url": "https://api.github.com/users/ernstsson/following{/other_user}",
    "gists_url": "https://api.github.com/users/ernstsson/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ernstsson/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ernstsson/subscriptions",
    "organizations_url": "https://api.github.com/users/ernstsson/orgs",
    "repos_url": "https://api.github.com/users/ernstsson/repos",
    "events_url": "https://api.github.com/users/ernstsson/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ernstsson/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "ernstsson",
    "id": 378389,
    "avatar_url": "https://avatars2.githubusercontent.com/u/378389?v=3",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ernstsson",
    "html_url": "https://github.com/ernstsson",
    "followers_url": "https://api.github.com/users/ernstsson/followers",
    "following_url": "https://api.github.com/users/ernstsson/following{/other_user}",
    "gists_url": "https://api.github.com/users/ernstsson/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ernstsson/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ernstsson/subscriptions",
    "organizations_url": "https://api.github.com/users/ernstsson/orgs",
    "repos_url": "https://api.github.com/users/ernstsson/repos",
    "events_url": "https://api.github.com/users/ernstsson/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ernstsson/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "b541a376c917e4e0df7a8b9e95ea5b9cf39aa261",
      "url": "https://api.github.com/repos/google/agera/commits/b541a376c917e4e0df7a8b9e95ea5b9cf39aa261",
      "html_url": "https://github.com/google/agera/commit/b541a376c917e4e0df7a8b9e95ea5b9cf39aa261"
    }
  ],
  "stats": {
    "total": 118,
    "additions": 72,
    "deletions": 46
  },
  "files": [
    {
      "sha": "a805234eb3d378d52c25c8b143474299478677a7",
      "filename": "agera/src/main/java/com/google/android/agera/CompiledRepository.java",
      "status": "modified",
      "additions": 24,
      "deletions": 27,
      "changes": 51,
      "blob_url": "https://github.com/google/agera/blob/30b98a19ec0c0f775489e9a03be8ff1d89ae9a77/agera/src/main/java/com/google/android/agera/CompiledRepository.java",
      "raw_url": "https://github.com/google/agera/raw/30b98a19ec0c0f775489e9a03be8ff1d89ae9a77/agera/src/main/java/com/google/android/agera/CompiledRepository.java",
      "contents_url": "https://api.github.com/repos/google/agera/contents/agera/src/main/java/com/google/android/agera/CompiledRepository.java?ref=30b98a19ec0c0f775489e9a03be8ff1d89ae9a77",
      "patch": "@@ -49,9 +49,9 @@ static Repository compiledRepository(\n       @NonNull final Merger<Object, Object, Boolean> notifyChecker,\n       @RepositoryConfig final int concurrentUpdateConfig,\n       @RepositoryConfig final int deactivationConfig) {\n-    Observable eventSource = perMillisecondObservable(frequency,\n+    final Observable eventSource = perMillisecondObservable(frequency,\n         compositeObservable(eventSources.toArray(new Observable[eventSources.size()])));\n-    Object[] directiveArray = directives.toArray();\n+    final Object[] directiveArray = directives.toArray();\n     return new CompiledRepository(initialValue, eventSource,\n         directiveArray, notifyChecker, deactivationConfig, concurrentUpdateConfig);\n   }\n@@ -270,7 +270,7 @@ private void runFlowFrom(final int index, final boolean asynchronously) {\n     final int length = directives.length;\n     int i = index;\n     while (0 <= i && i < length) {\n-      int directiveType = (Integer) directives[i];\n+      final int directiveType = (Integer) directives[i];\n       if (asynchronously || directiveType == GO_TO || directiveType == GO_LAZY) {\n         // Check cancellation before running the next directive. This needs to be done while locked.\n         // For goTo and goLazy, because they need to change the states and suspend the flow, they\n@@ -332,7 +332,7 @@ static void addGetFrom(@NonNull final Supplier supplier,\n   }\n \n   private int runGetFrom(@NonNull final Object[] directives, final int index) {\n-    Supplier supplier = (Supplier) directives[index + 1];\n+    final Supplier supplier = (Supplier) directives[index + 1];\n     intermediateValue = checkNotNull(supplier.get());\n     return index + 2;\n   }\n@@ -345,8 +345,8 @@ static void addMergeIn(@NonNull final Supplier supplier, @NonNull final Merger m\n   }\n \n   private int runMergeIn(@NonNull final Object[] directives, final int index) {\n-    Supplier supplier = (Supplier) directives[index + 1];\n-    Merger merger = (Merger) directives[index + 2];\n+    final Supplier supplier = (Supplier) directives[index + 1];\n+    final Merger merger = (Merger) directives[index + 2];\n     intermediateValue = checkNotNull(merger.merge(intermediateValue, supplier.get()));\n     return index + 3;\n   }\n@@ -358,7 +358,7 @@ static void addTransform(@NonNull final Function function,\n   }\n \n   private int runTransform(@NonNull final Object[] directives, final int index) {\n-    Function function = (Function) directives[index + 1];\n+    final Function function = (Function) directives[index + 1];\n     intermediateValue = checkNotNull(function.apply(intermediateValue));\n     return index + 2;\n   }\n@@ -374,11 +374,11 @@ static void addCheck(@NonNull final Function caseFunction,\n   }\n \n   private int runCheck(@NonNull final Object[] directives, final int index) {\n-    Function caseFunction = (Function) directives[index + 1];\n-    Predicate casePredicate = (Predicate) directives[index + 2];\n-    Function terminatingValueFunction = (Function) directives[index + 3];\n+    final Function caseFunction = (Function) directives[index + 1];\n+    final Predicate casePredicate = (Predicate) directives[index + 2];\n+    final Function terminatingValueFunction = (Function) directives[index + 3];\n \n-    Object caseValue = caseFunction.apply(intermediateValue);\n+    final Object caseValue = caseFunction.apply(intermediateValue);\n     if (casePredicate.apply(caseValue)) {\n       return index + 4;\n     } else {\n@@ -387,8 +387,7 @@ private int runCheck(@NonNull final Object[] directives, final int index) {\n     }\n   }\n \n-  static void addGoTo(@NonNull final Executor executor,\n-      @NonNull final List<Object> directives) {\n+  static void addGoTo(@NonNull final Executor executor, @NonNull final List<Object> directives) {\n     directives.add(GO_TO);\n     directives.add(executor);\n   }\n@@ -413,8 +412,7 @@ private static int continueFromGoLazy(@NonNull final Object[] directives, final\n     return index + 1;\n   }\n \n-  static void addSendTo(@NonNull final Receiver receiver,\n-      @NonNull final List<Object> directives) {\n+  static void addSendTo(@NonNull final Receiver receiver, @NonNull final List<Object> directives) {\n     directives.add(SEND_TO);\n     directives.add(receiver);\n   }\n@@ -433,8 +431,8 @@ static void addBindWith(@NonNull final Supplier supplier, @NonNull final Binder\n   }\n \n   private int runBindWith(@NonNull final Object[] directives, final int index) {\n-    Supplier supplier = (Supplier) directives[index + 1];\n-    Binder binder = (Binder) directives[index + 2];\n+    final Supplier supplier = (Supplier) directives[index + 1];\n+    final Binder binder = (Binder) directives[index + 2];\n     binder.bind(intermediateValue, supplier.get());\n     return index + 3;\n   }\n@@ -446,9 +444,8 @@ static void addFilterSuccess(\n   }\n \n   private int runFilterSuccess(@NonNull final Object[] directives, final int index) {\n-    Function terminatingValueFunction = (Function) directives[index + 1];\n-\n-    Result tryValue = (Result) intermediateValue;\n+    final Function terminatingValueFunction = (Function) directives[index + 1];\n+    final Result tryValue = (Result) intermediateValue;\n     if (tryValue.succeeded()) {\n       intermediateValue = tryValue.get();\n       return index + 2;\n@@ -467,13 +464,13 @@ private void runTerminate(@NonNull final Object caseValue,\n     }\n   }\n \n-  static void addEnd(boolean skip, @NonNull final List<Object> directives) {\n+  static void addEnd(final boolean skip, @NonNull final List<Object> directives) {\n     directives.add(END);\n     directives.add(skip);\n   }\n \n   private int runEnd(@NonNull final Object[] directives, final int index) {\n-    boolean skip = (Boolean) directives[index + 1];\n+    final boolean skip = (Boolean) directives[index + 1];\n     if (skip) {\n       skipAndEndFlow();\n     } else {\n@@ -493,7 +490,7 @@ private synchronized void skipAndEndFlow() {\n   }\n \n   private synchronized void setNewValueAndEndFlow(@NonNull final Object newValue) {\n-    boolean wasRunningLazily = runState == RUNNING_LAZILY;\n+    final boolean wasRunningLazily = runState == RUNNING_LAZILY;\n     runState = IDLE;\n     intermediateValue = initialValue; // GC the intermediate value but field must be kept non-null.\n     if (wasRunningLazily) {\n@@ -505,7 +502,7 @@ private synchronized void setNewValueAndEndFlow(@NonNull final Object newValue)\n   }\n \n   private void setNewValueLocked(@NonNull final Object newValue) {\n-    boolean shouldNotify = notifyChecker.merge(currentValue, newValue);\n+    final boolean shouldNotify = notifyChecker.merge(currentValue, newValue);\n     currentValue = newValue;\n     if (shouldNotify) {\n       dispatchUpdate();\n@@ -520,8 +517,8 @@ private void setPausedAtGoToLocked(final int resumeIndex) {\n   /** Called from the executor of a goTo instruction to continue processing. */\n   @Override\n   public void run() {\n-    Thread myThread = currentThread();\n-    int index;\n+    final Thread myThread = currentThread();\n+    final int index;\n     synchronized (this) {\n       index = lastDirectiveIndex;\n       checkState(runState == PAUSED_AT_GO_TO || runState == CANCEL_REQUESTED,\n@@ -562,7 +559,7 @@ private void setLazyAndEndFlowLocked(final int resumeIndex) {\n   @Override\n   public synchronized Object get() {\n     if (runState == PAUSED_AT_GO_LAZY) {\n-      int index = lastDirectiveIndex;\n+      final int index = lastDirectiveIndex;\n       runState = RUNNING_LAZILY;\n       runFlowFrom(continueFromGoLazy(directives, index), false);\n     }"
    },
    {
      "sha": "0826d0cdac49f091beb481076a7a6633e67bd45b",
      "filename": "agera/src/main/java/com/google/android/agera/Conditions.java",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/google/agera/blob/30b98a19ec0c0f775489e9a03be8ff1d89ae9a77/agera/src/main/java/com/google/android/agera/Conditions.java",
      "raw_url": "https://github.com/google/agera/raw/30b98a19ec0c0f775489e9a03be8ff1d89ae9a77/agera/src/main/java/com/google/android/agera/Conditions.java",
      "contents_url": "https://api.github.com/repos/google/agera/contents/agera/src/main/java/com/google/android/agera/Conditions.java?ref=30b98a19ec0c0f775489e9a03be8ff1d89ae9a77",
      "patch": "@@ -95,6 +95,7 @@ public static Condition all(@NonNull final Condition... conditions) {\n    * If {@link Predicates#truePredicate} or {@link Predicates#falsePredicate} is passed,\n    * {@code supplier} will never be called.\n    */\n+  @NonNull\n   public static <T> Condition predicateAsCondition(@NonNull final Predicate<T> predicate,\n       @NonNull final Supplier<? extends T> supplier) {\n     if (predicate == TRUE_CONDICATE) {"
    },
    {
      "sha": "7ab90b2b59bfd4dbe5c9775c01746e49c73c9181",
      "filename": "agera/src/main/java/com/google/android/agera/FunctionCompiler.java",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/google/agera/blob/30b98a19ec0c0f775489e9a03be8ff1d89ae9a77/agera/src/main/java/com/google/android/agera/FunctionCompiler.java",
      "raw_url": "https://github.com/google/agera/raw/30b98a19ec0c0f775489e9a03be8ff1d89ae9a77/agera/src/main/java/com/google/android/agera/FunctionCompiler.java",
      "contents_url": "https://api.github.com/repos/google/agera/contents/agera/src/main/java/com/google/android/agera/FunctionCompiler.java?ref=30b98a19ec0c0f775489e9a03be8ff1d89ae9a77",
      "patch": "@@ -98,6 +98,7 @@ private Function createFunction() {\n     return this;\n   }\n \n+  @NonNull\n   @Override\n   public Function thenMap(@NonNull final Function function) {\n     map(function);"
    },
    {
      "sha": "b10c23713e96ec70fdd52edd3fc4d4865ea5e691",
      "filename": "agera/src/main/java/com/google/android/agera/FunctionCompilerStates.java",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/google/agera/blob/30b98a19ec0c0f775489e9a03be8ff1d89ae9a77/agera/src/main/java/com/google/android/agera/FunctionCompilerStates.java",
      "raw_url": "https://github.com/google/agera/raw/30b98a19ec0c0f775489e9a03be8ff1d89ae9a77/agera/src/main/java/com/google/android/agera/FunctionCompilerStates.java",
      "contents_url": "https://api.github.com/repos/google/agera/contents/agera/src/main/java/com/google/android/agera/FunctionCompilerStates.java?ref=30b98a19ec0c0f775489e9a03be8ff1d89ae9a77",
      "patch": "@@ -87,11 +87,13 @@\n      */\n     @NonNull\n     <TTo> FList<TTo, List<TTo>, TFrom> map(@NonNull Function<TPrev, TTo> function);\n+\n     /**\n      * Adds a {@link Function} to the end of the behavior chain to map each item into a new type.\n      *\n      * @param function the function to apply to each item to create a new list\n      */\n+    @NonNull\n     <TTo> Function<TFrom, List<TTo>> thenMap(@NonNull Function<? super TPrev, TTo> function);\n \n     /**"
    },
    {
      "sha": "5fa1955024bf1420d437cc73278457a17cc4cef2",
      "filename": "agera/src/main/java/com/google/android/agera/RepositoryCompiler.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/google/agera/blob/30b98a19ec0c0f775489e9a03be8ff1d89ae9a77/agera/src/main/java/com/google/android/agera/RepositoryCompiler.java",
      "raw_url": "https://github.com/google/agera/raw/30b98a19ec0c0f775489e9a03be8ff1d89ae9a77/agera/src/main/java/com/google/android/agera/RepositoryCompiler.java",
      "contents_url": "https://api.github.com/repos/google/agera/contents/agera/src/main/java/com/google/android/agera/RepositoryCompiler.java?ref=30b98a19ec0c0f775489e9a03be8ff1d89ae9a77",
      "patch": "@@ -251,7 +251,7 @@ public RepositoryCompiler thenTransform(@NonNull final Function function) {\n     return this;\n   }\n \n-  private void endFlow(boolean skip) {\n+  private void endFlow(final boolean skip) {\n     addEnd(skip, directives);\n     expect = CONFIG;\n   }"
    },
    {
      "sha": "3afd6a101bcd53d6fdf32026757583713a1e3ca0",
      "filename": "agera/src/test/java/com/google/android/agera/test/SingleSlotDelayedExecutor.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/google/agera/blob/30b98a19ec0c0f775489e9a03be8ff1d89ae9a77/agera/src/test/java/com/google/android/agera/test/SingleSlotDelayedExecutor.java",
      "raw_url": "https://github.com/google/agera/raw/30b98a19ec0c0f775489e9a03be8ff1d89ae9a77/agera/src/test/java/com/google/android/agera/test/SingleSlotDelayedExecutor.java",
      "contents_url": "https://api.github.com/repos/google/agera/contents/agera/src/test/java/com/google/android/agera/test/SingleSlotDelayedExecutor.java?ref=30b98a19ec0c0f775489e9a03be8ff1d89ae9a77",
      "patch": "@@ -40,7 +40,7 @@ public boolean hasRunnable() {\n   }\n \n   public void resumeOrThrow() {\n-    Runnable runnable = this.runnable;\n+    final Runnable runnable = this.runnable;\n     assertThat(\"delayedExecutor should have queued a Runnable for resumeOrThrow()\",\n         runnable, is(notNullValue()));\n     this.runnable = null;"
    },
    {
      "sha": "76e54e44b0648572e7ad77a0472cd85459a00b97",
      "filename": "agera/src/test/java/com/google/android/agera/test/matchers/ConditionApplies.java",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/google/agera/blob/30b98a19ec0c0f775489e9a03be8ff1d89ae9a77/agera/src/test/java/com/google/android/agera/test/matchers/ConditionApplies.java",
      "raw_url": "https://github.com/google/agera/raw/30b98a19ec0c0f775489e9a03be8ff1d89ae9a77/agera/src/test/java/com/google/android/agera/test/matchers/ConditionApplies.java",
      "contents_url": "https://api.github.com/repos/google/agera/contents/agera/src/test/java/com/google/android/agera/test/matchers/ConditionApplies.java?ref=30b98a19ec0c0f775489e9a03be8ff1d89ae9a77",
      "patch": "@@ -17,6 +17,7 @@\n \n import com.google.android.agera.Condition;\n \n+import android.support.annotation.NonNull;\n import org.hamcrest.Description;\n import org.hamcrest.Factory;\n import org.hamcrest.Matcher;\n@@ -39,11 +40,13 @@ public void describeTo(final Description description) {\n     description.appendText(value ? \"applies \" : \"does not apply\");\n   }\n \n+  @NonNull\n   @Factory\n   public static Matcher<Condition> applies() {\n     return new ConditionApplies(true);\n   }\n \n+  @NonNull\n   @Factory\n   public static Matcher<Condition> doesNotApply() {\n     return new ConditionApplies(false);"
    },
    {
      "sha": "f2d42f03f390772c170847ba7a2f2215c02fe117",
      "filename": "agera/src/test/java/com/google/android/agera/test/matchers/HasHashCodeOf.java",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/google/agera/blob/30b98a19ec0c0f775489e9a03be8ff1d89ae9a77/agera/src/test/java/com/google/android/agera/test/matchers/HasHashCodeOf.java",
      "raw_url": "https://github.com/google/agera/raw/30b98a19ec0c0f775489e9a03be8ff1d89ae9a77/agera/src/test/java/com/google/android/agera/test/matchers/HasHashCodeOf.java",
      "contents_url": "https://api.github.com/repos/google/agera/contents/agera/src/test/java/com/google/android/agera/test/matchers/HasHashCodeOf.java?ref=30b98a19ec0c0f775489e9a03be8ff1d89ae9a77",
      "patch": "@@ -40,6 +40,7 @@ public void describeTo(final Description description) {\n     description.appendValue(object);\n   }\n \n+  @NonNull\n   @Factory\n   public static Matcher<Object> hasHashCodeOf(@NonNull final Object object) {\n     return new HasHashCodeOf(object);"
    },
    {
      "sha": "debf7c537e82c0abd3d56c4444d84980819f8694",
      "filename": "agera/src/test/java/com/google/android/agera/test/matchers/HasPrivateConstructor.java",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/google/agera/blob/30b98a19ec0c0f775489e9a03be8ff1d89ae9a77/agera/src/test/java/com/google/android/agera/test/matchers/HasPrivateConstructor.java",
      "raw_url": "https://github.com/google/agera/raw/30b98a19ec0c0f775489e9a03be8ff1d89ae9a77/agera/src/test/java/com/google/android/agera/test/matchers/HasPrivateConstructor.java",
      "contents_url": "https://api.github.com/repos/google/agera/contents/agera/src/test/java/com/google/android/agera/test/matchers/HasPrivateConstructor.java?ref=30b98a19ec0c0f775489e9a03be8ff1d89ae9a77",
      "patch": "@@ -15,6 +15,7 @@\n  */\n package com.google.android.agera.test.matchers;\n \n+import android.support.annotation.NonNull;\n import org.hamcrest.Description;\n import org.hamcrest.Factory;\n import org.hamcrest.Matcher;\n@@ -32,7 +33,7 @@ private HasPrivateConstructor() {\n   @Override\n   protected boolean matchesSafely(final Class<?> clazz) {\n     try {\n-      Constructor<?> constructor = clazz.getDeclaredConstructor();\n+      final Constructor<?> constructor = clazz.getDeclaredConstructor();\n       constructor.setAccessible(true);\n       constructor.newInstance();\n       return Modifier.isPrivate(constructor.getModifiers());\n@@ -46,6 +47,7 @@ public void describeTo(final Description description) {\n     description.appendText(\"should have private constructor\");\n   }\n \n+  @NonNull\n   @Factory\n   public static Matcher<Class<?>> hasPrivateConstructor() {\n     return INSTANCE;"
    },
    {
      "sha": "4e97a22519943298ae33ac06018307204fdb60bd",
      "filename": "agera/src/test/java/com/google/android/agera/test/matchers/PredicateApply.java",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/google/agera/blob/30b98a19ec0c0f775489e9a03be8ff1d89ae9a77/agera/src/test/java/com/google/android/agera/test/matchers/PredicateApply.java",
      "raw_url": "https://github.com/google/agera/raw/30b98a19ec0c0f775489e9a03be8ff1d89ae9a77/agera/src/test/java/com/google/android/agera/test/matchers/PredicateApply.java",
      "contents_url": "https://api.github.com/repos/google/agera/contents/agera/src/test/java/com/google/android/agera/test/matchers/PredicateApply.java?ref=30b98a19ec0c0f775489e9a03be8ff1d89ae9a77",
      "patch": "@@ -43,11 +43,13 @@ public void describeTo(final Description description) {\n     description.appendText(value ? \"applies for \" : \"does not apply for \").appendValue(data);\n   }\n \n+  @NonNull\n   @Factory\n   public static <T> Matcher<Predicate<? super T>> appliesFor(@NonNull final T data) {\n     return new PredicateApply<>(true, data);\n   }\n \n+  @NonNull\n   @Factory\n   public static <T> Matcher<Predicate<? super T>> doesNotApplyFor(@NonNull final T data) {\n     return new PredicateApply<>(false, data);"
    },
    {
      "sha": "1059905b3f2504afdf41bc09515155237725d87f",
      "filename": "agera/src/test/java/com/google/android/agera/test/matchers/ReservoirGives.java",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/google/agera/blob/30b98a19ec0c0f775489e9a03be8ff1d89ae9a77/agera/src/test/java/com/google/android/agera/test/matchers/ReservoirGives.java",
      "raw_url": "https://github.com/google/agera/raw/30b98a19ec0c0f775489e9a03be8ff1d89ae9a77/agera/src/test/java/com/google/android/agera/test/matchers/ReservoirGives.java",
      "contents_url": "https://api.github.com/repos/google/agera/contents/agera/src/test/java/com/google/android/agera/test/matchers/ReservoirGives.java?ref=30b98a19ec0c0f775489e9a03be8ff1d89ae9a77",
      "patch": "@@ -44,11 +44,13 @@ private ReservoirGives(@NonNull final Result<T> value) {\n     this.value = value;\n   }\n \n+  @NonNull\n   @Factory\n   public static <T> Matcher<Reservoir<T>> givesPresentValue(final T value) {\n     return new ReservoirGives<>(present(value));\n   }\n \n+  @NonNull\n   @Factory\n   public static <T> Matcher<Reservoir<T>> givesAbsentValueOf(\n       @SuppressWarnings(\"unused\") @Nullable final Class<T> ofClass) {\n@@ -57,7 +59,7 @@ private ReservoirGives(@NonNull final Result<T> value) {\n \n   @Override\n   protected boolean matchesSafely(@NonNull final Reservoir<T> item) {\n-    Result<T> got = item.get();\n+    final Result<T> got = item.get();\n     if (value.equals(got)) {\n       if (lastFailedMatch == item) {\n         lastFailedMatch = null;"
    },
    {
      "sha": "3173737d12aa28e13aac96cc8e24ab4833a76695",
      "filename": "agera/src/test/java/com/google/android/agera/test/matchers/SupplierGives.java",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/google/agera/blob/30b98a19ec0c0f775489e9a03be8ff1d89ae9a77/agera/src/test/java/com/google/android/agera/test/matchers/SupplierGives.java",
      "raw_url": "https://github.com/google/agera/raw/30b98a19ec0c0f775489e9a03be8ff1d89ae9a77/agera/src/test/java/com/google/android/agera/test/matchers/SupplierGives.java",
      "contents_url": "https://api.github.com/repos/google/agera/contents/agera/src/test/java/com/google/android/agera/test/matchers/SupplierGives.java?ref=30b98a19ec0c0f775489e9a03be8ff1d89ae9a77",
      "patch": "@@ -47,11 +47,13 @@ protected void describeMismatchSafely(final Supplier<T> supplier,\n     description.appendText(\"was \").appendValue(supplier.get());\n   }\n \n+  @NonNull\n   @Factory\n   public static <T> Matcher<Supplier<T>> gives(@NonNull final T value) {\n     return new SupplierGives<>(value);\n   }\n \n+  @NonNull\n   @Factory\n   public static <T> Matcher<Supplier<T>> has(@NonNull final T value) {\n     return new SupplierGives<>(value);"
    },
    {
      "sha": "e8ff41370e2b5a4d24e2ff144f165dd4014a6502",
      "filename": "agera/src/test/java/com/google/android/agera/test/matchers/UpdatableUpdated.java",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/google/agera/blob/30b98a19ec0c0f775489e9a03be8ff1d89ae9a77/agera/src/test/java/com/google/android/agera/test/matchers/UpdatableUpdated.java",
      "raw_url": "https://github.com/google/agera/raw/30b98a19ec0c0f775489e9a03be8ff1d89ae9a77/agera/src/test/java/com/google/android/agera/test/matchers/UpdatableUpdated.java",
      "contents_url": "https://api.github.com/repos/google/agera/contents/agera/src/test/java/com/google/android/agera/test/matchers/UpdatableUpdated.java?ref=30b98a19ec0c0f775489e9a03be8ff1d89ae9a77",
      "patch": "@@ -42,11 +42,13 @@ public void describeTo(final Description description) {\n     description.appendText(updated ? \"was updated\" : \"not updated\");\n   }\n \n+  @NonNull\n   @Factory\n   public static UpdatableUpdated wasUpdated() {\n     return WAS_UPDATED;\n   }\n \n+  @NonNull\n   @Factory\n   public static UpdatableUpdated wasNotUpdated() {\n     return WAS_NOT_UPDATED;"
    },
    {
      "sha": "d28e1298f2f4e3f090e2b67de21839a3d1515c43",
      "filename": "agera/src/test/java/com/google/android/agera/test/mocks/MockUpdatable.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/google/agera/blob/30b98a19ec0c0f775489e9a03be8ff1d89ae9a77/agera/src/test/java/com/google/android/agera/test/mocks/MockUpdatable.java",
      "raw_url": "https://github.com/google/agera/raw/30b98a19ec0c0f775489e9a03be8ff1d89ae9a77/agera/src/test/java/com/google/android/agera/test/mocks/MockUpdatable.java",
      "contents_url": "https://api.github.com/repos/google/agera/contents/agera/src/test/java/com/google/android/agera/test/mocks/MockUpdatable.java?ref=30b98a19ec0c0f775489e9a03be8ff1d89ae9a77",
      "patch": "@@ -30,9 +30,9 @@\n \n   private boolean updated = false;\n \n-  private MockUpdatable() {\n-  }\n+  private MockUpdatable() {}\n \n+  @NonNull\n   public static MockUpdatable mockUpdatable() {\n     return new MockUpdatable();\n   }"
    },
    {
      "sha": "9a572eff5bd400d2a9a585468e7270d503d13113",
      "filename": "extensions/content/src/test/java/com/google/android/agera/content/test/matchers/HasPrivateConstructor.java",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/google/agera/blob/30b98a19ec0c0f775489e9a03be8ff1d89ae9a77/extensions/content/src/test/java/com/google/android/agera/content/test/matchers/HasPrivateConstructor.java",
      "raw_url": "https://github.com/google/agera/raw/30b98a19ec0c0f775489e9a03be8ff1d89ae9a77/extensions/content/src/test/java/com/google/android/agera/content/test/matchers/HasPrivateConstructor.java",
      "contents_url": "https://api.github.com/repos/google/agera/contents/extensions/content/src/test/java/com/google/android/agera/content/test/matchers/HasPrivateConstructor.java?ref=30b98a19ec0c0f775489e9a03be8ff1d89ae9a77",
      "patch": "@@ -15,6 +15,7 @@\n  */\n package com.google.android.agera.content.test.matchers;\n \n+import android.support.annotation.NonNull;\n import org.hamcrest.Description;\n import org.hamcrest.Factory;\n import org.hamcrest.Matcher;\n@@ -32,7 +33,7 @@ private HasPrivateConstructor() {\n   @Override\n   protected boolean matchesSafely(final Class<?> clazz) {\n     try {\n-      Constructor<?> constructor = clazz.getDeclaredConstructor();\n+      final Constructor<?> constructor = clazz.getDeclaredConstructor();\n       constructor.setAccessible(true);\n       constructor.newInstance();\n       return Modifier.isPrivate(constructor.getModifiers());\n@@ -46,6 +47,7 @@ public void describeTo(final Description description) {\n     description.appendText(\"should have private constructor\");\n   }\n \n+  @NonNull\n   @Factory\n   public static Matcher<Class<?>> hasPrivateConstructor() {\n     return INSTANCE;"
    },
    {
      "sha": "5a4ac047fc5bc44ef52b7a7b97a04b71220f237f",
      "filename": "extensions/content/src/test/java/com/google/android/agera/content/test/matchers/UpdatableUpdated.java",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/google/agera/blob/30b98a19ec0c0f775489e9a03be8ff1d89ae9a77/extensions/content/src/test/java/com/google/android/agera/content/test/matchers/UpdatableUpdated.java",
      "raw_url": "https://github.com/google/agera/raw/30b98a19ec0c0f775489e9a03be8ff1d89ae9a77/extensions/content/src/test/java/com/google/android/agera/content/test/matchers/UpdatableUpdated.java",
      "contents_url": "https://api.github.com/repos/google/agera/contents/extensions/content/src/test/java/com/google/android/agera/content/test/matchers/UpdatableUpdated.java?ref=30b98a19ec0c0f775489e9a03be8ff1d89ae9a77",
      "patch": "@@ -42,11 +42,13 @@ public void describeTo(final Description description) {\n     description.appendText(updated ? \"was updated\" : \"not updated\");\n   }\n \n+  @NonNull\n   @Factory\n   public static UpdatableUpdated wasUpdated() {\n     return WAS_UPDATED;\n   }\n \n+  @NonNull\n   @Factory\n   public static UpdatableUpdated wasNotUpdated() {\n     return WAS_NOT_UPDATED;"
    },
    {
      "sha": "890cad7f689c1bda9964d184f9118e36d33e5e7d",
      "filename": "extensions/content/src/test/java/com/google/android/agera/content/test/mocks/MockUpdatable.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/google/agera/blob/30b98a19ec0c0f775489e9a03be8ff1d89ae9a77/extensions/content/src/test/java/com/google/android/agera/content/test/mocks/MockUpdatable.java",
      "raw_url": "https://github.com/google/agera/raw/30b98a19ec0c0f775489e9a03be8ff1d89ae9a77/extensions/content/src/test/java/com/google/android/agera/content/test/mocks/MockUpdatable.java",
      "contents_url": "https://api.github.com/repos/google/agera/contents/extensions/content/src/test/java/com/google/android/agera/content/test/mocks/MockUpdatable.java?ref=30b98a19ec0c0f775489e9a03be8ff1d89ae9a77",
      "patch": "@@ -30,9 +30,9 @@\n \n   private boolean updated = false;\n \n-  private MockUpdatable() {\n-  }\n+  private MockUpdatable() {}\n \n+  @NonNull\n   public static MockUpdatable mockUpdatable() {\n     return new MockUpdatable();\n   }"
    },
    {
      "sha": "dd050cdf214b7f454e959e8dfff6d02c8d2639d8",
      "filename": "extensions/database/src/main/java/com/google/android/agera/database/SqlDatabaseSupplier.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/google/agera/blob/30b98a19ec0c0f775489e9a03be8ff1d89ae9a77/extensions/database/src/main/java/com/google/android/agera/database/SqlDatabaseSupplier.java",
      "raw_url": "https://github.com/google/agera/raw/30b98a19ec0c0f775489e9a03be8ff1d89ae9a77/extensions/database/src/main/java/com/google/android/agera/database/SqlDatabaseSupplier.java",
      "contents_url": "https://api.github.com/repos/google/agera/contents/extensions/database/src/main/java/com/google/android/agera/database/SqlDatabaseSupplier.java?ref=30b98a19ec0c0f775489e9a03be8ff1d89ae9a77",
      "patch": "@@ -27,6 +27,7 @@\n import android.database.sqlite.SQLiteDatabase.CursorFactory;\n import android.database.sqlite.SQLiteOpenHelper;\n import android.support.annotation.NonNull;\n+import android.support.annotation.Nullable;\n \n /**\n  * Abstract extension of {@link SQLiteOpenHelper} implementing a sql database {@link Supplier} to be\n@@ -39,7 +40,7 @@\n    * Extending the base constructor, for overriding in concrete implementations.\n    */\n   public SqlDatabaseSupplier(@NonNull final Context context, @NonNull final String path,\n-      final CursorFactory factory, final int version) {\n+      @Nullable final CursorFactory factory, final int version) {\n     super(context, path, factory, version);\n   }\n "
    },
    {
      "sha": "586089830dae42869b387c213d05067d1922d00d",
      "filename": "extensions/database/src/main/java/com/google/android/agera/database/SqlDeleteRequest.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/google/agera/blob/30b98a19ec0c0f775489e9a03be8ff1d89ae9a77/extensions/database/src/main/java/com/google/android/agera/database/SqlDeleteRequest.java",
      "raw_url": "https://github.com/google/agera/raw/30b98a19ec0c0f775489e9a03be8ff1d89ae9a77/extensions/database/src/main/java/com/google/android/agera/database/SqlDeleteRequest.java",
      "contents_url": "https://api.github.com/repos/google/agera/contents/extensions/database/src/main/java/com/google/android/agera/database/SqlDeleteRequest.java?ref=30b98a19ec0c0f775489e9a03be8ff1d89ae9a77",
      "patch": "@@ -32,8 +32,8 @@\n   @NonNull\n   final String where;\n \n-  SqlDeleteRequest(@NonNull final String[] arguments, final @NonNull String table,\n-      final @NonNull String where) {\n+  SqlDeleteRequest(@NonNull final String[] arguments, @NonNull final String table,\n+      @NonNull final String where) {\n     this.table = checkNotNull(table);\n     this.where = checkNotNull(where);\n     this.arguments = checkNotNull(arguments);"
    },
    {
      "sha": "e66edcc8d9159ece1d04ba074f71b126fb394159",
      "filename": "extensions/database/src/main/java/com/google/android/agera/database/SqlInsertRequest.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/google/agera/blob/30b98a19ec0c0f775489e9a03be8ff1d89ae9a77/extensions/database/src/main/java/com/google/android/agera/database/SqlInsertRequest.java",
      "raw_url": "https://github.com/google/agera/raw/30b98a19ec0c0f775489e9a03be8ff1d89ae9a77/extensions/database/src/main/java/com/google/android/agera/database/SqlInsertRequest.java",
      "contents_url": "https://api.github.com/repos/google/agera/contents/extensions/database/src/main/java/com/google/android/agera/database/SqlInsertRequest.java?ref=30b98a19ec0c0f775489e9a03be8ff1d89ae9a77",
      "patch": "@@ -29,7 +29,7 @@\n   @NonNull\n   final String table;\n \n-  SqlInsertRequest(@NonNull final ContentValues contentValues, final @NonNull String table) {\n+  SqlInsertRequest(@NonNull final ContentValues contentValues, @NonNull final String table) {\n     this.table = checkNotNull(table);\n     this.contentValues = checkNotNull(contentValues);\n   }"
    },
    {
      "sha": "e050f7cb43d909d4309d56789b5426f0d2f80859",
      "filename": "extensions/database/src/main/java/com/google/android/agera/database/SqlUpdateRequest.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/google/agera/blob/30b98a19ec0c0f775489e9a03be8ff1d89ae9a77/extensions/database/src/main/java/com/google/android/agera/database/SqlUpdateRequest.java",
      "raw_url": "https://github.com/google/agera/raw/30b98a19ec0c0f775489e9a03be8ff1d89ae9a77/extensions/database/src/main/java/com/google/android/agera/database/SqlUpdateRequest.java",
      "contents_url": "https://api.github.com/repos/google/agera/contents/extensions/database/src/main/java/com/google/android/agera/database/SqlUpdateRequest.java?ref=30b98a19ec0c0f775489e9a03be8ff1d89ae9a77",
      "patch": "@@ -36,7 +36,7 @@\n   final String where;\n \n   SqlUpdateRequest(@NonNull final ContentValues contentValues, @NonNull final String[] arguments,\n-      final @NonNull String table, final @NonNull String where) {\n+      @NonNull final String table, @NonNull final String where) {\n     this.table = checkNotNull(table);\n     this.where = checkNotNull(where);\n     this.contentValues = checkNotNull(contentValues);"
    },
    {
      "sha": "49dcc0696136f24e3f0482f5911f8d0e7d289991",
      "filename": "extensions/database/src/test/java/com/google/android/agera/database/test/matchers/HasHashCodeOf.java",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/google/agera/blob/30b98a19ec0c0f775489e9a03be8ff1d89ae9a77/extensions/database/src/test/java/com/google/android/agera/database/test/matchers/HasHashCodeOf.java",
      "raw_url": "https://github.com/google/agera/raw/30b98a19ec0c0f775489e9a03be8ff1d89ae9a77/extensions/database/src/test/java/com/google/android/agera/database/test/matchers/HasHashCodeOf.java",
      "contents_url": "https://api.github.com/repos/google/agera/contents/extensions/database/src/test/java/com/google/android/agera/database/test/matchers/HasHashCodeOf.java?ref=30b98a19ec0c0f775489e9a03be8ff1d89ae9a77",
      "patch": "@@ -15,6 +15,7 @@\n  */\n package com.google.android.agera.database.test.matchers;\n \n+import android.support.annotation.NonNull;\n import org.hamcrest.Description;\n import org.hamcrest.Factory;\n import org.hamcrest.Matcher;\n@@ -38,6 +39,7 @@ public void describeTo(final Description description) {\n     description.appendValue(object);\n   }\n \n+  @NonNull\n   @Factory\n   public static Matcher<Object> hasHashCodeOf(final Object object) {\n     return new HasHashCodeOf(object);"
    },
    {
      "sha": "ea83e54a1f86f0529c5d1e31a2e8989d59ae4f52",
      "filename": "extensions/database/src/test/java/com/google/android/agera/database/test/matchers/HasPrivateConstructor.java",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/google/agera/blob/30b98a19ec0c0f775489e9a03be8ff1d89ae9a77/extensions/database/src/test/java/com/google/android/agera/database/test/matchers/HasPrivateConstructor.java",
      "raw_url": "https://github.com/google/agera/raw/30b98a19ec0c0f775489e9a03be8ff1d89ae9a77/extensions/database/src/test/java/com/google/android/agera/database/test/matchers/HasPrivateConstructor.java",
      "contents_url": "https://api.github.com/repos/google/agera/contents/extensions/database/src/test/java/com/google/android/agera/database/test/matchers/HasPrivateConstructor.java?ref=30b98a19ec0c0f775489e9a03be8ff1d89ae9a77",
      "patch": "@@ -15,6 +15,7 @@\n  */\n package com.google.android.agera.database.test.matchers;\n \n+import android.support.annotation.NonNull;\n import org.hamcrest.Description;\n import org.hamcrest.Factory;\n import org.hamcrest.Matcher;\n@@ -26,13 +27,12 @@\n public final class HasPrivateConstructor extends TypeSafeMatcher<Class<?>> {\n   private static final HasPrivateConstructor INSTANCE = new HasPrivateConstructor();\n \n-  private HasPrivateConstructor() {\n-  }\n+  private HasPrivateConstructor() {}\n \n   @Override\n   protected boolean matchesSafely(final Class<?> clazz) {\n     try {\n-      Constructor<?> constructor = clazz.getDeclaredConstructor();\n+      final Constructor<?> constructor = clazz.getDeclaredConstructor();\n       constructor.setAccessible(true);\n       constructor.newInstance();\n       return Modifier.isPrivate(constructor.getModifiers());\n@@ -46,6 +46,7 @@ public void describeTo(final Description description) {\n     description.appendText(\"should have private constructor\");\n   }\n \n+  @NonNull\n   @Factory\n   public static Matcher<Class<?>> hasPrivateConstructor() {\n     return INSTANCE;"
    },
    {
      "sha": "91c3507700382fc6ec107999a362274ed1c55cbe",
      "filename": "extensions/net/src/test/java/com/google/android/agera/net/test/matchers/HasHashCodeOf.java",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/google/agera/blob/30b98a19ec0c0f775489e9a03be8ff1d89ae9a77/extensions/net/src/test/java/com/google/android/agera/net/test/matchers/HasHashCodeOf.java",
      "raw_url": "https://github.com/google/agera/raw/30b98a19ec0c0f775489e9a03be8ff1d89ae9a77/extensions/net/src/test/java/com/google/android/agera/net/test/matchers/HasHashCodeOf.java",
      "contents_url": "https://api.github.com/repos/google/agera/contents/extensions/net/src/test/java/com/google/android/agera/net/test/matchers/HasHashCodeOf.java?ref=30b98a19ec0c0f775489e9a03be8ff1d89ae9a77",
      "patch": "@@ -15,6 +15,7 @@\n  */\n package com.google.android.agera.net.test.matchers;\n \n+import android.support.annotation.NonNull;\n import org.hamcrest.Description;\n import org.hamcrest.Factory;\n import org.hamcrest.Matcher;\n@@ -38,6 +39,7 @@ public void describeTo(final Description description) {\n     description.appendValue(object);\n   }\n \n+  @NonNull\n   @Factory\n   public static Matcher<Object> hasHashCodeOf(final Object object) {\n     return new HasHashCodeOf(object);"
    },
    {
      "sha": "ae1177294f0325c6e1638bc23a85553b7f3eb5b2",
      "filename": "extensions/net/src/test/java/com/google/android/agera/net/test/matchers/HasPrivateConstructor.java",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/google/agera/blob/30b98a19ec0c0f775489e9a03be8ff1d89ae9a77/extensions/net/src/test/java/com/google/android/agera/net/test/matchers/HasPrivateConstructor.java",
      "raw_url": "https://github.com/google/agera/raw/30b98a19ec0c0f775489e9a03be8ff1d89ae9a77/extensions/net/src/test/java/com/google/android/agera/net/test/matchers/HasPrivateConstructor.java",
      "contents_url": "https://api.github.com/repos/google/agera/contents/extensions/net/src/test/java/com/google/android/agera/net/test/matchers/HasPrivateConstructor.java?ref=30b98a19ec0c0f775489e9a03be8ff1d89ae9a77",
      "patch": "@@ -15,6 +15,7 @@\n  */\n package com.google.android.agera.net.test.matchers;\n \n+import android.support.annotation.NonNull;\n import org.hamcrest.Description;\n import org.hamcrest.Factory;\n import org.hamcrest.Matcher;\n@@ -26,8 +27,7 @@\n public final class HasPrivateConstructor extends TypeSafeMatcher<Class<?>> {\n   private static final HasPrivateConstructor INSTANCE = new HasPrivateConstructor();\n \n-  private HasPrivateConstructor() {\n-  }\n+  private HasPrivateConstructor() {}\n \n   @Override\n   protected boolean matchesSafely(final Class<?> clazz) {\n@@ -46,6 +46,7 @@ public void describeTo(final Description description) {\n     description.appendText(\"should have private constructor\");\n   }\n \n+  @NonNull\n   @Factory\n   public static Matcher<Class<?>> hasPrivateConstructor() {\n     return INSTANCE;"
    }
  ]
}
