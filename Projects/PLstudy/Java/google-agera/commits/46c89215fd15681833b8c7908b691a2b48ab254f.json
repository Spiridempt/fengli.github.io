{"sha":"46c89215fd15681833b8c7908b691a2b48ab254f","commit":{"author":{"name":"Magnus Ernstsson","email":"magnus@ernstsson.net","date":"2016-05-07T22:19:40Z"},"committer":{"name":"Magnus Ernstsson","email":"magnus@ernstsson.net","date":"2016-05-07T22:19:40Z"},"message":"Added more observable tests\n\nTesting:\nDeduping of updates within loop\nKeep observables activated on quick reactivation","tree":{"sha":"c6b17ab6699788ec0eafa3dc82db9e6eb1b77c15","url":"https://api.github.com/repos/google/agera/git/trees/c6b17ab6699788ec0eafa3dc82db9e6eb1b77c15"},"url":"https://api.github.com/repos/google/agera/git/commits/46c89215fd15681833b8c7908b691a2b48ab254f","comment_count":0},"url":"https://api.github.com/repos/google/agera/commits/46c89215fd15681833b8c7908b691a2b48ab254f","html_url":"https://github.com/google/agera/commit/46c89215fd15681833b8c7908b691a2b48ab254f","comments_url":"https://api.github.com/repos/google/agera/commits/46c89215fd15681833b8c7908b691a2b48ab254f/comments","author":{"login":"ernstsson","id":378389,"avatar_url":"https://avatars2.githubusercontent.com/u/378389?v=3","gravatar_id":"","url":"https://api.github.com/users/ernstsson","html_url":"https://github.com/ernstsson","followers_url":"https://api.github.com/users/ernstsson/followers","following_url":"https://api.github.com/users/ernstsson/following{/other_user}","gists_url":"https://api.github.com/users/ernstsson/gists{/gist_id}","starred_url":"https://api.github.com/users/ernstsson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ernstsson/subscriptions","organizations_url":"https://api.github.com/users/ernstsson/orgs","repos_url":"https://api.github.com/users/ernstsson/repos","events_url":"https://api.github.com/users/ernstsson/events{/privacy}","received_events_url":"https://api.github.com/users/ernstsson/received_events","type":"User","site_admin":false},"committer":{"login":"ernstsson","id":378389,"avatar_url":"https://avatars2.githubusercontent.com/u/378389?v=3","gravatar_id":"","url":"https://api.github.com/users/ernstsson","html_url":"https://github.com/ernstsson","followers_url":"https://api.github.com/users/ernstsson/followers","following_url":"https://api.github.com/users/ernstsson/following{/other_user}","gists_url":"https://api.github.com/users/ernstsson/gists{/gist_id}","starred_url":"https://api.github.com/users/ernstsson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ernstsson/subscriptions","organizations_url":"https://api.github.com/users/ernstsson/orgs","repos_url":"https://api.github.com/users/ernstsson/repos","events_url":"https://api.github.com/users/ernstsson/events{/privacy}","received_events_url":"https://api.github.com/users/ernstsson/received_events","type":"User","site_admin":false},"parents":[{"sha":"1059462228c2b9701e2ff48110592bfc90db1ae0","url":"https://api.github.com/repos/google/agera/commits/1059462228c2b9701e2ff48110592bfc90db1ae0","html_url":"https://github.com/google/agera/commit/1059462228c2b9701e2ff48110592bfc90db1ae0"}],"stats":{"total":76,"additions":61,"deletions":15},"files":[{"sha":"df660dec8ce77e721308412ffc25a42cb21c1dbf","filename":"agera/src/test/java/com/google/android/agera/ObservablesTest.java","status":"modified","additions":50,"deletions":11,"changes":61,"blob_url":"https://github.com/google/agera/blob/46c89215fd15681833b8c7908b691a2b48ab254f/agera/src/test/java/com/google/android/agera/ObservablesTest.java","raw_url":"https://github.com/google/agera/raw/46c89215fd15681833b8c7908b691a2b48ab254f/agera/src/test/java/com/google/android/agera/ObservablesTest.java","contents_url":"https://api.github.com/repos/google/agera/contents/agera/src/test/java/com/google/android/agera/ObservablesTest.java?ref=46c89215fd15681833b8c7908b691a2b48ab254f","patch":"@@ -23,30 +23,32 @@\n import static com.google.android.agera.Observables.perLoopObservable;\n import static com.google.android.agera.Observables.perMillisecondObservable;\n import static com.google.android.agera.Observables.updateDispatcher;\n+import static com.google.android.agera.Repositories.repositoryWithInitialValue;\n import static com.google.android.agera.test.matchers.HasPrivateConstructor.hasPrivateConstructor;\n import static com.google.android.agera.test.matchers.UpdatableUpdated.wasUpdated;\n import static com.google.android.agera.test.mocks.MockUpdatable.mockUpdatable;\n import static org.hamcrest.MatcherAssert.assertThat;\n import static org.hamcrest.Matchers.greaterThanOrEqualTo;\n import static org.hamcrest.Matchers.not;\n import static org.hamcrest.Matchers.notNullValue;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n import static org.mockito.MockitoAnnotations.initMocks;\n import static org.robolectric.annotation.Config.NONE;\n import static org.robolectric.internal.ShadowExtractor.extract;\n+import static org.robolectric.shadows.ShadowLooper.getShadowMainLooper;\n import static org.robolectric.shadows.ShadowLooper.idleMainLooper;\n \n import com.google.android.agera.test.mocks.MockUpdatable;\n \n-import android.app.Application;\n-import android.content.Intent;\n import org.junit.After;\n import org.junit.Before;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.mockito.Mock;\n import org.robolectric.RobolectricTestRunner;\n-import org.robolectric.RuntimeEnvironment;\n import org.robolectric.annotation.Config;\n import org.robolectric.shadows.ShadowLooper;\n import org.robolectric.util.Scheduler;\n@@ -75,6 +77,7 @@\n   @Mock\n   private ActivationHandler mockActivationHandler;\n   private UpdateDispatcher updateDispatcherWithUpdatablesChanged;\n+  private ShadowLooper looper;\n \n   @Before\n   public void setUp() {\n@@ -96,6 +99,7 @@ public void setUp() {\n         secondUpdateDispatcher), thirdUpdateDispatcher);\n     updatable = mockUpdatable();\n     secondUpdatable = mockUpdatable();\n+    looper = getShadowMainLooper();\n   }\n \n   @After\n@@ -200,12 +204,54 @@ public void shouldCallLastRemovedOnceOnlyForUpdateDispatcher() {\n     secondUpdatable.addToObservable(updateDispatcherWithUpdatablesChanged);\n \n     updatable.removeFromObservables();\n+    looper.runToEndOfTasks();\n     secondUpdatable.removeFromObservables();\n+    looper.runToEndOfTasks();\n \n     verify(mockActivationHandler).observableActivated(updateDispatcherWithUpdatablesChanged);\n   }\n \n   @Test\n+  public void shouldNotRefreshObservableIfReactivatedWithinSameCycle() {\n+    final Supplier supplier = mock(Supplier.class);\n+    when(supplier.get()).thenReturn(new Object());\n+    final Repository repository = repositoryWithInitialValue(new Object())\n+        .observe()\n+        .onUpdatesPerLoop()\n+        .thenGetFrom(supplier)\n+        .compile();\n+    updatable.addToObservable(repository);\n+\n+    looper.pause();\n+    updatable.removeFromObservables();\n+    updatable.addToObservable(repository);\n+    looper.unPause();\n+\n+    verify(supplier).get();\n+  }\n+\n+\n+  @Test\n+  public void shouldOnlyUpdateOncePerLooper() {\n+    final Supplier supplier = mock(Supplier.class);\n+    when(supplier.get()).thenReturn(new Object());\n+    final Repository repository = repositoryWithInitialValue(new Object())\n+        .observe(updateDispatcher)\n+        .onUpdatesPerLoop()\n+        .thenGetFrom(supplier)\n+        .compile();\n+    updatable.addToObservable(repository);\n+\n+    looper.pause();\n+    updateDispatcher.update();\n+    updateDispatcher.update();\n+    updateDispatcher.update();\n+    looper.unPause();\n+\n+    verify(supplier, times(2)).get();\n+  }\n+\n+  @Test\n   public void shouldUpdateAllUpdatablesWhenUpdateFromSameThreadForUpdateDispatcher() {\n     updatable.addToObservable(updateDispatcher);\n     secondUpdatable.addToObservable(updateDispatcher);\n@@ -261,6 +307,7 @@ public void shouldHandleManyObservables() {\n       Collections.shuffle(mockUpdatables);\n       for (MockUpdatable mockUpdatable : mockUpdatables) {\n         mockUpdatable.removeFromObservables();\n+        looper.runToEndOfTasks();\n       }\n     }\n   }\n@@ -269,12 +316,4 @@ public void shouldHandleManyObservables() {\n   public void shouldHavePrivateConstructor() {\n     assertThat(Observables.class, hasPrivateConstructor());\n   }\n-\n-  private void sendBroadcast(final Intent intent) {\n-    getApplication().sendBroadcast(intent);\n-  }\n-\n-  private static Application getApplication() {\n-    return RuntimeEnvironment.application;\n-  }\n }"},{"sha":"2dab253379fb8506d11a62e9013ad4bc2bad3164","filename":"agera/src/test/java/com/google/android/agera/RepositoryConfigTest.java","status":"modified","additions":11,"deletions":3,"changes":14,"blob_url":"https://github.com/google/agera/blob/46c89215fd15681833b8c7908b691a2b48ab254f/agera/src/test/java/com/google/android/agera/RepositoryConfigTest.java","raw_url":"https://github.com/google/agera/raw/46c89215fd15681833b8c7908b691a2b48ab254f/agera/src/test/java/com/google/android/agera/RepositoryConfigTest.java","contents_url":"https://api.github.com/repos/google/agera/contents/agera/src/test/java/com/google/android/agera/RepositoryConfigTest.java?ref=46c89215fd15681833b8c7908b691a2b48ab254f","patch":"@@ -34,7 +34,7 @@\n import static org.mockito.Mockito.when;\n import static org.mockito.MockitoAnnotations.initMocks;\n import static org.robolectric.annotation.Config.NONE;\n-import static org.robolectric.shadows.ShadowLooper.runUiThreadTasksIncludingDelayedTasks;\n+import static org.robolectric.shadows.ShadowLooper.getShadowMainLooper;\n \n import com.google.android.agera.test.SingleSlotDelayedExecutor;\n import com.google.android.agera.test.mocks.MockUpdatable;\n@@ -48,6 +48,7 @@\n import org.mockito.Mock;\n import org.robolectric.RobolectricTestRunner;\n import org.robolectric.annotation.Config;\n+import org.robolectric.shadows.ShadowLooper;\n \n @Config(manifest = NONE)\n @RunWith(RobolectricTestRunner.class)\n@@ -64,6 +65,7 @@\n   private InterruptibleMonitoredSupplier monitoredSupplier;\n   @Mock\n   private Supplier<Object> mockSupplier;\n+  private ShadowLooper looper;\n \n   @Before\n   public void setUp() {\n@@ -73,6 +75,7 @@ public void setUp() {\n     delayedExecutor = new SingleSlotDelayedExecutor();\n     monitoredSupplier = new InterruptibleMonitoredSupplier();\n     when(mockSupplier.get()).thenReturn(UPDATED_VALUE);\n+    looper = getShadowMainLooper();\n   }\n \n   @After\n@@ -83,7 +86,7 @@ public void tearDown() {\n   private void retriggerUpdate() {\n     updatable.resetUpdated();\n     updateDispatcher.update();\n-    runUiThreadTasksIncludingDelayedTasks();\n+    looper.runToEndOfTasks();\n   }\n \n   @Test\n@@ -126,6 +129,7 @@ public void shouldContinueFlowOnDeactivate() throws Exception {\n     updatable.addToObservable(repository);\n     assertThat(delayedExecutor.hasRunnable(), is(true));\n     updatable.removeFromObservables();\n+    looper.runToEndOfTasks();\n     delayedExecutor.resumeOrThrow();\n     assertThat(repository, has(UPDATED_VALUE));\n   }\n@@ -166,6 +170,7 @@ public void shouldCancelFlowOnDeactivate() throws Exception {\n     updatable.addToObservable(repository);\n     assertThat(delayedExecutor.hasRunnable(), is(true));\n     updatable.removeFromObservables();\n+    looper.runToEndOfTasks();\n     delayedExecutor.resumeOrThrow();\n     assertThat(repository, has(INITIAL_VALUE));\n     verifyZeroInteractions(mockSupplier);\n@@ -201,6 +206,7 @@ public void shouldCancelFlowMidFlow() throws Exception {\n       public Object apply(@NonNull Object input) {\n         // Sneak in a deactivation here to test cancellation mid-flow.\n         updatable.removeFromObservables();\n+        looper.runToEndOfTasks();\n         return input;\n       }\n     };\n@@ -231,6 +237,7 @@ public void shouldResetToInitialValueOnDeactivate() throws Exception {\n     updatable.addToObservable(repository);\n     assertThat(repository, has(UPDATED_VALUE));\n     updatable.removeFromObservables();\n+    looper.runToEndOfTasks();\n     assertThat(repository, has(INITIAL_VALUE));\n   }\n \n@@ -247,6 +254,7 @@ public void shouldInterruptOnDeactivate() throws Exception {\n     updatable.addToObservable(repository);\n     monitoredSupplier.waitForGetToStart();\n     updatable.removeFromObservables();\n+    looper.runToEndOfTasks();\n     monitoredSupplier.waitForGetToEnd();\n     assertThat(monitoredSupplier.wasInterrupted(), is(true));\n     assertThat(repository, has(INITIAL_VALUE));\n@@ -270,7 +278,7 @@ public void shouldInterruptOnConcurrentUpdate() throws Exception {\n     assertThat(monitoredSupplier.wasInterrupted(), is(true));\n     assertThat(repository, has(INITIAL_VALUE));\n \n-    runUiThreadTasksIncludingDelayedTasks(); // allows second run; asserted in waitForGetToStart()\n+    looper.runToEndOfTasks(); // allows second run; asserted in waitForGetToStart()\n     monitoredSupplier.waitForGetToStart().resumeIfWaiting().waitForGetToEnd();\n     assertThat(repository, has(RESUMED_VALUE));\n   }"},{"sha":"6d7a88d648bf613399373dd36d7861106eb074bf","filename":"agera/src/test/java/com/google/android/agera/test/mocks/MockUpdatable.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/google/agera/blob/46c89215fd15681833b8c7908b691a2b48ab254f/agera/src/test/java/com/google/android/agera/test/mocks/MockUpdatable.java","raw_url":"https://github.com/google/agera/raw/46c89215fd15681833b8c7908b691a2b48ab254f/agera/src/test/java/com/google/android/agera/test/mocks/MockUpdatable.java","contents_url":"https://api.github.com/repos/google/agera/contents/agera/src/test/java/com/google/android/agera/test/mocks/MockUpdatable.java?ref=46c89215fd15681833b8c7908b691a2b48ab254f","patch":"@@ -63,6 +63,5 @@ public void removeFromObservables() {\n       observable.removeUpdatable(this);\n     }\n     observables.clear();\n-    runUiThreadTasksIncludingDelayedTasks();\n   }\n }"}]}