{
  "sha": "37a5eb9630ab9a943ac16e0b9fc3ad30135ac3dc",
  "commit": {
    "author": {
      "name": "Magnus Ernstsson",
      "email": "magnus@ernstsson.net",
      "date": "2016-05-14T15:38:57Z"
    },
    "committer": {
      "name": "Magnus Ernstsson",
      "email": "magnus@ernstsson.net",
      "date": "2016-05-14T15:38:57Z"
    },
    "message": "Replaced manual equals tests with equalsverifier",
    "tree": {
      "sha": "8cadc53ac71cf9f77bb98881156e40cfedb79db4",
      "url": "https://api.github.com/repos/google/agera/git/trees/8cadc53ac71cf9f77bb98881156e40cfedb79db4"
    },
    "url": "https://api.github.com/repos/google/agera/git/commits/37a5eb9630ab9a943ac16e0b9fc3ad30135ac3dc",
    "comment_count": 0
  },
  "url": "https://api.github.com/repos/google/agera/commits/37a5eb9630ab9a943ac16e0b9fc3ad30135ac3dc",
  "html_url": "https://github.com/google/agera/commit/37a5eb9630ab9a943ac16e0b9fc3ad30135ac3dc",
  "comments_url": "https://api.github.com/repos/google/agera/commits/37a5eb9630ab9a943ac16e0b9fc3ad30135ac3dc/comments",
  "author": {
    "login": "ernstsson",
    "id": 378389,
    "avatar_url": "https://avatars2.githubusercontent.com/u/378389?v=3",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ernstsson",
    "html_url": "https://github.com/ernstsson",
    "followers_url": "https://api.github.com/users/ernstsson/followers",
    "following_url": "https://api.github.com/users/ernstsson/following{/other_user}",
    "gists_url": "https://api.github.com/users/ernstsson/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ernstsson/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ernstsson/subscriptions",
    "organizations_url": "https://api.github.com/users/ernstsson/orgs",
    "repos_url": "https://api.github.com/users/ernstsson/repos",
    "events_url": "https://api.github.com/users/ernstsson/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ernstsson/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "ernstsson",
    "id": 378389,
    "avatar_url": "https://avatars2.githubusercontent.com/u/378389?v=3",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ernstsson",
    "html_url": "https://github.com/ernstsson",
    "followers_url": "https://api.github.com/users/ernstsson/followers",
    "following_url": "https://api.github.com/users/ernstsson/following{/other_user}",
    "gists_url": "https://api.github.com/users/ernstsson/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ernstsson/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ernstsson/subscriptions",
    "organizations_url": "https://api.github.com/users/ernstsson/orgs",
    "repos_url": "https://api.github.com/users/ernstsson/repos",
    "events_url": "https://api.github.com/users/ernstsson/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ernstsson/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "3da00fb57b2edc18396f0b664a6497a056d622a1",
      "url": "https://api.github.com/repos/google/agera/commits/3da00fb57b2edc18396f0b664a6497a056d622a1",
      "html_url": "https://github.com/google/agera/commit/3da00fb57b2edc18396f0b664a6497a056d622a1"
    }
  ],
  "stats": {
    "total": 397,
    "additions": 58,
    "deletions": 339
  },
  "files": [
    {
      "sha": "2eb97f6b98ad1225ea439887df83b6f0107fb2e6",
      "filename": "agera/src/main/java/com/google/android/agera/Result.java",
      "status": "modified",
      "additions": 10,
      "deletions": 14,
      "changes": 24,
      "blob_url": "https://github.com/google/agera/blob/37a5eb9630ab9a943ac16e0b9fc3ad30135ac3dc/agera/src/main/java/com/google/android/agera/Result.java",
      "raw_url": "https://github.com/google/agera/raw/37a5eb9630ab9a943ac16e0b9fc3ad30135ac3dc/agera/src/main/java/com/google/android/agera/Result.java",
      "contents_url": "https://api.github.com/repos/google/agera/contents/agera/src/main/java/com/google/android/agera/Result.java?ref=37a5eb9630ab9a943ac16e0b9fc3ad30135ac3dc",
      "patch": "@@ -427,27 +427,23 @@ public T recover(@NonNull final Function<? super Throwable, ? extends T> recover\n   }\n \n   @Override\n-  public boolean equals(Object o) {\n-    if (this == o) {\n-      return true;\n-    }\n-    if (!(o instanceof Result)) {\n-      return false;\n-    }\n+  public boolean equals(final Object o) {\n+    if (this == o) { return true; }\n+    if (o == null || getClass() != o.getClass()) { return false; }\n \n-    final Result<?> other = (Result<?>) o;\n+    final Result<?> result = (Result<?>) o;\n \n-    if (value != null) {\n-      return value.equals(other.value);\n-    } else {\n-      //noinspection ConstantConditions -- value == null implies failure != null\n-      return failure.equals(other.failure);\n+    if (value != null ? !value.equals(result.value) : result.value != null) { return false; }\n+    if (failure != null ? !failure.equals(result.failure) : result.failure != null) {\n+      return false;\n     }\n+\n+    return true;\n   }\n \n   @Override\n   public int hashCode() {\n-    int result = (value != null ? value.hashCode() : 0);\n+    int result = value != null ? value.hashCode() : 0;\n     result = 31 * result + (failure != null ? failure.hashCode() : 0);\n     return result;\n   }"
    },
    {
      "sha": "02475179743836de8a50b675dbacc90be0667090",
      "filename": "agera/src/test/java/com/google/android/agera/ResultTest.java",
      "status": "modified",
      "additions": 3,
      "deletions": 22,
      "changes": 25,
      "blob_url": "https://github.com/google/agera/blob/37a5eb9630ab9a943ac16e0b9fc3ad30135ac3dc/agera/src/test/java/com/google/android/agera/ResultTest.java",
      "raw_url": "https://github.com/google/agera/raw/37a5eb9630ab9a943ac16e0b9fc3ad30135ac3dc/agera/src/test/java/com/google/android/agera/ResultTest.java",
      "contents_url": "https://api.github.com/repos/google/agera/contents/agera/src/test/java/com/google/android/agera/ResultTest.java?ref=37a5eb9630ab9a943ac16e0b9fc3ad30135ac3dc",
      "patch": "@@ -20,7 +20,6 @@\n import static com.google.android.agera.Result.failure;\n import static com.google.android.agera.Result.present;\n import static com.google.android.agera.Result.success;\n-import static com.google.android.agera.test.matchers.HasHashCodeOf.hasHashCodeOf;\n import static org.hamcrest.MatcherAssert.assertThat;\n import static org.hamcrest.Matchers.equalTo;\n import static org.hamcrest.Matchers.hasToString;\n@@ -38,6 +37,7 @@\n import static org.mockito.Mockito.when;\n import static org.mockito.MockitoAnnotations.initMocks;\n \n+import nl.jqno.equalsverifier.EqualsVerifier;\n import org.junit.Before;\n import org.junit.Test;\n import org.mockito.Mock;\n@@ -511,34 +511,15 @@ public void shouldReturnNullPointerExceptionForFailureOrNullOnAbsent() {\n   }\n \n   @Test\n-  public void shouldBeEqualForFailureAndFailure() {\n-    assertThat(FAILURE_WITH_THROWABLE, equalTo(Result.<Integer>failure(THROWABLE)));\n-  }\n-\n-  @Test\n   public void shouldBeSingletonForFailureWithoutExplicitThrowable() {\n     assertThat(failure(), equalTo(failure()));\n   }\n \n   @Test\n-  public void shouldNotBeEqualForFailureAndSuccess() {\n-    assertThat(SUCCESS_WITH_VALUE, not(equalTo(FAILURE_WITH_THROWABLE)));\n-  }\n-\n-  @Test\n-  public void shouldNotBeEqualForDifferentType() {\n-    assertThat(SUCCESS_WITH_VALUE, not(equalTo(new Object())));\n+  public void shouldVerifyEqualsForSqlDeleteRequest() {\n+    EqualsVerifier.forClass(Result.class).verify();\n   }\n \n-  @Test\n-  public void shouldHaveSameHashcodeForSameValue() {\n-    assertThat(SUCCESS_WITH_VALUE, hasHashCodeOf(success(VALUE)));\n-  }\n-\n-  @Test\n-  public void shouldHaveSameHashcodeForSameFailure() {\n-    assertThat(FAILURE_WITH_THROWABLE, hasHashCodeOf(failure(THROWABLE)));\n-  }\n \n   @Test\n   public void shouldPrintStringRepresentationForSuccess() {"
    },
    {
      "sha": "f2d42f03f390772c170847ba7a2f2215c02fe117",
      "filename": "agera/src/test/java/com/google/android/agera/test/matchers/HasHashCodeOf.java",
      "status": "removed",
      "additions": 0,
      "deletions": 48,
      "changes": 48,
      "blob_url": "https://github.com/google/agera/blob/3da00fb57b2edc18396f0b664a6497a056d622a1/agera/src/test/java/com/google/android/agera/test/matchers/HasHashCodeOf.java",
      "raw_url": "https://github.com/google/agera/raw/3da00fb57b2edc18396f0b664a6497a056d622a1/agera/src/test/java/com/google/android/agera/test/matchers/HasHashCodeOf.java",
      "contents_url": "https://api.github.com/repos/google/agera/contents/agera/src/test/java/com/google/android/agera/test/matchers/HasHashCodeOf.java?ref=3da00fb57b2edc18396f0b664a6497a056d622a1",
      "patch": "@@ -1,48 +0,0 @@\n-/*\n- * Copyright 2015 Google Inc. All Rights Reserved.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package com.google.android.agera.test.matchers;\n-\n-import android.support.annotation.NonNull;\n-import org.hamcrest.Description;\n-import org.hamcrest.Factory;\n-import org.hamcrest.Matcher;\n-import org.hamcrest.TypeSafeMatcher;\n-\n-public final class HasHashCodeOf extends TypeSafeMatcher<Object> {\n-  @NonNull\n-  private final Object object;\n-\n-  private HasHashCodeOf(@NonNull final Object object) {\n-    this.object = object;\n-  }\n-\n-  @Override\n-  protected boolean matchesSafely(@NonNull final Object item) {\n-    return item.hashCode() == object.hashCode();\n-  }\n-\n-  @Override\n-  public void describeTo(final Description description) {\n-    description.appendText(\"same hashcode as \");\n-    description.appendValue(object);\n-  }\n-\n-  @NonNull\n-  @Factory\n-  public static Matcher<Object> hasHashCodeOf(@NonNull final Object object) {\n-    return new HasHashCodeOf(object);\n-  }\n-}"
    },
    {
      "sha": "8d1b86d41ee3e88addec7b411526683efb9c6485",
      "filename": "extensions/database/src/test/java/com/google/android/agera/database/SqlRequestsTest.java",
      "status": "modified",
      "additions": 9,
      "deletions": 93,
      "changes": 102,
      "blob_url": "https://github.com/google/agera/blob/37a5eb9630ab9a943ac16e0b9fc3ad30135ac3dc/extensions/database/src/test/java/com/google/android/agera/database/SqlRequestsTest.java",
      "raw_url": "https://github.com/google/agera/raw/37a5eb9630ab9a943ac16e0b9fc3ad30135ac3dc/extensions/database/src/test/java/com/google/android/agera/database/SqlRequestsTest.java",
      "contents_url": "https://api.github.com/repos/google/agera/contents/extensions/database/src/test/java/com/google/android/agera/database/SqlRequestsTest.java?ref=37a5eb9630ab9a943ac16e0b9fc3ad30135ac3dc",
      "patch": "@@ -19,7 +19,6 @@\n import static com.google.android.agera.database.SqlRequests.sqlInsertRequest;\n import static com.google.android.agera.database.SqlRequests.sqlRequest;\n import static com.google.android.agera.database.SqlRequests.sqlUpdateRequest;\n-import static com.google.android.agera.database.test.matchers.HasHashCodeOf.hasHashCodeOf;\n import static com.google.android.agera.database.test.matchers.HasPrivateConstructor.hasPrivateConstructor;\n import static org.hamcrest.MatcherAssert.assertThat;\n import static org.hamcrest.Matchers.equalTo;\n@@ -28,6 +27,7 @@\n import static org.hamcrest.Matchers.not;\n import static org.robolectric.annotation.Config.NONE;\n \n+import nl.jqno.equalsverifier.EqualsVerifier;\n import org.junit.Before;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n@@ -103,107 +103,23 @@ public void shouldCreateStringRepresentationForUpdate() {\n   }\n \n   @Test\n-  public void shouldNotBeEqualForDifferentArguments() {\n-    assertThat(sqlRequest, not(equalTo(sqlRequest2)));\n+  public void shouldVerifyEqualsForSqlRequest() {\n+    EqualsVerifier.forClass(SqlRequest.class).verify();\n   }\n \n   @Test\n-  public void shouldBeEqualForSameInstance() {\n-    assertThat(sqlRequest, equalTo(sqlRequest));\n+  public void shouldVerifyEqualsForSqlDeleteRequest() {\n+    EqualsVerifier.forClass(SqlDeleteRequest.class).verify();\n   }\n \n   @Test\n-  public void shouldNotBeEqualForOtherType() {\n-    assertThat(sqlRequest, not(equalTo(new Object())));\n+  public void shouldVerifyEqualsForSqlUpdateRequest() {\n+    EqualsVerifier.forClass(SqlUpdateRequest.class).verify();\n   }\n \n   @Test\n-  public void shouldBeEqualForSameArgumentsButDifferentInstance() {\n-    assertThat(sqlRequest, equalTo(sqlRequest().sql(SQL_QUERY).compile()));\n-  }\n-\n-  @Test\n-  public void shouldHaveSameHashcodeForSameQueryStringButDifferentInstance() {\n-    assertThat(sqlRequest, hasHashCodeOf(sqlRequest().sql(SQL_QUERY).compile()));\n-  }\n-\n-  @Test\n-  public void shouldNotBeEqualForDifferentArgumentsForDelete() {\n-    assertThat(sqlDeleteRequest, not(equalTo(sqlDeleteRequest2)));\n-  }\n-\n-  @Test\n-  public void shouldBeEqualForSameInstanceForDelete() {\n-    assertThat(sqlDeleteRequest, equalTo(sqlDeleteRequest));\n-  }\n-\n-  @Test\n-  public void shouldNotBeEqualForOtherTypeForDelete() {\n-    assertThat(sqlDeleteRequest, not(equalTo(new Object())));\n-  }\n-\n-  @Test\n-  public void shouldBeEqualForSameArgumentsButDifferentInstanceForDelete() {\n-    assertThat(sqlDeleteRequest, equalTo(sqlDeleteRequest().table(TABLE).compile()));\n-  }\n-\n-  @Test\n-  public void shouldHaveSameHashcodeForSameQueryStringButDifferentInstanceForDelete() {\n-    assertThat(sqlDeleteRequest, hasHashCodeOf(sqlDeleteRequest().table(TABLE).compile()));\n-  }\n-\n-  @Test\n-  public void shouldNotBeEqualForDifferentArgumentsForUpdate() {\n-    assertThat(sqlUpdateRequest, not(equalTo(sqlUpdateRequest2)));\n-  }\n-\n-  @Test\n-  public void shouldBeEqualForSameInstanceForUpdate() {\n-    assertThat(sqlUpdateRequest, equalTo(sqlUpdateRequest));\n-  }\n-\n-  @Test\n-  public void shouldNotBeEqualForOtherTypeForUpdate() {\n-    assertThat(sqlUpdateRequest, not(equalTo(new Object())));\n-  }\n-\n-  @Test\n-  public void shouldBeEqualForSameArgumentsButDifferentInstanceForUpdate() {\n-    assertThat(sqlUpdateRequest,\n-        equalTo(sqlUpdateRequest().table(TABLE).column(\"column\", \"value4\").compile()));\n-  }\n-\n-  @Test\n-  public void shouldHaveSameHashcodeForSameQueryStringButDifferentInstanceForUpdate() {\n-    assertThat(sqlUpdateRequest,\n-        hasHashCodeOf(sqlUpdateRequest().table(TABLE).column(\"column\", \"value4\").compile()));\n-  }\n-\n-  @Test\n-  public void shouldNotBeEqualForDifferentArgumentsForInsert() {\n-    assertThat(sqlInsertRequest, not(equalTo(sqlInsertRequest2)));\n-  }\n-\n-  @Test\n-  public void shouldBeEqualForSameInstanceForInsert() {\n-    assertThat(sqlInsertRequest, equalTo(sqlInsertRequest));\n-  }\n-\n-  @Test\n-  public void shouldNotBeEqualForOtherTypeForInsert() {\n-    assertThat(sqlInsertRequest, not(equalTo(new Object())));\n-  }\n-\n-  @Test\n-  public void shouldBeEqualForSameArgumentsButDifferentInstanceForInsert() {\n-    assertThat(sqlInsertRequest,\n-        equalTo(sqlInsertRequest().table(TABLE).column(\"column\", \"value\").compile()));\n-  }\n-\n-  @Test\n-  public void shouldHaveSameHashcodeForSameQueryStringButDifferentInstanceForInsert() {\n-    assertThat(sqlInsertRequest,\n-        hasHashCodeOf(sqlInsertRequest().table(TABLE).column(\"column\", \"value\").compile()));\n+  public void shouldVerifyEqualsForSqlInsertRequest() {\n+    EqualsVerifier.forClass(SqlInsertRequest.class).verify();\n   }\n \n   @Test"
    },
    {
      "sha": "49dcc0696136f24e3f0482f5911f8d0e7d289991",
      "filename": "extensions/database/src/test/java/com/google/android/agera/database/test/matchers/HasHashCodeOf.java",
      "status": "removed",
      "additions": 0,
      "deletions": 47,
      "changes": 47,
      "blob_url": "https://github.com/google/agera/blob/3da00fb57b2edc18396f0b664a6497a056d622a1/extensions/database/src/test/java/com/google/android/agera/database/test/matchers/HasHashCodeOf.java",
      "raw_url": "https://github.com/google/agera/raw/3da00fb57b2edc18396f0b664a6497a056d622a1/extensions/database/src/test/java/com/google/android/agera/database/test/matchers/HasHashCodeOf.java",
      "contents_url": "https://api.github.com/repos/google/agera/contents/extensions/database/src/test/java/com/google/android/agera/database/test/matchers/HasHashCodeOf.java?ref=3da00fb57b2edc18396f0b664a6497a056d622a1",
      "patch": "@@ -1,47 +0,0 @@\n-/*\n- * Copyright 2015 Google Inc. All Rights Reserved.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package com.google.android.agera.database.test.matchers;\n-\n-import android.support.annotation.NonNull;\n-import org.hamcrest.Description;\n-import org.hamcrest.Factory;\n-import org.hamcrest.Matcher;\n-import org.hamcrest.TypeSafeMatcher;\n-\n-public final class HasHashCodeOf extends TypeSafeMatcher<Object> {\n-  private final Object object;\n-\n-  private HasHashCodeOf(final Object object) {\n-    this.object = object;\n-  }\n-\n-  @Override\n-  protected boolean matchesSafely(final Object item) {\n-    return item.hashCode() == object.hashCode();\n-  }\n-\n-  @Override\n-  public void describeTo(final Description description) {\n-    description.appendText(\"same hashcode as \");\n-    description.appendValue(object);\n-  }\n-\n-  @NonNull\n-  @Factory\n-  public static Matcher<Object> hasHashCodeOf(final Object object) {\n-    return new HasHashCodeOf(object);\n-  }\n-}"
    },
    {
      "sha": "1b2754b7964533173d55b51e48286594eddd669d",
      "filename": "extensions/net/src/main/java/com/google/android/agera/net/HttpRequest.java",
      "status": "modified",
      "additions": 26,
      "deletions": 20,
      "changes": 46,
      "blob_url": "https://github.com/google/agera/blob/37a5eb9630ab9a943ac16e0b9fc3ad30135ac3dc/extensions/net/src/main/java/com/google/android/agera/net/HttpRequest.java",
      "raw_url": "https://github.com/google/agera/raw/37a5eb9630ab9a943ac16e0b9fc3ad30135ac3dc/extensions/net/src/main/java/com/google/android/agera/net/HttpRequest.java",
      "contents_url": "https://api.github.com/repos/google/agera/contents/extensions/net/src/main/java/com/google/android/agera/net/HttpRequest.java?ref=37a5eb9630ab9a943ac16e0b9fc3ad30135ac3dc",
      "patch": "@@ -52,20 +52,32 @@\n   }\n \n   @Override\n+  public String toString() {\n+    return \"HttpRequest{\" +\n+        \"method='\" + method + '\\'' +\n+        \", url='\" + url + '\\'' +\n+        \", body=\" + Arrays.toString(body) +\n+        \", header=\" + header +\n+        '}';\n+  }\n+\n+  @Override\n   public boolean equals(final Object o) {\n-    if (this == o) {\n-      return true;\n-    }\n-    if (!(o instanceof HttpRequest)) {\n-      return false;\n-    }\n+    if (this == o) { return true; }\n+    if (o == null || getClass() != o.getClass()) { return false; }\n \n     final HttpRequest that = (HttpRequest) o;\n \n-    return method.equals(that.method)\n-        && url.equals(that.url)\n-        && Arrays.equals(body, that.body)\n-        && header.equals(that.header);\n+    if (useCaches != that.useCaches) { return false; }\n+    if (followRedirects != that.followRedirects) { return false; }\n+    if (connectTimeoutMs != that.connectTimeoutMs) { return false; }\n+    if (readTimeoutMs != that.readTimeoutMs) { return false; }\n+    if (!method.equals(that.method)) { return false; }\n+    if (!url.equals(that.url)) { return false; }\n+    if (!Arrays.equals(body, that.body)) { return false; }\n+    if (!header.equals(that.header)) { return false; }\n+\n+    return true;\n   }\n \n   @Override\n@@ -74,16 +86,10 @@ public int hashCode() {\n     result = 31 * result + url.hashCode();\n     result = 31 * result + Arrays.hashCode(body);\n     result = 31 * result + header.hashCode();\n+    result = 31 * result + (useCaches ? 1 : 0);\n+    result = 31 * result + (followRedirects ? 1 : 0);\n+    result = 31 * result + connectTimeoutMs;\n+    result = 31 * result + readTimeoutMs;\n     return result;\n   }\n-\n-  @Override\n-  public String toString() {\n-    return \"HttpRequest{\" +\n-        \"method='\" + method + '\\'' +\n-        \", url='\" + url + '\\'' +\n-        \", body=\" + Arrays.toString(body) +\n-        \", header=\" + header +\n-        '}';\n-  }\n }"
    },
    {
      "sha": "3a1836265342460e7c20ce07ea58b000ecc9ea5a",
      "filename": "extensions/net/src/test/java/com/google/android/agera/net/HttpRequestTest.java",
      "status": "modified",
      "additions": 4,
      "deletions": 21,
      "changes": 25,
      "blob_url": "https://github.com/google/agera/blob/37a5eb9630ab9a943ac16e0b9fc3ad30135ac3dc/extensions/net/src/test/java/com/google/android/agera/net/HttpRequestTest.java",
      "raw_url": "https://github.com/google/agera/raw/37a5eb9630ab9a943ac16e0b9fc3ad30135ac3dc/extensions/net/src/test/java/com/google/android/agera/net/HttpRequestTest.java",
      "contents_url": "https://api.github.com/repos/google/agera/contents/extensions/net/src/test/java/com/google/android/agera/net/HttpRequestTest.java?ref=37a5eb9630ab9a943ac16e0b9fc3ad30135ac3dc",
      "patch": "@@ -21,7 +21,6 @@\n import static com.google.android.agera.net.HttpRequests.httpGetRequest;\n import static com.google.android.agera.net.HttpRequests.httpPostRequest;\n import static com.google.android.agera.net.HttpRequests.httpPutRequest;\n-import static com.google.android.agera.net.test.matchers.HasHashCodeOf.hasHashCodeOf;\n import static com.google.android.agera.net.test.matchers.HasPrivateConstructor.hasPrivateConstructor;\n import static org.hamcrest.MatcherAssert.assertThat;\n import static org.hamcrest.Matchers.hasEntry;\n@@ -33,6 +32,8 @@\n import com.google.android.agera.net.HttpRequestCompilerStates.HTBodyHeaderFieldRedirectsCachesConnectionTimeoutReadTimeoutCompile;\n import com.google.android.agera.net.HttpRequestCompilerStates.HTHeaderFieldRedirectsCachesConnectionTimeoutReadTimeoutCompile;\n \n+import dalvik.annotation.TestTarget;\n+import nl.jqno.equalsverifier.EqualsVerifier;\n import org.junit.Test;\n \n import java.util.Map;\n@@ -197,20 +198,8 @@ public void shouldThrowExceptionForReuseOfCompilerOfBody() {\n   }\n \n   @Test\n-  public void shouldBeEqualForSameData() {\n-    assertThat(httpGetRequest(URL).compile(), is(httpGetRequest(URL).compile()));\n-  }\n-\n-  @Test\n-  public void shouldBeEqualForSameInstance() {\n-    final HttpRequest httpRequest = httpGetRequest(URL).compile();\n-    assertThat(httpRequest, is(httpRequest));\n-  }\n-\n-  @Test\n-  public void shouldNotBeEqualForDifferentType() {\n-    final HttpRequest request = httpGetRequest(URL).compile();\n-    assertThat(request, is(not(new Object())));\n+  public void shouldVerifyEquals() {\n+    EqualsVerifier.forClass(HttpRequest.class).verify();\n   }\n \n   @Test\n@@ -219,12 +208,6 @@ public void shouldHaveToString() {\n   }\n \n   @Test\n-  public void shouldHaveSameHashcodeForSameData() {\n-    assertThat(httpGetRequest(URL).compile(),\n-        hasHashCodeOf(httpGetRequest(URL).compile()));\n-  }\n-\n-  @Test\n   public void shouldHavePrivateConstructor() {\n     assertThat(HttpRequests.class, hasPrivateConstructor());\n   }"
    },
    {
      "sha": "b8cea0ec59901dda5cd3fdd09a86827cfc2b3046",
      "filename": "extensions/net/src/test/java/com/google/android/agera/net/HttpResponseTest.java",
      "status": "modified",
      "additions": 3,
      "deletions": 25,
      "changes": 28,
      "blob_url": "https://github.com/google/agera/blob/37a5eb9630ab9a943ac16e0b9fc3ad30135ac3dc/extensions/net/src/test/java/com/google/android/agera/net/HttpResponseTest.java",
      "raw_url": "https://github.com/google/agera/raw/37a5eb9630ab9a943ac16e0b9fc3ad30135ac3dc/extensions/net/src/test/java/com/google/android/agera/net/HttpResponseTest.java",
      "contents_url": "https://api.github.com/repos/google/agera/contents/extensions/net/src/test/java/com/google/android/agera/net/HttpResponseTest.java?ref=37a5eb9630ab9a943ac16e0b9fc3ad30135ac3dc",
      "patch": "@@ -17,7 +17,6 @@\n \n import static com.google.android.agera.Result.success;\n import static com.google.android.agera.net.HttpResponse.httpResponse;\n-import static com.google.android.agera.net.test.matchers.HasHashCodeOf.hasHashCodeOf;\n import static org.hamcrest.MatcherAssert.assertThat;\n import static org.hamcrest.Matchers.equalTo;\n import static org.hamcrest.Matchers.hasToString;\n@@ -26,6 +25,7 @@\n import static org.hamcrest.Matchers.isEmptyOrNullString;\n import static org.hamcrest.Matchers.not;\n \n+import nl.jqno.equalsverifier.EqualsVerifier;\n import org.junit.After;\n import org.junit.Before;\n import org.junit.Test;\n@@ -138,30 +138,8 @@ public void shouldGetCaseInsensitiveHeaders() {\n   }\n \n   @Test\n-  public void shouldNotBeEqualForDifferentArguments() {\n-    assertThat(successfulHttpResponse, not(equalTo(failedResponse)));\n-  }\n-\n-  @Test\n-  public void shouldBeEqualForSameInstance() {\n-    assertThat(successfulHttpResponse, equalTo(successfulHttpResponse));\n-  }\n-\n-  @Test\n-  public void shouldNotBeEqualForOtherType() {\n-    assertThat(successfulHttpResponse, not(equalTo(new Object())));\n-  }\n-\n-  @Test\n-  public void shouldBeEqualForSameParametersButDifferentInstance() {\n-    assertThat(successfulHttpResponse, equalTo(httpResponse(SUCCESSFUL_RESPONSE_CODE,\n-        SUCCESSFUL_RESPONSE_MESSAGE, HEADERS, defaultCharsetBody)));\n-  }\n-\n-  @Test\n-  public void shouldHaveSameHashcodeForSameParametersButDifferentInstance() {\n-    assertThat(successfulHttpResponse, hasHashCodeOf(httpResponse(SUCCESSFUL_RESPONSE_CODE,\n-        SUCCESSFUL_RESPONSE_MESSAGE, HEADERS, defaultCharsetBody)));\n+  public void shouldVerifyEquals() {\n+    EqualsVerifier.forClass(HttpResponse.class).verify();\n   }\n \n   @Test"
    },
    {
      "sha": "91c3507700382fc6ec107999a362274ed1c55cbe",
      "filename": "extensions/net/src/test/java/com/google/android/agera/net/test/matchers/HasHashCodeOf.java",
      "status": "removed",
      "additions": 0,
      "deletions": 47,
      "changes": 47,
      "blob_url": "https://github.com/google/agera/blob/3da00fb57b2edc18396f0b664a6497a056d622a1/extensions/net/src/test/java/com/google/android/agera/net/test/matchers/HasHashCodeOf.java",
      "raw_url": "https://github.com/google/agera/raw/3da00fb57b2edc18396f0b664a6497a056d622a1/extensions/net/src/test/java/com/google/android/agera/net/test/matchers/HasHashCodeOf.java",
      "contents_url": "https://api.github.com/repos/google/agera/contents/extensions/net/src/test/java/com/google/android/agera/net/test/matchers/HasHashCodeOf.java?ref=3da00fb57b2edc18396f0b664a6497a056d622a1",
      "patch": "@@ -1,47 +0,0 @@\n-/*\n- * Copyright 2015 Google Inc. All Rights Reserved.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package com.google.android.agera.net.test.matchers;\n-\n-import android.support.annotation.NonNull;\n-import org.hamcrest.Description;\n-import org.hamcrest.Factory;\n-import org.hamcrest.Matcher;\n-import org.hamcrest.TypeSafeMatcher;\n-\n-public final class HasHashCodeOf extends TypeSafeMatcher<Object> {\n-  private final Object object;\n-\n-  private HasHashCodeOf(final Object object) {\n-    this.object = object;\n-  }\n-\n-  @Override\n-  protected boolean matchesSafely(final Object item) {\n-    return item.hashCode() == object.hashCode();\n-  }\n-\n-  @Override\n-  public void describeTo(final Description description) {\n-    description.appendText(\"same hashcode as \");\n-    description.appendValue(object);\n-  }\n-\n-  @NonNull\n-  @Factory\n-  public static Matcher<Object> hasHashCodeOf(final Object object) {\n-    return new HasHashCodeOf(object);\n-  }\n-}"
    },
    {
      "sha": "fff3de9bcb1315d924f9c14a5c34a739540a0069",
      "filename": "settings.gradle",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/google/agera/blob/37a5eb9630ab9a943ac16e0b9fc3ad30135ac3dc/settings.gradle",
      "raw_url": "https://github.com/google/agera/raw/37a5eb9630ab9a943ac16e0b9fc3ad30135ac3dc/settings.gradle",
      "contents_url": "https://api.github.com/repos/google/agera/contents/settings.gradle?ref=37a5eb9630ab9a943ac16e0b9fc3ad30135ac3dc",
      "patch": "@@ -99,10 +99,11 @@ gradle.allprojects {\n                 dependencies {\n                     compile 'com.android.support:support-annotations:' +\n                             gradle.supportLibraryVersion\n-                    testCompile \"org.hamcrest:hamcrest-library:1.3\"\n+                    testCompile 'org.hamcrest:hamcrest-library:1.3'\n                     testCompile 'junit:junit:4.12'\n                     testCompile 'org.robolectric:robolectric:3.1-rc1'\n-                    testCompile \"org.mockito:mockito-core:1.10.19\"\n+                    testCompile 'org.mockito:mockito-core:1.10.19'\n+                    testCompile 'nl.jqno.equalsverifier:equalsverifier:2.0.2'\n                 }\n                 task sourcesJar(type: Jar) {\n                     from android.sourceSets.main.java.srcDirs"
    }
  ]
}
