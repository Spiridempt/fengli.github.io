{"sha":"5da5f59ffd6bac3bbea56fd540afa98ccfd65856","commit":{"author":{"name":"Magnus Ernstsson","email":"magnus@ernstsson.net","date":"2017-03-22T12:25:04Z"},"committer":{"name":"GitHub","email":"noreply@github.com","date":"2017-03-22T12:25:04Z"},"message":"Added forCollection and collection binding (#156)","tree":{"sha":"3de5ee6d10735182e14867db93e4e0ad55fd2a46","url":"https://api.github.com/repos/google/agera/git/trees/3de5ee6d10735182e14867db93e4e0ad55fd2a46"},"url":"https://api.github.com/repos/google/agera/git/commits/5da5f59ffd6bac3bbea56fd540afa98ccfd65856","comment_count":0},"url":"https://api.github.com/repos/google/agera/commits/5da5f59ffd6bac3bbea56fd540afa98ccfd65856","html_url":"https://github.com/google/agera/commit/5da5f59ffd6bac3bbea56fd540afa98ccfd65856","comments_url":"https://api.github.com/repos/google/agera/commits/5da5f59ffd6bac3bbea56fd540afa98ccfd65856/comments","author":{"login":"ernstsson","id":378389,"avatar_url":"https://avatars2.githubusercontent.com/u/378389?v=3","gravatar_id":"","url":"https://api.github.com/users/ernstsson","html_url":"https://github.com/ernstsson","followers_url":"https://api.github.com/users/ernstsson/followers","following_url":"https://api.github.com/users/ernstsson/following{/other_user}","gists_url":"https://api.github.com/users/ernstsson/gists{/gist_id}","starred_url":"https://api.github.com/users/ernstsson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ernstsson/subscriptions","organizations_url":"https://api.github.com/users/ernstsson/orgs","repos_url":"https://api.github.com/users/ernstsson/repos","events_url":"https://api.github.com/users/ernstsson/events{/privacy}","received_events_url":"https://api.github.com/users/ernstsson/received_events","type":"User","site_admin":false},"committer":{"login":"web-flow","id":19864447,"avatar_url":"https://avatars0.githubusercontent.com/u/19864447?v=3","gravatar_id":"","url":"https://api.github.com/users/web-flow","html_url":"https://github.com/web-flow","followers_url":"https://api.github.com/users/web-flow/followers","following_url":"https://api.github.com/users/web-flow/following{/other_user}","gists_url":"https://api.github.com/users/web-flow/gists{/gist_id}","starred_url":"https://api.github.com/users/web-flow/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/web-flow/subscriptions","organizations_url":"https://api.github.com/users/web-flow/orgs","repos_url":"https://api.github.com/users/web-flow/repos","events_url":"https://api.github.com/users/web-flow/events{/privacy}","received_events_url":"https://api.github.com/users/web-flow/received_events","type":"User","site_admin":false},"parents":[{"sha":"2ffcaf6617890eb66b58c03c93768955294d70ec","url":"https://api.github.com/repos/google/agera/commits/2ffcaf6617890eb66b58c03c93768955294d70ec","html_url":"https://github.com/google/agera/commit/2ffcaf6617890eb66b58c03c93768955294d70ec"}],"stats":{"total":624,"additions":540,"deletions":84},"files":[{"sha":"f64bc2e75f429dc7b05fbf7b8a69a5cd2c08b338","filename":"extensions/rvadapter/src/main/java/com/google/android/agera/rvadapter/RepositoryPresenterCompiler.java","status":"modified","additions":30,"deletions":7,"changes":37,"blob_url":"https://github.com/google/agera/blob/5da5f59ffd6bac3bbea56fd540afa98ccfd65856/extensions/rvadapter/src/main/java/com/google/android/agera/rvadapter/RepositoryPresenterCompiler.java","raw_url":"https://github.com/google/agera/raw/5da5f59ffd6bac3bbea56fd540afa98ccfd65856/extensions/rvadapter/src/main/java/com/google/android/agera/rvadapter/RepositoryPresenterCompiler.java","contents_url":"https://api.github.com/repos/google/agera/contents/extensions/rvadapter/src/main/java/com/google/android/agera/rvadapter/RepositoryPresenterCompiler.java?ref=5da5f59ffd6bac3bbea56fd540afa98ccfd65856","patch":"@@ -36,11 +36,12 @@\n import com.google.android.agera.rvadapter.RepositoryPresenterCompilerStates.RPItemCompile;\n import com.google.android.agera.rvadapter.RepositoryPresenterCompilerStates.RPLayout;\n import com.google.android.agera.rvadapter.RepositoryPresenterCompilerStates.RPMain;\n+import com.google.android.agera.rvadapter.RepositoryPresenterCompilerStates.RPTypedCollectionCompile;\n import java.lang.ref.WeakReference;\n import java.util.List;\n \n @SuppressWarnings({\"unchecked, rawtypes\"})\n-final class RepositoryPresenterCompiler implements RPLayout, RPMain {\n+final class RepositoryPresenterCompiler implements RPLayout, RPMain, RPTypedCollectionCompile {\n   @NonNull\n   private Function<Object, Integer> layoutForItem;\n   @NonNull\n@@ -49,33 +50,49 @@\n   private Receiver recycler = nullReceiver();\n   @NonNull\n   private Function<Object, Long> stableIdForItem = staticFunction(RecyclerView.NO_ID);\n+  @NonNull\n+  private Binder collectionBinder = nullBinder();\n \n   @NonNull\n   @Override\n   public RepositoryPresenter forItem() {\n     return new CompiledRepositoryPresenter(layoutForItem, binder, stableIdForItem, recycler,\n-        itemAsList());\n+        itemAsList(), collectionBinder);\n   }\n \n   @NonNull\n   @Override\n   public RepositoryPresenter<List> forList() {\n     return new CompiledRepositoryPresenter(layoutForItem, binder, stableIdForItem, recycler,\n-        (Function) identityFunction());\n+        (Function) identityFunction(), collectionBinder);\n   }\n \n   @NonNull\n   @Override\n   public RepositoryPresenter<Result> forResult() {\n     return new CompiledRepositoryPresenter(layoutForItem, binder, stableIdForItem, recycler,\n-        (Function) resultAsList());\n+        (Function) resultAsList(), collectionBinder);\n   }\n \n   @NonNull\n   @Override\n   public RepositoryPresenter<Result<List>> forResultList() {\n     return new CompiledRepositoryPresenter(layoutForItem, binder, stableIdForItem, recycler,\n-        (Function) resultListAsList());\n+        (Function) resultListAsList(), collectionBinder);\n+  }\n+\n+  @NonNull\n+  @Override\n+  public RPTypedCollectionCompile bindCollectionWith(@NonNull final Binder collectionBinder) {\n+    this.collectionBinder = collectionBinder;\n+    return this;\n+  }\n+\n+  @NonNull\n+  @Override\n+  public RepositoryPresenter forCollection(@NonNull final Function converter) {\n+    return new CompiledRepositoryPresenter(layoutForItem, binder, stableIdForItem, recycler,\n+        converter, collectionBinder);\n   }\n \n   @NonNull\n@@ -124,6 +141,8 @@ public RPMain recycleWith(@NonNull final Receiver recycler) {\n     @NonNull\n     private final Function<Object, List<Object>> converter;\n     @NonNull\n+    private final Binder<Object, View> collectionBinder;\n+    @NonNull\n     private final Function<Object, Integer> layoutId;\n     @NonNull\n     private final Binder<Object, View> binder;\n@@ -141,7 +160,9 @@ public RPMain recycleWith(@NonNull final Receiver recycler) {\n         @NonNull final Binder<Object, View> binder,\n         @NonNull final Function<Object, Long> stableIdForItem,\n         @NonNull final Receiver<View> recycler,\n-        @NonNull final Function<Object, List<Object>> converter) {\n+        @NonNull final Function<Object, List<Object>> converter,\n+        @NonNull final Binder<Object, View> collectionBinder) {\n+      this.collectionBinder = collectionBinder;\n       this.converter = converter;\n       this.layoutId = layoutId;\n       this.binder = binder;\n@@ -162,7 +183,9 @@ public int getLayoutResId(@NonNull final Object data, final int index) {\n     @Override\n     public void bind(@NonNull final Object data, final int index,\n         @NonNull final RecyclerView.ViewHolder holder) {\n-      binder.bind(getItems(data).get(index), holder.itemView);\n+      final Object item = getItems(data).get(index);\n+      collectionBinder.bind(data, holder.itemView);\n+      binder.bind(item, holder.itemView);\n     }\n \n     @Override"},{"sha":"1becc47c04b392ee7ff6660949e5dfc631d89871","filename":"extensions/rvadapter/src/main/java/com/google/android/agera/rvadapter/RepositoryPresenterCompilerStates.java","status":"modified","additions":45,"deletions":19,"changes":64,"blob_url":"https://github.com/google/agera/blob/5da5f59ffd6bac3bbea56fd540afa98ccfd65856/extensions/rvadapter/src/main/java/com/google/android/agera/rvadapter/RepositoryPresenterCompilerStates.java","raw_url":"https://github.com/google/agera/raw/5da5f59ffd6bac3bbea56fd540afa98ccfd65856/extensions/rvadapter/src/main/java/com/google/android/agera/rvadapter/RepositoryPresenterCompilerStates.java","contents_url":"https://api.github.com/repos/google/agera/contents/extensions/rvadapter/src/main/java/com/google/android/agera/rvadapter/RepositoryPresenterCompilerStates.java?ref=5da5f59ffd6bac3bbea56fd540afa98ccfd65856","patch":"@@ -45,7 +45,7 @@\n     TRet layout(@LayoutRes int layoutId);\n \n     /**\n-     * Specifies a {@link Function} to return a @{code layoutId} that be inflated given the item in\n+     * Specifies a {@link Function} to return a {@code layoutId} that be inflated given the item in\n      * the {@link Repository}.\n      */\n     @NonNull\n@@ -59,47 +59,39 @@\n   interface RPItemCompile<TVal> {\n \n     /**\n-     * Creates a {@link RepositoryPresenter} for a @{link Repository} of a single item that will be\n+     * Creates a {@link RepositoryPresenter} for a {@link Repository} of a single item that will be\n      * bound to the {@link RecyclerView}.\n      */\n     @NonNull\n     RepositoryPresenter<TVal> forItem();\n \n     /**\n-     * Creates a {@link RepositoryPresenter} for a @{link Repository} of a {@link Result} where the\n-     * item in the {@link Result} will be bound to the @{link RecyclerView} if present.\n+     * Creates a {@link RepositoryPresenter} for a {@link Repository} of a {@link Result} where the\n+     * item in the {@link Result} will be bound to the {@link RecyclerView} if present.\n      */\n     @NonNull\n     RepositoryPresenter<Result<TVal>> forResult();\n   }\n \n   /**\n-   * Compiler state to compile for the pre-defined collection container type of the associated\n+   * Compiler state to compile for the generic collection container type of the associated\n    * {@link Repository}.\n    */\n-  interface RPSpecificCollectionCompile<TVal> {\n-\n+  interface RPTypedCollectionCompile<TVal, TCol> {\n     /**\n-     * Creates a {@link RepositoryPresenter} for a @{link Repository} of a {@link List} where each\n-     * item in the {@link List} will be bound to the {@link RecyclerView}.\n-     */\n-    @NonNull\n-    RepositoryPresenter<List<TVal>> forList();\n-\n-    /**\n-     * Creates a {@link RepositoryPresenter} for a @{link Repository} of a {@link Result} containing\n-     * a {@link List} where each item in the {@link List} will be bound to the {@link\n-     * RecyclerView}.\n+     * Creates a {@link RepositoryPresenter} for a {@link Repository} of a type that can be\n+     * converted to a {@link List} of items using the {@code converter}.\n      */\n     @NonNull\n-    RepositoryPresenter<Result<List<TVal>>> forResultList();\n+    <TColE extends TCol> RepositoryPresenter<TColE> forCollection(\n+        @NonNull Function<TColE, List<TVal>> converter);\n   }\n \n   /**\n    * Compiler state to specify how to bind the {@link Repository} item to the view inflated by the\n    * layout.\n    */\n-  interface RPMain<T> extends RPItemCompile<T>, RPSpecificCollectionCompile<T> {\n+  interface RPMain<T> extends RPItemCompile<T> {\n \n     /**\n      * Specifies a {@link Binder} to bind a single item in the {@link Repository} to an inflated\n@@ -136,5 +128,39 @@\n      */\n     @NonNull\n     RPItemCompile<T> stableId(long stableId);\n+\n+    /**\n+     * Specifies a {@link Binder} to bind the whole collection (the repository value) to an inflated\n+     * item view. This binder will be called before the item binder specified with\n+     * {@link #bindWith}, and called for each item view. This is useful for cases where the\n+     * collection object contains useful information for binding items, which is not copied to the\n+     * individual item objects.\n+     */\n+    @NonNull\n+    <TCol> RPTypedCollectionCompile<T, TCol> bindCollectionWith(\n+        @NonNull Binder<TCol, View> collectionBinder);\n+\n+\n+    /**\n+     * Creates a {@link RepositoryPresenter} for a {@link Repository} of a {@link List} where each\n+     * item in the {@link List} will be bound to the {@link RecyclerView}.\n+     */\n+    @NonNull\n+    RepositoryPresenter<List<T>> forList();\n+\n+    /**\n+     * Creates a {@link RepositoryPresenter} for a {@link Repository} of a {@link Result} containing\n+     * a {@link List} where each item in the {@link List} will be bound to the {@link\n+     * RecyclerView}.\n+     */\n+    @NonNull\n+    RepositoryPresenter<Result<List<T>>> forResultList();\n+\n+    /**\n+     * Creates a {@link RepositoryPresenter} for a {@link Repository} of a type that can be\n+     * converted to a {@link List} of items using the {@code converter}.\n+     */\n+    @NonNull\n+    <TCol> RepositoryPresenter<TCol> forCollection(@NonNull Function<TCol, List<T>> converter);\n   }\n }"},{"sha":"b3557454be089eefd7a85efccdfe5598aadaa7d7","filename":"extensions/rvadapter/src/test/java/com/google/android/agera/rvadapter/RepositoryAdapterTest.java","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/google/agera/blob/5da5f59ffd6bac3bbea56fd540afa98ccfd65856/extensions/rvadapter/src/test/java/com/google/android/agera/rvadapter/RepositoryAdapterTest.java","raw_url":"https://github.com/google/agera/raw/5da5f59ffd6bac3bbea56fd540afa98ccfd65856/extensions/rvadapter/src/test/java/com/google/android/agera/rvadapter/RepositoryAdapterTest.java","contents_url":"https://api.github.com/repos/google/agera/contents/extensions/rvadapter/src/test/java/com/google/android/agera/rvadapter/RepositoryAdapterTest.java?ref=5da5f59ffd6bac3bbea56fd540afa98ccfd65856","patch":"@@ -96,6 +96,7 @@\n   private MutableRepository repository;\n   private Repository secondRepository;\n   private RepositoryAdapter repositoryAdapter;\n+  private RepositoryAdapter repositoryAdapterWithoutStatic;\n   private Adapter repositoryAdapterWhileResumed;\n   private Adapter repositoryAdapterWhileStarted;\n \n@@ -121,6 +122,9 @@ public void setUp() {\n         .addItem(ITEM, itemRepositoryPresenter)\n         .addAdditionalObservable(updateDispatcher)\n         .build();\n+    repositoryAdapterWithoutStatic = repositoryAdapter()\n+        .add(repository, repositoryPresenter)\n+        .build();\n   }\n \n   @Test\n@@ -137,6 +141,13 @@ public void shouldReturnItemIdFromFirstPresenter() {\n     verify(itemRepositoryPresenter, never()).getItemId(any(), anyInt());\n   }\n \n+\n+  @Test\n+  public void shouldReturnItemIdFromFirstPresenterWithoutStatic() {\n+    when(repositoryPresenter.getItemId(REPOSITORY_ITEM, 0)).thenReturn(10L);\n+    assertThat(repositoryAdapterWithoutStatic.getItemId(0), is(10L));\n+  }\n+\n   @Test\n   public void shouldReturnItemIdFromSecondPresenter() {\n     when(secondRepositoryPresenter.getItemId(REPOSITORY_LIST, 0)).thenReturn(11L);"},{"sha":"517e8d2b9f2dedf9a046aa03b098d1d21a6e8f47","filename":"extensions/rvadapter/src/test/java/com/google/android/agera/rvadapter/RepositoryPresentersTest.java","status":"modified","additions":84,"deletions":6,"changes":90,"blob_url":"https://github.com/google/agera/blob/5da5f59ffd6bac3bbea56fd540afa98ccfd65856/extensions/rvadapter/src/test/java/com/google/android/agera/rvadapter/RepositoryPresentersTest.java","raw_url":"https://github.com/google/agera/raw/5da5f59ffd6bac3bbea56fd540afa98ccfd65856/extensions/rvadapter/src/test/java/com/google/android/agera/rvadapter/RepositoryPresentersTest.java","contents_url":"https://api.github.com/repos/google/agera/contents/extensions/rvadapter/src/test/java/com/google/android/agera/rvadapter/RepositoryPresentersTest.java?ref=5da5f59ffd6bac3bbea56fd540afa98ccfd65856","patch":"@@ -15,17 +15,22 @@\n  */\n package com.google.android.agera.rvadapter;\n \n+import static com.google.android.agera.Result.failure;\n import static com.google.android.agera.Result.present;\n import static com.google.android.agera.Result.success;\n import static com.google.android.agera.rvadapter.RepositoryPresenters.repositoryPresenterOf;\n import static com.google.android.agera.rvadapter.test.matchers.HasPrivateConstructor.hasPrivateConstructor;\n+import static java.lang.String.valueOf;\n import static java.util.Arrays.asList;\n+import static java.util.Collections.singletonList;\n import static org.hamcrest.MatcherAssert.assertThat;\n import static org.hamcrest.Matchers.is;\n+import static org.mockito.Mockito.reset;\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;\n import static org.mockito.MockitoAnnotations.initMocks;\n \n+import android.support.annotation.NonNull;\n import android.support.v7.widget.RecyclerView;\n import android.view.View;\n import com.google.android.agera.Binder;\n@@ -45,29 +50,32 @@\n @Config(manifest = Config.NONE)\n public class RepositoryPresentersTest {\n   private static final String STRING = \"string\";\n+  private static final String FIRST_STRING_CHARACTER = \"s\";\n   private static final String SECOND_STRING = \"string2\";\n   private static final Result<String> STRING_RESULT = present(STRING);\n   private static final List<String> STRING_LIST = asList(STRING, SECOND_STRING);\n   private static final Result<List<String>> STRING_LIST_RESULT = success(STRING_LIST);\n-  private static final Result<String> FAILURE = Result.<String>failure();\n-  private static final Result<List<String>> LIST_FAILURE = Result.<List<String>>failure();\n+  private static final Result<String> FAILURE = failure();\n+  private static final Result<List<String>> LIST_FAILURE = failure();\n   private static final int LAYOUT_ID = 0;\n   private static final int DYNAMIC_LAYOUT_ID = 1;\n   private static final long STABLE_ID = 2;\n   @Mock\n   private Binder<String, View> binder;\n   @Mock\n+  private Binder<String, View> collectionBinder;\n+  @Mock\n   private Receiver<View> recycler;\n   @Mock\n-  private Function<String,Integer> layoutForItem;\n+  private Function<String, Integer> layoutForItem;\n   private RecyclerView.ViewHolder viewHolder;\n   @Mock\n   private View view;\n \n   @Before\n   public void setUp() {\n     initMocks(this);\n-    viewHolder = new RecyclerView.ViewHolder(view){};\n+    viewHolder = new RecyclerView.ViewHolder(view) {};\n     when(layoutForItem.apply(SECOND_STRING)).thenReturn(DYNAMIC_LAYOUT_ID);\n   }\n \n@@ -91,7 +99,6 @@ public void shouldBindRepositoryPresenterOfResultWithoutBinder() {\n     resultRepositoryPresenter.bind(STRING_RESULT, 0, viewHolder);\n   }\n \n-\n   @Test\n   public void shouldBindRepositoryPresenterOfResultList() {\n     final RepositoryPresenter<Result<List<String>>> resultListRepositoryPresenter =\n@@ -126,6 +133,42 @@ public void shouldBindRepositoryPresenterOfList() {\n   }\n \n   @Test\n+  public void shouldBindRepositoryPresenterOfCollection() {\n+    final RepositoryPresenter<String> repositoryPresenter =\n+        repositoryPresenterOf(String.class)\n+            .layout(LAYOUT_ID)\n+            .bindWith(binder)\n+            .forCollection(new Function<String, List<String>>() {\n+              @NonNull\n+              @Override\n+              public List<String> apply(@NonNull final String input) {\n+                return singletonList(valueOf(input.charAt(0)));\n+              }\n+            });\n+    repositoryPresenter.bind(STRING, 0, viewHolder);\n+    verify(binder).bind(FIRST_STRING_CHARACTER, view);\n+  }\n+\n+  @Test\n+  public void shouldBindRepositoryPresenterCollectionOfCollection() {\n+    final RepositoryPresenter<String> repositoryPresenter =\n+        repositoryPresenterOf(String.class)\n+            .layout(LAYOUT_ID)\n+            .bindWith(binder)\n+            .bindCollectionWith(collectionBinder)\n+            .forCollection(new Function<String, List<String>>() {\n+              @NonNull\n+              @Override\n+              public List<String> apply(@NonNull final String input) {\n+                return singletonList(valueOf(input.charAt(0)));\n+              }\n+            });\n+    repositoryPresenter.bind(STRING, 0, viewHolder);\n+    verify(binder).bind(FIRST_STRING_CHARACTER, view);\n+    verify(collectionBinder).bind(STRING, view);\n+  }\n+\n+  @Test\n   public void shouldRecycleViewInRepositoryPresenter() {\n     final RepositoryPresenter<List<String>> listRepositoryPresenter =\n         repositoryPresenterOf(String.class)\n@@ -220,7 +263,6 @@ public void shouldReturnStableIdForRepositoryPresenterOfResult() {\n     assertThat(resultRepositoryPresenter.getItemId(STRING_RESULT, 0), is(STABLE_ID));\n   }\n \n-\n   @Test\n   public void shouldReturnStableIdForRepositoryPresenterOfItem() {\n     final RepositoryPresenter<String> resultRepositoryPresenter =\n@@ -291,6 +333,42 @@ public void shouldAllowStableIdMethodForAnySuperType() {\n   }\n \n   @Test\n+  public void shouldHandleRebindWithNewData() {\n+    final RepositoryPresenter<String> resultRepositoryPresenter =\n+        repositoryPresenterOf(String.class)\n+            .layout(LAYOUT_ID)\n+            .bindWith(binder)\n+            .forItem();\n+\n+    resultRepositoryPresenter.bind(STRING, 0, viewHolder);\n+\n+    verify(binder).bind(STRING, view);\n+    reset(binder);\n+\n+    resultRepositoryPresenter.bind(SECOND_STRING, 0, viewHolder);\n+\n+    verify(binder).bind(SECOND_STRING, view);\n+  }\n+\n+  @Test\n+  public void shouldHandleRebindWithSameData() {\n+    final RepositoryPresenter<String> resultRepositoryPresenter =\n+        repositoryPresenterOf(String.class)\n+            .layout(LAYOUT_ID)\n+            .bindWith(binder)\n+            .forItem();\n+\n+    resultRepositoryPresenter.bind(STRING, 0, viewHolder);\n+\n+    verify(binder).bind(STRING, view);\n+    reset(binder);\n+\n+    resultRepositoryPresenter.bind(STRING, 0, viewHolder);\n+\n+    verify(binder).bind(STRING, view);\n+  }\n+\n+  @Test\n   public void shouldHavePrivateConstructor() {\n     assertThat(RepositoryPresenters.class, hasPrivateConstructor());\n   }"},{"sha":"5b12254ef57f71018418390046b38d9eca2b9098","filename":"extensions/rvdatabinding/src/main/java/com/google/android/agera/rvdatabinding/DataBindingRepositoryPresenterCompiler.java","status":"modified","additions":44,"deletions":9,"changes":53,"blob_url":"https://github.com/google/agera/blob/5da5f59ffd6bac3bbea56fd540afa98ccfd65856/extensions/rvdatabinding/src/main/java/com/google/android/agera/rvdatabinding/DataBindingRepositoryPresenterCompiler.java","raw_url":"https://github.com/google/agera/raw/5da5f59ffd6bac3bbea56fd540afa98ccfd65856/extensions/rvdatabinding/src/main/java/com/google/android/agera/rvdatabinding/DataBindingRepositoryPresenterCompiler.java","contents_url":"https://api.github.com/repos/google/agera/contents/extensions/rvdatabinding/src/main/java/com/google/android/agera/rvdatabinding/DataBindingRepositoryPresenterCompiler.java?ref=5da5f59ffd6bac3bbea56fd540afa98ccfd65856","patch":"@@ -21,6 +21,7 @@\n import static com.google.android.agera.Functions.resultListAsList;\n import static com.google.android.agera.Functions.staticFunction;\n import static com.google.android.agera.Preconditions.checkNotNull;\n+import static com.google.android.agera.rvdatabinding.RecycleConfig.CLEAR_COLLECTION;\n import static com.google.android.agera.rvdatabinding.RecycleConfig.CLEAR_HANDLERS;\n import static com.google.android.agera.rvdatabinding.RecycleConfig.CLEAR_ITEM;\n import static com.google.android.agera.rvdatabinding.RecycleConfig.DO_NOTHING;\n@@ -38,16 +39,20 @@\n import com.google.android.agera.rvadapter.RepositoryPresenter;\n import com.google.android.agera.rvadapter.RepositoryPresenterCompilerStates.RPItemCompile;\n import com.google.android.agera.rvadapter.RepositoryPresenterCompilerStates.RPLayout;\n+import com.google.android.agera.rvadapter.RepositoryPresenterCompilerStates.RPTypedCollectionCompile;\n import com.google.android.agera.rvdatabinding.DataBindingRepositoryPresenterCompilerStates.DBRPMain;\n import java.lang.ref.WeakReference;\n import java.util.List;\n \n @SuppressWarnings(\"unchecked\")\n-final class DataBindingRepositoryPresenterCompiler implements DBRPMain, RPLayout {\n+final class DataBindingRepositoryPresenterCompiler\n+    implements DBRPMain, RPLayout, RPTypedCollectionCompile {\n+  private static final int BR_NO_ID = -1;\n   @NonNull\n   private final SparseArray<Object> handlers;\n   private Function<Object, Integer> layoutFactory;\n-  private Function itemId;\n+  private Function<Object, Integer> itemId = staticFunction(BR_NO_ID);\n+  private int collectionId = BR_NO_ID;\n   @NonNull\n   private Function<Object, Long> stableIdForItem = staticFunction(RecyclerView.NO_ID);\n   @RecycleConfig\n@@ -82,28 +87,35 @@ public DBRPMain itemIdForItem(@NonNull final Function itemIdForItem) {\n   @Override\n   public RepositoryPresenter forItem() {\n     return new CompiledRepositoryPresenter(itemId, layoutFactory, stableIdForItem,\n-        handlers, recycleConfig, itemAsList());\n+        handlers, recycleConfig, itemAsList(), collectionId);\n   }\n \n   @NonNull\n   @Override\n   public RepositoryPresenter<List<Object>> forList() {\n     return new CompiledRepositoryPresenter(itemId, layoutFactory, stableIdForItem,\n-        handlers, recycleConfig, (Function) identityFunction());\n+        handlers, recycleConfig, (Function) identityFunction(), collectionId);\n   }\n \n   @NonNull\n   @Override\n   public RepositoryPresenter<Result<Object>> forResult() {\n     return new CompiledRepositoryPresenter(itemId, layoutFactory, stableIdForItem,\n-        handlers, recycleConfig, (Function) resultAsList());\n+        handlers, recycleConfig, (Function) resultAsList(), collectionId);\n   }\n \n   @NonNull\n   @Override\n   public RepositoryPresenter<Result<List<Object>>> forResultList() {\n     return new CompiledRepositoryPresenter(itemId, layoutFactory,\n-        stableIdForItem, handlers, recycleConfig, (Function) resultListAsList());\n+        stableIdForItem, handlers, recycleConfig, (Function) resultListAsList(), collectionId);\n+  }\n+\n+  @NonNull\n+  @Override\n+  public RepositoryPresenter forCollection(@NonNull final Function converter) {\n+    return new CompiledRepositoryPresenter(itemId, layoutFactory, stableIdForItem, handlers,\n+        recycleConfig, converter, collectionId);\n   }\n \n   @NonNull\n@@ -141,6 +153,13 @@ public DBRPMain onRecycle(@RecycleConfig final int recycleConfig) {\n     return this;\n   }\n \n+  @NonNull\n+  @Override\n+  public DBRPMain collectionId(final int collectionId) {\n+    this.collectionId = collectionId;\n+    return this;\n+  }\n+\n   private static final class CompiledRepositoryPresenter extends RepositoryPresenter {\n     @NonNull\n     private final Function<Object, Integer> itemId;\n@@ -152,6 +171,7 @@ public DBRPMain onRecycle(@RecycleConfig final int recycleConfig) {\n     private final Function<Object, Long> stableIdForItem;\n     @RecycleConfig\n     private final int recycleConfig;\n+    private final int collectionId;\n     @NonNull\n     private SparseArray<Object> handlers;\n     @NonNull\n@@ -165,8 +185,10 @@ public DBRPMain onRecycle(@RecycleConfig final int recycleConfig) {\n         @NonNull final Function<Object, Long> stableIdForItem,\n         @NonNull final SparseArray<Object> handlers,\n         final int recycleConfig,\n-        @NonNull final Function<Object, List<Object>> converter) {\n+        @NonNull final Function<Object, List<Object>> converter,\n+        @NonNull final int collectionId) {\n       this.itemId = itemId;\n+      this.collectionId = collectionId;\n       this.converter = converter;\n       this.layoutId = layoutId;\n       this.stableIdForItem = stableIdForItem;\n@@ -191,8 +213,14 @@ public void bind(@NonNull final Object data, final int index,\n       final View view = holder.itemView;\n       final ViewDataBinding viewDataBinding = DataBindingUtil.bind(view);\n       final Integer itemVariable = itemId.apply(item);\n-      viewDataBinding.setVariable(itemVariable, item);\n-      view.setTag(R.id.agera__rvdatabinding__item_id, itemVariable);\n+      if (itemVariable != BR_NO_ID) {\n+        viewDataBinding.setVariable(itemVariable, item);\n+        view.setTag(R.id.agera__rvdatabinding__item_id, itemVariable);\n+      }\n+      if (collectionId != BR_NO_ID) {\n+        viewDataBinding.setVariable(collectionId, data);\n+        view.setTag(R.id.agera__rvdatabinding__collection_id, collectionId);\n+      }\n       for (int i = 0; i < handlers.size(); i++) {\n         final int variableId = handlers.keyAt(i);\n         viewDataBinding.setVariable(variableId, handlers.valueAt(i));\n@@ -212,6 +240,13 @@ public void recycle(@NonNull final RecyclerView.ViewHolder holder) {\n             viewDataBinding.setVariable((int) tag, null);\n           }\n         }\n+        if ((recycleConfig & CLEAR_COLLECTION) != 0) {\n+          final Object collectionTag = view.getTag(R.id.agera__rvdatabinding__collection_id);\n+          view.setTag(R.id.agera__rvdatabinding__collection_id, null);\n+          if (collectionTag instanceof Integer) {\n+            viewDataBinding.setVariable((int) collectionTag, null);\n+          }\n+        }\n         if ((recycleConfig & CLEAR_HANDLERS) != 0) {\n           for (int i = 0; i < handlers.size(); i++) {\n             viewDataBinding.setVariable(handlers.keyAt(i), null);"},{"sha":"c9fa235fa504de129e740e23c338f29325b60400","filename":"extensions/rvdatabinding/src/main/java/com/google/android/agera/rvdatabinding/DataBindingRepositoryPresenterCompilerStates.java","status":"modified","additions":35,"deletions":4,"changes":39,"blob_url":"https://github.com/google/agera/blob/5da5f59ffd6bac3bbea56fd540afa98ccfd65856/extensions/rvdatabinding/src/main/java/com/google/android/agera/rvdatabinding/DataBindingRepositoryPresenterCompilerStates.java","raw_url":"https://github.com/google/agera/raw/5da5f59ffd6bac3bbea56fd540afa98ccfd65856/extensions/rvdatabinding/src/main/java/com/google/android/agera/rvdatabinding/DataBindingRepositoryPresenterCompilerStates.java","contents_url":"https://api.github.com/repos/google/agera/contents/extensions/rvdatabinding/src/main/java/com/google/android/agera/rvdatabinding/DataBindingRepositoryPresenterCompilerStates.java?ref=5da5f59ffd6bac3bbea56fd540afa98ccfd65856","patch":"@@ -19,11 +19,13 @@\n import android.support.v7.widget.RecyclerView;\n import com.google.android.agera.Function;\n import com.google.android.agera.Repository;\n+import com.google.android.agera.Result;\n import com.google.android.agera.rvadapter.RepositoryAdapter;\n import com.google.android.agera.rvadapter.RepositoryPresenter;\n import com.google.android.agera.rvadapter.RepositoryPresenterCompilerStates.RPItemCompile;\n import com.google.android.agera.rvadapter.RepositoryPresenterCompilerStates.RPLayout;\n-import com.google.android.agera.rvadapter.RepositoryPresenterCompilerStates.RPSpecificCollectionCompile;\n+import com.google.android.agera.rvadapter.RepositoryPresenterCompilerStates.RPTypedCollectionCompile;\n+import java.util.List;\n \n /**\n  * Container of the compiler state interfaces supporting the creation of a data binding\n@@ -34,17 +36,17 @@\n   /**\n    * Compiler state to specify how to bind the {@code View} using data binding.\n    */\n-  interface DBRPMain<T> extends RPItemCompile<T>, RPSpecificCollectionCompile<T> {\n+  interface DBRPMain<T> extends RPItemCompile<T> {\n \n     /**\n-     * Specifies a data binding @{code itemId} from the previously given {@code layout} to bind a\n+     * Specifies a data binding {@code itemId} from the previously given {@code layout} to bind a\n      * single item in the {@link Repository}.\n      */\n     @NonNull\n     DBRPMain<T> itemId(int itemId);\n \n     /**\n-     * Specifies a {@link Function} to return a data binding @{code itemId} from the previously\n+     * Specifies a {@link Function} to return a data binding {@code itemId} from the previously\n      * given {@code layout} to bind a single item in the {@link Repository}.\n      */\n     @NonNull\n@@ -65,6 +67,13 @@\n     DBRPMain<T> onRecycle(@RecycleConfig int recycleConfig);\n \n     /**\n+     * Specifies a data binding {@code itemId} from the previously given {@code layout} to bind the\n+     * whole collection (the repository value) to.\n+     */\n+    @NonNull\n+    DBRPMain<T> collectionId(int collectionId);\n+\n+    /**\n      * Specifies a {@link Function} providing a stable id for the given item. Called only if stable\n      * IDs are enabled with {@link RepositoryAdapter#setHasStableIds}, and therefore this method is\n      * optional with a default implementation of returning {@link RecyclerView#NO_ID}. If stable IDs\n@@ -86,6 +95,28 @@\n      */\n     @NonNull\n     RPItemCompile<T> stableId(long stableId);\n+\n+    /**\n+     * Creates a {@link RepositoryPresenter} for a {@link Repository} of a {@link List} where each\n+     * item in the {@link List} will be bound to the {@link RecyclerView}.\n+     */\n+    @NonNull\n+    RepositoryPresenter<List<T>> forList();\n+\n+    /**\n+     * Creates a {@link RepositoryPresenter} for a {@link Repository} of a {@link Result} containing\n+     * a {@link List} where each item in the {@link List} will be bound to the {@link\n+     * RecyclerView}.\n+     */\n+    @NonNull\n+    RepositoryPresenter<Result<List<T>>> forResultList();\n+\n+    /**\n+     * Creates a {@link RepositoryPresenter} for a {@link Repository} of a type that can be\n+     * converted to a {@link List} of items using the {@code converter}.\n+     */\n+    @NonNull\n+    <TCol> RepositoryPresenter<TCol> forCollection(@NonNull Function<TCol, List<T>> converter);\n   }\n }\n "},{"sha":"eccc0e0e815d6d1b4155b5f7d703ded53652fec6","filename":"extensions/rvdatabinding/src/main/java/com/google/android/agera/rvdatabinding/RecycleConfig.java","status":"modified","additions":12,"deletions":6,"changes":18,"blob_url":"https://github.com/google/agera/blob/5da5f59ffd6bac3bbea56fd540afa98ccfd65856/extensions/rvdatabinding/src/main/java/com/google/android/agera/rvdatabinding/RecycleConfig.java","raw_url":"https://github.com/google/agera/raw/5da5f59ffd6bac3bbea56fd540afa98ccfd65856/extensions/rvdatabinding/src/main/java/com/google/android/agera/rvdatabinding/RecycleConfig.java","contents_url":"https://api.github.com/repos/google/agera/contents/extensions/rvdatabinding/src/main/java/com/google/android/agera/rvdatabinding/RecycleConfig.java?ref=5da5f59ffd6bac3bbea56fd540afa98ccfd65856","patch":"@@ -30,6 +30,7 @@\n @IntDef(flag = true, value = {\n     RecycleConfig.DO_NOTHING,\n     RecycleConfig.CLEAR_ITEM,\n+    RecycleConfig.CLEAR_COLLECTION,\n     RecycleConfig.CLEAR_HANDLERS,\n     RecycleConfig.CLEAR_ALL,\n })\n@@ -40,19 +41,24 @@\n   int DO_NOTHING = 0;\n \n   /**\n-   * When the {@link RecyclerView} recycles a view, rebind the item from the {@link Repository}\n-   * with {@code null}. Item independent handlers will not be affected.\n+   * When the {@link RecyclerView} recycles a view, reset the item from the {@link Repository}\n+   * to {@code null}.\n    */\n   int CLEAR_ITEM = 1;\n \n   /**\n-   * When the {@link RecyclerView} recycles a view, rebind and all handlers with {@code null}.\n+   * When the {@link RecyclerView} recycles a view, reset and all handlers to {@code null}.\n    */\n   int CLEAR_HANDLERS = 1 << 1;\n \n   /**\n-   * When the {@link RecyclerView} recycles a view, rebind both the item from the {@link Repository}\n-   * and all handlers with {@code null}.\n+   * When the {@link RecyclerView} recycles a view, reset the collection from the\n+   * {@link Repository} to {@code null}.\n    */\n-  int CLEAR_ALL = CLEAR_ITEM | CLEAR_HANDLERS;\n+  int CLEAR_COLLECTION = 1 << 2;\n+\n+  /**\n+   * When the {@link RecyclerView} recycles a view, rebind all variables to {@code null}.\n+   */\n+  int CLEAR_ALL = CLEAR_ITEM | CLEAR_COLLECTION | CLEAR_HANDLERS;\n }"},{"sha":"368fa347b1e099fcc2893f9440e5190f519c906f","filename":"extensions/rvdatabinding/src/main/res/values/values.xml","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/google/agera/blob/5da5f59ffd6bac3bbea56fd540afa98ccfd65856/extensions/rvdatabinding/src/main/res/values/values.xml","raw_url":"https://github.com/google/agera/raw/5da5f59ffd6bac3bbea56fd540afa98ccfd65856/extensions/rvdatabinding/src/main/res/values/values.xml","contents_url":"https://api.github.com/repos/google/agera/contents/extensions/rvdatabinding/src/main/res/values/values.xml?ref=5da5f59ffd6bac3bbea56fd540afa98ccfd65856","patch":"@@ -15,5 +15,6 @@\n   ~ limitations under the License.\n   -->\n <resources>\n-    <item name=\"agera__rvdatabinding__item_id\" type=\"id\"/>\n+  <item name=\"agera__rvdatabinding__item_id\" type=\"id\"/>\n+  <item name=\"agera__rvdatabinding__collection_id\" type=\"id\"/>\n </resources>"},{"sha":"74bc5ebb422f270940bb1b9a99ad6c501a20887e","filename":"extensions/rvdatabinding/src/test/java/com/google/android/agera/rvdatabinding/DataBindingLayoutPresentersTest.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/google/agera/blob/5da5f59ffd6bac3bbea56fd540afa98ccfd65856/extensions/rvdatabinding/src/test/java/com/google/android/agera/rvdatabinding/DataBindingLayoutPresentersTest.java","raw_url":"https://github.com/google/agera/raw/5da5f59ffd6bac3bbea56fd540afa98ccfd65856/extensions/rvdatabinding/src/test/java/com/google/android/agera/rvdatabinding/DataBindingLayoutPresentersTest.java","contents_url":"https://api.github.com/repos/google/agera/contents/extensions/rvdatabinding/src/test/java/com/google/android/agera/rvdatabinding/DataBindingLayoutPresentersTest.java?ref=5da5f59ffd6bac3bbea56fd540afa98ccfd65856","patch":"@@ -22,6 +22,7 @@\n import static com.google.android.agera.rvdatabinding.RecycleConfig.CLEAR_HANDLERS;\n import static com.google.android.agera.rvdatabinding.RecycleConfig.CLEAR_ITEM;\n import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.verifyNoMoreInteractions;\n import static org.mockito.Mockito.verifyZeroInteractions;\n@@ -63,6 +64,17 @@ public void setUp() {\n     when(view.getTag()).thenReturn(\"string\");\n   }\n \n+\n+  @Test\n+  public void shouldReturnLayoutForLayoutResId() {\n+    final LayoutPresenter layoutPresenter =\n+        dataBindingLayoutPresenterFor(LAYOUT_ID)\n+            .onRecycle(CLEAR_ITEM)\n+            .build();\n+\n+    assertThat(layoutPresenter.getLayoutResId(), is(LAYOUT_ID));\n+  }\n+\n   @Test\n   public void shouldDoNothingWithLayoutPresenterOnRecycleItemOnlyRecycling() {\n     final LayoutPresenter layoutPresenter ="},{"sha":"4a07d0ff1a8ce844d064337cfb32f97e63d5b38b","filename":"extensions/rvdatabinding/src/test/java/com/google/android/agera/rvdatabinding/DataBindingRepositoryPresentersTest.java","status":"modified","additions":232,"deletions":6,"changes":238,"blob_url":"https://github.com/google/agera/blob/5da5f59ffd6bac3bbea56fd540afa98ccfd65856/extensions/rvdatabinding/src/test/java/com/google/android/agera/rvdatabinding/DataBindingRepositoryPresentersTest.java","raw_url":"https://github.com/google/agera/raw/5da5f59ffd6bac3bbea56fd540afa98ccfd65856/extensions/rvdatabinding/src/test/java/com/google/android/agera/rvdatabinding/DataBindingRepositoryPresentersTest.java","contents_url":"https://api.github.com/repos/google/agera/contents/extensions/rvdatabinding/src/test/java/com/google/android/agera/rvdatabinding/DataBindingRepositoryPresentersTest.java?ref=5da5f59ffd6bac3bbea56fd540afa98ccfd65856","patch":"@@ -16,28 +16,33 @@\n package com.google.android.agera.rvdatabinding;\n \n import static android.databinding.DataBinderMapper.setDataBinding;\n+import static com.google.android.agera.Functions.staticFunction;\n import static com.google.android.agera.Result.failure;\n import static com.google.android.agera.Result.present;\n import static com.google.android.agera.Result.success;\n import static com.google.android.agera.rvadapter.test.matchers.HasPrivateConstructor.hasPrivateConstructor;\n import static com.google.android.agera.rvdatabinding.DataBindingRepositoryPresenters.dataBindingRepositoryPresenterOf;\n import static com.google.android.agera.rvdatabinding.RecycleConfig.CLEAR_ALL;\n+import static com.google.android.agera.rvdatabinding.RecycleConfig.CLEAR_COLLECTION;\n import static com.google.android.agera.rvdatabinding.RecycleConfig.CLEAR_HANDLERS;\n import static com.google.android.agera.rvdatabinding.RecycleConfig.CLEAR_ITEM;\n import static com.google.android.agera.rvdatabinding.RecycleConfig.DO_NOTHING;\n+import static java.lang.String.valueOf;\n import static java.util.Arrays.asList;\n+import static java.util.Collections.singletonList;\n import static org.hamcrest.MatcherAssert.assertThat;\n import static org.hamcrest.Matchers.is;\n+import static org.mockito.Mockito.reset;\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.verifyNoMoreInteractions;\n import static org.mockito.Mockito.when;\n import static org.mockito.MockitoAnnotations.initMocks;\n \n import android.databinding.ViewDataBinding;\n import android.support.annotation.LayoutRes;\n-import android.support.v7.widget.RecyclerView;\n+import android.support.annotation.NonNull;\n+import android.support.v7.widget.RecyclerView.ViewHolder;\n import android.view.View;\n-import com.google.android.agera.Binder;\n import com.google.android.agera.Function;\n import com.google.android.agera.Functions;\n import com.google.android.agera.Result;\n@@ -54,6 +59,7 @@\n @Config(manifest = Config.NONE)\n public class DataBindingRepositoryPresentersTest {\n   private static final String STRING = \"string\";\n+  private static final String FIRST_STRING_CHARACTER = \"s\";\n   private static final String SECOND_STRING = \"string2\";\n   private static final Result<String> STRING_RESULT = present(STRING);\n   private static final List<String> STRING_LIST = asList(STRING, SECOND_STRING);\n@@ -68,23 +74,22 @@\n   private static final int ITEM_ID = 3;\n   private static final int HANDLER_ID = 4;\n   private static final int SECOND_HANDLER_ID = 5;\n+  private static final int COLLECTION_ID = 6;\n   private static final long STABLE_ID = 2;\n   @Mock\n-  private Binder<String, View> binder;\n-  @Mock\n   private Function<String, Integer> layoutForItem;\n   @Mock\n   private Function<String, Integer> itemIdForItem;\n   @Mock\n   private ViewDataBinding viewDataBinding;\n   @Mock\n   private View view;\n-  private RecyclerView.ViewHolder viewHolder;\n+  private ViewHolder viewHolder;\n \n   @Before\n   public void setUp() {\n     initMocks(this);\n-    viewHolder = new RecyclerView.ViewHolder(view){};\n+    viewHolder = new ViewHolder(view) {};\n     setDataBinding(viewDataBinding, LAYOUT_ID);\n     setDataBinding(viewDataBinding, DYNAMIC_LAYOUT_ID);\n     when(view.getTag()).thenReturn(\"string\");\n@@ -113,6 +118,69 @@ public void shouldBindRepositoryPresenterOfResult() {\n   }\n \n   @Test\n+  public void shouldBindRepositoryPresenterWithoutItem() {\n+    final RepositoryPresenter<String> repositoryPresenter =\n+        dataBindingRepositoryPresenterOf(String.class)\n+            .layout(LAYOUT_ID)\n+            .forItem();\n+\n+    repositoryPresenter.bind(STRING, 0, viewHolder);\n+\n+    verify(viewDataBinding).executePendingBindings();\n+    verifyNoMoreInteractions(viewDataBinding);\n+  }\n+\n+  @Test\n+  public void shouldBindRepositoryPresenterOfCollection() {\n+    final RepositoryPresenter<String> repositoryPresenter =\n+        dataBindingRepositoryPresenterOf(String.class)\n+            .layout(LAYOUT_ID)\n+            .itemId(ITEM_ID)\n+            .forCollection(new Function<String, List<String>>() {\n+              @NonNull\n+              @Override\n+              public List<String> apply(@NonNull final String input) {\n+                return singletonList(valueOf(input.charAt(0)));\n+              }\n+            });\n+    repositoryPresenter.bind(STRING, 0, viewHolder);\n+\n+    verify(viewDataBinding).setVariable(ITEM_ID, FIRST_STRING_CHARACTER);\n+    verify(viewDataBinding).executePendingBindings();\n+    verifyNoMoreInteractions(viewDataBinding);\n+  }\n+\n+  @Test\n+  public void shouldBindRepositoryPresenterCollectionOfCollection() {\n+    final RepositoryPresenter<String> repositoryPresenter =\n+        dataBindingRepositoryPresenterOf(String.class)\n+            .layout(LAYOUT_ID)\n+            .itemId(ITEM_ID)\n+            .collectionId(COLLECTION_ID)\n+            .forCollection(new StringToFirstCharStringList());\n+    repositoryPresenter.bind(STRING, 0, viewHolder);\n+\n+    verify(viewDataBinding).setVariable(ITEM_ID, FIRST_STRING_CHARACTER);\n+    verify(viewDataBinding).setVariable(COLLECTION_ID, STRING);\n+    verify(viewDataBinding).executePendingBindings();\n+    verifyNoMoreInteractions(viewDataBinding);\n+  }\n+\n+  @Test\n+  public void shouldHandleRecycleOfRepositoryPresenterWithoutItemId() {\n+    final RepositoryPresenter<String> repositoryPresenter =\n+        dataBindingRepositoryPresenterOf(String.class)\n+            .layout(LAYOUT_ID)\n+            .onRecycle(CLEAR_ALL)\n+            .forItem();\n+\n+    repositoryPresenter.recycle(viewHolder);\n+\n+    verify(viewDataBinding).executePendingBindings();\n+    verifyNoMoreInteractions(viewDataBinding);\n+  }\n+\n+  @Test\n   public void shouldNotRecycleRepositoryPresenterOfResultWithNoRecycling() {\n     final RepositoryPresenter<Result<String>> resultRepositoryPresenter =\n         dataBindingRepositoryPresenterOf(String.class)\n@@ -190,6 +258,112 @@ public void shouldRecycleRepositoryPresenterOfResultWithHandlerRecycling() {\n   }\n \n   @Test\n+  public void shouldNotRecycleRepositoryPresenterOfCollectionWithNoRecycling() {\n+    final RepositoryPresenter<String> resultRepositoryPresenter =\n+        dataBindingRepositoryPresenterOf(String.class)\n+            .layout(LAYOUT_ID)\n+            .itemId(ITEM_ID)\n+            .handler(HANDLER_ID, HANDLER)\n+            .handler(SECOND_HANDLER_ID, SECOND_HANDLER)\n+            .onRecycle(DO_NOTHING)\n+            .collectionId(COLLECTION_ID)\n+            .forCollection(new StringToFirstCharStringList());\n+\n+    resultRepositoryPresenter.recycle(viewHolder);\n+\n+    verifyNoMoreInteractions(viewDataBinding);\n+  }\n+\n+  @Test\n+  public void shouldRecycleRepositoryPresenterOfCollectionWithItemRecycling() {\n+    when(view.getTag(R.id.agera__rvdatabinding__item_id)).thenReturn(ITEM_ID);\n+\n+    final RepositoryPresenter<String> resultRepositoryPresenter =\n+        dataBindingRepositoryPresenterOf(String.class)\n+            .layout(LAYOUT_ID)\n+            .itemId(ITEM_ID)\n+            .handler(HANDLER_ID, HANDLER)\n+            .handler(SECOND_HANDLER_ID, SECOND_HANDLER)\n+            .onRecycle(CLEAR_ITEM)\n+            .collectionId(COLLECTION_ID)\n+            .forCollection(new StringToFirstCharStringList());\n+\n+    resultRepositoryPresenter.recycle(viewHolder);\n+\n+    verify(viewDataBinding).setVariable(ITEM_ID, null);\n+    verify(viewDataBinding).executePendingBindings();\n+    verifyNoMoreInteractions(viewDataBinding);\n+  }\n+\n+  @Test\n+  public void shouldRecycleRepositoryPresenterOfCollectionWithAllRecycling() {\n+    when(view.getTag(R.id.agera__rvdatabinding__item_id)).thenReturn(ITEM_ID);\n+    when(view.getTag(R.id.agera__rvdatabinding__collection_id)).thenReturn(COLLECTION_ID);\n+    final RepositoryPresenter<String> resultRepositoryPresenter =\n+        dataBindingRepositoryPresenterOf(String.class)\n+            .layout(LAYOUT_ID)\n+            .itemId(ITEM_ID)\n+            .handler(HANDLER_ID, HANDLER)\n+            .handler(SECOND_HANDLER_ID, SECOND_HANDLER)\n+            .onRecycle(CLEAR_ALL)\n+            .collectionId(COLLECTION_ID)\n+            .forCollection(new StringToFirstCharStringList());\n+\n+    resultRepositoryPresenter.recycle(viewHolder);\n+\n+    verify(viewDataBinding).setVariable(ITEM_ID, null);\n+    verify(viewDataBinding).setVariable(HANDLER_ID, null);\n+    verify(viewDataBinding).setVariable(SECOND_HANDLER_ID, null);\n+    verify(viewDataBinding).setVariable(COLLECTION_ID, null);\n+    verify(viewDataBinding).executePendingBindings();\n+    verifyNoMoreInteractions(viewDataBinding);\n+  }\n+\n+\n+  @Test\n+  public void shouldRecycleRepositoryPresenterOfCollectionWithCollectionRecycling() {\n+    when(view.getTag(R.id.agera__rvdatabinding__item_id)).thenReturn(ITEM_ID);\n+    when(view.getTag(R.id.agera__rvdatabinding__collection_id)).thenReturn(COLLECTION_ID);\n+    final RepositoryPresenter<String> resultRepositoryPresenter =\n+        dataBindingRepositoryPresenterOf(String.class)\n+            .layout(LAYOUT_ID)\n+            .itemId(ITEM_ID)\n+            .handler(HANDLER_ID, HANDLER)\n+            .handler(SECOND_HANDLER_ID, SECOND_HANDLER)\n+            .onRecycle(CLEAR_COLLECTION)\n+            .collectionId(COLLECTION_ID)\n+            .forCollection(new StringToFirstCharStringList());\n+\n+    resultRepositoryPresenter.recycle(viewHolder);\n+\n+    verify(viewDataBinding).setVariable(COLLECTION_ID, null);\n+    verify(viewDataBinding).executePendingBindings();\n+    verifyNoMoreInteractions(viewDataBinding);\n+  }\n+\n+  @Test\n+  public void shouldRecycleRepositoryPresenterOfCollectionWithHandlerRecycling() {\n+    when(view.getTag(R.id.agera__rvdatabinding__item_id)).thenReturn(ITEM_ID);\n+    when(view.getTag(R.id.agera__rvdatabinding__collection_id)).thenReturn(COLLECTION_ID);\n+    final RepositoryPresenter<String> resultRepositoryPresenter =\n+        dataBindingRepositoryPresenterOf(String.class)\n+            .layout(LAYOUT_ID)\n+            .itemId(ITEM_ID)\n+            .handler(HANDLER_ID, HANDLER)\n+            .handler(SECOND_HANDLER_ID, SECOND_HANDLER)\n+            .onRecycle(CLEAR_HANDLERS)\n+            .collectionId(COLLECTION_ID)\n+            .forCollection(new StringToFirstCharStringList());\n+\n+    resultRepositoryPresenter.recycle(viewHolder);\n+\n+    verify(viewDataBinding).setVariable(HANDLER_ID, null);\n+    verify(viewDataBinding).setVariable(SECOND_HANDLER_ID, null);\n+    verify(viewDataBinding).executePendingBindings();\n+    verifyNoMoreInteractions(viewDataBinding);\n+  }\n+\n+  @Test\n   public void shouldBindRepositoryPresenterOfResultList() {\n     final RepositoryPresenter<Result<List<String>>> resultListRepositoryPresenter =\n         dataBindingRepositoryPresenterOf(String.class)\n@@ -591,7 +765,59 @@ public void shouldReturnStableIdForRepositoryPresenterOfList() {\n   }\n \n   @Test\n+  public void shouldHandleRebindWithSameData() {\n+    final RepositoryPresenter<String> repositoryPresenter =\n+        dataBindingRepositoryPresenterOf(String.class)\n+            .layout(LAYOUT_ID)\n+            .itemId(ITEM_ID)\n+            .forItem();\n+\n+    repositoryPresenter.bind(STRING, 0, viewHolder);\n+\n+    verify(viewDataBinding).setVariable(ITEM_ID, STRING);\n+    verify(viewDataBinding).executePendingBindings();\n+    verifyNoMoreInteractions(viewDataBinding);\n+    reset(viewDataBinding);\n+\n+    repositoryPresenter.bind(STRING, 0, viewHolder);\n+\n+    verify(viewDataBinding).setVariable(ITEM_ID, STRING);\n+    verify(viewDataBinding).executePendingBindings();\n+    verifyNoMoreInteractions(viewDataBinding);\n+  }\n+\n+  @Test\n+  public void shouldHandleRebindWithNewData() {\n+    final RepositoryPresenter<String> repositoryPresenter =\n+        dataBindingRepositoryPresenterOf(String.class)\n+            .layout(LAYOUT_ID)\n+            .itemId(ITEM_ID)\n+            .forItem();\n+\n+    repositoryPresenter.bind(STRING, 0, viewHolder);\n+\n+    verify(viewDataBinding).setVariable(ITEM_ID, STRING);\n+    verify(viewDataBinding).executePendingBindings();\n+    verifyNoMoreInteractions(viewDataBinding);\n+    reset(viewDataBinding);\n+\n+    repositoryPresenter.bind(SECOND_STRING, 0, viewHolder);\n+\n+    verify(viewDataBinding).setVariable(ITEM_ID, SECOND_STRING);\n+    verify(viewDataBinding).executePendingBindings();\n+    verifyNoMoreInteractions(viewDataBinding);\n+  }\n+\n+  @Test\n   public void shouldHavePrivateConstructor() {\n     assertThat(DataBindingRepositoryPresenters.class, hasPrivateConstructor());\n   }\n+\n+  private static final class StringToFirstCharStringList implements Function<String, List<String>> {\n+    @NonNull\n+    @Override\n+    public List<String> apply(@NonNull final String input) {\n+      return singletonList(valueOf(input.charAt(0)));\n+    }\n+  }\n }\n\\ No newline at end of file"},{"sha":"d696fa2627e8243a8566885a55d4ed97c7693e93","filename":"testapp/src/main/java/com/google/android/agera/testapp/NoteGroup.java","status":"modified","additions":12,"deletions":3,"changes":15,"blob_url":"https://github.com/google/agera/blob/5da5f59ffd6bac3bbea56fd540afa98ccfd65856/testapp/src/main/java/com/google/android/agera/testapp/NoteGroup.java","raw_url":"https://github.com/google/agera/raw/5da5f59ffd6bac3bbea56fd540afa98ccfd65856/testapp/src/main/java/com/google/android/agera/testapp/NoteGroup.java","contents_url":"https://api.github.com/repos/google/agera/contents/testapp/src/main/java/com/google/android/agera/testapp/NoteGroup.java?ref=5da5f59ffd6bac3bbea56fd540afa98ccfd65856","patch":"@@ -19,25 +19,34 @@\n import java.util.List;\n \n public final class NoteGroup {\n+  @NonNull\n+  private final String name;\n   private final long id;\n   @NonNull\n   private final List<Note> notes;\n \n-  private NoteGroup(final long id, @NonNull final List<Note> notes) {\n+  private NoteGroup(@NonNull final String name, final long id, @NonNull final List<Note> notes) {\n+    this.name = name;\n     this.id = id;\n     this.notes = notes;\n   }\n \n   @NonNull\n-  public static NoteGroup noteGroup(final long id, @NonNull final List<Note> notes) {\n-    return new NoteGroup(id, notes);\n+  public static NoteGroup noteGroup(\n+      @NonNull final String name, final long id, @NonNull final List<Note> notes) {\n+    return new NoteGroup(name, id, notes);\n   }\n \n   public long getId() {\n     return id;\n   }\n \n   @NonNull\n+  public String getName() {\n+    return name;\n+  }\n+\n+  @NonNull\n   public List<Note> getNotes() {\n     return notes;\n   }"},{"sha":"b0a4026413684fa41d54e4e00a42e4bb2969c7c2","filename":"testapp/src/main/java/com/google/android/agera/testapp/NotesFragment.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/google/agera/blob/5da5f59ffd6bac3bbea56fd540afa98ccfd65856/testapp/src/main/java/com/google/android/agera/testapp/NotesFragment.java","raw_url":"https://github.com/google/agera/raw/5da5f59ffd6bac3bbea56fd540afa98ccfd65856/testapp/src/main/java/com/google/android/agera/testapp/NotesFragment.java","contents_url":"https://api.github.com/repos/google/agera/contents/testapp/src/main/java/com/google/android/agera/testapp/NotesFragment.java?ref=5da5f59ffd6bac3bbea56fd540afa98ccfd65856","patch":"@@ -51,7 +51,6 @@\n import com.google.android.agera.Updatable;\n import com.google.android.agera.rvadapter.RepositoryAdapter;\n import java.util.Date;\n-import java.util.List;\n import java.util.concurrent.Executor;\n \n public final class NotesFragment extends Fragment {\n@@ -72,9 +71,9 @@ public void onCreate(@Nullable final Bundle savedInstanceState) {\n     notesStore = notesStore(getContext().getApplicationContext());\n \n     pool = new RecycledViewPool();\n-    final RowHandler<NoteGroup, List<Note>> rowHandler = rowBinder(pool,\n+    final RowHandler<NoteGroup> rowHandler = rowBinder(pool,\n         (r) -> new LinearLayoutManager(getContext(), HORIZONTAL, false),\n-        NoteGroup::getId, NoteGroup::getNotes, (r) ->\n+        NoteGroup::getId, (r) ->\n             dataBindingRepositoryPresenterOf(Note.class)\n                 .layout(R.layout.text_layout)\n                 .itemId(BR.note)\n@@ -92,7 +91,8 @@ public void onCreate(@Nullable final Bundle savedInstanceState) {\n                     })\n                 .handler(BR.longClick, (Receiver<Note>) notesStore::deleteNote)\n                 .stableIdForItem(Note::getId)\n-                .forList());\n+                .collectionId(BR.noteGroup)\n+                .forCollection(NoteGroup::getNotes));\n \n     adapter = repositoryAdapter()\n         .addLayout(layout(R.layout.header))"},{"sha":"10425cc354de88a3326269450eeae1784772e912","filename":"testapp/src/main/java/com/google/android/agera/testapp/NotesStore.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/google/agera/blob/5da5f59ffd6bac3bbea56fd540afa98ccfd65856/testapp/src/main/java/com/google/android/agera/testapp/NotesStore.java","raw_url":"https://github.com/google/agera/raw/5da5f59ffd6bac3bbea56fd540afa98ccfd65856/testapp/src/main/java/com/google/android/agera/testapp/NotesStore.java","contents_url":"https://api.github.com/repos/google/agera/contents/testapp/src/main/java/com/google/android/agera/testapp/NotesStore.java?ref=5da5f59ffd6bac3bbea56fd540afa98ccfd65856","patch":"@@ -148,7 +148,10 @@ synchronized static NotesStore notesStore(@NonNull final Context applicationCont\n           }\n           final List<NoteGroup> notesGroups = new ArrayList<>();\n           for (final Map.Entry<Character, List<Note>> groupData : notesGroupsData.entrySet()) {\n-            notesGroups.add(noteGroup(groupData.getKey(), groupData.getValue()));\n+            notesGroups.add(noteGroup(\n+                String.valueOf(groupData.getKey()),\n+                groupData.getKey(),\n+                groupData.getValue()));\n           }\n           return notesGroups;\n         })"},{"sha":"133338dabce1cc301e8e4bb03468458c4a2d52ed","filename":"testapp/src/main/java/com/google/android/agera/testapp/RowHandler.java","status":"modified","additions":11,"deletions":17,"changes":28,"blob_url":"https://github.com/google/agera/blob/5da5f59ffd6bac3bbea56fd540afa98ccfd65856/testapp/src/main/java/com/google/android/agera/testapp/RowHandler.java","raw_url":"https://github.com/google/agera/raw/5da5f59ffd6bac3bbea56fd540afa98ccfd65856/testapp/src/main/java/com/google/android/agera/testapp/RowHandler.java","contents_url":"https://api.github.com/repos/google/agera/contents/testapp/src/main/java/com/google/android/agera/testapp/RowHandler.java?ref=5da5f59ffd6bac3bbea56fd540afa98ccfd65856","patch":"@@ -38,33 +38,29 @@\n import java.util.Map;\n import java.util.Set;\n \n-final class RowHandler<TRow, TRowItems> extends OnScrollListener\n-    implements Binder<TRow, View>, Receiver<View> {\n+final class RowHandler<TRow>\n+    extends OnScrollListener implements Binder<TRow, View>, Receiver<View> {\n   @NonNull\n   private final Set<RepositoryAdapter> startedAdapters;\n   @NonNull\n   private final Map<Long, Parcelable> itemRowStates;\n   @NonNull\n-  private final Map<Adapter, MutableRepository<TRowItems>> adapterRepositories;\n+  private final Map<Adapter, MutableRepository<TRow>> adapterRepositories;\n   @NonNull\n   private final Map<Adapter, Long> previousStableIds;\n   @NonNull\n-  private final Function<TRow, TRowItems> data;\n-  @NonNull\n   private final Function<TRow, Long> stableId;\n   @NonNull\n-  private final Function<TRow, RepositoryPresenter<TRowItems>> presenter;\n+  private final Function<TRow, RepositoryPresenter<TRow>> presenter;\n   @NonNull\n   private final Function<TRow, LayoutManager> layoutManager;\n   @NonNull\n   private final RecycledViewPool pool;\n \n   private RowHandler(@NonNull final RecycledViewPool pool,\n-      @NonNull final Function<TRow, TRowItems> data,\n       @NonNull final Function<TRow, Long> stableId,\n-      @NonNull final Function<TRow, RepositoryPresenter<TRowItems>> presenter,\n+      @NonNull final Function<TRow, RepositoryPresenter<TRow>> presenter,\n       @NonNull final Function<TRow, LayoutManager> layoutManager) {\n-    this.data = checkNotNull(data);\n     this.stableId = checkNotNull(stableId);\n     this.presenter = checkNotNull(presenter);\n     this.layoutManager = layoutManager;\n@@ -76,23 +72,21 @@ private RowHandler(@NonNull final RecycledViewPool pool,\n   }\n \n   @NonNull\n-  static <TRow, TRowItems> RowHandler<TRow, TRowItems> rowBinder(\n+  static <TRow> RowHandler<TRow> rowBinder(\n       @NonNull final RecycledViewPool pool,\n       @NonNull final Function<TRow, LayoutManager> layoutManager,\n       @NonNull final Function<TRow, Long> stableIdFunction,\n-      @NonNull final Function<TRow, TRowItems> dataFunction,\n-      @NonNull final Function<TRow, RepositoryPresenter<TRowItems>> presenterFromView) {\n-    return new RowHandler<>(pool, dataFunction, stableIdFunction, presenterFromView, layoutManager);\n+      @NonNull final Function<TRow, RepositoryPresenter<TRow>> presenterFromView) {\n+    return new RowHandler<>(pool, stableIdFunction, presenterFromView, layoutManager);\n   }\n \n   @Override\n   public void bind(@NonNull final TRow row, @NonNull final View view) {\n     final RecyclerView recyclerView = (RecyclerView) view;\n     final long id = stableId.apply(row);\n-    final TRowItems rowItems = data.apply(row);\n     if (!(recyclerView.getAdapter() instanceof RepositoryAdapter)) {\n-      final MutableRepository<TRowItems> newRepository = mutableRepository(rowItems);\n-      final RepositoryPresenter<TRowItems> newPresenter = presenter.apply(row);\n+      final MutableRepository<TRow> newRepository = mutableRepository(row);\n+      final RepositoryPresenter<TRow> newPresenter = presenter.apply(row);\n       final RepositoryAdapter newAdapter = repositoryAdapter()\n           .add(newRepository, newPresenter)\n           .build();\n@@ -107,7 +101,7 @@ public void bind(@NonNull final TRow row, @NonNull final View view) {\n       newAdapter.startObserving();\n     } else {\n       final RepositoryAdapter adapter = (RepositoryAdapter) recyclerView.getAdapter();\n-      adapterRepositories.get(adapter).accept(rowItems);\n+      adapterRepositories.get(adapter).accept(row);\n       previousStableIds.put(adapter, id);\n       if (!startedAdapters.contains(adapter)) {\n         adapter.startObserving();"},{"sha":"ab9d2dbe0a272f9235ff5dbb08d1b7b23906d5c7","filename":"testapp/src/main/res/layout/text_layout.xml","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/google/agera/blob/5da5f59ffd6bac3bbea56fd540afa98ccfd65856/testapp/src/main/res/layout/text_layout.xml","raw_url":"https://github.com/google/agera/raw/5da5f59ffd6bac3bbea56fd540afa98ccfd65856/testapp/src/main/res/layout/text_layout.xml","contents_url":"https://api.github.com/repos/google/agera/contents/testapp/src/main/res/layout/text_layout.xml?ref=5da5f59ffd6bac3bbea56fd540afa98ccfd65856","patch":"@@ -18,6 +18,7 @@\n     xmlns:app=\"http://schemas.android.com/apk/res-auto\">\n   <data>\n     <variable name=\"note\" type=\"com.google.android.agera.testapp.Note\"/>\n+    <variable name=\"noteGroup\" type=\"com.google.android.agera.testapp.NoteGroup\"/>\n     <variable name=\"click\" type=\"com.google.android.agera.Receiver\"/>\n     <variable name=\"longClick\" type=\"com.google.android.agera.Receiver\"/>\n   </data>\n@@ -32,6 +33,6 @@\n       android:onClick=\"@{(view) -> click.accept(note)}\"\n       app:onLongClick=\"@{(view) -> longClick.accept(note)}\"\n       android:padding=\"8dp\"\n-      android:text=\"@{note.note}\"\n+      android:text=\"@{noteGroup.name + ' ' + note.note}\"\n       android:textSize=\"20sp\"/>\n </layout>"}]}