{"sha":"45b1c1bb19fbf65f744f5ee1c36028ae83adcf87","commit":{"author":{"name":"Magnus Ernstsson","email":"magnus@ernstsson.net","date":"2016-05-26T06:08:28Z"},"committer":{"name":"Magnus Ernstsson","email":"magnus@ernstsson.net","date":"2016-05-26T06:08:28Z"},"message":"Added RepositoryPresenter compiler (#45)","tree":{"sha":"0f446ecc72e63a9a5b18a4b2044a1fee1ad79026","url":"https://api.github.com/repos/google/agera/git/trees/0f446ecc72e63a9a5b18a4b2044a1fee1ad79026"},"url":"https://api.github.com/repos/google/agera/git/commits/45b1c1bb19fbf65f744f5ee1c36028ae83adcf87","comment_count":0},"url":"https://api.github.com/repos/google/agera/commits/45b1c1bb19fbf65f744f5ee1c36028ae83adcf87","html_url":"https://github.com/google/agera/commit/45b1c1bb19fbf65f744f5ee1c36028ae83adcf87","comments_url":"https://api.github.com/repos/google/agera/commits/45b1c1bb19fbf65f744f5ee1c36028ae83adcf87/comments","author":{"login":"ernstsson","id":378389,"avatar_url":"https://avatars2.githubusercontent.com/u/378389?v=3","gravatar_id":"","url":"https://api.github.com/users/ernstsson","html_url":"https://github.com/ernstsson","followers_url":"https://api.github.com/users/ernstsson/followers","following_url":"https://api.github.com/users/ernstsson/following{/other_user}","gists_url":"https://api.github.com/users/ernstsson/gists{/gist_id}","starred_url":"https://api.github.com/users/ernstsson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ernstsson/subscriptions","organizations_url":"https://api.github.com/users/ernstsson/orgs","repos_url":"https://api.github.com/users/ernstsson/repos","events_url":"https://api.github.com/users/ernstsson/events{/privacy}","received_events_url":"https://api.github.com/users/ernstsson/received_events","type":"User","site_admin":false},"committer":{"login":"ernstsson","id":378389,"avatar_url":"https://avatars2.githubusercontent.com/u/378389?v=3","gravatar_id":"","url":"https://api.github.com/users/ernstsson","html_url":"https://github.com/ernstsson","followers_url":"https://api.github.com/users/ernstsson/followers","following_url":"https://api.github.com/users/ernstsson/following{/other_user}","gists_url":"https://api.github.com/users/ernstsson/gists{/gist_id}","starred_url":"https://api.github.com/users/ernstsson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ernstsson/subscriptions","organizations_url":"https://api.github.com/users/ernstsson/orgs","repos_url":"https://api.github.com/users/ernstsson/repos","events_url":"https://api.github.com/users/ernstsson/events{/privacy}","received_events_url":"https://api.github.com/users/ernstsson/received_events","type":"User","site_admin":false},"parents":[{"sha":"5e518b7b05f9e7a34a314945f68deff7b2c3e334","url":"https://api.github.com/repos/google/agera/commits/5e518b7b05f9e7a34a314945f68deff7b2c3e334","html_url":"https://github.com/google/agera/commit/5e518b7b05f9e7a34a314945f68deff7b2c3e334"}],"stats":{"total":669,"additions":596,"deletions":73},"files":[{"sha":"4103afb0c80ebd7c1aacaa9df6fe47ebf2faa8ce","filename":"extensions/rvadapter/src/main/java/com/google/android/agera/rvadapter/RepositoryPresenterCompiler.java","status":"added","additions":198,"deletions":0,"changes":198,"blob_url":"https://github.com/google/agera/blob/45b1c1bb19fbf65f744f5ee1c36028ae83adcf87/extensions/rvadapter/src/main/java/com/google/android/agera/rvadapter/RepositoryPresenterCompiler.java","raw_url":"https://github.com/google/agera/raw/45b1c1bb19fbf65f744f5ee1c36028ae83adcf87/extensions/rvadapter/src/main/java/com/google/android/agera/rvadapter/RepositoryPresenterCompiler.java","contents_url":"https://api.github.com/repos/google/agera/contents/extensions/rvadapter/src/main/java/com/google/android/agera/rvadapter/RepositoryPresenterCompiler.java?ref=45b1c1bb19fbf65f744f5ee1c36028ae83adcf87","patch":"@@ -0,0 +1,198 @@\n+/*\n+ * Copyright 2016 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera.rvadapter;\n+\n+import static com.google.android.agera.Functions.staticFunction;\n+import static com.google.android.agera.Preconditions.checkNotNull;\n+import static com.google.android.agera.rvadapter.RepositoryPresenterCompilerStates.RPViewBinderCompile;\n+\n+import com.google.android.agera.Binder;\n+import com.google.android.agera.Function;\n+import com.google.android.agera.Result;\n+import com.google.android.agera.rvadapter.RepositoryPresenterCompilerStates.RPLayout;\n+\n+import android.support.annotation.LayoutRes;\n+import android.support.annotation.NonNull;\n+import android.support.v7.widget.RecyclerView;\n+import android.view.View;\n+\n+import java.util.List;\n+\n+@SuppressWarnings(\"unchecked\")\n+final class RepositoryPresenterCompiler implements RPLayout, RPViewBinderCompile {\n+  @NonNull\n+  private static final NullBinder NULL_BINDER = new NullBinder();\n+  private Function<Object, Integer> layoutForItem;\n+  @NonNull\n+  private Binder binder = NULL_BINDER;\n+\n+  @NonNull\n+  @Override\n+  public RepositoryPresenter<List> forList() {\n+    return new ListBasicRepositoryPresenter(layoutForItem, binder);\n+  }\n+\n+  @NonNull\n+  @Override\n+  public RepositoryPresenter<Result> forResult() {\n+    return new SingleResultRepositoryPresenter(layoutForItem, binder);\n+  }\n+\n+  @NonNull\n+  @Override\n+  public RepositoryPresenter<Result<List>> forResultList() {\n+    return new ListResultRepositoryPresenter(layoutForItem, binder);\n+  }\n+\n+  @NonNull\n+  @Override\n+  public Object layout(@LayoutRes final int layoutId) {\n+    this.layoutForItem = staticFunction(layoutId);\n+    return this;\n+  }\n+\n+  @NonNull\n+  @Override\n+  public Object layoutForItem(@NonNull final Function layoutForItem) {\n+    this.layoutForItem = checkNotNull(layoutForItem);\n+    return this;\n+  }\n+\n+  @NonNull\n+  @Override\n+  public Object bindWith(@NonNull final Binder binder) {\n+    this.binder = binder;\n+    return this;\n+  }\n+\n+  private static final class NullBinder implements Binder {\n+    @Override\n+    public void bind(@NonNull Object o, @NonNull Object o2) {}\n+  }\n+\n+  private abstract static class BasicRepositoryPresenter<TVal, T>\n+      extends RepositoryPresenter<T> {\n+    @NonNull\n+    private final Function<Object, Integer> layoutId;\n+    @NonNull\n+    private final Binder<TVal, View> binder;\n+\n+    BasicRepositoryPresenter(@NonNull final Function<Object, Integer> layoutId,\n+        @NonNull final Binder<TVal, View> binder) {\n+      this.layoutId = checkNotNull(layoutId);\n+      this.binder = checkNotNull(binder);\n+    }\n+\n+    @NonNull\n+    protected abstract TVal getValue(@NonNull final T data, final int index);\n+\n+    @Override\n+    public final int getLayoutResId(@NonNull final T data, final int index) {\n+      return layoutId.apply(getValue(data, index));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    public void bind(@NonNull final T data, final int index,\n+        @NonNull final RecyclerView.ViewHolder holder) {\n+      binder.bind(getValue(data, index), holder.itemView);\n+    }\n+  }\n+\n+  private static final class ListBasicRepositoryPresenter<T>\n+      extends BasicRepositoryPresenter<T, List<T>> {\n+\n+    public ListBasicRepositoryPresenter(@NonNull final Function<Object, Integer> layoutId,\n+        @NonNull final Binder<T, View> binder) {\n+      super(layoutId, binder);\n+    }\n+\n+    @Override\n+    public int getItemCount(@NonNull final List<T> data) {\n+      return data.size();\n+    }\n+\n+    @NonNull\n+    @Override\n+    protected T getValue(@NonNull final List<T> data, final int index) {\n+      return data.get(index);\n+    }\n+  }\n+\n+  private abstract static class ResultRepositoryPresenter<TVal, T>\n+      extends BasicRepositoryPresenter<TVal, Result<T>> {\n+\n+    ResultRepositoryPresenter(@NonNull final Function<Object, Integer> layoutId,\n+        @NonNull final Binder<TVal, View> binder) {\n+      super(layoutId, binder);\n+    }\n+\n+    @NonNull\n+    @Override\n+    protected TVal getValue(@NonNull Result<T> data, int index) {\n+      return getResultValue(data.get(), index);\n+    }\n+\n+    @Override\n+    public final int getItemCount(@NonNull final Result<T> data) {\n+      return data.failed() ? 0 : getResultCount(data.get());\n+    }\n+\n+    protected abstract int getResultCount(@NonNull T data);\n+\n+    @NonNull\n+    protected abstract TVal getResultValue(@NonNull T data, int index);\n+  }\n+\n+  private static final class SingleResultRepositoryPresenter<T>\n+      extends ResultRepositoryPresenter<T, T> {\n+    public SingleResultRepositoryPresenter(@NonNull final Function<Object, Integer> layoutId,\n+        @NonNull final Binder<T, View> binder) {\n+      super(layoutId, binder);\n+    }\n+\n+    @Override\n+    protected int getResultCount(@NonNull final T data) {\n+      return 1;\n+    }\n+\n+    @NonNull\n+    @Override\n+    protected T getResultValue(@NonNull final T data, final int index) {\n+      return data;\n+    }\n+  }\n+\n+  private static final class ListResultRepositoryPresenter<T>\n+      extends ResultRepositoryPresenter<T, List<T>> {\n+\n+    public ListResultRepositoryPresenter(@NonNull final Function<Object, Integer> layoutId,\n+        @NonNull final Binder<T, View> binder) {\n+      super(layoutId, binder);\n+    }\n+\n+    @Override\n+    protected int getResultCount(@NonNull final List<T> data) {\n+      return data.size();\n+    }\n+\n+    @NonNull\n+    @Override\n+    protected T getResultValue(@NonNull final List<T> data, final int index) {\n+      return data.get(index);\n+    }\n+  }\n+}"},{"sha":"d13b70bfe3066fd911bf0dd3832cf263cee783d0","filename":"extensions/rvadapter/src/main/java/com/google/android/agera/rvadapter/RepositoryPresenterCompilerStates.java","status":"added","additions":104,"deletions":0,"changes":104,"blob_url":"https://github.com/google/agera/blob/45b1c1bb19fbf65f744f5ee1c36028ae83adcf87/extensions/rvadapter/src/main/java/com/google/android/agera/rvadapter/RepositoryPresenterCompilerStates.java","raw_url":"https://github.com/google/agera/raw/45b1c1bb19fbf65f744f5ee1c36028ae83adcf87/extensions/rvadapter/src/main/java/com/google/android/agera/rvadapter/RepositoryPresenterCompilerStates.java","contents_url":"https://api.github.com/repos/google/agera/contents/extensions/rvadapter/src/main/java/com/google/android/agera/rvadapter/RepositoryPresenterCompilerStates.java?ref=45b1c1bb19fbf65f744f5ee1c36028ae83adcf87","patch":"@@ -0,0 +1,104 @@\n+/*\n+ * Copyright 2016 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera.rvadapter;\n+\n+import com.google.android.agera.Binder;\n+import com.google.android.agera.Function;\n+import com.google.android.agera.Receiver;\n+import com.google.android.agera.Repository;\n+import com.google.android.agera.Result;\n+\n+import android.support.annotation.LayoutRes;\n+import android.support.annotation.NonNull;\n+import android.support.v7.widget.RecyclerView;\n+import android.view.View;\n+\n+import java.util.List;\n+\n+/**\n+ * Container of the compiler state interfaces supporting the creation of a\n+ * {@link RepositoryPresenter}.\n+ */\n+public interface RepositoryPresenterCompilerStates {\n+\n+  /**\n+   * Compiler state to specify what layout to use.\n+   */\n+  interface RPLayout<TVal, TRet> {\n+\n+    /**\n+     * Specifies the {@code layoutId} for the layout to inflate for each item in the associated\n+     * {@link Repository}.\n+     */\n+    @NonNull\n+    TRet layout(@LayoutRes int layoutId);\n+\n+    /**\n+     * Specifies a {@link Function} to return a @{code layoutId} that be inflated given the item in\n+     * the {@link Repository}.\n+     */\n+    @NonNull\n+    TRet layoutForItem(@NonNull Function<TVal, Integer> layoutForItem);\n+  }\n+\n+  /**\n+   * Compiler state to specify how to bind the {@link Repository} item to the view inflated by the\n+   * layout.\n+   */\n+  interface RPViewBinder<TVal, TRet> {\n+\n+    /**\n+     * Specifies a {@link Binder} to bind a single item in the {@link Repository} to an inflated\n+     * {@code View}.\n+     */\n+    @NonNull\n+    TRet bindWith(@NonNull Binder<TVal, View> viewBinder);\n+  }\n+\n+  /**\n+   * Compiler state to create the @{link RepositoryPresenter}.\n+   */\n+  interface RPCompile<TVal> {\n+\n+    /**\n+     * Creates a {@link RepositoryPresenter} for a @{link Repository} of a {@link List} where each\n+     * item in the {@link List} will be bound to the {@link RecyclerView}.\n+     */\n+    @NonNull\n+    RepositoryPresenter<List<TVal>> forList();\n+\n+    /**\n+     * Creates a {@link RepositoryPresenter} for a @{link Repository} of a {@link Result} where\n+     * the item in the {@link Result} will be bound to the @{link RecyclerView} if present.\n+     */\n+    @NonNull\n+    RepositoryPresenter<Result<TVal>> forResult();\n+\n+    /**\n+     * Creates a {@link RepositoryPresenter} for a @{link Repository} of a {@link Result}\n+     * containing a {@link List} where each item in the {@link List} will be bound to the\n+     * {@link RecyclerView}.\n+     */\n+    @NonNull\n+    RepositoryPresenter<Result<List<TVal>>> forResultList();\n+  }\n+\n+  /**\n+   * Compiler state allowing to specify view binder, view recycler or compile.\n+   */\n+  interface RPViewBinderCompile<TVal>\n+      extends RPViewBinder<TVal, RPCompile<TVal>>, RPCompile<TVal> {}\n+}"},{"sha":"6c2172312f5530f98b879ec161cd4ef5efb9624a","filename":"extensions/rvadapter/src/main/java/com/google/android/agera/rvadapter/RepositoryPresenters.java","status":"added","additions":46,"deletions":0,"changes":46,"blob_url":"https://github.com/google/agera/blob/45b1c1bb19fbf65f744f5ee1c36028ae83adcf87/extensions/rvadapter/src/main/java/com/google/android/agera/rvadapter/RepositoryPresenters.java","raw_url":"https://github.com/google/agera/raw/45b1c1bb19fbf65f744f5ee1c36028ae83adcf87/extensions/rvadapter/src/main/java/com/google/android/agera/rvadapter/RepositoryPresenters.java","contents_url":"https://api.github.com/repos/google/agera/contents/extensions/rvadapter/src/main/java/com/google/android/agera/rvadapter/RepositoryPresenters.java?ref=45b1c1bb19fbf65f744f5ee1c36028ae83adcf87","patch":"@@ -0,0 +1,46 @@\n+/*\n+ * Copyright 2016 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera.rvadapter;\n+\n+import com.google.android.agera.Repository;\n+import com.google.android.agera.Result;\n+import com.google.android.agera.rvadapter.RepositoryPresenterCompilerStates.RPLayout;\n+import com.google.android.agera.rvadapter.RepositoryPresenterCompilerStates.RPViewBinderCompile;\n+\n+import android.support.annotation.NonNull;\n+import android.support.annotation.Nullable;\n+\n+import java.util.List;\n+\n+/**\n+ * Contains a basic implementation of {@link RepositoryPresenter} to present the content of a\n+ * {@link Repository}.\n+ */\n+public final class RepositoryPresenters {\n+\n+  /**\n+   * Starts the creation of a {@link RepositoryPresenter} for a {@link Repository} containing either\n+   * a {@link List}, {@link Result} or {@link Result} of {@link List} of the given {@code type}.\n+   */\n+  @SuppressWarnings({\"unchecked\", \"UnusedParameters\"})\n+  @NonNull\n+  public static <T> RPLayout<T, RPViewBinderCompile<T>> repositoryPresenterOf(\n+      @Nullable final Class<T> type) {\n+    return new RepositoryPresenterCompiler();\n+  }\n+\n+  private RepositoryPresenters() {}\n+}"},{"sha":"932c73a11c55b4b4566dfe0e84a85a6f18a13e06","filename":"extensions/rvadapter/src/test/java/com/google/android/agera/rvadapter/RepositoryAdapterTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/google/agera/blob/45b1c1bb19fbf65f744f5ee1c36028ae83adcf87/extensions/rvadapter/src/test/java/com/google/android/agera/rvadapter/RepositoryAdapterTest.java","raw_url":"https://github.com/google/agera/raw/45b1c1bb19fbf65f744f5ee1c36028ae83adcf87/extensions/rvadapter/src/test/java/com/google/android/agera/rvadapter/RepositoryAdapterTest.java","contents_url":"https://api.github.com/repos/google/agera/contents/extensions/rvadapter/src/test/java/com/google/android/agera/rvadapter/RepositoryAdapterTest.java?ref=45b1c1bb19fbf65f744f5ee1c36028ae83adcf87","patch":"@@ -199,4 +199,4 @@ public void shouldNotUpdateOnChangingRepositoryWhenNotObserving() {\n \n     verify(repositoryPresenter).bind(REPOSITORY_ITEM, 0, viewHolder);\n   }\n-}\n\\ No newline at end of file\n+}"},{"sha":"739f803cc6f7b78e98cafc4b48beae75ec17ffa1","filename":"extensions/rvadapter/src/test/java/com/google/android/agera/rvadapter/RepositoryPresenterTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/google/agera/blob/45b1c1bb19fbf65f744f5ee1c36028ae83adcf87/extensions/rvadapter/src/test/java/com/google/android/agera/rvadapter/RepositoryPresenterTest.java","raw_url":"https://github.com/google/agera/raw/45b1c1bb19fbf65f744f5ee1c36028ae83adcf87/extensions/rvadapter/src/test/java/com/google/android/agera/rvadapter/RepositoryPresenterTest.java","contents_url":"https://api.github.com/repos/google/agera/contents/extensions/rvadapter/src/test/java/com/google/android/agera/rvadapter/RepositoryPresenterTest.java?ref=45b1c1bb19fbf65f744f5ee1c36028ae83adcf87","patch":"@@ -49,4 +49,4 @@ public int getLayoutResId(@NonNull final Object data, final int index) {\n     public void bind(@NonNull final Object data, final int index,\n         @NonNull final RecyclerView.ViewHolder holder) {}\n   }\n-}\n\\ No newline at end of file\n+}"},{"sha":"c62c5f9ea22c738fb2fdb9eef93fca5427574bb1","filename":"extensions/rvadapter/src/test/java/com/google/android/agera/rvadapter/RepositoryPresentersTest.java","status":"added","additions":165,"deletions":0,"changes":165,"blob_url":"https://github.com/google/agera/blob/45b1c1bb19fbf65f744f5ee1c36028ae83adcf87/extensions/rvadapter/src/test/java/com/google/android/agera/rvadapter/RepositoryPresentersTest.java","raw_url":"https://github.com/google/agera/raw/45b1c1bb19fbf65f744f5ee1c36028ae83adcf87/extensions/rvadapter/src/test/java/com/google/android/agera/rvadapter/RepositoryPresentersTest.java","contents_url":"https://api.github.com/repos/google/agera/contents/extensions/rvadapter/src/test/java/com/google/android/agera/rvadapter/RepositoryPresentersTest.java?ref=45b1c1bb19fbf65f744f5ee1c36028ae83adcf87","patch":"@@ -0,0 +1,165 @@\n+package com.google.android.agera.rvadapter;\n+\n+import static com.google.android.agera.Result.present;\n+import static com.google.android.agera.Result.success;\n+import static com.google.android.agera.rvadapter.RepositoryPresenters.repositoryPresenterOf;\n+import static com.google.android.agera.rvadapter.test.matchers.HasPrivateConstructor.hasPrivateConstructor;\n+import static java.util.Arrays.asList;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+import static org.mockito.MockitoAnnotations.initMocks;\n+\n+import com.google.android.agera.Binder;\n+import com.google.android.agera.Function;\n+import com.google.android.agera.Result;\n+\n+import android.support.v7.widget.RecyclerView;\n+import android.view.View;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.Config;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+@RunWith(RobolectricTestRunner.class)\n+@Config(manifest = Config.NONE)\n+public class RepositoryPresentersTest {\n+  private static final String STRING = \"string\";\n+  private static final String SECOND_STRING = \"string2\";\n+  private static final Result<String> STRING_RESULT = present(STRING);\n+  private static final List<String> STRING_LIST = asList(STRING, SECOND_STRING);\n+  private static final Result<List<String>> STRING_LIST_RESULT = success(STRING_LIST);\n+  private static final Result<String> FAILURE = Result.<String>failure();\n+  private static final Result<List<String>> LIST_FAILURE = Result.<List<String>>failure();\n+  private static final int LAYOUT_ID = 0;\n+  private static final int DYNAMIC_LAYOUT_ID = 1;\n+  @Mock\n+  private Binder<String, View> binder;\n+  @Mock\n+  private Function<String,Integer> layoutForItem;\n+  private RecyclerView.ViewHolder viewHolder;\n+  @Mock\n+  private View view;\n+\n+  @Before\n+  public void setUp() {\n+    initMocks(this);\n+    viewHolder = new RecyclerView.ViewHolder(view){};\n+    when(layoutForItem.apply(SECOND_STRING)).thenReturn(DYNAMIC_LAYOUT_ID);\n+  }\n+\n+  @Test\n+  public void shouldBindRepositoryPresenterOfResult() {\n+    final RepositoryPresenter<Result<String>> resultRepositoryPresenter =\n+        repositoryPresenterOf(String.class)\n+            .layout(LAYOUT_ID)\n+            .bindWith(binder)\n+            .forResult();\n+    resultRepositoryPresenter.bind(STRING_RESULT, 0, viewHolder);\n+    verify(binder).bind(STRING, view);\n+  }\n+\n+  @Test\n+  public void shouldBindRepositoryPresenterOfResultWithoutBinder() {\n+    final RepositoryPresenter<Result<String>> resultRepositoryPresenter =\n+        repositoryPresenterOf(String.class)\n+            .layout(LAYOUT_ID)\n+            .forResult();\n+    resultRepositoryPresenter.bind(STRING_RESULT, 0, viewHolder);\n+  }\n+\n+\n+  @Test\n+  public void shouldBindRepositoryPresenterOfResultList() {\n+    final RepositoryPresenter<Result<List<String>>> resultListRepositoryPresenter =\n+        repositoryPresenterOf(String.class)\n+            .layout(LAYOUT_ID)\n+            .bindWith(binder)\n+            .forResultList();\n+    resultListRepositoryPresenter.bind(STRING_LIST_RESULT, 1, viewHolder);\n+    verify(binder).bind(SECOND_STRING, view);\n+  }\n+\n+  @Test\n+  public void shouldBindRepositoryPresenterOfList() {\n+    final RepositoryPresenter<List<String>> listRepositoryPresenter =\n+        repositoryPresenterOf(String.class)\n+            .layout(LAYOUT_ID)\n+            .bindWith(binder)\n+            .forList();\n+    listRepositoryPresenter.bind(STRING_LIST, 1, viewHolder);\n+    verify(binder).bind(SECOND_STRING, view);\n+  }\n+\n+  @Test\n+  public void shouldReturnZeroForCountOfRepositoryPresenterOfFailedResult() {\n+    final RepositoryPresenter<Result<String>> resultRepositoryPresenter =\n+        repositoryPresenterOf(String.class)\n+            .layout(LAYOUT_ID)\n+            .bindWith(binder)\n+            .forResult();\n+    assertThat(resultRepositoryPresenter.getItemCount(FAILURE), is(0));\n+  }\n+\n+  @Test\n+  public void shouldReturnOneForCountOfRepositoryPresenterOfSuccessfulResult() {\n+    final RepositoryPresenter<Result<String>> resultRepositoryPresenter =\n+        repositoryPresenterOf(String.class)\n+            .layout(LAYOUT_ID)\n+            .bindWith(binder)\n+            .forResult();\n+    assertThat(resultRepositoryPresenter.getItemCount(STRING_RESULT), is(1));\n+  }\n+\n+  @Test\n+  public void shouldReturnListSizeForCountOfRepositoryPresenterOfList() {\n+    final RepositoryPresenter<List<String>> listRepositoryPresenter =\n+        repositoryPresenterOf(String.class)\n+            .layout(LAYOUT_ID)\n+            .bindWith(binder)\n+            .forList();\n+    assertThat(listRepositoryPresenter.getItemCount(STRING_LIST), is(STRING_LIST.size()));\n+  }\n+\n+  @Test\n+  public void shouldReturnZeroForCountOfRepositoryPresenterOfFailedResultList() {\n+    final RepositoryPresenter<Result<List<String>>> resultListRepositoryPresenter =\n+        repositoryPresenterOf(String.class)\n+            .layout(LAYOUT_ID)\n+            .bindWith(binder)\n+            .forResultList();\n+    assertThat(resultListRepositoryPresenter.getItemCount(LIST_FAILURE), is(0));\n+  }\n+\n+  @Test\n+  public void shouldReturnListSizeForCountOfRepositoryPresenterOfSuccessfulResultList() {\n+    final RepositoryPresenter<Result<List<String>>> resultListRepositoryPresenter =\n+        repositoryPresenterOf(String.class)\n+            .layout(LAYOUT_ID)\n+            .bindWith(binder)\n+            .forResultList();\n+    assertThat(resultListRepositoryPresenter.getItemCount(STRING_LIST_RESULT),\n+        is(STRING_LIST.size()));\n+  }\n+\n+  @Test\n+  public void shouldGenerateLayoutForItemOfRepositoryPresenterOfResultList() {\n+    final RepositoryPresenter<Result<List<String>>> resultListRepositoryPresenter =\n+        repositoryPresenterOf(String.class)\n+            .layoutForItem(layoutForItem)\n+            .forResultList();\n+    assertThat(resultListRepositoryPresenter.getLayoutResId(STRING_LIST_RESULT, 1),\n+        is(DYNAMIC_LAYOUT_ID));\n+  }\n+\n+  @Test\n+  public void shouldHavePrivateConstructor() {\n+    assertThat(RepositoryPresenters.class, hasPrivateConstructor());\n+  }\n+}"},{"sha":"a8a1b110830975dbac2dabbc1f36cc636e1fdf1e","filename":"extensions/rvadapter/src/test/java/com/google/android/agera/rvadapter/test/matchers/HasPrivateConstructor.java","status":"added","additions":54,"deletions":0,"changes":54,"blob_url":"https://github.com/google/agera/blob/45b1c1bb19fbf65f744f5ee1c36028ae83adcf87/extensions/rvadapter/src/test/java/com/google/android/agera/rvadapter/test/matchers/HasPrivateConstructor.java","raw_url":"https://github.com/google/agera/raw/45b1c1bb19fbf65f744f5ee1c36028ae83adcf87/extensions/rvadapter/src/test/java/com/google/android/agera/rvadapter/test/matchers/HasPrivateConstructor.java","contents_url":"https://api.github.com/repos/google/agera/contents/extensions/rvadapter/src/test/java/com/google/android/agera/rvadapter/test/matchers/HasPrivateConstructor.java?ref=45b1c1bb19fbf65f744f5ee1c36028ae83adcf87","patch":"@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera.rvadapter.test.matchers;\n+\n+import android.support.annotation.NonNull;\n+import org.hamcrest.Description;\n+import org.hamcrest.Factory;\n+import org.hamcrest.Matcher;\n+import org.hamcrest.TypeSafeMatcher;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Modifier;\n+\n+public final class HasPrivateConstructor extends TypeSafeMatcher<Class<?>> {\n+  private static final HasPrivateConstructor INSTANCE = new HasPrivateConstructor();\n+\n+  private HasPrivateConstructor() {}\n+\n+  @Override\n+  protected boolean matchesSafely(final Class<?> clazz) {\n+    try {\n+      Constructor<?> constructor = clazz.getDeclaredConstructor();\n+      constructor.setAccessible(true);\n+      constructor.newInstance();\n+      return Modifier.isPrivate(constructor.getModifiers());\n+    } catch (final Exception ignored) {\n+    }\n+    return false;\n+  }\n+\n+  @Override\n+  public void describeTo(final Description description) {\n+    description.appendText(\"should have private constructor\");\n+  }\n+\n+  @NonNull\n+  @Factory\n+  public static Matcher<Class<?>> hasPrivateConstructor() {\n+    return INSTANCE;\n+  }\n+}"},{"sha":"6bf73d6b106f82c7a46d41c4fd274316723d0b6e","filename":"testapp/src/main/java/com/google/android/agera/testapp/NotePresenter.java","status":"removed","additions":0,"deletions":70,"changes":70,"blob_url":"https://github.com/google/agera/blob/5e518b7b05f9e7a34a314945f68deff7b2c3e334/testapp/src/main/java/com/google/android/agera/testapp/NotePresenter.java","raw_url":"https://github.com/google/agera/raw/5e518b7b05f9e7a34a314945f68deff7b2c3e334/testapp/src/main/java/com/google/android/agera/testapp/NotePresenter.java","contents_url":"https://api.github.com/repos/google/agera/contents/testapp/src/main/java/com/google/android/agera/testapp/NotePresenter.java?ref=5e518b7b05f9e7a34a314945f68deff7b2c3e334","patch":"@@ -1,70 +0,0 @@\n-/*\n- * Copyright 2016 Google Inc. All Rights Reserved.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package com.google.android.agera.testapp;\n-\n-import static com.google.android.agera.Preconditions.checkNotNull;\n-\n-import com.google.android.agera.rvadapter.RepositoryPresenter;\n-\n-import android.app.AlertDialog;\n-import android.support.annotation.NonNull;\n-import android.support.v7.widget.RecyclerView;\n-import android.widget.EditText;\n-import android.widget.TextView;\n-\n-import java.util.List;\n-\n-final class NotePresenter extends RepositoryPresenter<List<Note>> {\n-  @NonNull\n-  private final NotesStore notesStore;\n-\n-  public NotePresenter(@NonNull final NotesStore notesStore) {\n-    this.notesStore = checkNotNull(notesStore);\n-  }\n-\n-  @Override\n-  public int getItemCount(@NonNull final List<Note> notes) {\n-    return notes.size();\n-  }\n-\n-  @Override\n-  public int getLayoutResId(@NonNull final List<Note> notes, final int index) {\n-    return R.layout.text_layout;\n-  }\n-\n-  @Override\n-  public void bind(@NonNull final List<Note> notes, final int index,\n-      @NonNull final RecyclerView.ViewHolder holder) {\n-    final Note note = notes.get(index);\n-    final TextView view = (TextView) holder.itemView;\n-    view.setText(note.getNote());\n-    view.setOnClickListener(v -> {\n-      final EditText editText = new EditText(v.getContext());\n-      editText.setId(R.id.edit);\n-      editText.setText(note.getNote());\n-      new AlertDialog.Builder(v.getContext())\n-          .setTitle(R.string.edit_note)\n-          .setView(editText)\n-          .setPositiveButton(R.string.edit,\n-              (d, i) -> notesStore.updateNote(note, editText.getText().toString()))\n-          .create().show();\n-    });\n-    view.setOnLongClickListener(v -> {\n-      notesStore.deleteNote(note);\n-      return true;\n-    });\n-  }\n-}"},{"sha":"839d590e9eeaadd5ecfa1b9d433fc7e75bd060f9","filename":"testapp/src/main/java/com/google/android/agera/testapp/NotesActivity.java","status":"modified","additions":27,"deletions":1,"changes":28,"blob_url":"https://github.com/google/agera/blob/45b1c1bb19fbf65f744f5ee1c36028ae83adcf87/testapp/src/main/java/com/google/android/agera/testapp/NotesActivity.java","raw_url":"https://github.com/google/agera/raw/45b1c1bb19fbf65f744f5ee1c36028ae83adcf87/testapp/src/main/java/com/google/android/agera/testapp/NotesActivity.java","contents_url":"https://api.github.com/repos/google/agera/contents/testapp/src/main/java/com/google/android/agera/testapp/NotesActivity.java?ref=45b1c1bb19fbf65f744f5ee1c36028ae83adcf87","patch":"@@ -26,9 +26,11 @@\n import static com.google.android.agera.net.HttpFunctions.httpFunction;\n import static com.google.android.agera.net.HttpRequests.httpGetRequest;\n import static com.google.android.agera.rvadapter.RepositoryAdapter.repositoryAdapter;\n+import static com.google.android.agera.rvadapter.RepositoryPresenters.repositoryPresenterOf;\n import static com.google.android.agera.testapp.NotesStore.notesStore;\n import static java.util.concurrent.Executors.newSingleThreadExecutor;\n \n+import com.google.android.agera.Binder;\n import com.google.android.agera.Repository;\n import com.google.android.agera.Result;\n import com.google.android.agera.Updatable;\n@@ -38,11 +40,14 @@\n import android.app.AlertDialog;\n import android.graphics.Bitmap;\n import android.os.Bundle;\n+import android.support.annotation.NonNull;\n import android.support.v7.widget.LinearLayoutManager;\n import android.support.v7.widget.RecyclerView;\n import android.util.DisplayMetrics;\n+import android.view.View;\n import android.widget.EditText;\n import android.widget.ImageView;\n+import android.widget.TextView;\n \n import java.util.concurrent.Executor;\n \n@@ -85,7 +90,28 @@ protected void onCreate(final Bundle savedInstanceState) {\n \n     // Create a repository adapter, wiring up the notes repository from the store with a presenter\n     adapter = repositoryAdapter()\n-        .add(notesStore.getNotesRepository(), new NotePresenter(notesStore))\n+        .add(notesStore.getNotesRepository(), repositoryPresenterOf(Note.class)\n+            .layout(R.layout.text_layout)\n+            .bindWith((note, view) -> {\n+              final TextView textView = (TextView) view;\n+              textView.setText(note.getNote());\n+              view.setOnClickListener(v -> {\n+                final EditText editText = new EditText(v.getContext());\n+                editText.setId(R.id.edit);\n+                editText.setText(note.getNote());\n+                new AlertDialog.Builder(v.getContext())\n+                    .setTitle(R.string.edit_note)\n+                    .setView(editText)\n+                    .setPositiveButton(R.string.edit,\n+                        (d, i) -> notesStore.updateNote(note, editText.getText().toString()))\n+                    .create().show();\n+              });\n+              view.setOnLongClickListener(v -> {\n+                notesStore.deleteNote(note);\n+                return true;\n+              });\n+            })\n+            .forList())\n         .build();\n \n     // Setup the recycler view using the repository adapter"}]}