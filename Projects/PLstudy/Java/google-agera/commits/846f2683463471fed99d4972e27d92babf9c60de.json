{"sha":"846f2683463471fed99d4972e27d92babf9c60de","commit":{"author":{"name":"Max Cai","email":"maxtroy@users.noreply.github.com","date":"2016-07-31T23:08:49Z"},"committer":{"name":"Magnus Ernstsson","email":"magnus@ernstsson.net","date":"2016-07-31T23:08:49Z"},"message":"Add 'attempt or continue' directive (#87)","tree":{"sha":"81c73dffaa957417ee50680e6feccd3e89516c01","url":"https://api.github.com/repos/google/agera/git/trees/81c73dffaa957417ee50680e6feccd3e89516c01"},"url":"https://api.github.com/repos/google/agera/git/commits/846f2683463471fed99d4972e27d92babf9c60de","comment_count":0},"url":"https://api.github.com/repos/google/agera/commits/846f2683463471fed99d4972e27d92babf9c60de","html_url":"https://github.com/google/agera/commit/846f2683463471fed99d4972e27d92babf9c60de","comments_url":"https://api.github.com/repos/google/agera/commits/846f2683463471fed99d4972e27d92babf9c60de/comments","author":{"login":"maxtroy","id":16337072,"avatar_url":"https://avatars0.githubusercontent.com/u/16337072?v=3","gravatar_id":"","url":"https://api.github.com/users/maxtroy","html_url":"https://github.com/maxtroy","followers_url":"https://api.github.com/users/maxtroy/followers","following_url":"https://api.github.com/users/maxtroy/following{/other_user}","gists_url":"https://api.github.com/users/maxtroy/gists{/gist_id}","starred_url":"https://api.github.com/users/maxtroy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/maxtroy/subscriptions","organizations_url":"https://api.github.com/users/maxtroy/orgs","repos_url":"https://api.github.com/users/maxtroy/repos","events_url":"https://api.github.com/users/maxtroy/events{/privacy}","received_events_url":"https://api.github.com/users/maxtroy/received_events","type":"User","site_admin":false},"committer":{"login":"ernstsson","id":378389,"avatar_url":"https://avatars2.githubusercontent.com/u/378389?v=3","gravatar_id":"","url":"https://api.github.com/users/ernstsson","html_url":"https://github.com/ernstsson","followers_url":"https://api.github.com/users/ernstsson/followers","following_url":"https://api.github.com/users/ernstsson/following{/other_user}","gists_url":"https://api.github.com/users/ernstsson/gists{/gist_id}","starred_url":"https://api.github.com/users/ernstsson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ernstsson/subscriptions","organizations_url":"https://api.github.com/users/ernstsson/orgs","repos_url":"https://api.github.com/users/ernstsson/repos","events_url":"https://api.github.com/users/ernstsson/events{/privacy}","received_events_url":"https://api.github.com/users/ernstsson/received_events","type":"User","site_admin":false},"parents":[{"sha":"bdccbe8ab509a13e347b4fa65629a963668334f0","url":"https://api.github.com/repos/google/agera/commits/bdccbe8ab509a13e347b4fa65629a963668334f0","html_url":"https://github.com/google/agera/commit/bdccbe8ab509a13e347b4fa65629a963668334f0"}],"stats":{"total":237,"additions":230,"deletions":7},"files":[{"sha":"d6b09e51b33f86466b46084fc05ef137a0f04fb0","filename":"agera/src/main/java/com/google/android/agera/CompiledRepository.java","status":"modified","additions":20,"deletions":0,"changes":20,"blob_url":"https://github.com/google/agera/blob/846f2683463471fed99d4972e27d92babf9c60de/agera/src/main/java/com/google/android/agera/CompiledRepository.java","raw_url":"https://github.com/google/agera/raw/846f2683463471fed99d4972e27d92babf9c60de/agera/src/main/java/com/google/android/agera/CompiledRepository.java","contents_url":"https://api.github.com/repos/google/agera/contents/agera/src/main/java/com/google/android/agera/CompiledRepository.java?ref=846f2683463471fed99d4972e27d92babf9c60de","patch":"@@ -15,6 +15,7 @@\n  */\n package com.google.android.agera;\n \n+import static com.google.android.agera.Functions.identityFunction;\n import static com.google.android.agera.WorkerHandler.MSG_CALL_ACKNOWLEDGE_CANCEL;\n import static com.google.android.agera.WorkerHandler.MSG_CALL_MAYBE_START_FLOW;\n import static com.google.android.agera.WorkerHandler.workerHandler;\n@@ -262,6 +263,7 @@ private void checkRestartLocked() {\n   private static final int SEND_TO = 7;\n   private static final int BIND = 8;\n   private static final int FILTER_SUCCESS = 9;\n+  private static final int FILTER_FAILURE = 10;\n \n   /**\n    * @param asynchronously Whether this flow is run asynchronously. True after the first goTo and\n@@ -321,6 +323,9 @@ private void runFlowFrom(final int index, final boolean asynchronously) {\n         case FILTER_SUCCESS:\n           i = runFilterSuccess(directives, i);\n           break;\n+        case FILTER_FAILURE:\n+          i = runFilterFailure(directives, i);\n+          break;\n         case END:\n           i = runEnd(directives, i);\n           break;\n@@ -459,6 +464,21 @@ private int runFilterSuccess(@NonNull final Object[] directives, final int index\n     }\n   }\n \n+  static void addFilterFailure(@NonNull final List<Object> directives) {\n+    directives.add(FILTER_FAILURE);\n+  }\n+\n+  private int runFilterFailure(@NonNull final Object[] directives, final int index) {\n+    final Result tryValue = (Result) intermediateValue;\n+    if (tryValue.succeeded()) {\n+      runTerminate(tryValue.get(), identityFunction());\n+      return -1;\n+    } else {\n+      intermediateValue = tryValue.getFailure();\n+      return index + 1;\n+    }\n+  }\n+\n   private void runTerminate(@NonNull final Object caseValue,\n       @Nullable final Function terminatingValueFunction) {\n     if (terminatingValueFunction == null) {"},{"sha":"71894b35f1ad74da799785ae5a749ed2003a97bd","filename":"agera/src/main/java/com/google/android/agera/RepositoryCompiler.java","status":"modified","additions":11,"deletions":1,"changes":12,"blob_url":"https://github.com/google/agera/blob/846f2683463471fed99d4972e27d92babf9c60de/agera/src/main/java/com/google/android/agera/RepositoryCompiler.java","raw_url":"https://github.com/google/agera/raw/846f2683463471fed99d4972e27d92babf9c60de/agera/src/main/java/com/google/android/agera/RepositoryCompiler.java","contents_url":"https://api.github.com/repos/google/agera/contents/agera/src/main/java/com/google/android/agera/RepositoryCompiler.java?ref=846f2683463471fed99d4972e27d92babf9c60de","patch":"@@ -18,6 +18,7 @@\n import static com.google.android.agera.CompiledRepository.addBindWith;\n import static com.google.android.agera.CompiledRepository.addCheck;\n import static com.google.android.agera.CompiledRepository.addEnd;\n+import static com.google.android.agera.CompiledRepository.addFilterFailure;\n import static com.google.android.agera.CompiledRepository.addFilterSuccess;\n import static com.google.android.agera.CompiledRepository.addGetFrom;\n import static com.google.android.agera.CompiledRepository.addGoLazy;\n@@ -45,7 +46,7 @@\n final class RepositoryCompiler implements\n     RepositoryCompilerStates.RFrequency,\n     RepositoryCompilerStates.RFlow,\n-    RepositoryCompilerStates.RTermination,\n+    RepositoryCompilerStates.RTerminationOrContinue,\n     RepositoryCompilerStates.RConfig {\n \n   private static final ThreadLocal<RepositoryCompiler> compilers = new ThreadLocal<>();\n@@ -363,6 +364,15 @@ private void terminate(@Nullable final Function valueFunction) {\n     }\n   }\n \n+  @NonNull\n+  @Override\n+  public RepositoryCompiler orContinue() {\n+    checkExpect(TERMINATE_THEN_END);\n+    addFilterFailure(directives);\n+    expect = FLOW;\n+    return this;\n+  }\n+\n   //endregion RTermination\n \n   //region RConfig"},{"sha":"fba6b108087cd4ea1fa2f94f49743af936b105e6","filename":"agera/src/main/java/com/google/android/agera/RepositoryCompilerStates.java","status":"modified","additions":58,"deletions":6,"changes":64,"blob_url":"https://github.com/google/agera/blob/846f2683463471fed99d4972e27d92babf9c60de/agera/src/main/java/com/google/android/agera/RepositoryCompilerStates.java","raw_url":"https://github.com/google/agera/raw/846f2683463471fed99d4972e27d92babf9c60de/agera/src/main/java/com/google/android/agera/RepositoryCompilerStates.java","contents_url":"https://api.github.com/repos/google/agera/contents/agera/src/main/java/com/google/android/agera/RepositoryCompilerStates.java?ref=846f2683463471fed99d4972e27d92babf9c60de","patch":"@@ -123,6 +123,12 @@\n \n     @NonNull\n     @Override\n+    RTerminationOrContinue<TVal, Throwable, RConfig<TVal>,\n+        RFlow<TVal, Throwable, ?>> thenAttemptGetFrom(\n+            @NonNull Supplier<? extends Result<? extends TVal>> attemptSupplier);\n+\n+    @NonNull\n+    @Override\n     <TAdd, TCur> RFlow<TVal, TCur, ?> mergeIn(@NonNull Supplier<TAdd> supplier,\n         @NonNull Merger<? super TPre, ? super TAdd, TCur> merger);\n \n@@ -134,13 +140,27 @@\n \n     @NonNull\n     @Override\n+    <TAdd> RTerminationOrContinue<TVal, Throwable, RConfig<TVal>,\n+        RFlow<TVal, Throwable, ?>> thenAttemptMergeIn(\n+            @NonNull Supplier<TAdd> supplier,\n+            @NonNull Merger<? super TPre, ? super TAdd,\n+                ? extends Result<? extends TVal>> attemptMerger);\n+\n+    @NonNull\n+    @Override\n     <TCur> RFlow<TVal, TCur, ?> transform(@NonNull Function<? super TPre, TCur> function);\n \n     @NonNull\n     @Override\n     <TCur> RTermination<TVal, Throwable, RFlow<TVal, TCur, ?>> attemptTransform(\n         @NonNull Function<? super TPre, Result<TCur>> attemptFunction);\n \n+    @NonNull\n+    @Override\n+    RTerminationOrContinue<TVal, Throwable, RConfig<TVal>,\n+        RFlow<TVal, Throwable, ?>> thenAttemptTransform(\n+            @NonNull Function<? super TPre, ? extends Result<? extends TVal>> attemptFunction);\n+\n     // Asynchronous directives:\n \n     /**\n@@ -305,10 +325,13 @@\n \n     /**\n      * Perform the {@link #attemptGetFrom} directive and use the successful output value as the new\n-     * value of the compiled repository, with notification if necessary.\n+     * value of the compiled repository, with notification if necessary. If the attempt fails,\n+     * either terminate the data processing flow, or continue onto the next directive for recovery,\n+     * depending on the clause that follows.\n      */\n     @NonNull\n-    RTermination<TVal, Throwable, RConfig<TVal>> thenAttemptGetFrom(\n+    RTerminationOrContinue<TVal, Throwable, RConfig<TVal>,\n+        ? extends RSyncFlow<TVal, Throwable, ?>> thenAttemptGetFrom(\n             @NonNull Supplier<? extends Result<? extends TVal>> attemptSupplier);\n \n     /**\n@@ -321,10 +344,13 @@\n \n     /**\n      * Perform the {@link #attemptMergeIn} directive and use the successful output value as the new\n-     * value of the compiled repository, with notification if necessary.\n+     * value of the compiled repository, with notification if necessary. If the attempt fails,\n+     * either terminate the data processing flow, or continue onto the next directive for recovery,\n+     * depending on the clause that follows.\n      */\n     @NonNull\n-    <TAdd> RTermination<TVal, Throwable, RConfig<TVal>> thenAttemptMergeIn(\n+    <TAdd> RTerminationOrContinue<TVal, Throwable, RConfig<TVal>,\n+        ? extends RSyncFlow<TVal, Throwable, ?>> thenAttemptMergeIn(\n             @NonNull Supplier<TAdd> supplier,\n             @NonNull Merger<? super TPre, ? super TAdd,\n                 ? extends Result<? extends TVal>> attemptMerger);\n@@ -339,10 +365,13 @@\n \n     /**\n      * Perform the {@link #attemptTransform} directive and use the successful output value as the\n-     * new value of the compiled repository, with notification if necessary.\n+     * new value of the compiled repository, with notification if necessary. If the attempt fails,\n+     * either terminate the data processing flow, or continue onto the next directive for recovery,\n+     * depending on the clause that follows.\n      */\n     @NonNull\n-    RTermination<TVal, Throwable, RConfig<TVal>> thenAttemptTransform(\n+    RTerminationOrContinue<TVal, Throwable, RConfig<TVal>,\n+        ? extends RSyncFlow<TVal, Throwable, ?>> thenAttemptTransform(\n             @NonNull Function<? super TPre, ? extends Result<? extends TVal>> attemptFunction);\n   }\n \n@@ -372,6 +401,29 @@\n   }\n \n   /**\n+   * Compiler state allowing to terminate or continue the data processing flow following a failed\n+   * attempt to produce the new value of the repository.\n+   *\n+   * @param <TVal> Value type of the repository.\n+   * @param <TTerm> Value type from which to terminate the flow.\n+   * @param <TRet> Compiler state to return to if the flow is terminated.\n+   * @param <TCon> Compiler state to return to if the flow is to continue.\n+   */\n+\n+  interface RTerminationOrContinue<TVal, TTerm, TRet, TCon>\n+      extends RTermination<TVal, TTerm, TRet> {\n+\n+    /**\n+     * If the previous attempt failed, continue with the rest of the data processing flow, using the\n+     * {@linkplain Result#getFailure() failure} as the input value to the next directive. Otherwise,\n+     * end the data processing flow and use the successful output value from the attempt as the new\n+     * value of the compiled repository, with notification if necessary.\n+     */\n+    @NonNull\n+    TCon orContinue();\n+  }\n+\n+  /**\n    * Compiler state allowing to configure and end the declaration of the repository.\n    *\n    * @param <TVal> Repository value type."},{"sha":"661e4c8ea2ab6cb2df5dd6147737c168f2762cb7","filename":"agera/src/test/java/com/google/android/agera/RepositoryContinuationTest.java","status":"added","additions":141,"deletions":0,"changes":141,"blob_url":"https://github.com/google/agera/blob/846f2683463471fed99d4972e27d92babf9c60de/agera/src/test/java/com/google/android/agera/RepositoryContinuationTest.java","raw_url":"https://github.com/google/agera/raw/846f2683463471fed99d4972e27d92babf9c60de/agera/src/test/java/com/google/android/agera/RepositoryContinuationTest.java","contents_url":"https://api.github.com/repos/google/agera/contents/agera/src/test/java/com/google/android/agera/RepositoryContinuationTest.java?ref=846f2683463471fed99d4972e27d92babf9c60de","patch":"@@ -0,0 +1,141 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera;\n+\n+import static com.google.android.agera.Repositories.mutableRepository;\n+import static com.google.android.agera.Repositories.repositoryWithInitialValue;\n+import static com.google.android.agera.Result.failure;\n+import static com.google.android.agera.Result.success;\n+import static com.google.android.agera.Suppliers.staticSupplier;\n+import static com.google.android.agera.test.matchers.SupplierGives.has;\n+import static com.google.android.agera.test.matchers.UpdatableUpdated.wasNotUpdated;\n+import static com.google.android.agera.test.matchers.UpdatableUpdated.wasUpdated;\n+import static com.google.android.agera.test.mocks.MockUpdatable.mockUpdatable;\n+import static java.util.Arrays.asList;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.mockito.Matchers.anyListOf;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoMoreInteractions;\n+import static org.mockito.Mockito.when;\n+import static org.mockito.MockitoAnnotations.initMocks;\n+import static org.robolectric.annotation.Config.NONE;\n+\n+import com.google.android.agera.test.mocks.MockUpdatable;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.Config;\n+\n+import java.util.List;\n+\n+@Config(manifest = NONE)\n+@RunWith(RobolectricTestRunner.class)\n+public final class RepositoryContinuationTest {\n+  private static final int INITIAL_VALUE = 8;\n+  private static final Result<Integer> SUPPLIER_SUCCESSFUL_RESULT = success(100);\n+  private static final Result<Integer> MERGER_SUCCESSFUL_RESULT = success(200);\n+  private static final Result<Integer> FUNCTION_SUCCESSFUL_RESULT = success(300);\n+  private static final Result<Integer> SUPPLIER_FAILED_RESULT = failure(new Throwable(\"-100\"));\n+  private static final Result<Integer> MERGER_FAILED_RESULT = failure(new Throwable(\"-200\"));\n+  private static final Result<Integer> FUNCTION_FAILED_RESULT = failure(new Throwable(\"-300\"));\n+  private static final Supplier<Integer> SECOND_SUPPLIER = staticSupplier(400);\n+  private static final int RECOVERY_VALUE = 42;\n+\n+  private Repository<Integer> repository;\n+  private MockUpdatable updatable;\n+  @Mock\n+  private Supplier<Result<Integer>> mockAttemptSupplier;\n+  @Mock\n+  private Merger<Throwable, Integer, Result<Integer>> mockAttemptMerger;\n+  @Mock\n+  private Function<Throwable, Result<Integer>> mockAttemptFunction;\n+  @Mock\n+  private Function<Throwable, Integer> mockRecoveryFunction;\n+\n+  @Before\n+  public void setUp() {\n+    initMocks(this);\n+    updatable = mockUpdatable();\n+    repository = repositoryWithInitialValue(INITIAL_VALUE)\n+        .observe()\n+        .onUpdatesPerLoop()\n+        .thenAttemptGetFrom(mockAttemptSupplier).orContinue()\n+        .thenAttemptMergeIn(SECOND_SUPPLIER, mockAttemptMerger).orContinue()\n+        .thenAttemptTransform(mockAttemptFunction).orContinue()\n+        .thenTransform(mockRecoveryFunction)\n+        .compile();\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    updatable.removeFromObservables();\n+  }\n+\n+  @Test\n+  public void shouldProduceSupplierResultIfSupplierSucceeds() {\n+    when(mockAttemptSupplier.get()).thenReturn(SUPPLIER_SUCCESSFUL_RESULT);\n+\n+    updatable.addToObservable(repository);\n+\n+    assertThat(repository, has(SUPPLIER_SUCCESSFUL_RESULT.get()));\n+    verifyNoMoreInteractions(mockAttemptMerger, mockAttemptFunction, mockRecoveryFunction);\n+  }\n+\n+  @Test\n+  public void shouldProduceMergerResultIfMergerSucceeds() {\n+    when(mockAttemptSupplier.get()).thenReturn(SUPPLIER_FAILED_RESULT);\n+    when(mockAttemptMerger.merge(SUPPLIER_FAILED_RESULT.getFailure(), SECOND_SUPPLIER.get()))\n+        .thenReturn(MERGER_SUCCESSFUL_RESULT);\n+\n+    updatable.addToObservable(repository);\n+\n+    assertThat(repository, has(MERGER_SUCCESSFUL_RESULT.get()));\n+    verifyNoMoreInteractions(mockAttemptFunction, mockRecoveryFunction);\n+  }\n+\n+  @Test\n+  public void shouldProduceFunctionResultIfFunctionSucceeds() {\n+    when(mockAttemptSupplier.get()).thenReturn(SUPPLIER_FAILED_RESULT);\n+    when(mockAttemptMerger.merge(SUPPLIER_FAILED_RESULT.getFailure(), SECOND_SUPPLIER.get()))\n+        .thenReturn(MERGER_FAILED_RESULT);\n+    when(mockAttemptFunction.apply(MERGER_FAILED_RESULT.getFailure()))\n+        .thenReturn(FUNCTION_SUCCESSFUL_RESULT);\n+\n+    updatable.addToObservable(repository);\n+\n+    assertThat(repository, has(FUNCTION_SUCCESSFUL_RESULT.get()));\n+    verifyNoMoreInteractions(mockRecoveryFunction);\n+  }\n+\n+  @Test\n+  public void shouldProduceRecoveryResultIfAllAttemptsFail() {\n+    when(mockAttemptSupplier.get()).thenReturn(SUPPLIER_FAILED_RESULT);\n+    when(mockAttemptMerger.merge(SUPPLIER_FAILED_RESULT.getFailure(), SECOND_SUPPLIER.get()))\n+        .thenReturn(MERGER_FAILED_RESULT);\n+    when(mockAttemptFunction.apply(MERGER_FAILED_RESULT.getFailure()))\n+        .thenReturn(FUNCTION_FAILED_RESULT);\n+    when(mockRecoveryFunction.apply(FUNCTION_FAILED_RESULT.getFailure()))\n+        .thenReturn(RECOVERY_VALUE);\n+\n+    updatable.addToObservable(repository);\n+\n+    assertThat(repository, has(RECOVERY_VALUE));\n+  }\n+}"}]}