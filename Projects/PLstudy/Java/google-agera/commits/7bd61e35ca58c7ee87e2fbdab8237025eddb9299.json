{
  "sha": "7bd61e35ca58c7ee87e2fbdab8237025eddb9299",
  "commit": {
    "author": {
      "name": "Magnus Ernstsson",
      "email": "magnus@ernstsson.net",
      "date": "2017-03-18T15:05:30Z"
    },
    "committer": {
      "name": "GitHub",
      "email": "noreply@github.com",
      "date": "2017-03-18T15:05:30Z"
    },
    "message": "Simplified repo presenter compilers (#153)",
    "tree": {
      "sha": "2350e1ae6abfe9d8260d378c3226cb6f279d58f0",
      "url": "https://api.github.com/repos/google/agera/git/trees/2350e1ae6abfe9d8260d378c3226cb6f279d58f0"
    },
    "url": "https://api.github.com/repos/google/agera/git/commits/7bd61e35ca58c7ee87e2fbdab8237025eddb9299",
    "comment_count": 0
  },
  "url": "https://api.github.com/repos/google/agera/commits/7bd61e35ca58c7ee87e2fbdab8237025eddb9299",
  "html_url": "https://github.com/google/agera/commit/7bd61e35ca58c7ee87e2fbdab8237025eddb9299",
  "comments_url": "https://api.github.com/repos/google/agera/commits/7bd61e35ca58c7ee87e2fbdab8237025eddb9299/comments",
  "author": {
    "login": "ernstsson",
    "id": 378389,
    "avatar_url": "https://avatars2.githubusercontent.com/u/378389?v=3",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ernstsson",
    "html_url": "https://github.com/ernstsson",
    "followers_url": "https://api.github.com/users/ernstsson/followers",
    "following_url": "https://api.github.com/users/ernstsson/following{/other_user}",
    "gists_url": "https://api.github.com/users/ernstsson/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ernstsson/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ernstsson/subscriptions",
    "organizations_url": "https://api.github.com/users/ernstsson/orgs",
    "repos_url": "https://api.github.com/users/ernstsson/repos",
    "events_url": "https://api.github.com/users/ernstsson/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ernstsson/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "web-flow",
    "id": 19864447,
    "avatar_url": "https://avatars0.githubusercontent.com/u/19864447?v=3",
    "gravatar_id": "",
    "url": "https://api.github.com/users/web-flow",
    "html_url": "https://github.com/web-flow",
    "followers_url": "https://api.github.com/users/web-flow/followers",
    "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
    "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
    "organizations_url": "https://api.github.com/users/web-flow/orgs",
    "repos_url": "https://api.github.com/users/web-flow/repos",
    "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
    "received_events_url": "https://api.github.com/users/web-flow/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "054df7566ce295cde240a365c1479bee8aa3c48f",
      "url": "https://api.github.com/repos/google/agera/commits/054df7566ce295cde240a365c1479bee8aa3c48f",
      "html_url": "https://github.com/google/agera/commit/054df7566ce295cde240a365c1479bee8aa3c48f"
    }
  ],
  "stats": {
    "total": 305,
    "additions": 120,
    "deletions": 185
  },
  "files": [
    {
      "sha": "484b139d80b227b814592276e4fe8bb491407ac1",
      "filename": "extensions/rvadapter/src/main/java/com/google/android/agera/rvadapter/RepositoryPresenterCompiler.java",
      "status": "modified",
      "additions": 46,
      "deletions": 133,
      "changes": 179,
      "blob_url": "https://github.com/google/agera/blob/7bd61e35ca58c7ee87e2fbdab8237025eddb9299/extensions/rvadapter/src/main/java/com/google/android/agera/rvadapter/RepositoryPresenterCompiler.java",
      "raw_url": "https://github.com/google/agera/raw/7bd61e35ca58c7ee87e2fbdab8237025eddb9299/extensions/rvadapter/src/main/java/com/google/android/agera/rvadapter/RepositoryPresenterCompiler.java",
      "contents_url": "https://api.github.com/repos/google/agera/contents/extensions/rvadapter/src/main/java/com/google/android/agera/rvadapter/RepositoryPresenterCompiler.java?ref=7bd61e35ca58c7ee87e2fbdab8237025eddb9299",
      "patch": "@@ -16,9 +16,14 @@\n package com.google.android.agera.rvadapter;\n \n import static com.google.android.agera.Binders.nullBinder;\n+import static com.google.android.agera.Functions.identityFunction;\n+import static com.google.android.agera.Functions.itemAsList;\n+import static com.google.android.agera.Functions.resultAsList;\n+import static com.google.android.agera.Functions.resultListAsList;\n import static com.google.android.agera.Functions.staticFunction;\n import static com.google.android.agera.Preconditions.checkNotNull;\n import static com.google.android.agera.Receivers.nullReceiver;\n+import static java.util.Collections.emptyList;\n \n import android.support.annotation.LayoutRes;\n import android.support.annotation.NonNull;\n@@ -30,6 +35,7 @@\n import com.google.android.agera.Result;\n import com.google.android.agera.rvadapter.RepositoryPresenterCompilerStates.RPLayout;\n import com.google.android.agera.rvadapter.RepositoryPresenterCompilerStates.RPViewBinderRecycleStableIdCompile;\n+import java.lang.ref.WeakReference;\n import java.util.List;\n \n @SuppressWarnings({\"unchecked, rawtypes\"})\n@@ -45,25 +51,29 @@\n   @NonNull\n   @Override\n   public RepositoryPresenter forItem() {\n-    return new ItemBasicRepositoryPresenter<>(layoutForItem, binder, recycler, stableIdForItem);\n+    return new CompiledRepositoryPresenter(layoutForItem, binder, stableIdForItem, recycler,\n+        itemAsList());\n   }\n \n   @NonNull\n   @Override\n   public RepositoryPresenter<List> forList() {\n-    return new ListBasicRepositoryPresenter(layoutForItem, binder, recycler, stableIdForItem);\n+    return new CompiledRepositoryPresenter(layoutForItem, binder, stableIdForItem, recycler,\n+        (Function) identityFunction());\n   }\n \n   @NonNull\n   @Override\n   public RepositoryPresenter<Result> forResult() {\n-    return new SingleResultRepositoryPresenter(layoutForItem, binder, recycler, stableIdForItem);\n+    return new CompiledRepositoryPresenter(layoutForItem, binder, stableIdForItem, recycler,\n+        (Function) resultAsList());\n   }\n \n   @NonNull\n   @Override\n   public RepositoryPresenter<Result<List>> forResultList() {\n-    return new ListResultRepositoryPresenter(layoutForItem, binder, recycler, stableIdForItem);\n+    return new CompiledRepositoryPresenter(layoutForItem, binder, stableIdForItem, recycler,\n+        (Function) resultListAsList());\n   }\n \n   @NonNull\n@@ -101,165 +111,68 @@ public Object recycleWith(@NonNull final Receiver recycler) {\n     return this;\n   }\n \n-  private abstract static class BasicRepositoryPresenter<TVal, T>\n-      extends RepositoryPresenter<T> {\n+  private static final class CompiledRepositoryPresenter extends RepositoryPresenter {\n+    @NonNull\n+    private final Function<Object, List<Object>> converter;\n     @NonNull\n     private final Function<Object, Integer> layoutId;\n     @NonNull\n-    private final Binder<TVal, View> binder;\n+    private final Binder<Object, View> binder;\n     @NonNull\n-    private final Function<TVal, Long> stableIdForItem;\n+    private final Function<Object, Long> stableIdForItem;\n     @NonNull\n     private final Receiver<View> recycler;\n+    @NonNull\n+    private WeakReference<Object> dataRef = new WeakReference<>(null);\n+    @NonNull\n+    private List items = emptyList();\n \n-    BasicRepositoryPresenter(@NonNull final Function<Object, Integer> layoutId,\n-        @NonNull final Binder<TVal, View> binder,\n+    CompiledRepositoryPresenter(\n+        @NonNull final Function<Object, Integer> layoutId,\n+        @NonNull final Binder<Object, View> binder,\n+        @NonNull final Function<Object, Long> stableIdForItem,\n         @NonNull final Receiver<View> recycler,\n-        @NonNull final Function<TVal, Long> stableIdForItem) {\n-      this.layoutId = checkNotNull(layoutId);\n-      this.binder = checkNotNull(binder);\n-      this.recycler = checkNotNull(recycler);\n+        @NonNull final Function<Object, List<Object>> converter) {\n+      this.converter = converter;\n+      this.layoutId = layoutId;\n+      this.binder = binder;\n       this.stableIdForItem = stableIdForItem;\n+      this.recycler = recycler;\n     }\n \n-    @NonNull\n-    protected abstract TVal getValue(@NonNull final T data, final int index);\n-\n     @Override\n-    public final int getLayoutResId(@NonNull final T data, final int index) {\n-      return layoutId.apply(getValue(data, index));\n+    public int getItemCount(@NonNull final Object data) {\n+      return getItems(data).size();\n     }\n \n     @Override\n-    public long getItemId(@NonNull T data, int index) {\n-      return stableIdForItem.apply(getValue(data, index));\n+    public int getLayoutResId(@NonNull final Object data, final int index) {\n+      return layoutId.apply(getItems(data).get(index));\n     }\n \n-    @SuppressWarnings(\"unchecked\")\n     @Override\n-    public void bind(@NonNull final T data, final int index,\n+    public void bind(@NonNull final Object data, final int index,\n         @NonNull final RecyclerView.ViewHolder holder) {\n-      binder.bind(getValue(data, index), holder.itemView);\n+      binder.bind(getItems(data).get(index), holder.itemView);\n     }\n \n     @Override\n     public void recycle(@NonNull final RecyclerView.ViewHolder holder) {\n-      super.recycle(holder);\n       recycler.accept(holder.itemView);\n     }\n-  }\n-\n-  private static final class ItemBasicRepositoryPresenter<T>\n-      extends BasicRepositoryPresenter<T, T> {\n-\n-    public ItemBasicRepositoryPresenter(@NonNull final Function<Object, Integer> layoutId,\n-        @NonNull final Binder<T, View> binder,\n-        @NonNull final Receiver<View> recycler,\n-        @NonNull final Function<T, Long> stableIdForItem) {\n-      super(layoutId, binder, recycler, stableIdForItem);\n-    }\n-\n-    @Override\n-    public int getItemCount(@NonNull final T data) {\n-      return 1;\n-    }\n \n-    @NonNull\n     @Override\n-    protected T getValue(@NonNull final T data, final int index) {\n-      return data;\n-    }\n-  }\n-\n-  private static final class ListBasicRepositoryPresenter<T>\n-      extends BasicRepositoryPresenter<T, List<T>> {\n-\n-    public ListBasicRepositoryPresenter(@NonNull final Function<Object, Integer> layoutId,\n-        @NonNull final Binder<T, View> binder,\n-        @NonNull final Receiver<View> recycler,\n-        @NonNull final Function<T, Long> stableIdForItem) {\n-      super(layoutId, binder, recycler, stableIdForItem);\n-    }\n-\n-    @Override\n-    public int getItemCount(@NonNull final List<T> data) {\n-      return data.size();\n-    }\n-\n-    @NonNull\n-    @Override\n-    protected T getValue(@NonNull final List<T> data, final int index) {\n-      return data.get(index);\n-    }\n-  }\n-\n-  private abstract static class ResultRepositoryPresenter<TVal, T>\n-      extends BasicRepositoryPresenter<TVal, Result<T>> {\n-\n-    ResultRepositoryPresenter(@NonNull final Function<Object, Integer> layoutId,\n-        @NonNull final Binder<TVal, View> binder,\n-        @NonNull final Receiver<View> recycler,\n-        @NonNull final Function<TVal, Long> stableIdForItem) {\n-      super(layoutId, binder, recycler, stableIdForItem);\n+    public long getItemId(@NonNull final Object data, final int index) {\n+      return stableIdForItem.apply(getItems(data).get(index));\n     }\n \n     @NonNull\n-    @Override\n-    protected TVal getValue(@NonNull Result<T> data, int index) {\n-      return getResultValue(data.get(), index);\n-    }\n-\n-    @Override\n-    public final int getItemCount(@NonNull final Result<T> data) {\n-      return data.failed() ? 0 : getResultCount(data.get());\n-    }\n-\n-    protected abstract int getResultCount(@NonNull T data);\n-\n-    @NonNull\n-    protected abstract TVal getResultValue(@NonNull T data, int index);\n-  }\n-\n-  private static final class SingleResultRepositoryPresenter<T>\n-      extends ResultRepositoryPresenter<T, T> {\n-    public SingleResultRepositoryPresenter(@NonNull final Function<Object, Integer> layoutId,\n-        @NonNull final Binder<T, View> binder,\n-        @NonNull final Receiver<View> recycler,\n-        @NonNull final Function<T, Long> stableIdForItem) {\n-      super(layoutId, binder, recycler, stableIdForItem);\n-    }\n-\n-    @Override\n-    protected int getResultCount(@NonNull final T data) {\n-      return 1;\n-    }\n-\n-    @NonNull\n-    @Override\n-    protected T getResultValue(@NonNull final T data, final int index) {\n-      return data;\n-    }\n-  }\n-\n-  private static final class ListResultRepositoryPresenter<T>\n-      extends ResultRepositoryPresenter<T, List<T>> {\n-\n-    public ListResultRepositoryPresenter(@NonNull final Function<Object, Integer> layoutId,\n-        @NonNull final Binder<T, View> binder,\n-        @NonNull final Receiver<View> recycler,\n-        @NonNull final Function<T, Long> stableIdForItem) {\n-      super(layoutId, binder, recycler, stableIdForItem);\n-    }\n-\n-    @Override\n-    protected int getResultCount(@NonNull final List<T> data) {\n-      return data.size();\n-    }\n-\n-    @NonNull\n-    @Override\n-    protected T getResultValue(@NonNull final List<T> data, final int index) {\n-      return data.get(index);\n+    private List getItems(@NonNull final Object data) {\n+      if (this.dataRef.get() != data) {\n+        items = converter.apply(data);\n+        this.dataRef = new WeakReference<>(data);\n+      }\n+      return items;\n     }\n   }\n }"
    },
    {
      "sha": "415762f86f65611c7f78ede89e18774696c21c44",
      "filename": "extensions/rvdatabinding/src/main/java/com/google/android/agera/rvdatabinding/DataBindingRepositoryPresenterCompiler.java",
      "status": "modified",
      "additions": 73,
      "deletions": 51,
      "changes": 124,
      "blob_url": "https://github.com/google/agera/blob/7bd61e35ca58c7ee87e2fbdab8237025eddb9299/extensions/rvdatabinding/src/main/java/com/google/android/agera/rvdatabinding/DataBindingRepositoryPresenterCompiler.java",
      "raw_url": "https://github.com/google/agera/raw/7bd61e35ca58c7ee87e2fbdab8237025eddb9299/extensions/rvdatabinding/src/main/java/com/google/android/agera/rvdatabinding/DataBindingRepositoryPresenterCompiler.java",
      "contents_url": "https://api.github.com/repos/google/agera/contents/extensions/rvdatabinding/src/main/java/com/google/android/agera/rvdatabinding/DataBindingRepositoryPresenterCompiler.java?ref=7bd61e35ca58c7ee87e2fbdab8237025eddb9299",
      "patch": "@@ -15,12 +15,16 @@\n  */\n package com.google.android.agera.rvdatabinding;\n \n+import static com.google.android.agera.Functions.identityFunction;\n+import static com.google.android.agera.Functions.itemAsList;\n+import static com.google.android.agera.Functions.resultAsList;\n+import static com.google.android.agera.Functions.resultListAsList;\n import static com.google.android.agera.Functions.staticFunction;\n import static com.google.android.agera.Preconditions.checkNotNull;\n-import static com.google.android.agera.rvadapter.RepositoryPresenters.repositoryPresenterOf;\n import static com.google.android.agera.rvdatabinding.RecycleConfig.CLEAR_HANDLERS;\n import static com.google.android.agera.rvdatabinding.RecycleConfig.CLEAR_ITEM;\n import static com.google.android.agera.rvdatabinding.RecycleConfig.DO_NOTHING;\n+import static java.util.Collections.emptyList;\n \n import android.databinding.DataBindingUtil;\n import android.databinding.ViewDataBinding;\n@@ -29,14 +33,13 @@\n import android.support.v7.widget.RecyclerView;\n import android.util.SparseArray;\n import android.view.View;\n-import com.google.android.agera.Binder;\n import com.google.android.agera.Function;\n-import com.google.android.agera.Receiver;\n import com.google.android.agera.Result;\n import com.google.android.agera.rvadapter.RepositoryPresenter;\n import com.google.android.agera.rvadapter.RepositoryPresenterCompilerStates.RPLayout;\n import com.google.android.agera.rvdatabinding.DataBindingRepositoryPresenterCompilerStates.DBRPHandlerStableIdRecycleCompile;\n import com.google.android.agera.rvdatabinding.DataBindingRepositoryPresenterCompilerStates.DBRPItemBinding;\n+import java.lang.ref.WeakReference;\n import java.util.List;\n \n @SuppressWarnings(\"unchecked\")\n@@ -79,57 +82,41 @@ public Object itemIdForItem(@NonNull final Function itemIdForItem) {\n   @NonNull\n   @Override\n   public RepositoryPresenter forItem() {\n-    return repositoryPresenterOf(null)\n-        .layoutForItem(layoutFactory)\n-        .stableIdForItem(stableIdForItem)\n-        .bindWith(new ViewBinder(itemId, handlers))\n-        .recycleWith(new ViewRecycler(recycleConfig, handlers))\n-        .forItem();\n+    return new CompiledRepositoryPresenter(itemId, layoutFactory, stableIdForItem, handlers,\n+        recycleConfig, itemAsList());\n   }\n \n   @NonNull\n   @Override\n   public RepositoryPresenter<List<Object>> forList() {\n-    return repositoryPresenterOf(null)\n-        .layoutForItem(layoutFactory)\n-        .stableIdForItem(stableIdForItem)\n-        .bindWith(new ViewBinder(itemId, handlers))\n-        .recycleWith(new ViewRecycler(recycleConfig, handlers))\n-        .forList();\n+    return new CompiledRepositoryPresenter(itemId, layoutFactory, stableIdForItem, handlers,\n+        recycleConfig, (Function) identityFunction());\n   }\n \n   @NonNull\n   @Override\n   public RepositoryPresenter<Result<Object>> forResult() {\n-    return repositoryPresenterOf(Object.class)\n-        .layoutForItem(layoutFactory)\n-        .stableIdForItem(stableIdForItem)\n-        .bindWith(new ViewBinder(itemId, handlers))\n-        .recycleWith(new ViewRecycler(recycleConfig, handlers))\n-        .forResult();\n+    return new CompiledRepositoryPresenter(itemId, layoutFactory, stableIdForItem, handlers,\n+        recycleConfig, (Function) resultAsList());\n   }\n \n   @NonNull\n   @Override\n   public RepositoryPresenter<Result<List<Object>>> forResultList() {\n-    return repositoryPresenterOf(null)\n-        .layoutForItem(layoutFactory)\n-        .stableIdForItem(stableIdForItem)\n-        .bindWith(new ViewBinder(itemId, handlers))\n-        .recycleWith(new ViewRecycler(recycleConfig, handlers))\n-        .forResultList();\n+    return new CompiledRepositoryPresenter(itemId, layoutFactory,\n+        stableIdForItem, handlers, recycleConfig, (Function) resultListAsList());\n   }\n \n   @NonNull\n   @Override\n-  public Object layout(@LayoutRes int layoutId) {\n+  public Object layout(@LayoutRes final int layoutId) {\n     this.layoutFactory = staticFunction(layoutId);\n     return this;\n   }\n \n   @NonNull\n   @Override\n-  public Object layoutForItem(@NonNull Function layoutForItem) {\n+  public Object layoutForItem(@NonNull final Function layoutForItem) {\n     this.layoutFactory = checkNotNull(layoutForItem);\n     return this;\n   }\n@@ -148,19 +135,53 @@ public Object onRecycle(@RecycleConfig final int recycleConfig) {\n     return this;\n   }\n \n-  private static final class ViewBinder implements Binder<Object, View> {\n+  private static final class CompiledRepositoryPresenter extends RepositoryPresenter {\n+    @NonNull\n     private final Function<Object, Integer> itemId;\n     @NonNull\n-    private final SparseArray<Object> handlers;\n-\n-    ViewBinder(@NonNull final Function<Object, Integer> itemId,\n-        @NonNull final SparseArray<Object> handlers) {\n+    private final Function<Object, List<Object>> converter;\n+    @NonNull\n+    private final Function<Object, Integer> layoutId;\n+    @NonNull\n+    private final Function<Object, Long> stableIdForItem;\n+    @RecycleConfig\n+    private final int recycleConfig;\n+    @NonNull\n+    private SparseArray<Object> handlers;\n+    @NonNull\n+    private WeakReference<Object> dataRef = new WeakReference<>(null);\n+    @NonNull\n+    private List items = emptyList();\n+\n+    CompiledRepositoryPresenter(\n+        @NonNull final Function<Object, Integer> itemId,\n+        @NonNull final Function<Object, Integer> layoutId,\n+        @NonNull final Function<Object, Long> stableIdForItem,\n+        @NonNull final SparseArray<Object> handlers,\n+        final int recycleConfig, @NonNull final Function<Object, List<Object>> converter) {\n       this.itemId = itemId;\n-      this.handlers = checkNotNull(handlers);\n+      this.converter = converter;\n+      this.layoutId = layoutId;\n+      this.stableIdForItem = stableIdForItem;\n+      this.recycleConfig = recycleConfig;\n+      this.handlers = handlers;\n+    }\n+\n+    @Override\n+    public int getItemCount(@NonNull final Object data) {\n+      return getItems(data).size();\n+    }\n+\n+    @Override\n+    public int getLayoutResId(@NonNull final Object data, final int index) {\n+      return layoutId.apply(getItems(data).get(index));\n     }\n \n     @Override\n-    public void bind(@NonNull final Object item, @NonNull final View view) {\n+    public void bind(@NonNull final Object data, final int index,\n+        @NonNull final RecyclerView.ViewHolder holder) {\n+      final Object item = getItems(data).get(index);\n+      final View view = holder.itemView;\n       final ViewDataBinding viewDataBinding = DataBindingUtil.bind(view);\n       final Integer itemVariable = itemId.apply(item);\n       viewDataBinding.setVariable(itemVariable, item);\n@@ -171,24 +192,11 @@ public void bind(@NonNull final Object item, @NonNull final View view) {\n       }\n       viewDataBinding.executePendingBindings();\n     }\n-  }\n-\n-  private static final class ViewRecycler implements Receiver<View> {\n-    @RecycleConfig\n-    private final int recycleConfig;\n-    @NonNull\n-    private SparseArray<Object> handlers;\n-\n-    ViewRecycler(\n-        @RecycleConfig final int recycleConfig,\n-        @NonNull final SparseArray<Object> handlers) {\n-      this.recycleConfig = recycleConfig;\n-      this.handlers = checkNotNull(handlers);\n-    }\n \n     @Override\n-    public void accept(@NonNull final View view) {\n+    public void recycle(@NonNull final RecyclerView.ViewHolder holder) {\n       if (recycleConfig != 0) {\n+        final View view = holder.itemView;\n         final ViewDataBinding viewDataBinding = DataBindingUtil.bind(view);\n         if ((recycleConfig & CLEAR_ITEM) != 0) {\n           final Object tag = view.getTag(R.id.agera__rvdatabinding__item_id);\n@@ -205,5 +213,19 @@ public void accept(@NonNull final View view) {\n         viewDataBinding.executePendingBindings();\n       }\n     }\n+\n+    @Override\n+    public long getItemId(@NonNull final Object data, final int index) {\n+      return stableIdForItem.apply(getItems(data).get(index));\n+    }\n+\n+    @NonNull\n+    private List getItems(@NonNull final Object data) {\n+      if (this.dataRef.get() != data) {\n+        items = converter.apply(data);\n+        this.dataRef = new WeakReference<>(data);\n+      }\n+      return items;\n+    }\n   }\n }"
    },
    {
      "sha": "6367ee20ecea07995ea032f8f520c6f6aabc0c23",
      "filename": "extensions/rvdatabinding/src/test/java/com/google/android/agera/rvdatabinding/DataBindingRepositoryPresentersTest.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/google/agera/blob/7bd61e35ca58c7ee87e2fbdab8237025eddb9299/extensions/rvdatabinding/src/test/java/com/google/android/agera/rvdatabinding/DataBindingRepositoryPresentersTest.java",
      "raw_url": "https://github.com/google/agera/raw/7bd61e35ca58c7ee87e2fbdab8237025eddb9299/extensions/rvdatabinding/src/test/java/com/google/android/agera/rvdatabinding/DataBindingRepositoryPresentersTest.java",
      "contents_url": "https://api.github.com/repos/google/agera/contents/extensions/rvdatabinding/src/test/java/com/google/android/agera/rvdatabinding/DataBindingRepositoryPresentersTest.java?ref=7bd61e35ca58c7ee87e2fbdab8237025eddb9299",
      "patch": "@@ -530,7 +530,7 @@ public void shouldReturnStableIdForRepositoryPresenterOfResult() {\n             .layout(LAYOUT_ID)\n             .itemId(ITEM_ID)\n             .stableIdForItem(Functions.<String, Long>staticFunction(STABLE_ID))\n-        .forResult();\n+            .forResult();\n     assertThat(resultRepositoryPresenter.getItemId(STRING_RESULT, 0), is(STABLE_ID));\n   }\n "
    }
  ]
}
