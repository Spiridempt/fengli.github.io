{"sha":"3da00fb57b2edc18396f0b664a6497a056d622a1","commit":{"author":{"name":"Magnus Ernstsson","email":"magnus@ernstsson.net","date":"2016-05-14T15:18:28Z"},"committer":{"name":"Magnus Ernstsson","email":"magnus@ernstsson.net","date":"2016-05-14T15:18:28Z"},"message":"Added more HttpRequest unit tests","tree":{"sha":"27742a7ae8949b771d07391fc0e5fa18f8cab81a","url":"https://api.github.com/repos/google/agera/git/trees/27742a7ae8949b771d07391fc0e5fa18f8cab81a"},"url":"https://api.github.com/repos/google/agera/git/commits/3da00fb57b2edc18396f0b664a6497a056d622a1","comment_count":0},"url":"https://api.github.com/repos/google/agera/commits/3da00fb57b2edc18396f0b664a6497a056d622a1","html_url":"https://github.com/google/agera/commit/3da00fb57b2edc18396f0b664a6497a056d622a1","comments_url":"https://api.github.com/repos/google/agera/commits/3da00fb57b2edc18396f0b664a6497a056d622a1/comments","author":{"login":"ernstsson","id":378389,"avatar_url":"https://avatars2.githubusercontent.com/u/378389?v=3","gravatar_id":"","url":"https://api.github.com/users/ernstsson","html_url":"https://github.com/ernstsson","followers_url":"https://api.github.com/users/ernstsson/followers","following_url":"https://api.github.com/users/ernstsson/following{/other_user}","gists_url":"https://api.github.com/users/ernstsson/gists{/gist_id}","starred_url":"https://api.github.com/users/ernstsson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ernstsson/subscriptions","organizations_url":"https://api.github.com/users/ernstsson/orgs","repos_url":"https://api.github.com/users/ernstsson/repos","events_url":"https://api.github.com/users/ernstsson/events{/privacy}","received_events_url":"https://api.github.com/users/ernstsson/received_events","type":"User","site_admin":false},"committer":{"login":"ernstsson","id":378389,"avatar_url":"https://avatars2.githubusercontent.com/u/378389?v=3","gravatar_id":"","url":"https://api.github.com/users/ernstsson","html_url":"https://github.com/ernstsson","followers_url":"https://api.github.com/users/ernstsson/followers","following_url":"https://api.github.com/users/ernstsson/following{/other_user}","gists_url":"https://api.github.com/users/ernstsson/gists{/gist_id}","starred_url":"https://api.github.com/users/ernstsson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ernstsson/subscriptions","organizations_url":"https://api.github.com/users/ernstsson/orgs","repos_url":"https://api.github.com/users/ernstsson/repos","events_url":"https://api.github.com/users/ernstsson/events{/privacy}","received_events_url":"https://api.github.com/users/ernstsson/received_events","type":"User","site_admin":false},"parents":[{"sha":"0ce8ba2e606daea348688c5eb95aa90e9ee1b821","url":"https://api.github.com/repos/google/agera/commits/0ce8ba2e606daea348688c5eb95aa90e9ee1b821","html_url":"https://github.com/google/agera/commit/0ce8ba2e606daea348688c5eb95aa90e9ee1b821"}],"stats":{"total":78,"additions":78,"deletions":0},"files":[{"sha":"4cf7c3c588a76578dfef545b2eb34e7c32767066","filename":"extensions/net/src/test/java/com/google/android/agera/net/HttpRequestTest.java","status":"modified","additions":78,"deletions":0,"changes":78,"blob_url":"https://github.com/google/agera/blob/3da00fb57b2edc18396f0b664a6497a056d622a1/extensions/net/src/test/java/com/google/android/agera/net/HttpRequestTest.java","raw_url":"https://github.com/google/agera/raw/3da00fb57b2edc18396f0b664a6497a056d622a1/extensions/net/src/test/java/com/google/android/agera/net/HttpRequestTest.java","contents_url":"https://api.github.com/repos/google/agera/contents/extensions/net/src/test/java/com/google/android/agera/net/HttpRequestTest.java?ref=3da00fb57b2edc18396f0b664a6497a056d622a1","patch":"@@ -30,6 +30,9 @@\n import static org.hamcrest.Matchers.isEmptyOrNullString;\n import static org.hamcrest.Matchers.not;\n \n+import com.google.android.agera.net.HttpRequestCompilerStates.HTBodyHeaderFieldRedirectsCachesConnectionTimeoutReadTimeoutCompile;\n+import com.google.android.agera.net.HttpRequestCompilerStates.HTHeaderFieldRedirectsCachesConnectionTimeoutReadTimeoutCompile;\n+\n import org.junit.Test;\n \n import java.util.Map;\n@@ -130,12 +133,87 @@ public void shouldSetConnectTimeout() {\n     assertThat(httpDeleteRequest(URL).connectTimeoutMs(3).compile().connectTimeoutMs, is(3));\n   }\n \n+  @Test(expected = IllegalStateException.class)\n+  public void shouldThrowExceptionForReuseOfCompilerOfNoRedirects() {\n+    final HTHeaderFieldRedirectsCachesConnectionTimeoutReadTimeoutCompile incompleteRequest =\n+        httpGetRequest(URL);\n+    incompleteRequest.compile();\n+\n+    incompleteRequest.noRedirects();\n+  }\n+\n+  @Test(expected = IllegalStateException.class)\n+  public void shouldThrowExceptionForReuseOfCompilerOfNoCaches() {\n+    final HTHeaderFieldRedirectsCachesConnectionTimeoutReadTimeoutCompile incompleteRequest =\n+        httpGetRequest(URL);\n+    incompleteRequest.compile();\n+\n+    incompleteRequest.noCaches();\n+  }\n+\n+  @Test(expected = IllegalStateException.class)\n+  public void shouldThrowExceptionForReuseOfCompilerOfConnectTimeoutMs() {\n+    final HTHeaderFieldRedirectsCachesConnectionTimeoutReadTimeoutCompile incompleteRequest =\n+        httpGetRequest(URL);\n+    incompleteRequest.compile();\n+\n+    incompleteRequest.connectTimeoutMs(1);\n+  }\n+\n+  @Test(expected = IllegalStateException.class)\n+  public void shouldThrowExceptionForReuseOfCompilerOfReadTimeoutMs() {\n+    final HTHeaderFieldRedirectsCachesConnectionTimeoutReadTimeoutCompile incompleteRequest =\n+        httpGetRequest(URL);\n+    incompleteRequest.compile();\n+\n+    incompleteRequest.readTimeoutMs(1);\n+  }\n+\n+  @Test(expected = IllegalStateException.class)\n+  public void shouldThrowExceptionForReuseOfCompilerOfCompile() {\n+    final HTHeaderFieldRedirectsCachesConnectionTimeoutReadTimeoutCompile incompleteRequest =\n+        httpGetRequest(URL);\n+    incompleteRequest.compile();\n+\n+    incompleteRequest.compile();\n+  }\n+\n+  @Test(expected = IllegalStateException.class)\n+  public void shouldThrowExceptionForReuseOfCompilerOfHeaderField() {\n+    final HTHeaderFieldRedirectsCachesConnectionTimeoutReadTimeoutCompile incompleteRequest =\n+        httpGetRequest(URL);\n+    incompleteRequest.compile();\n+\n+    incompleteRequest.headerField(\"\", \"\");\n+  }\n+\n+  @Test(expected = IllegalStateException.class)\n+  public void shouldThrowExceptionForReuseOfCompilerOfBody() {\n+    final HTBodyHeaderFieldRedirectsCachesConnectionTimeoutReadTimeoutCompile incompleteRequest =\n+        httpPostRequest(URL);\n+    incompleteRequest.compile();\n+\n+    incompleteRequest.body(new byte[]{});\n+  }\n+\n   @Test\n   public void shouldBeEqualForSameData() {\n     assertThat(httpGetRequest(URL).compile(), is(httpGetRequest(URL).compile()));\n   }\n \n   @Test\n+  public void shouldBeEqualForSameInstance() {\n+    final HttpRequest httpRequest = httpGetRequest(URL).compile();\n+    assertThat(httpRequest, is(httpRequest));\n+  }\n+\n+  @Test\n+  public void shouldNotBeEqualForDifferentType() {\n+    final HttpRequest request = httpGetRequest(URL).compile();\n+    assertThat(request, is(not(new Object())));\n+  }\n+\n+  @Test\n   public void shouldHaveToString() {\n     assertThat(httpGetRequest(URL).compile(), hasToString(not(isEmptyOrNullString())));\n   }"}]}