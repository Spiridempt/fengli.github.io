{"sha":"f14356c3b0417ca8ae15c19a9112a4124861e5e5","commit":{"author":{"name":"Magnus Ernstsson","email":"magnus@ernstsson.net","date":"2017-03-07T18:30:29Z"},"committer":{"name":"GitHub","email":"noreply@github.com","date":"2017-03-07T18:30:29Z"},"message":"Added Result#asList method (#148)","tree":{"sha":"1ae764e5d7748b661d11caf095894c965c7b31cc","url":"https://api.github.com/repos/google/agera/git/trees/1ae764e5d7748b661d11caf095894c965c7b31cc"},"url":"https://api.github.com/repos/google/agera/git/commits/f14356c3b0417ca8ae15c19a9112a4124861e5e5","comment_count":0},"url":"https://api.github.com/repos/google/agera/commits/f14356c3b0417ca8ae15c19a9112a4124861e5e5","html_url":"https://github.com/google/agera/commit/f14356c3b0417ca8ae15c19a9112a4124861e5e5","comments_url":"https://api.github.com/repos/google/agera/commits/f14356c3b0417ca8ae15c19a9112a4124861e5e5/comments","author":{"login":"ernstsson","id":378389,"avatar_url":"https://avatars2.githubusercontent.com/u/378389?v=3","gravatar_id":"","url":"https://api.github.com/users/ernstsson","html_url":"https://github.com/ernstsson","followers_url":"https://api.github.com/users/ernstsson/followers","following_url":"https://api.github.com/users/ernstsson/following{/other_user}","gists_url":"https://api.github.com/users/ernstsson/gists{/gist_id}","starred_url":"https://api.github.com/users/ernstsson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ernstsson/subscriptions","organizations_url":"https://api.github.com/users/ernstsson/orgs","repos_url":"https://api.github.com/users/ernstsson/repos","events_url":"https://api.github.com/users/ernstsson/events{/privacy}","received_events_url":"https://api.github.com/users/ernstsson/received_events","type":"User","site_admin":false},"committer":{"login":"web-flow","id":19864447,"avatar_url":"https://avatars0.githubusercontent.com/u/19864447?v=3","gravatar_id":"","url":"https://api.github.com/users/web-flow","html_url":"https://github.com/web-flow","followers_url":"https://api.github.com/users/web-flow/followers","following_url":"https://api.github.com/users/web-flow/following{/other_user}","gists_url":"https://api.github.com/users/web-flow/gists{/gist_id}","starred_url":"https://api.github.com/users/web-flow/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/web-flow/subscriptions","organizations_url":"https://api.github.com/users/web-flow/orgs","repos_url":"https://api.github.com/users/web-flow/repos","events_url":"https://api.github.com/users/web-flow/events{/privacy}","received_events_url":"https://api.github.com/users/web-flow/received_events","type":"User","site_admin":false},"parents":[{"sha":"f4829106af396e323f839bf4df8763da7e51cd0d","url":"https://api.github.com/repos/google/agera/commits/f4829106af396e323f839bf4df8763da7e51cd0d","html_url":"https://github.com/google/agera/commit/f4829106af396e323f839bf4df8763da7e51cd0d"}],"stats":{"total":43,"additions":42,"deletions":1},"files":[{"sha":"03dba52c58f33aee60077f435feb6475f0dfa67b","filename":"agera/src/main/java/com/google/android/agera/Result.java","status":"modified","additions":24,"deletions":0,"changes":24,"blob_url":"https://github.com/google/agera/blob/f14356c3b0417ca8ae15c19a9112a4124861e5e5/agera/src/main/java/com/google/android/agera/Result.java","raw_url":"https://github.com/google/agera/raw/f14356c3b0417ca8ae15c19a9112a4124861e5e5/agera/src/main/java/com/google/android/agera/Result.java","contents_url":"https://api.github.com/repos/google/agera/contents/agera/src/main/java/com/google/android/agera/Result.java?ref=f14356c3b0417ca8ae15c19a9112a4124861e5e5","patch":"@@ -18,9 +18,12 @@\n import static com.google.android.agera.Preconditions.checkArgument;\n import static com.google.android.agera.Preconditions.checkNotNull;\n import static com.google.android.agera.Preconditions.checkState;\n+import static java.util.Collections.singletonList;\n \n import android.support.annotation.NonNull;\n import android.support.annotation.Nullable;\n+import java.util.Collections;\n+import java.util.List;\n \n /**\n  * An immutable object encapsulating the result of an <i>attempt</i>. An attempt is a call to\n@@ -55,12 +58,15 @@\n   @Nullable\n   private final T value;\n   @Nullable\n+  private transient volatile List<T> list;\n+  @Nullable\n   private final Throwable failure;\n \n   Result(@Nullable final T value, @Nullable final Throwable failure) {\n     checkArgument(value != null ^ failure != null, \"Illegal Result arguments\");\n     this.value = value;\n     this.failure = failure;\n+    this.list = value != null ? null : Collections.<T>emptyList();\n   }\n \n   /**\n@@ -161,6 +167,24 @@ public T get() throws FailedResultException {\n     throw new FailedResultException(failure);\n   }\n \n+\n+  /**\n+   * Returns a list containing the value if it is present, or an empty list.\n+   */\n+  @NonNull\n+  public List<T> asList() {\n+    List<T> list = this.list;\n+    if (list == null) {\n+      synchronized (this) {\n+        list = this.list;\n+        if (list == null) {\n+          this.list = list = singletonList(value);\n+        }\n+      }\n+    }\n+    return list;\n+  }\n+\n   /**\n    * Returns the failure encountered in the attempt that produced this result.\n    *"},{"sha":"a1316efab21c862b565dd16133f8642bb8cb30a2","filename":"agera/src/test/java/com/google/android/agera/ResultTest.java","status":"modified","additions":18,"deletions":1,"changes":19,"blob_url":"https://github.com/google/agera/blob/f14356c3b0417ca8ae15c19a9112a4124861e5e5/agera/src/test/java/com/google/android/agera/ResultTest.java","raw_url":"https://github.com/google/agera/raw/f14356c3b0417ca8ae15c19a9112a4124861e5e5/agera/src/test/java/com/google/android/agera/ResultTest.java","contents_url":"https://api.github.com/repos/google/agera/contents/agera/src/test/java/com/google/android/agera/ResultTest.java?ref=f14356c3b0417ca8ae15c19a9112a4124861e5e5","patch":"@@ -21,6 +21,8 @@\n import static com.google.android.agera.Result.present;\n import static com.google.android.agera.Result.success;\n import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.contains;\n+import static org.hamcrest.Matchers.empty;\n import static org.hamcrest.Matchers.equalTo;\n import static org.hamcrest.Matchers.hasToString;\n import static org.hamcrest.Matchers.instanceOf;\n@@ -685,7 +687,7 @@ public void shouldBeSingletonForFailureWithoutExplicitThrowable() {\n   }\n \n   @Test\n-  public void shouldVerifyEqualsForSqlDeleteRequest() {\n+  public void shouldVerifyEqualsForResult() {\n     EqualsVerifier.forClass(Result.class).verify();\n   }\n \n@@ -708,4 +710,19 @@ public void shouldPrintStringRepresentationForFailureWithExplicitThrowable() {\n   public void shouldPrintStringRepresentationForAbsent() {\n     assertThat(ABSENT, hasToString(not(isEmptyOrNullString())));\n   }\n+\n+  @Test\n+  public void shouldReturnEmptyListForAbsent() {\n+    assertThat(ABSENT.asList(), is((empty())));\n+  }\n+\n+  @Test\n+  public void shouldReturnEmptyListForFailure() {\n+    assertThat(FAILURE.asList(), is((empty())));\n+  }\n+\n+  @Test\n+  public void shouldReturnListWithValueForPresentWithValue() {\n+    assertThat(PRESENT_WITH_VALUE.asList(), contains(VALUE));\n+  }\n }"}]}