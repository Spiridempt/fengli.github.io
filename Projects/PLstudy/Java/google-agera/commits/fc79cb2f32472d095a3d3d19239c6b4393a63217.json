{"sha":"fc79cb2f32472d095a3d3d19239c6b4393a63217","commit":{"author":{"name":"Magnus Ernstsson","email":"magnus@ernstsson.net","date":"2017-03-11T23:40:41Z"},"committer":{"name":"GitHub","email":"noreply@github.com","date":"2017-03-11T23:40:41Z"},"message":"Added item/result/list conversion functions (#152)","tree":{"sha":"bb227751506b16af518deae37e3d215c4e240ca5","url":"https://api.github.com/repos/google/agera/git/trees/bb227751506b16af518deae37e3d215c4e240ca5"},"url":"https://api.github.com/repos/google/agera/git/commits/fc79cb2f32472d095a3d3d19239c6b4393a63217","comment_count":0},"url":"https://api.github.com/repos/google/agera/commits/fc79cb2f32472d095a3d3d19239c6b4393a63217","html_url":"https://github.com/google/agera/commit/fc79cb2f32472d095a3d3d19239c6b4393a63217","comments_url":"https://api.github.com/repos/google/agera/commits/fc79cb2f32472d095a3d3d19239c6b4393a63217/comments","author":{"login":"ernstsson","id":378389,"avatar_url":"https://avatars2.githubusercontent.com/u/378389?v=3","gravatar_id":"","url":"https://api.github.com/users/ernstsson","html_url":"https://github.com/ernstsson","followers_url":"https://api.github.com/users/ernstsson/followers","following_url":"https://api.github.com/users/ernstsson/following{/other_user}","gists_url":"https://api.github.com/users/ernstsson/gists{/gist_id}","starred_url":"https://api.github.com/users/ernstsson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ernstsson/subscriptions","organizations_url":"https://api.github.com/users/ernstsson/orgs","repos_url":"https://api.github.com/users/ernstsson/repos","events_url":"https://api.github.com/users/ernstsson/events{/privacy}","received_events_url":"https://api.github.com/users/ernstsson/received_events","type":"User","site_admin":false},"committer":{"login":"web-flow","id":19864447,"avatar_url":"https://avatars0.githubusercontent.com/u/19864447?v=3","gravatar_id":"","url":"https://api.github.com/users/web-flow","html_url":"https://github.com/web-flow","followers_url":"https://api.github.com/users/web-flow/followers","following_url":"https://api.github.com/users/web-flow/following{/other_user}","gists_url":"https://api.github.com/users/web-flow/gists{/gist_id}","starred_url":"https://api.github.com/users/web-flow/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/web-flow/subscriptions","organizations_url":"https://api.github.com/users/web-flow/orgs","repos_url":"https://api.github.com/users/web-flow/repos","events_url":"https://api.github.com/users/web-flow/events{/privacy}","received_events_url":"https://api.github.com/users/web-flow/received_events","type":"User","site_admin":false},"parents":[{"sha":"7970f0b70105e3c874c9402988c095ced36eba6d","url":"https://api.github.com/repos/google/agera/commits/7970f0b70105e3c874c9402988c095ced36eba6d","html_url":"https://github.com/google/agera/commit/7970f0b70105e3c874c9402988c095ced36eba6d"}],"stats":{"total":127,"additions":120,"deletions":7},"files":[{"sha":"b9199c3570c0e5876ec78fb030e08c775443d21c","filename":"agera/src/main/java/com/google/android/agera/Functions.java","status":"modified","additions":69,"deletions":0,"changes":69,"blob_url":"https://github.com/google/agera/blob/fc79cb2f32472d095a3d3d19239c6b4393a63217/agera/src/main/java/com/google/android/agera/Functions.java","raw_url":"https://github.com/google/agera/raw/fc79cb2f32472d095a3d3d19239c6b4393a63217/agera/src/main/java/com/google/android/agera/Functions.java","contents_url":"https://api.github.com/repos/google/agera/contents/agera/src/main/java/com/google/android/agera/Functions.java?ref=fc79cb2f32472d095a3d3d19239c6b4393a63217","patch":"@@ -19,18 +19,29 @@\n import static com.google.android.agera.Common.NULL_OPERATOR;\n import static com.google.android.agera.FunctionCompiler.functionCompiler;\n import static com.google.android.agera.Preconditions.checkNotNull;\n+import static java.util.Collections.singletonList;\n \n import android.support.annotation.NonNull;\n import android.support.annotation.Nullable;\n import com.google.android.agera.Common.StaticProducer;\n import com.google.android.agera.FunctionCompilerStates.FItem;\n import com.google.android.agera.FunctionCompilerStates.FList;\n+import java.util.Collections;\n import java.util.List;\n \n /**\n  * Utility methods for obtaining {@link Function} instances.\n  */\n public final class Functions {\n+  @NonNull\n+  private static final ResultAsListFunction<Object> RESULT_AS_LIST_FUNCTION =\n+      new ResultAsListFunction<>();\n+  @NonNull\n+  private static final ItemAsListFunction<Object> ITEM_AS_LIST_FUNCTION =\n+      new ItemAsListFunction<>();\n+  @NonNull\n+  private static final ResultListAsListFunction<Object> RESULT_LIST_AS_LIST_FUNCTION =\n+      new ResultListAsListFunction<>();\n \n   /**\n    * Returns a {@link Function} that returns {@code object} as the result of each\n@@ -94,6 +105,36 @@\n     return (Function<Throwable, Result<T>>) FAILED_RESULT;\n   }\n \n+  /**\n+   * Returns a {@link Function} that wraps a {@link Throwable} in a\n+   * {@link Result#failure(Throwable)}).\n+   */\n+  @SuppressWarnings(\"unchecked\")\n+  @NonNull\n+  public static <T> Function<Result<T>, List<T>> resultAsList() {\n+    return (Function) RESULT_AS_LIST_FUNCTION;\n+  }\n+\n+  /**\n+   * Returns a {@link Function} that wraps a {@link Throwable} in a\n+   * {@link Result#failure(Throwable)}).\n+   */\n+  @SuppressWarnings(\"unchecked\")\n+  @NonNull\n+  public static <T> Function<T, List<T>> itemAsList() {\n+    return (Function) ITEM_AS_LIST_FUNCTION;\n+  }\n+\n+  /**\n+   * Returns a {@link Function} that wraps a {@link Throwable} in a\n+   * {@link Result#failure(Throwable)}).\n+   */\n+  @SuppressWarnings(\"unchecked\")\n+  @NonNull\n+  public static <T> Function<Result<List<T>>, List<T>> resultListAsList() {\n+    return (Function) RESULT_LIST_AS_LIST_FUNCTION;\n+  }\n+\n   private static final class SupplierAsFunction<F, T> implements Function<F, T> {\n     @NonNull\n     private final Supplier<? extends T> supplier;\n@@ -109,5 +150,33 @@ public T apply(@NonNull F from) {\n     }\n   }\n \n+  private static final class ItemAsListFunction<T> implements Function<T, List<T>> {\n+\n+    @NonNull\n+    @Override\n+    public List<T> apply(@NonNull final T input) {\n+      return singletonList(input);\n+    }\n+  }\n+\n+  private static final class ResultAsListFunction<T> implements Function<Result<T>, List<T>> {\n+\n+    @NonNull\n+    @Override\n+    public List<T> apply(@NonNull final Result<T> input) {\n+      return input.asList();\n+    }\n+  }\n+\n+  private static final class ResultListAsListFunction<T>\n+      implements Function<Result<List<T>>, List<T>> {\n+\n+    @NonNull\n+    @Override\n+    public List<T> apply(@NonNull final Result<List<T>> input) {\n+      return input.isPresent() ? input.get() : Collections.<T>emptyList();\n+    }\n+  }\n+\n   private Functions() {}\n }"},{"sha":"cbe00b570156a0882edeaeb403e088a5df0974d0","filename":"agera/src/test/java/com/google/android/agera/FunctionsTest.java","status":"modified","additions":51,"deletions":7,"changes":58,"blob_url":"https://github.com/google/agera/blob/fc79cb2f32472d095a3d3d19239c6b4393a63217/agera/src/test/java/com/google/android/agera/FunctionsTest.java","raw_url":"https://github.com/google/agera/raw/fc79cb2f32472d095a3d3d19239c6b4393a63217/agera/src/test/java/com/google/android/agera/FunctionsTest.java","contents_url":"https://api.github.com/repos/google/agera/contents/agera/src/test/java/com/google/android/agera/FunctionsTest.java?ref=fc79cb2f32472d095a3d3d19239c6b4393a63217","patch":"@@ -21,12 +21,15 @@\n import static com.google.android.agera.Functions.identityFunction;\n import static com.google.android.agera.Functions.staticFunction;\n import static com.google.android.agera.Functions.supplierAsFunction;\n+import static com.google.android.agera.Result.absent;\n import static com.google.android.agera.Result.failure;\n+import static com.google.android.agera.Result.present;\n import static com.google.android.agera.Result.success;\n import static com.google.android.agera.test.matchers.HasPrivateConstructor.hasPrivateConstructor;\n import static java.util.Arrays.asList;\n import static org.hamcrest.MatcherAssert.assertThat;\n import static org.hamcrest.Matchers.contains;\n+import static org.hamcrest.Matchers.empty;\n import static org.hamcrest.Matchers.is;\n import static org.hamcrest.Matchers.sameInstance;\n import static org.mockito.Matchers.anyInt;\n@@ -47,6 +50,7 @@\n import org.mockito.Mock;\n \n public final class FunctionsTest {\n+  private static final int VALUE = 42;\n   private static final int VALUE_PLUS_TWO = 44;\n   private static final int RECOVER_VALUE = 43;\n   private static final String INPUT_STRING = \"input\";\n@@ -55,6 +59,11 @@\n   private static final Throwable THROWABLE = new Throwable();\n   private static final Result<Integer> FAILURE = failure(THROWABLE);\n   private static final Result<Integer> RECOVER_SUCCESS = success(RECOVER_VALUE);\n+  private static final Result<Integer> PRESENT_WITH_VALUE = present(VALUE);\n+  private static final Result<Integer> ABSENT = absent();\n+  private static final Result<List<Integer>> FAILURE_LIST = failure(THROWABLE);\n+  private static final Result<List<Integer>> ABSENT_LIST = absent();\n+  private static final Result<List<String>> PRESENT_WITH_LIST = present(INPUT_LIST);\n \n   @Mock\n   private Function<Integer, Result<Integer>> mockDivideTenFunction;\n@@ -86,6 +95,41 @@ public void shouldWrapThrowableInFailedResult() {\n   }\n \n   @Test\n+  public void shouldFunctionReturningEmptyListForAbsent() {\n+    assertThat(Functions.<Integer>resultAsList().apply(ABSENT), is((empty())));\n+  }\n+\n+  @Test\n+  public void shouldReturnFunctionReturingEmptyListForFailure() {\n+    assertThat(Functions.<Integer>resultAsList().apply(FAILURE), is((empty())));\n+  }\n+\n+  @Test\n+  public void shouldReturnFunctionReturningListWithValueForPresentWithValue() {\n+    assertThat(Functions.<Integer>resultAsList().apply(PRESENT_WITH_VALUE), contains(VALUE));\n+  }\n+\n+  @Test\n+  public void shouldFunctionReturningEmptyListForAbsentList() {\n+    assertThat(Functions.<Integer>resultListAsList().apply(ABSENT_LIST), is((empty())));\n+  }\n+\n+  @Test\n+  public void shouldReturnFunctionReturingEmptyListForFailureList() {\n+    assertThat(Functions.<Integer>resultListAsList().apply(FAILURE_LIST), is((empty())));\n+  }\n+\n+  @Test\n+  public void shouldReturnFunctionReturningListWithValueForPresentWithList() {\n+    assertThat(Functions.<String>resultListAsList().apply(PRESENT_WITH_LIST), is(INPUT_LIST));\n+  }\n+\n+  @Test\n+  public void shouldReturnFunctionReturningListWithValue() {\n+    assertThat(Functions.<Integer>itemAsList().apply(VALUE), contains(VALUE));\n+  }\n+\n+  @Test\n   public void shouldReturnObjectFromStaticFunction() {\n     assertThat(staticFunction(INPUT_STRING).apply(new Object()), is(sameInstance(INPUT_STRING)));\n   }\n@@ -176,13 +220,13 @@ public void shouldCreateFunctionFromListToList() {\n   @Test\n   public void shouldCreateFunctionFromListToSortedList() {\n     final Function<List<String>, List<Integer>> function = functionFromListOf(String.class)\n-            .map(new StringLength())\n-            .thenSort(new Comparator<Integer>() {\n-              @Override\n-              public int compare(Integer lhs, Integer rhs) {\n-                return lhs.compareTo(rhs);\n-              }\n-            });\n+        .map(new StringLength())\n+        .thenSort(new Comparator<Integer>() {\n+          @Override\n+          public int compare(Integer lhs, Integer rhs) {\n+            return lhs.compareTo(rhs);\n+          }\n+        });\n \n     final List<String> inputList = new ArrayList<>(INPUT_LIST);\n     assertThat(function.apply(inputList), contains(3, 4, 7, 7));"}]}