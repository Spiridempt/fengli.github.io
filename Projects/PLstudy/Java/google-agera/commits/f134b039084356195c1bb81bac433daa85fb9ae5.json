{"sha":"f134b039084356195c1bb81bac433daa85fb9ae5","commit":{"author":{"name":"Magnus Ernstsson","email":"magnus@ernstsson.net","date":"2016-05-13T12:57:26Z"},"committer":{"name":"Magnus Ernstsson","email":"magnus@ernstsson.net","date":"2016-05-13T12:57:26Z"},"message":"Added support for sqlite conflict algorithms (#48)\n\nFixes #43","tree":{"sha":"44b54c72ada2563aeda9334f9e44c69406623de1","url":"https://api.github.com/repos/google/agera/git/trees/44b54c72ada2563aeda9334f9e44c69406623de1"},"url":"https://api.github.com/repos/google/agera/git/commits/f134b039084356195c1bb81bac433daa85fb9ae5","comment_count":0},"url":"https://api.github.com/repos/google/agera/commits/f134b039084356195c1bb81bac433daa85fb9ae5","html_url":"https://github.com/google/agera/commit/f134b039084356195c1bb81bac433daa85fb9ae5","comments_url":"https://api.github.com/repos/google/agera/commits/f134b039084356195c1bb81bac433daa85fb9ae5/comments","author":{"login":"ernstsson","id":378389,"avatar_url":"https://avatars2.githubusercontent.com/u/378389?v=3","gravatar_id":"","url":"https://api.github.com/users/ernstsson","html_url":"https://github.com/ernstsson","followers_url":"https://api.github.com/users/ernstsson/followers","following_url":"https://api.github.com/users/ernstsson/following{/other_user}","gists_url":"https://api.github.com/users/ernstsson/gists{/gist_id}","starred_url":"https://api.github.com/users/ernstsson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ernstsson/subscriptions","organizations_url":"https://api.github.com/users/ernstsson/orgs","repos_url":"https://api.github.com/users/ernstsson/repos","events_url":"https://api.github.com/users/ernstsson/events{/privacy}","received_events_url":"https://api.github.com/users/ernstsson/received_events","type":"User","site_admin":false},"committer":{"login":"ernstsson","id":378389,"avatar_url":"https://avatars2.githubusercontent.com/u/378389?v=3","gravatar_id":"","url":"https://api.github.com/users/ernstsson","html_url":"https://github.com/ernstsson","followers_url":"https://api.github.com/users/ernstsson/followers","following_url":"https://api.github.com/users/ernstsson/following{/other_user}","gists_url":"https://api.github.com/users/ernstsson/gists{/gist_id}","starred_url":"https://api.github.com/users/ernstsson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ernstsson/subscriptions","organizations_url":"https://api.github.com/users/ernstsson/orgs","repos_url":"https://api.github.com/users/ernstsson/repos","events_url":"https://api.github.com/users/ernstsson/events{/privacy}","received_events_url":"https://api.github.com/users/ernstsson/received_events","type":"User","site_admin":false},"parents":[{"sha":"4cc0c1524c942a39e2a01bb8b64ba9b81512748e","url":"https://api.github.com/repos/google/agera/commits/4cc0c1524c942a39e2a01bb8b64ba9b81512748e","html_url":"https://github.com/google/agera/commit/4cc0c1524c942a39e2a01bb8b64ba9b81512748e"}],"stats":{"total":239,"additions":213,"deletions":26},"files":[{"sha":"3b002968024620abc79a641e87435c9c9f8b6cc0","filename":"extensions/database/src/main/java/com/google/android/agera/database/SqlDatabaseFunctions.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/google/agera/blob/f134b039084356195c1bb81bac433daa85fb9ae5/extensions/database/src/main/java/com/google/android/agera/database/SqlDatabaseFunctions.java","raw_url":"https://github.com/google/agera/raw/f134b039084356195c1bb81bac433daa85fb9ae5/extensions/database/src/main/java/com/google/android/agera/database/SqlDatabaseFunctions.java","contents_url":"https://api.github.com/repos/google/agera/contents/extensions/database/src/main/java/com/google/android/agera/database/SqlDatabaseFunctions.java?ref=f134b039084356195c1bb81bac433daa85fb9ae5","patch":"@@ -83,7 +83,8 @@\n     public Result<Long> merge(@NonNull final SQLiteDatabase database,\n         @NonNull final SqlInsertRequest input) {\n       try {\n-        return success(database.insertOrThrow(input.table, null, input.contentValues));\n+        return success(database.insertWithOnConflict(input.table, null, input.contentValues,\n+            input.conflictAlgorithm));\n       } catch (final SQLException e) {\n         return failure(e);\n       }\n@@ -98,8 +99,8 @@\n     public Result<Integer> merge(@NonNull final SQLiteDatabase database,\n         @NonNull final SqlUpdateRequest input) {\n       try {\n-        return success(database.update(input.table, input.contentValues, input.where,\n-            input.arguments));\n+        return success(database.updateWithOnConflict(input.table, input.contentValues,\n+            input.where, input.arguments, input.conflictAlgorithm));\n       } catch (final SQLException e) {\n         return failure(e);\n       }"},{"sha":"f4a27ebdd9837e5f64fb9a049dea948b4b3e28e1","filename":"extensions/database/src/main/java/com/google/android/agera/database/SqlInsertRequest.java","status":"modified","additions":8,"deletions":2,"changes":10,"blob_url":"https://github.com/google/agera/blob/f134b039084356195c1bb81bac433daa85fb9ae5/extensions/database/src/main/java/com/google/android/agera/database/SqlInsertRequest.java","raw_url":"https://github.com/google/agera/raw/f134b039084356195c1bb81bac433daa85fb9ae5/extensions/database/src/main/java/com/google/android/agera/database/SqlInsertRequest.java","contents_url":"https://api.github.com/repos/google/agera/contents/extensions/database/src/main/java/com/google/android/agera/database/SqlInsertRequest.java?ref=f134b039084356195c1bb81bac433daa85fb9ae5","patch":"@@ -28,8 +28,11 @@\n   final ContentValues contentValues;\n   @NonNull\n   final String table;\n+  final int conflictAlgorithm;\n \n-  SqlInsertRequest(@NonNull final ContentValues contentValues, @NonNull final String table) {\n+  SqlInsertRequest(@NonNull final ContentValues contentValues, @NonNull final String table,\n+      final int conflictAlgorithm) {\n+    this.conflictAlgorithm = conflictAlgorithm;\n     this.table = checkNotNull(table);\n     this.contentValues = checkNotNull(contentValues);\n   }\n@@ -45,14 +48,16 @@ public boolean equals(final Object o) {\n \n     final SqlInsertRequest that = (SqlInsertRequest) o;\n \n-    return contentValues.equals(that.contentValues)\n+    return conflictAlgorithm == that.conflictAlgorithm\n+        && contentValues.equals(that.contentValues)\n         && table.equals(that.table);\n   }\n \n   @Override\n   public int hashCode() {\n     int result = contentValues.hashCode();\n     result = 31 * result + table.hashCode();\n+    result = 31 * result + conflictAlgorithm;\n     return result;\n   }\n \n@@ -61,6 +66,7 @@ public String toString() {\n     return \"SqlInsertRequest{\" +\n         \"contentValues=\" + contentValues +\n         \", table='\" + table + '\\'' +\n+        \", conflictAlgorithm=\" + conflictAlgorithm +\n         '}';\n   }\n }"},{"sha":"ff201c76cb31ff57858258a1101748bfede6d10c","filename":"extensions/database/src/main/java/com/google/android/agera/database/SqlRequestCompiler.java","status":"modified","additions":38,"deletions":5,"changes":43,"blob_url":"https://github.com/google/agera/blob/f134b039084356195c1bb81bac433daa85fb9ae5/extensions/database/src/main/java/com/google/android/agera/database/SqlRequestCompiler.java","raw_url":"https://github.com/google/agera/raw/f134b039084356195c1bb81bac433daa85fb9ae5/extensions/database/src/main/java/com/google/android/agera/database/SqlRequestCompiler.java","contents_url":"https://api.github.com/repos/google/agera/contents/extensions/database/src/main/java/com/google/android/agera/database/SqlRequestCompiler.java?ref=f134b039084356195c1bb81bac433daa85fb9ae5","patch":"@@ -15,20 +15,27 @@\n  */\n package com.google.android.agera.database;\n \n+import static android.database.sqlite.SQLiteDatabase.CONFLICT_FAIL;\n+import static android.database.sqlite.SQLiteDatabase.CONFLICT_IGNORE;\n+import static android.database.sqlite.SQLiteDatabase.CONFLICT_NONE;\n+import static android.database.sqlite.SQLiteDatabase.CONFLICT_REPLACE;\n import static com.google.android.agera.Preconditions.checkNotNull;\n import static com.google.android.agera.Preconditions.checkState;\n+import static com.google.android.agera.database.SqlRequestCompilerStates.DBColumnConflictCompile;\n+import static com.google.android.agera.database.SqlRequestCompilerStates.DBColumnWhereConflictCompile;\n \n import com.google.android.agera.database.SqlRequestCompilerStates.DBArgumentCompile;\n-import com.google.android.agera.database.SqlRequestCompilerStates.DBColumnCompile;\n-import com.google.android.agera.database.SqlRequestCompilerStates.DBColumnWhereCompile;\n+import com.google.android.agera.database.SqlRequestCompilerStates.DBArgumentConflictCompile;\n import com.google.android.agera.database.SqlRequestCompilerStates.DBSql;\n import com.google.android.agera.database.SqlRequestCompilerStates.DBTable;\n+import com.google.android.agera.database.SqlRequestCompilerStates.DBWhereCompile;\n \n import android.content.ContentValues;\n import android.support.annotation.NonNull;\n \n final class SqlRequestCompiler\n-    implements DBTable, DBSql, DBArgumentCompile, DBColumnCompile, DBColumnWhereCompile {\n+    implements DBTable, DBSql, DBArgumentCompile, DBColumnConflictCompile, DBWhereCompile,\n+    DBColumnWhereConflictCompile, DBArgumentConflictCompile {\n   static final int SQL_REQUEST = 0;\n   static final int SQL_DELETE_REQUEST = 1;\n   static final int SQL_UPDATE_REQUEST = 2;\n@@ -51,6 +58,7 @@\n   @NonNull\n   private String where;\n   private boolean compiled;\n+  private int conflictAlgorithm;\n \n   SqlRequestCompiler(final int type) {\n     this.type = type;\n@@ -60,6 +68,7 @@\n     this.compiled = false;\n     this.table = \"\";\n     this.query = \"\";\n+    this.conflictAlgorithm = CONFLICT_NONE;\n   }\n \n   @NonNull\n@@ -112,16 +121,40 @@ public Object arguments(@NonNull final String... arguments) {\n \n   @NonNull\n   @Override\n+  public Object failOnConflict() {\n+    checkState(!compiled, ERROR_MESSAGE);\n+    conflictAlgorithm = CONFLICT_FAIL;\n+    return this;\n+  }\n+\n+  @NonNull\n+  @Override\n+  public Object ignoreOnConflict() {\n+    checkState(!compiled, ERROR_MESSAGE);\n+    conflictAlgorithm = CONFLICT_IGNORE;\n+    return this;\n+  }\n+\n+  @NonNull\n+  @Override\n+  public Object replaceOnConflict() {\n+    checkState(!compiled, ERROR_MESSAGE);\n+    conflictAlgorithm = CONFLICT_REPLACE;\n+    return this;\n+  }\n+\n+  @NonNull\n+  @Override\n   public Object compile() {\n     checkState(!compiled, ERROR_MESSAGE);\n     this.compiled = true;\n     switch (type) {\n       case SQL_DELETE_REQUEST:\n         return new SqlDeleteRequest(arguments, table, where);\n       case SQL_INSERT_REQUEST:\n-        return new SqlInsertRequest(contentValues, table);\n+        return new SqlInsertRequest(contentValues, table, conflictAlgorithm);\n       case SQL_UPDATE_REQUEST:\n-        return new SqlUpdateRequest(contentValues, arguments, table, where);\n+        return new SqlUpdateRequest(contentValues, arguments, table, where, conflictAlgorithm);\n       default:\n         return new SqlRequest(arguments, query);\n     }"},{"sha":"0a8137a6b4c083c6be1394982ad68802e18eac3c","filename":"extensions/database/src/main/java/com/google/android/agera/database/SqlRequestCompilerStates.java","status":"modified","additions":53,"deletions":8,"changes":61,"blob_url":"https://github.com/google/agera/blob/f134b039084356195c1bb81bac433daa85fb9ae5/extensions/database/src/main/java/com/google/android/agera/database/SqlRequestCompilerStates.java","raw_url":"https://github.com/google/agera/raw/f134b039084356195c1bb81bac433daa85fb9ae5/extensions/database/src/main/java/com/google/android/agera/database/SqlRequestCompilerStates.java","contents_url":"https://api.github.com/repos/google/agera/contents/extensions/database/src/main/java/com/google/android/agera/database/SqlRequestCompilerStates.java?ref=f134b039084356195c1bb81bac433daa85fb9ae5","patch":"@@ -85,6 +85,35 @@\n   }\n \n   /**\n+   * Compiler state allowing to add conflict algorithm.\n+   * <p>\n+   * The default algorithm aborts the current SQL statement with an SQLITE_CONSTRAINT\n+   * error and backs out any changes made.\n+   */\n+  interface DBConflict<T> {\n+\n+    /**\n+     * When a constraint violation occurs, the command aborts with a return code SQLITE_CONSTRAINT.\n+     */\n+    @NonNull\n+    T failOnConflict();\n+\n+    /**\n+     * When a constraint violation occurs, the one row that contains the constraint violation is not\n+     * inserted or changed.\n+     */\n+    @NonNull\n+    T ignoreOnConflict();\n+\n+    /**\n+     * When a UNIQUE constraint violation occurs, the pre-existing rows that are causing the\n+     * constraint violation are removed prior to inserting or updating the current row.\n+     */\n+    @NonNull\n+    T replaceOnConflict();\n+  }\n+\n+  /**\n    * Compiler state to compile the sql request.\n    */\n   interface DBCompile<T> {\n@@ -99,22 +128,38 @@\n   /**\n    * Compiler state allowing to specify sql arguments or compile.\n    */\n-  interface DBArgumentCompile<T> extends DBArgument<DBCompile<T>>, DBCompile<T> {}\n+  interface DBArgumentCompile<T, TC> extends DBArgument<TC>, DBCompile<T> {}\n+\n+  /**\n+   * Compiler state allowing to specify sql arguments, conflict algorithm or compile.\n+   */\n+  interface DBArgumentConflictCompile<T, TCc> extends DBArgument<TCc>, DBConflictCompile<T> {}\n \n   /**\n-   * Compiler state allowing to specify columns or compile.\n+   * Compiler state allowing to specify columns, a conflict algorithm or compile.\n    */\n-  interface DBColumnCompile<T, TSelf extends DBColumnCompile<T, TSelf>>\n-      extends DBColumn<TSelf>, DBCompile<T> {}\n+  interface DBColumnConflictCompile<T, TSelf extends DBColumnConflictCompile<T, TSelf>>\n+      extends DBColumn<TSelf>, DBConflictCompile<T> {}\n \n   /**\n    * Compiler state allowing to specify a where clause or compile.\n    */\n-  interface DBWhereCompile<T> extends DBWhere<DBArgumentCompile<T>>, DBCompile<T> {}\n+  interface DBWhereCompile<T, TAc> extends DBWhere<TAc>, DBCompile<T> {}\n+\n+  /**\n+   * Compiler state allowing to specify a conflict algorithm or compile.\n+   */\n+  interface DBConflictCompile<T> extends DBConflict<DBCompile<T>>, DBCompile<T> {}\n+\n+  /**\n+   * Compiler state allowing to specify a conflict algorithm, a where clause or compile.\n+   */\n+  interface DBWhereConflictCompile<T, TAcc> extends DBWhere<TAcc>, DBConflictCompile<T> {}\n \n   /**\n-   * Compiler state allowing to specify a column, where clause or compile.\n+   * Compiler state allowing to specify a column, conflict algorithm, where clause or compile.\n    */\n-  interface DBColumnWhereCompile<T, TSelf extends DBColumnWhereCompile<T, TSelf>>\n-      extends DBColumn<TSelf>, DBWhereCompile<T> {}\n+  interface DBColumnWhereConflictCompile<T, TAac, TSelf\n+      extends DBColumnWhereConflictCompile<T, TAac,TSelf>>\n+      extends DBColumn<TSelf>, DBWhereConflictCompile<T, TAac> {}\n }"},{"sha":"eb5744b5715299676562a0c849ca71424f62f0fd","filename":"extensions/database/src/main/java/com/google/android/agera/database/SqlRequests.java","status":"modified","additions":13,"deletions":6,"changes":19,"blob_url":"https://github.com/google/agera/blob/f134b039084356195c1bb81bac433daa85fb9ae5/extensions/database/src/main/java/com/google/android/agera/database/SqlRequests.java","raw_url":"https://github.com/google/agera/raw/f134b039084356195c1bb81bac433daa85fb9ae5/extensions/database/src/main/java/com/google/android/agera/database/SqlRequests.java","contents_url":"https://api.github.com/repos/google/agera/contents/extensions/database/src/main/java/com/google/android/agera/database/SqlRequests.java?ref=f134b039084356195c1bb81bac433daa85fb9ae5","patch":"@@ -21,9 +21,12 @@\n import static com.google.android.agera.database.SqlRequestCompiler.SQL_UPDATE_REQUEST;\n \n import com.google.android.agera.database.SqlRequestCompilerStates.DBArgumentCompile;\n+import com.google.android.agera.database.SqlRequestCompilerStates.DBArgumentConflictCompile;\n import com.google.android.agera.database.SqlRequestCompilerStates.DBColumn;\n-import com.google.android.agera.database.SqlRequestCompilerStates.DBColumnCompile;\n-import com.google.android.agera.database.SqlRequestCompilerStates.DBColumnWhereCompile;\n+import com.google.android.agera.database.SqlRequestCompilerStates.DBColumnConflictCompile;\n+import com.google.android.agera.database.SqlRequestCompilerStates.DBColumnWhereConflictCompile;\n+import com.google.android.agera.database.SqlRequestCompilerStates.DBCompile;\n+import com.google.android.agera.database.SqlRequestCompilerStates.DBConflictCompile;\n import com.google.android.agera.database.SqlRequestCompilerStates.DBSql;\n import com.google.android.agera.database.SqlRequestCompilerStates.DBTable;\n import com.google.android.agera.database.SqlRequestCompilerStates.DBWhereCompile;\n@@ -39,7 +42,8 @@\n    */\n   @SuppressWarnings(\"unchecked\")\n   @NonNull\n-  public static DBSql<DBArgumentCompile<SqlRequest>> sqlRequest() {\n+  public static DBSql<DBArgumentCompile<\n+      SqlRequest, DBArgumentCompile<SqlRequest, DBCompile<SqlRequest>>>> sqlRequest() {\n     return new SqlRequestCompiler(SQL_REQUEST);\n   }\n \n@@ -48,7 +52,8 @@\n    */\n   @SuppressWarnings(\"unchecked\")\n   @NonNull\n-  public static DBTable<DBWhereCompile<SqlDeleteRequest>> sqlDeleteRequest() {\n+  public static DBTable<DBWhereCompile<SqlDeleteRequest, DBArgumentCompile<\n+      SqlDeleteRequest, DBCompile<SqlDeleteRequest>>>> sqlDeleteRequest() {\n     return new SqlRequestCompiler(SQL_DELETE_REQUEST);\n   }\n \n@@ -57,7 +62,7 @@\n    */\n   @SuppressWarnings(\"unchecked\")\n   @NonNull\n-  public static DBTable<DBColumn<DBColumnCompile<SqlInsertRequest, ?>>> sqlInsertRequest() {\n+  public static DBTable<DBColumn<DBColumnConflictCompile<SqlInsertRequest, ?>>> sqlInsertRequest() {\n     return new SqlRequestCompiler(SQL_INSERT_REQUEST);\n   }\n \n@@ -66,7 +71,9 @@\n    */\n   @SuppressWarnings(\"unchecked\")\n   @NonNull\n-  public static DBTable<DBColumn<DBColumnWhereCompile<SqlUpdateRequest, ?>>> sqlUpdateRequest() {\n+  public static DBTable<DBColumn<DBColumnWhereConflictCompile<SqlUpdateRequest,\n+      DBArgumentConflictCompile<SqlUpdateRequest, DBConflictCompile<SqlUpdateRequest>>, ?>>>\n+  sqlUpdateRequest() {\n     return new SqlRequestCompiler(SQL_UPDATE_REQUEST);\n   }\n "},{"sha":"fca308083efb0a81970db5044b7e43f0dfa6d0ca","filename":"extensions/database/src/main/java/com/google/android/agera/database/SqlUpdateRequest.java","status":"modified","additions":7,"deletions":2,"changes":9,"blob_url":"https://github.com/google/agera/blob/f134b039084356195c1bb81bac433daa85fb9ae5/extensions/database/src/main/java/com/google/android/agera/database/SqlUpdateRequest.java","raw_url":"https://github.com/google/agera/raw/f134b039084356195c1bb81bac433daa85fb9ae5/extensions/database/src/main/java/com/google/android/agera/database/SqlUpdateRequest.java","contents_url":"https://api.github.com/repos/google/agera/contents/extensions/database/src/main/java/com/google/android/agera/database/SqlUpdateRequest.java?ref=f134b039084356195c1bb81bac433daa85fb9ae5","patch":"@@ -34,9 +34,11 @@\n   final String table;\n   @NonNull\n   final String where;\n+  final int conflictAlgorithm;\n \n   SqlUpdateRequest(@NonNull final ContentValues contentValues, @NonNull final String[] arguments,\n-      @NonNull final String table, @NonNull final String where) {\n+      @NonNull final String table, @NonNull final String where, final int conflictAlgorithm) {\n+    this.conflictAlgorithm = conflictAlgorithm;\n     this.table = checkNotNull(table);\n     this.where = checkNotNull(where);\n     this.contentValues = checkNotNull(contentValues);\n@@ -54,7 +56,8 @@ public boolean equals(final Object o) {\n \n     final SqlUpdateRequest that = (SqlUpdateRequest) o;\n \n-    return contentValues.equals(that.contentValues)\n+    return conflictAlgorithm == that.conflictAlgorithm\n+        && contentValues.equals(that.contentValues)\n         && Arrays.equals(arguments, that.arguments)\n         && table.equals(that.table)\n         && where.equals(that.where);\n@@ -66,6 +69,7 @@ public int hashCode() {\n     result = 31 * result + Arrays.hashCode(arguments);\n     result = 31 * result + table.hashCode();\n     result = 31 * result + where.hashCode();\n+    result = 31 * result + conflictAlgorithm;\n     return result;\n   }\n \n@@ -76,6 +80,7 @@ public String toString() {\n         \", arguments=\" + Arrays.toString(arguments) +\n         \", table='\" + table + '\\'' +\n         \", where='\" + where + '\\'' +\n+        \", conflictAlgorithm=\" + conflictAlgorithm +\n         '}';\n   }\n }"},{"sha":"98631a8eeabdaf2f34d146b4466e00f145a0c2bf","filename":"extensions/database/src/test/java/com/google/android/agera/database/SqlDatabaseFunctionsTest.java","status":"modified","additions":90,"deletions":0,"changes":90,"blob_url":"https://github.com/google/agera/blob/f134b039084356195c1bb81bac433daa85fb9ae5/extensions/database/src/test/java/com/google/android/agera/database/SqlDatabaseFunctionsTest.java","raw_url":"https://github.com/google/agera/raw/f134b039084356195c1bb81bac433daa85fb9ae5/extensions/database/src/test/java/com/google/android/agera/database/SqlDatabaseFunctionsTest.java","contents_url":"https://api.github.com/repos/google/agera/contents/extensions/database/src/test/java/com/google/android/agera/database/SqlDatabaseFunctionsTest.java?ref=f134b039084356195c1bb81bac433daa85fb9ae5","patch":"@@ -15,6 +15,10 @@\n  */\n package com.google.android.agera.database;\n \n+import static android.database.sqlite.SQLiteDatabase.CONFLICT_FAIL;\n+import static android.database.sqlite.SQLiteDatabase.CONFLICT_IGNORE;\n+import static android.database.sqlite.SQLiteDatabase.CONFLICT_NONE;\n+import static android.database.sqlite.SQLiteDatabase.CONFLICT_REPLACE;\n import static android.database.sqlite.SQLiteDatabase.create;\n import static com.google.android.agera.Result.success;\n import static com.google.android.agera.Suppliers.staticSupplier;\n@@ -236,6 +240,92 @@ public void shouldPassArgumentsToDatabaseInsert() throws Throwable {\n   }\n \n   @Test\n+  public void shouldAddFailConflictAlgorithmForUpdate() {\n+    assertThat(sqlUpdateRequest()\n+                .table(TABLE)\n+                .column(\"column\", \"value4\")\n+                .where(\"column=?\")\n+                .arguments(\"value3\")\n+                .failOnConflict()\n+                .compile().conflictAlgorithm,\n+        is(CONFLICT_FAIL));\n+  }\n+\n+  @Test\n+  public void shouldAddReplaceConflictAlgorithmForUpdate() {\n+    assertThat(sqlUpdateRequest()\n+            .table(TABLE)\n+            .column(\"column\", \"value4\")\n+            .where(\"column=?\")\n+            .arguments(\"value3\")\n+            .replaceOnConflict()\n+            .compile().conflictAlgorithm,\n+        is(CONFLICT_REPLACE));\n+  }\n+\n+  @Test\n+  public void shouldAddIgnoreConflictAlgorithmForUpdate() {\n+    assertThat(sqlUpdateRequest()\n+            .table(TABLE)\n+            .column(\"column\", \"value4\")\n+            .where(\"column=?\")\n+            .arguments(\"value3\")\n+            .ignoreOnConflict()\n+            .compile().conflictAlgorithm,\n+        is(CONFLICT_IGNORE));\n+  }\n+\n+  @Test\n+  public void shouldNotAddConflictAlgorithmForUpdate() {\n+    assertThat(sqlUpdateRequest()\n+            .table(TABLE)\n+            .column(\"column\", \"value4\")\n+            .where(\"column=?\")\n+            .arguments(\"value3\")\n+            .compile().conflictAlgorithm,\n+        is(CONFLICT_NONE));\n+  }\n+\n+  @Test\n+  public void shouldNotAddConflictAlgorithmForInsert() {\n+    assertThat(sqlInsertRequest()\n+            .table(TABLE)\n+            .emptyColumn(\"column\")\n+            .compile().conflictAlgorithm,\n+        is(CONFLICT_NONE));\n+  }\n+\n+  @Test\n+  public void shouldAddFailConflictAlgorithmForInsert() {\n+    assertThat(sqlInsertRequest()\n+                .table(TABLE)\n+                .emptyColumn(\"column\")\n+                .failOnConflict()\n+                .compile().conflictAlgorithm,\n+        is(CONFLICT_FAIL));\n+  }\n+\n+  @Test\n+  public void shouldAddIgnoreConflictAlgorithmForInsert() {\n+    assertThat(sqlInsertRequest()\n+            .table(TABLE)\n+            .emptyColumn(\"column\")\n+            .ignoreOnConflict()\n+            .compile().conflictAlgorithm,\n+        is(CONFLICT_IGNORE));\n+  }\n+\n+  @Test\n+  public void shouldAddReplaceConflictAlgorithmForInsert() {\n+    assertThat(sqlInsertRequest()\n+            .table(TABLE)\n+            .emptyColumn(\"column\")\n+            .replaceOnConflict()\n+            .compile().conflictAlgorithm,\n+        is(CONFLICT_REPLACE));\n+  }\n+\n+  @Test\n   public void shouldReturnErrorForFailedDatabaseCreationInInsert() throws Throwable {\n     assertThat(databaseInsertFunction(FAILURE)\n             .apply(sqlInsertRequest()"}]}