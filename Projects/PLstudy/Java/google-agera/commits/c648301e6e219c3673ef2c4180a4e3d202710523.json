{"sha":"c648301e6e219c3673ef2c4180a4e3d202710523","commit":{"author":{"name":"Magnus Ernstsson","email":"bengt@google.com","date":"2015-07-28T13:14:45Z"},"committer":{"name":"Magnus Ernstsson","email":"magnus@ernstsson.net","date":"2016-04-19T06:55:17Z"},"message":"Added agera","tree":{"sha":"72a751e52ae80a3efe06fc26923a43dfb8a53c92","url":"https://api.github.com/repos/google/agera/git/trees/72a751e52ae80a3efe06fc26923a43dfb8a53c92"},"url":"https://api.github.com/repos/google/agera/git/commits/c648301e6e219c3673ef2c4180a4e3d202710523","comment_count":0},"url":"https://api.github.com/repos/google/agera/commits/c648301e6e219c3673ef2c4180a4e3d202710523","html_url":"https://github.com/google/agera/commit/c648301e6e219c3673ef2c4180a4e3d202710523","comments_url":"https://api.github.com/repos/google/agera/commits/c648301e6e219c3673ef2c4180a4e3d202710523/comments","author":{"login":"ernstsson","id":378389,"avatar_url":"https://avatars2.githubusercontent.com/u/378389?v=3","gravatar_id":"","url":"https://api.github.com/users/ernstsson","html_url":"https://github.com/ernstsson","followers_url":"https://api.github.com/users/ernstsson/followers","following_url":"https://api.github.com/users/ernstsson/following{/other_user}","gists_url":"https://api.github.com/users/ernstsson/gists{/gist_id}","starred_url":"https://api.github.com/users/ernstsson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ernstsson/subscriptions","organizations_url":"https://api.github.com/users/ernstsson/orgs","repos_url":"https://api.github.com/users/ernstsson/repos","events_url":"https://api.github.com/users/ernstsson/events{/privacy}","received_events_url":"https://api.github.com/users/ernstsson/received_events","type":"User","site_admin":false},"committer":{"login":"ernstsson","id":378389,"avatar_url":"https://avatars2.githubusercontent.com/u/378389?v=3","gravatar_id":"","url":"https://api.github.com/users/ernstsson","html_url":"https://github.com/ernstsson","followers_url":"https://api.github.com/users/ernstsson/followers","following_url":"https://api.github.com/users/ernstsson/following{/other_user}","gists_url":"https://api.github.com/users/ernstsson/gists{/gist_id}","starred_url":"https://api.github.com/users/ernstsson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ernstsson/subscriptions","organizations_url":"https://api.github.com/users/ernstsson/orgs","repos_url":"https://api.github.com/users/ernstsson/repos","events_url":"https://api.github.com/users/ernstsson/events{/privacy}","received_events_url":"https://api.github.com/users/ernstsson/received_events","type":"User","site_admin":false},"parents":[],"stats":{"total":15311,"additions":15311,"deletions":0},"files":[{"sha":"074a79dae94620c634b6662c58244c7ddcf7fe2c","filename":".gitignore","status":"added","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/.gitignore","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/.gitignore","contents_url":"https://api.github.com/repos/google/agera/contents/.gitignore?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,7 @@\n+build/\n+.idea/\n+.gradle/\n+gradle/\n+gradlew*\n+local.properties\n+*.iml"},{"sha":"93bf21c32b1c1853efc1c90262c5ee54a08d9af0","filename":"CONTRIBUTING.md","status":"added","additions":29,"deletions":0,"changes":29,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/CONTRIBUTING.md","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/CONTRIBUTING.md","contents_url":"https://api.github.com/repos/google/agera/contents/CONTRIBUTING.md?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,29 @@\n+# How to Contribute #\n+\n+We'd love to hear your feedback. Please open new issues describing any bugs,\n+feature requests or suggestions that you have.\n+\n+We will also consider high quality pull requests. To contribute you must\n+first submit a Contributor License Agreement, as described below.\n+\n+\n+## Contributor License Agreement ##\n+\n+Contributions to any Google project must be accompanied by a Contributor\n+License Agreement.  This is not a copyright **assignment**, it simply gives\n+Google permission to use and redistribute your contributions as part of the\n+project.\n+\n+  * If you are an individual writing original source code and you're sure you\n+    own the intellectual property, then you'll need to sign an [individual\n+    CLA][].\n+\n+  * If you work for a company that wants to allow you to contribute your work,\n+    then you'll need to sign a [corporate CLA][].\n+\n+You generally only need to submit a CLA once, so if you've already submitted\n+one (even if it was for a different project), you probably don't need to do it\n+again.\n+\n+[individual CLA]: https://developers.google.com/open-source/cla/individual\n+[corporate CLA]: https://developers.google.com/open-source/cla/corporate"},{"sha":"d645695673349e3947e8e5ae42332d0ac3164cd7","filename":"LICENSE","status":"added","additions":202,"deletions":0,"changes":202,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/LICENSE","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/LICENSE","contents_url":"https://api.github.com/repos/google/agera/contents/LICENSE?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,202 @@\n+\n+                                 Apache License\n+                           Version 2.0, January 2004\n+                        http://www.apache.org/licenses/\n+\n+   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n+\n+   1. Definitions.\n+\n+      \"License\" shall mean the terms and conditions for use, reproduction,\n+      and distribution as defined by Sections 1 through 9 of this document.\n+\n+      \"Licensor\" shall mean the copyright owner or entity authorized by\n+      the copyright owner that is granting the License.\n+\n+      \"Legal Entity\" shall mean the union of the acting entity and all\n+      other entities that control, are controlled by, or are under common\n+      control with that entity. For the purposes of this definition,\n+      \"control\" means (i) the power, direct or indirect, to cause the\n+      direction or management of such entity, whether by contract or\n+      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n+      outstanding shares, or (iii) beneficial ownership of such entity.\n+\n+      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n+      exercising permissions granted by this License.\n+\n+      \"Source\" form shall mean the preferred form for making modifications,\n+      including but not limited to software source code, documentation\n+      source, and configuration files.\n+\n+      \"Object\" form shall mean any form resulting from mechanical\n+      transformation or translation of a Source form, including but\n+      not limited to compiled object code, generated documentation,\n+      and conversions to other media types.\n+\n+      \"Work\" shall mean the work of authorship, whether in Source or\n+      Object form, made available under the License, as indicated by a\n+      copyright notice that is included in or attached to the work\n+      (an example is provided in the Appendix below).\n+\n+      \"Derivative Works\" shall mean any work, whether in Source or Object\n+      form, that is based on (or derived from) the Work and for which the\n+      editorial revisions, annotations, elaborations, or other modifications\n+      represent, as a whole, an original work of authorship. For the purposes\n+      of this License, Derivative Works shall not include works that remain\n+      separable from, or merely link (or bind by name) to the interfaces of,\n+      the Work and Derivative Works thereof.\n+\n+      \"Contribution\" shall mean any work of authorship, including\n+      the original version of the Work and any modifications or additions\n+      to that Work or Derivative Works thereof, that is intentionally\n+      submitted to Licensor for inclusion in the Work by the copyright owner\n+      or by an individual or Legal Entity authorized to submit on behalf of\n+      the copyright owner. For the purposes of this definition, \"submitted\"\n+      means any form of electronic, verbal, or written communication sent\n+      to the Licensor or its representatives, including but not limited to\n+      communication on electronic mailing lists, source code control systems,\n+      and issue tracking systems that are managed by, or on behalf of, the\n+      Licensor for the purpose of discussing and improving the Work, but\n+      excluding communication that is conspicuously marked or otherwise\n+      designated in writing by the copyright owner as \"Not a Contribution.\"\n+\n+      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n+      on behalf of whom a Contribution has been received by Licensor and\n+      subsequently incorporated within the Work.\n+\n+   2. Grant of Copyright License. Subject to the terms and conditions of\n+      this License, each Contributor hereby grants to You a perpetual,\n+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n+      copyright license to reproduce, prepare Derivative Works of,\n+      publicly display, publicly perform, sublicense, and distribute the\n+      Work and such Derivative Works in Source or Object form.\n+\n+   3. Grant of Patent License. Subject to the terms and conditions of\n+      this License, each Contributor hereby grants to You a perpetual,\n+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n+      (except as stated in this section) patent license to make, have made,\n+      use, offer to sell, sell, import, and otherwise transfer the Work,\n+      where such license applies only to those patent claims licensable\n+      by such Contributor that are necessarily infringed by their\n+      Contribution(s) alone or by combination of their Contribution(s)\n+      with the Work to which such Contribution(s) was submitted. If You\n+      institute patent litigation against any entity (including a\n+      cross-claim or counterclaim in a lawsuit) alleging that the Work\n+      or a Contribution incorporated within the Work constitutes direct\n+      or contributory patent infringement, then any patent licenses\n+      granted to You under this License for that Work shall terminate\n+      as of the date such litigation is filed.\n+\n+   4. Redistribution. You may reproduce and distribute copies of the\n+      Work or Derivative Works thereof in any medium, with or without\n+      modifications, and in Source or Object form, provided that You\n+      meet the following conditions:\n+\n+      (a) You must give any other recipients of the Work or\n+          Derivative Works a copy of this License; and\n+\n+      (b) You must cause any modified files to carry prominent notices\n+          stating that You changed the files; and\n+\n+      (c) You must retain, in the Source form of any Derivative Works\n+          that You distribute, all copyright, patent, trademark, and\n+          attribution notices from the Source form of the Work,\n+          excluding those notices that do not pertain to any part of\n+          the Derivative Works; and\n+\n+      (d) If the Work includes a \"NOTICE\" text file as part of its\n+          distribution, then any Derivative Works that You distribute must\n+          include a readable copy of the attribution notices contained\n+          within such NOTICE file, excluding those notices that do not\n+          pertain to any part of the Derivative Works, in at least one\n+          of the following places: within a NOTICE text file distributed\n+          as part of the Derivative Works; within the Source form or\n+          documentation, if provided along with the Derivative Works; or,\n+          within a display generated by the Derivative Works, if and\n+          wherever such third-party notices normally appear. The contents\n+          of the NOTICE file are for informational purposes only and\n+          do not modify the License. You may add Your own attribution\n+          notices within Derivative Works that You distribute, alongside\n+          or as an addendum to the NOTICE text from the Work, provided\n+          that such additional attribution notices cannot be construed\n+          as modifying the License.\n+\n+      You may add Your own copyright statement to Your modifications and\n+      may provide additional or different license terms and conditions\n+      for use, reproduction, or distribution of Your modifications, or\n+      for any such Derivative Works as a whole, provided Your use,\n+      reproduction, and distribution of the Work otherwise complies with\n+      the conditions stated in this License.\n+\n+   5. Submission of Contributions. Unless You explicitly state otherwise,\n+      any Contribution intentionally submitted for inclusion in the Work\n+      by You to the Licensor shall be under the terms and conditions of\n+      this License, without any additional terms or conditions.\n+      Notwithstanding the above, nothing herein shall supersede or modify\n+      the terms of any separate license agreement you may have executed\n+      with Licensor regarding such Contributions.\n+\n+   6. Trademarks. This License does not grant permission to use the trade\n+      names, trademarks, service marks, or product names of the Licensor,\n+      except as required for reasonable and customary use in describing the\n+      origin of the Work and reproducing the content of the NOTICE file.\n+\n+   7. Disclaimer of Warranty. Unless required by applicable law or\n+      agreed to in writing, Licensor provides the Work (and each\n+      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n+      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+      implied, including, without limitation, any warranties or conditions\n+      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n+      PARTICULAR PURPOSE. You are solely responsible for determining the\n+      appropriateness of using or redistributing the Work and assume any\n+      risks associated with Your exercise of permissions under this License.\n+\n+   8. Limitation of Liability. In no event and under no legal theory,\n+      whether in tort (including negligence), contract, or otherwise,\n+      unless required by applicable law (such as deliberate and grossly\n+      negligent acts) or agreed to in writing, shall any Contributor be\n+      liable to You for damages, including any direct, indirect, special,\n+      incidental, or consequential damages of any character arising as a\n+      result of this License or out of the use or inability to use the\n+      Work (including but not limited to damages for loss of goodwill,\n+      work stoppage, computer failure or malfunction, or any and all\n+      other commercial damages or losses), even if such Contributor\n+      has been advised of the possibility of such damages.\n+\n+   9. Accepting Warranty or Additional Liability. While redistributing\n+      the Work or Derivative Works thereof, You may choose to offer,\n+      and charge a fee for, acceptance of support, warranty, indemnity,\n+      or other liability obligations and/or rights consistent with this\n+      License. However, in accepting such obligations, You may act only\n+      on Your own behalf and on Your sole responsibility, not on behalf\n+      of any other Contributor, and only if You agree to indemnify,\n+      defend, and hold each Contributor harmless for any liability\n+      incurred by, or claims asserted against, such Contributor by reason\n+      of your accepting any such warranty or additional liability.\n+\n+   END OF TERMS AND CONDITIONS\n+\n+   APPENDIX: How to apply the Apache License to your work.\n+\n+      To apply the Apache License to your work, attach the following\n+      boilerplate notice, with the fields enclosed by brackets \"[]\"\n+      replaced with your own identifying information. (Don't include\n+      the brackets!)  The text should be enclosed in the appropriate\n+      comment syntax for the file format. We also recommend that a\n+      file or class name and description of purpose be included on the\n+      same \"printed page\" as the copyright notice for easier\n+      identification within third-party archives.\n+\n+   Copyright [yyyy] [name of copyright owner]\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License."},{"sha":"7568e13e7bb4e036a0913d8411e08fa90b76bd7f","filename":"README.md","status":"added","additions":52,"deletions":0,"changes":52,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/README.md","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/README.md","contents_url":"https://api.github.com/repos/google/agera/contents/README.md?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,52 @@\n+![Agera](https://github.com/google/agera/blob/master/doc/images/agera.png)\n+Reactive Programming for Android\n+================================\n+\n+Agera is a set of classes and interfaces to help write functional, asynchronous, and reactive \n+applications for Android.\n+\n+Requires Android SDK version 9 or higher.\n+\n+Versions\n+--------\n+\n+The latest version of Agera is 1.0.0-RC1\n+\n+Usage\n+-----\n+\n+To add a dependency using Gradle:\n+\n+```\n+  compile 'com.google.android.agera:agera:1.0.0-RC1'\n+```\n+\n+Learn about Agera\n+------------------\n+\n+- [Agera Explained](https://github.com/google/agera/wiki)\n+\n+Experimental Sample Extensions\n+------------------------------------\n+\n+A few experimental sample extension libraries for Agera are also provided. These are:\n+\n+- Content - For `android.content` interaction, such as `BroadcastReceiver` and `SharedPreferences`\n+- Database - For `SQLiteDatabase` interaction\n+- Net - For `HTTPUrlConnection` interaction\n+- RVAdapter - For `RecyclerView` interaction\n+\n+To add dependencies to these using Gradle:\n+\n+```\n+  compile 'com.google.android.agera:content:1.0.0-RC1'\n+  compile 'com.google.android.agera:database:1.0.0-RC1'\n+  compile 'com.google.android.agera:net:1.0.0-RC1'\n+  compile 'com.google.android.agera:rvadapter:1.0.0-RC1'\n+```\n+\n+Links\n+-----\n+\n+- [GitHub project](https://github.com/google/agera)\n+- [Issue tracker](https://github.com/google/agera/issues/new)"},{"sha":"63b1804def70e54d7abf0537fb93b60e59fc1e28","filename":"agera/build.gradle","status":"added","additions":40,"deletions":0,"changes":40,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/agera/build.gradle","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/agera/build.gradle","contents_url":"https://api.github.com/repos/google/agera/contents/agera/build.gradle?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,40 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+apply plugin: 'com.android.library'\n+apply plugin: 'com.github.dcendents.android-maven'\n+apply plugin: 'jacoco'\n+\n+install {\n+    repositories.mavenInstaller {\n+        pom {\n+            project {\n+                packaging 'aar'\n+                name 'Agera'\n+                url gradle.url\n+                licenses {\n+                    license {\n+                        name gradle.licenseName\n+                        url gradle.licenseUrl\n+                    }\n+                }\n+                scm {\n+                    url gradle.url\n+                    connection gradle.gitUrl\n+                }\n+            }\n+        }\n+    }\n+}"},{"sha":"22fa37ab897284a5bfd4c674534f05de08deb40e","filename":"agera/src/main/AndroidManifest.xml","status":"added","additions":17,"deletions":0,"changes":17,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/main/AndroidManifest.xml","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/main/AndroidManifest.xml","contents_url":"https://api.github.com/repos/google/agera/contents/agera/src/main/AndroidManifest.xml?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,17 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<!--\n+  ~ Copyright 2015 Google Inc. All Rights Reserved.\n+  ~\n+  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n+  ~ you may not use this file except in compliance with the License.\n+  ~ You may obtain a copy of the License at\n+  ~\n+  ~     http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+<manifest package=\"com.google.android.agera\"/>"},{"sha":"d098551d19f31f59aa3b16521cb1689f3aa194ea","filename":"agera/src/main/java/com/google/android/agera/ActivationHandler.java","status":"added","additions":44,"deletions":0,"changes":44,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/main/java/com/google/android/agera/ActivationHandler.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/main/java/com/google/android/agera/ActivationHandler.java","contents_url":"https://api.github.com/repos/google/agera/contents/agera/src/main/java/com/google/android/agera/ActivationHandler.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera;\n+\n+import android.support.annotation.NonNull;\n+\n+/**\n+ * Receives events of the {@link UpdateDispatcher} created with\n+ * {@link Observables#updateDispatcher(ActivationHandler)} when the first {@link Updatable} is added\n+ * and the last {@link Updatable} is removed.\n+ *\n+ * <p>Typically an {@link Observable} service implemented using a {@link UpdateDispatcher} only\n+ * needs to be updated if it has clients of its own. By starting to listen to updates from its\n+ * clients on {@link #observableActivated} and stopping on {@link #observableDeactivated}, the\n+ * service of the service can implement an <i>active</i>/<i>inactive</i> lifecycle,\n+ * saving memory and execution time when not needed.\n+ */\n+public interface ActivationHandler {\n+\n+  /**\n+   * Called when the the {@code caller} changes state from having no {@link Updatable}s to\n+   * having at least one {@link Updatable}.\n+   */\n+  void observableActivated(@NonNull UpdateDispatcher caller);\n+\n+  /**\n+   * Called when the the {@code caller} changes state from having {@link Updatable}s to\n+   * no longer having {@link Updatable}s.\n+   */\n+  void observableDeactivated(@NonNull UpdateDispatcher caller);\n+}"},{"sha":"98905111680814b7067953a4998cecfed533514b","filename":"agera/src/main/java/com/google/android/agera/BaseObservable.java","status":"added","additions":182,"deletions":0,"changes":182,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/main/java/com/google/android/agera/BaseObservable.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/main/java/com/google/android/agera/BaseObservable.java","contents_url":"https://api.github.com/repos/google/agera/contents/agera/src/main/java/com/google/android/agera/BaseObservable.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,182 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera;\n+\n+import static com.google.android.agera.Common.WorkerHandler.MSG_LAST_REMOVED;\n+import static com.google.android.agera.Common.WorkerHandler.MSG_UPDATE;\n+import static com.google.android.agera.Common.workerHandler;\n+import static com.google.android.agera.Preconditions.checkState;\n+\n+import com.google.android.agera.Common.WorkerHandler;\n+\n+import android.os.Handler;\n+import android.os.Looper;\n+import android.support.annotation.NonNull;\n+\n+import java.util.Arrays;\n+\n+/**\n+ * A partial implementation of {@link Observable} that adheres to the threading contract between\n+ * {@link Observable}s and {@link Updatable}s. Subclasses can use {@link #observableActivated()} and\n+ * {@link #observableDeactivated()} to control the activation and deactivation of this observable,\n+ * and to send out notifications to client updatables with {@link #dispatchUpdate()}.\n+ *\n+ * <p>For cases where subclassing {@link BaseObservable} is impossible, for example when the\n+ * potential class already has a base class, consider using {@link Observables#updateDispatcher()}\n+ * to help implement the {@link Observable} interface.\n+ */\n+public abstract class BaseObservable implements Observable {\n+  @NonNull\n+  private final Worker worker;\n+\n+  protected BaseObservable() {\n+    checkState(Looper.myLooper() != null, \"Can only be created on a Looper thread\");\n+    worker = new Worker(this);\n+  }\n+\n+  @Override\n+  public final void addUpdatable(@NonNull final Updatable updatable) {\n+    checkState(Looper.myLooper() != null, \"Can only be added on a Looper thread\");\n+    worker.addUpdatable(updatable);\n+  }\n+\n+  @Override\n+  public final void removeUpdatable(@NonNull final Updatable updatable) {\n+    checkState(Looper.myLooper() != null, \"Can only be removed on a Looper thread\");\n+    worker.removeUpdatable(updatable);\n+  }\n+\n+  /**\n+   * Notifies all registered {@link Updatable}s.\n+   */\n+  protected final void dispatchUpdate() {\n+    worker.dispatchUpdate();\n+  }\n+\n+  /**\n+   * Called from the worker looper thread when this {@link Observable} is activated by transitioning\n+   * from having no client {@link Updatable}s to having at least one client {@link Updatable}.\n+   */\n+  protected void observableActivated() {}\n+\n+  /**\n+   * Called from the worker looper thread when this {@link Observable} is deactivated by\n+   * transitioning from having at least one client {@link Updatable} to having no client\n+   * {@link Updatable}s.\n+   */\n+  protected void observableDeactivated() {}\n+\n+  /**\n+   * Worker and synchronization lock behind a {@link BaseObservable}.\n+   */\n+  static final class Worker {\n+    @NonNull\n+    private static final Object[] NO_UPDATABLES_OR_HANDLERS = new Object[0];\n+\n+    @NonNull\n+    private final BaseObservable baseObservable;\n+    @NonNull\n+    private final WorkerHandler handler;\n+\n+    @NonNull\n+    private Object[] updatablesAndHandlers;\n+    private int size;\n+\n+    Worker(@NonNull final BaseObservable baseObservable) {\n+      this.baseObservable = baseObservable;\n+      this.handler = workerHandler();\n+      this.updatablesAndHandlers = NO_UPDATABLES_OR_HANDLERS;\n+      this.size = 0;\n+    }\n+\n+    synchronized void addUpdatable(@NonNull final Updatable updatable) {\n+      add(updatable, workerHandler());\n+      if (size == 1) {\n+        handler.obtainMessage(WorkerHandler.MSG_FIRST_ADDED, this).sendToTarget();\n+      }\n+    }\n+\n+    synchronized void removeUpdatable(@NonNull final Updatable updatable) {\n+      remove(updatable);\n+      if (size == 0) {\n+        handler.obtainMessage(MSG_LAST_REMOVED, this).sendToTarget();\n+      }\n+    }\n+\n+    void dispatchUpdate() {\n+      handler.obtainMessage(MSG_UPDATE, this).sendToTarget();\n+    }\n+\n+    private void add(@NonNull final Updatable updatable, @NonNull final Handler handler) {\n+      boolean added = false;\n+      for (int index = 0; index < updatablesAndHandlers.length; index += 2) {\n+        if (updatablesAndHandlers[index] == updatable) {\n+          throw new IllegalStateException(\"Updatable already added, cannot add.\");\n+        }\n+        if (updatablesAndHandlers[index] == null && !added) {\n+          updatablesAndHandlers[index] = updatable;\n+          updatablesAndHandlers[index + 1] = handler;\n+          added = true;\n+        }\n+      }\n+      if (!added) {\n+        final int newIndex = updatablesAndHandlers.length;\n+        updatablesAndHandlers = Arrays.copyOf(updatablesAndHandlers,\n+            Math.max(newIndex * 2, newIndex + 2));\n+        updatablesAndHandlers[newIndex] = updatable;\n+        updatablesAndHandlers[newIndex + 1] = handler;\n+      }\n+      size++;\n+    }\n+\n+    private void remove(@NonNull final Updatable updatable) {\n+      for (int index = 0; index < updatablesAndHandlers.length; index += 2) {\n+        if (updatablesAndHandlers[index] == updatable) {\n+          ((WorkerHandler) updatablesAndHandlers[index + 1]).removeMessages(\n+              WorkerHandler.MSG_CALL_UPDATABLE, updatable);\n+          updatablesAndHandlers[index] = null;\n+          updatablesAndHandlers[index + 1] = null;\n+          size--;\n+          return;\n+        }\n+      }\n+      throw new IllegalStateException(\"Updatable not added, cannot remove.\");\n+    }\n+\n+    synchronized void sendUpdate() {\n+      for (int index = 0; index < updatablesAndHandlers.length; index = index + 2) {\n+        final Updatable updatable = (Updatable) updatablesAndHandlers[index];\n+        final WorkerHandler handler =\n+            (WorkerHandler) updatablesAndHandlers[index + 1];\n+        if (updatable != null) {\n+          if (handler.getLooper() == Looper.myLooper()) {\n+            updatable.update();\n+          } else {\n+            handler.obtainMessage(WorkerHandler.MSG_CALL_UPDATABLE, updatable).sendToTarget();\n+          }\n+        }\n+      }\n+    }\n+\n+    void callFirstUpdatableAdded() {\n+      baseObservable.observableActivated();\n+    }\n+\n+    void callLastUpdatableRemoved() {\n+      baseObservable.observableDeactivated();\n+    }\n+  }\n+}"},{"sha":"d5aa7301c1d54808040c6f7ca7c170a41f431126","filename":"agera/src/main/java/com/google/android/agera/Binder.java","status":"added","additions":29,"deletions":0,"changes":29,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/main/java/com/google/android/agera/Binder.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/main/java/com/google/android/agera/Binder.java","contents_url":"https://api.github.com/repos/google/agera/contents/agera/src/main/java/com/google/android/agera/Binder.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,29 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera;\n+\n+import android.support.annotation.NonNull;\n+\n+/**\n+ * A receiver of two input objects.\n+ */\n+public interface Binder<TFirst, TSecond> {\n+\n+  /**\n+   * Accepts the given values {@code first} and {@code second}.\n+   */\n+  void bind(@NonNull TFirst first, @NonNull TSecond second);\n+}"},{"sha":"525d9ee58e23af3c61dcf9ab91287c5cbbadcc5d","filename":"agera/src/main/java/com/google/android/agera/Common.java","status":"added","additions":143,"deletions":0,"changes":143,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/main/java/com/google/android/agera/Common.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/main/java/com/google/android/agera/Common.java","contents_url":"https://api.github.com/repos/google/agera/contents/agera/src/main/java/com/google/android/agera/Common.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,143 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera;\n+\n+import static com.google.android.agera.Preconditions.checkNotNull;\n+\n+import com.google.android.agera.BaseObservable.Worker;\n+import com.google.android.agera.Observables.LowPassFilterObservable;\n+\n+import android.os.Handler;\n+import android.os.Message;\n+import android.support.annotation.NonNull;\n+\n+import java.lang.ref.WeakReference;\n+\n+final class Common {\n+  static final Function IDENTITY_FUNCTION = new IdentityFunction();\n+  static final StaticCondicate TRUE_CONDICATE = new StaticCondicate(true);\n+  static final StaticCondicate FALSE_CONDICATE = new StaticCondicate(false);\n+\n+  private static final ThreadLocal<WeakReference<WorkerHandler>> handlers = new ThreadLocal<>();\n+\n+  @NonNull\n+  static WorkerHandler workerHandler() {\n+    final WeakReference<WorkerHandler> handlerReference = handlers.get();\n+    WorkerHandler handler = handlerReference != null ? handlerReference.get() : null;\n+    if (handler == null) {\n+      handler = new WorkerHandler();\n+      handlers.set(new WeakReference<>(handler));\n+    }\n+    return handler;\n+  }\n+\n+  private static final class IdentityFunction implements Function {\n+    @NonNull\n+    @Override\n+    public Object apply(@NonNull final Object from) {\n+      return from;\n+    }\n+  }\n+\n+  private static final class StaticCondicate implements Condition, Predicate {\n+    private final boolean staticValue;\n+\n+    private StaticCondicate(final boolean staticValue) {\n+      this.staticValue = staticValue;\n+    }\n+\n+    @Override\n+    public boolean apply(@NonNull final Object value) {\n+      return staticValue;\n+    }\n+\n+    @Override\n+    public boolean applies() {\n+      return staticValue;\n+    }\n+  }\n+\n+  static final class StaticProducer<TFirst, TSecond, TTo>\n+      implements Supplier<TTo>, Function<TFirst, TTo>, Merger<TFirst, TSecond, TTo> {\n+    @NonNull\n+    private final TTo staticValue;\n+\n+    StaticProducer(@NonNull final TTo staticValue) {\n+      this.staticValue = checkNotNull(staticValue);\n+    }\n+\n+    @NonNull\n+    @Override\n+    public TTo apply(@NonNull final TFirst input) {\n+      return staticValue;\n+    }\n+\n+    @NonNull\n+    @Override\n+    public TTo merge(@NonNull final TFirst o, @NonNull final TSecond o2) {\n+      return staticValue;\n+    }\n+\n+    @NonNull\n+    @Override\n+    public TTo get() {\n+      return staticValue;\n+    }\n+  }\n+\n+  /**\n+   * Shared per-thread worker Handler behind internal logic of various Agera classes.\n+   */\n+  static final class WorkerHandler extends Handler {\n+    static final int MSG_FIRST_ADDED = 0;\n+    static final int MSG_LAST_REMOVED = 1;\n+    static final int MSG_UPDATE = 2;\n+    static final int MSG_CALL_UPDATABLE = 3;\n+    static final int MSG_CALL_MAYBE_START_FLOW = 4;\n+    static final int MSG_CALL_ACKNOWLEDGE_CANCEL = 5;\n+    static final int MSG_CALL_LOW_PASS_UPDATE = 6;\n+\n+    @Override\n+    public void handleMessage(final Message message) {\n+      switch (message.what) {\n+        case MSG_UPDATE:\n+          ((Worker) message.obj).sendUpdate();\n+          break;\n+        case MSG_FIRST_ADDED:\n+          ((Worker) message.obj).callFirstUpdatableAdded();\n+          break;\n+        case MSG_LAST_REMOVED:\n+          ((Worker) message.obj).callLastUpdatableRemoved();\n+          break;\n+        case MSG_CALL_UPDATABLE:\n+          ((Updatable) message.obj).update();\n+          break;\n+        case MSG_CALL_MAYBE_START_FLOW:\n+          ((CompiledRepository) message.obj).maybeStartFlow();\n+          break;\n+        case MSG_CALL_ACKNOWLEDGE_CANCEL:\n+          ((CompiledRepository) message.obj).acknowledgeCancel();\n+          break;\n+        case MSG_CALL_LOW_PASS_UPDATE:\n+          ((LowPassFilterObservable) message.obj).lowPassUpdate();\n+          break;\n+        default:\n+      }\n+    }\n+  }\n+\n+  private Common() {}\n+}"},{"sha":"026dcd919e4cbe0dc729da84984b31a833fb01ec","filename":"agera/src/main/java/com/google/android/agera/CompiledRepository.java","status":"added","additions":575,"deletions":0,"changes":575,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/main/java/com/google/android/agera/CompiledRepository.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/main/java/com/google/android/agera/CompiledRepository.java","contents_url":"https://api.github.com/repos/google/agera/contents/agera/src/main/java/com/google/android/agera/CompiledRepository.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,575 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera;\n+\n+import static com.google.android.agera.Common.WorkerHandler.MSG_CALL_ACKNOWLEDGE_CANCEL;\n+import static com.google.android.agera.Common.WorkerHandler.MSG_CALL_MAYBE_START_FLOW;\n+import static com.google.android.agera.Common.workerHandler;\n+import static com.google.android.agera.Observables.compositeObservable;\n+import static com.google.android.agera.Observables.perMillisecondObservable;\n+import static com.google.android.agera.Preconditions.checkNotNull;\n+import static com.google.android.agera.Preconditions.checkState;\n+import static com.google.android.agera.RepositoryConfig.CANCEL_FLOW;\n+import static com.google.android.agera.RepositoryConfig.RESET_TO_INITIAL_VALUE;\n+import static com.google.android.agera.RepositoryConfig.SEND_INTERRUPT;\n+import static java.lang.Thread.currentThread;\n+\n+import com.google.android.agera.Common.WorkerHandler;\n+\n+import android.support.annotation.IntDef;\n+import android.support.annotation.NonNull;\n+import android.support.annotation.Nullable;\n+\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.util.List;\n+import java.util.concurrent.Executor;\n+\n+@SuppressWarnings({\"rawtypes\", \"unchecked\"})\n+final class CompiledRepository extends BaseObservable\n+    implements Repository, Updatable, Runnable {\n+\n+  @NonNull\n+  static Repository compiledRepository(\n+      @NonNull final Object initialValue,\n+      @NonNull final List<Observable> eventSources,\n+      final int frequency,\n+      @NonNull final List<Object> directives,\n+      @NonNull final Merger<Object, Object, Boolean> notifyChecker,\n+      @RepositoryConfig final int concurrentUpdateConfig,\n+      @RepositoryConfig final int deactivationConfig) {\n+    Observable eventSource = perMillisecondObservable(frequency,\n+        compositeObservable(eventSources.toArray(new Observable[eventSources.size()])));\n+    Object[] directiveArray = directives.toArray();\n+    return new CompiledRepository(initialValue, eventSource,\n+        directiveArray, notifyChecker, deactivationConfig, concurrentUpdateConfig);\n+  }\n+\n+  //region Invariants\n+\n+  @NonNull\n+  private final Object initialValue;\n+  @NonNull\n+  private final Observable eventSource;\n+  @NonNull\n+  private final Object[] directives;\n+  @NonNull\n+  private final Merger<Object, Object, Boolean> notifyChecker;\n+  @RepositoryConfig\n+  private final int deactivationConfig;\n+  @RepositoryConfig\n+  private final int concurrentUpdateConfig;\n+  @NonNull\n+  private final WorkerHandler workerHandler;\n+\n+  CompiledRepository(\n+      @NonNull final Object initialValue,\n+      @NonNull final Observable eventSource,\n+      @NonNull final Object[] directives,\n+      @NonNull final Merger<Object, Object, Boolean> notifyChecker,\n+      @RepositoryConfig final int deactivationConfig,\n+      @RepositoryConfig final int concurrentUpdateConfig) {\n+    this.initialValue = initialValue;\n+    this.currentValue = initialValue;\n+    this.intermediateValue = initialValue; // non-final field but with @NonNull requirement\n+    this.eventSource = eventSource;\n+    this.directives = directives;\n+    this.notifyChecker = notifyChecker;\n+    this.deactivationConfig = deactivationConfig;\n+    this.concurrentUpdateConfig = concurrentUpdateConfig;\n+    this.workerHandler = workerHandler();\n+  }\n+\n+  //endregion Invariants\n+\n+  //region Data processing flow states\n+\n+  @Retention(RetentionPolicy.SOURCE)\n+  @IntDef({IDLE, RUNNING, CANCEL_REQUESTED, PAUSED_AT_GO_TO, PAUSED_AT_GO_LAZY, RUNNING_LAZILY})\n+  private @interface RunState {}\n+\n+  private static final int IDLE = 0;\n+  private static final int RUNNING = 1;\n+  private static final int CANCEL_REQUESTED = 2;\n+  private static final int PAUSED_AT_GO_TO = 3;\n+  private static final int PAUSED_AT_GO_LAZY = 4;\n+  private static final int RUNNING_LAZILY = 5;\n+\n+  @RunState\n+  private int runState = IDLE;\n+  private boolean restartNeeded;\n+  /** Index of the last goTo()/goLazy() directive, for resuming, or -1 for other directives. */\n+  private int lastDirectiveIndex = -1;\n+  /** The current value to be exposed through the repository's get method. */\n+  @NonNull\n+  private Object currentValue;\n+  /** The intermediate value computed by the executed part of the flow. */\n+  @NonNull\n+  private Object intermediateValue;\n+  /** The thread currently running a directive that can be interrupted. */\n+  @Nullable\n+  private Thread currentThread;\n+\n+  //endregion Data processing flow states\n+\n+  //region Starting and requesting cancellation\n+  // - All methods in this region are called from the Worker Looper thread, but reading and writing\n+  //   states that might be accessed from a different thread are still synchronized.\n+\n+  @Override\n+  protected void observableActivated() {\n+    eventSource.addUpdatable(this);\n+    maybeStartFlow();\n+  }\n+\n+  @Override\n+  protected void observableDeactivated() {\n+    eventSource.removeUpdatable(this);\n+    maybeCancelFlow(deactivationConfig, false);\n+  }\n+\n+  @Override\n+  public void update() {\n+    maybeCancelFlow(concurrentUpdateConfig, true);\n+    maybeStartFlow();\n+  }\n+\n+  /**\n+   * Called on the worker looper thread. Starts the data processing flow if it's not running. This\n+   * also cancels the lazily-executed part of the flow if the run state is \"paused at lazy\".\n+   */\n+  void maybeStartFlow() {\n+    synchronized (this) {\n+      if (runState == IDLE || runState == PAUSED_AT_GO_LAZY) {\n+        runState = RUNNING;\n+        lastDirectiveIndex = -1; // this could be pointing at the goLazy directive\n+        restartNeeded = false;\n+      } else {\n+        return; // flow already running, do not continue.\n+      }\n+    }\n+    intermediateValue = currentValue;\n+    runFlowFrom(0, false);\n+  }\n+\n+  /**\n+   * Called on the worker looper thread. Depending on the {@code config}, cancels the data\n+   * processing flow, resets the value, and/or sends the interrupt signal to the thread currently\n+   * processing a getFrom/mergeIn/transform instruction of the flow.\n+   *\n+   * @param scheduleRestart Whether to schedule a restart if a current flow is canceled.\n+   */\n+  private void maybeCancelFlow(@RepositoryConfig final int config, final boolean scheduleRestart) {\n+    synchronized (this) {\n+      if (runState == RUNNING || runState == PAUSED_AT_GO_TO) {\n+        restartNeeded = scheduleRestart;\n+\n+        // If config forbids cancellation, exit now after scheduling the restart, to skip the\n+        // cancellation request.\n+        if ((config & CANCEL_FLOW) == 0) {\n+          return;\n+        }\n+\n+        runState = CANCEL_REQUESTED;\n+\n+        if ((config & SEND_INTERRUPT) == SEND_INTERRUPT && currentThread != null) {\n+          currentThread.interrupt();\n+        }\n+      }\n+\n+      // Resetting to the initial value should be done even if the flow is not running.\n+      if (!scheduleRestart && (config & RESET_TO_INITIAL_VALUE) == RESET_TO_INITIAL_VALUE) {\n+        setNewValueLocked(initialValue);\n+      }\n+    }\n+  }\n+\n+  //endregion Starting and requesting cancellation\n+\n+  //region Acknowledging cancellation and restarting\n+  // - Apart from handleMessage(), other methods in this region can be called from a thread that is\n+  //   not the Worker Looper thread.\n+\n+  /**\n+   * Checks if the current data processing flow has been requested cancellation. Acknowledges the\n+   * request if so. This must be called while locked in a synchronized context.\n+   *\n+   * @return Whether the data processing flow is cancelled.\n+   */\n+  private boolean checkCancellationLocked() {\n+    if (runState == CANCEL_REQUESTED) {\n+      workerHandler.obtainMessage(MSG_CALL_ACKNOWLEDGE_CANCEL, this).sendToTarget();\n+      return true;\n+    }\n+    return false;\n+  }\n+\n+  /**\n+   * Called by the worker handler.\n+   */\n+  void acknowledgeCancel() {\n+    boolean shouldStartFlow = false;\n+    synchronized (this) {\n+      if (runState == CANCEL_REQUESTED) {\n+        runState = IDLE;\n+        intermediateValue = initialValue; // GC the intermediate value but keep field non-null.\n+        shouldStartFlow = restartNeeded;\n+      }\n+    }\n+    if (shouldStartFlow) {\n+      maybeStartFlow();\n+    }\n+  }\n+\n+  /**\n+   * Checks if the data processing flow needs restarting, and restarts it if so. This must be called\n+   * while locked in a synchronized context and after the previous data processing flow has\n+   * completed.\n+   */\n+  private void checkRestartLocked() {\n+    if (restartNeeded) {\n+      workerHandler.obtainMessage(MSG_CALL_MAYBE_START_FLOW, this).sendToTarget();\n+    }\n+  }\n+\n+  //endregion Acknowledging cancellation and restarting\n+\n+  //region Running directives\n+  // The directive creation methods are interleaved here so the index-to-operator relation is clear.\n+\n+  private static final int END = 0;\n+  private static final int GET_FROM = 1;\n+  private static final int MERGE_IN = 2;\n+  private static final int TRANSFORM = 3;\n+  private static final int CHECK = 4;\n+  private static final int GO_TO = 5;\n+  private static final int GO_LAZY = 6;\n+  private static final int SEND_TO = 7;\n+  private static final int BIND = 8;\n+  private static final int FILTER_SUCCESS = 9;\n+\n+  /**\n+   * @param asynchronously Whether this flow is run asynchronously. True after the first goTo and\n+   *     before goLazy. This is to omit unnecessarily locking the synchronized context to check for\n+   *     cancellation, because if the flow is run synchronously, cancellation requests theoretically\n+   *     cannot be delivered here.\n+   */\n+  private void runFlowFrom(final int index, final boolean asynchronously) {\n+    final Object[] directives = this.directives;\n+    final int length = directives.length;\n+    int i = index;\n+    while (0 <= i && i < length) {\n+      int directiveType = (Integer) directives[i];\n+      if (asynchronously || directiveType == GO_TO || directiveType == GO_LAZY) {\n+        // Check cancellation before running the next directive. This needs to be done while locked.\n+        // For goTo and goLazy, because they need to change the states and suspend the flow, they\n+        // need the lock and are therefore treated specially here.\n+        synchronized (this) {\n+          if (checkCancellationLocked()) {\n+            break;\n+          }\n+          if (directiveType == GO_TO) {\n+            setPausedAtGoToLocked(i);\n+            // the actual executor delivery is done below, outside the lock, to eliminate any\n+            // deadlock possibility.\n+          } else if (directiveType == GO_LAZY) {\n+            setLazyAndEndFlowLocked(i);\n+            return;\n+          }\n+        }\n+      }\n+\n+      // A table-switch on a handful of options is a good compromise in code size and runtime\n+      // performance comparing to a full-fledged double-dispatch pattern with subclasses.\n+      switch (directiveType) {\n+        case GET_FROM:\n+          i = runGetFrom(directives, i);\n+          break;\n+        case MERGE_IN:\n+          i = runMergeIn(directives, i);\n+          break;\n+        case TRANSFORM:\n+          i = runTransform(directives, i);\n+          break;\n+        case CHECK:\n+          i = runCheck(directives, i);\n+          break;\n+        case GO_TO:\n+          i = runGoTo(directives, i);\n+          break;\n+        case SEND_TO:\n+          i = runSendTo(directives, i);\n+          break;\n+        case BIND:\n+          i = runBindWith(directives, i);\n+          break;\n+        case FILTER_SUCCESS:\n+          i = runFilterSuccess(directives, i);\n+          break;\n+        case END:\n+          i = runEnd(directives, i);\n+          break;\n+        // Missing GO_LAZY but it has already been dealt with in the synchronized block above.\n+      }\n+    }\n+  }\n+\n+  static void addGetFrom(@NonNull final Supplier supplier,\n+      @NonNull final List<Object> directives) {\n+    directives.add(GET_FROM);\n+    directives.add(supplier);\n+  }\n+\n+  private int runGetFrom(@NonNull final Object[] directives, final int index) {\n+    Supplier supplier = (Supplier) directives[index + 1];\n+    intermediateValue = checkNotNull(supplier.get());\n+    return index + 2;\n+  }\n+\n+  static void addMergeIn(@NonNull final Supplier supplier, @NonNull final Merger merger,\n+      @NonNull final List<Object> directives) {\n+    directives.add(MERGE_IN);\n+    directives.add(supplier);\n+    directives.add(merger);\n+  }\n+\n+  private int runMergeIn(@NonNull final Object[] directives, final int index) {\n+    Supplier supplier = (Supplier) directives[index + 1];\n+    Merger merger = (Merger) directives[index + 2];\n+    intermediateValue = checkNotNull(merger.merge(intermediateValue, supplier.get()));\n+    return index + 3;\n+  }\n+\n+  static void addTransform(@NonNull final Function function,\n+      @NonNull final List<Object> directives) {\n+    directives.add(TRANSFORM);\n+    directives.add(function);\n+  }\n+\n+  private int runTransform(@NonNull final Object[] directives, final int index) {\n+    Function function = (Function) directives[index + 1];\n+    intermediateValue = checkNotNull(function.apply(intermediateValue));\n+    return index + 2;\n+  }\n+\n+  static void addCheck(@NonNull final Function caseFunction,\n+      @NonNull final Predicate casePredicate,\n+      @Nullable final Function terminatingValueFunction,\n+      @NonNull final List<Object> directives) {\n+    directives.add(CHECK);\n+    directives.add(caseFunction);\n+    directives.add(casePredicate);\n+    directives.add(terminatingValueFunction);\n+  }\n+\n+  private int runCheck(@NonNull final Object[] directives, final int index) {\n+    Function caseFunction = (Function) directives[index + 1];\n+    Predicate casePredicate = (Predicate) directives[index + 2];\n+    Function terminatingValueFunction = (Function) directives[index + 3];\n+\n+    Object caseValue = caseFunction.apply(intermediateValue);\n+    if (casePredicate.apply(caseValue)) {\n+      return index + 4;\n+    } else {\n+      runTerminate(caseValue, terminatingValueFunction);\n+      return -1;\n+    }\n+  }\n+\n+  static void addGoTo(@NonNull final Executor executor,\n+      @NonNull final List<Object> directives) {\n+    directives.add(GO_TO);\n+    directives.add(executor);\n+  }\n+\n+  private int runGoTo(@NonNull final Object[] directives, final int index) {\n+    Executor executor = (Executor) directives[index + 1];\n+    executor.execute(this);\n+    return -1;\n+  }\n+\n+  private static int continueFromGoTo(@NonNull final Object[] directives, final int index) {\n+    checkState(directives[index].equals(GO_TO), \"Inconsistent directive state for goTo\");\n+    return index + 2;\n+  }\n+\n+  static void addGoLazy(@NonNull final List<Object> directives) {\n+    directives.add(GO_LAZY);\n+  }\n+\n+  private static int continueFromGoLazy(@NonNull final Object[] directives, final int index) {\n+    checkState(directives[index].equals(GO_LAZY), \"Inconsistent directive state for goLazy\");\n+    return index + 1;\n+  }\n+\n+  static void addSendTo(@NonNull final Receiver receiver,\n+      @NonNull final List<Object> directives) {\n+    directives.add(SEND_TO);\n+    directives.add(receiver);\n+  }\n+\n+  private int runSendTo(@NonNull final Object[] directives, final int index) {\n+    Receiver receiver = (Receiver) directives[index + 1];\n+    receiver.accept(intermediateValue);\n+    return index + 2;\n+  }\n+\n+  static void addBindWith(@NonNull final Supplier supplier, @NonNull final Binder binder,\n+      @NonNull final List<Object> directives) {\n+    directives.add(BIND);\n+    directives.add(supplier);\n+    directives.add(binder);\n+  }\n+\n+  private int runBindWith(@NonNull final Object[] directives, final int index) {\n+    Supplier supplier = (Supplier) directives[index + 1];\n+    Binder binder = (Binder) directives[index + 2];\n+    binder.bind(intermediateValue, supplier.get());\n+    return index + 3;\n+  }\n+\n+  static void addFilterSuccess(\n+      @Nullable final Function terminatingValueFunction, @NonNull final List<Object> directives) {\n+    directives.add(FILTER_SUCCESS);\n+    directives.add(terminatingValueFunction);\n+  }\n+\n+  private int runFilterSuccess(@NonNull final Object[] directives, final int index) {\n+    Function terminatingValueFunction = (Function) directives[index + 1];\n+\n+    Result tryValue = (Result) intermediateValue;\n+    if (tryValue.succeeded()) {\n+      intermediateValue = tryValue.get();\n+      return index + 2;\n+    } else {\n+      runTerminate(tryValue.getFailure(), terminatingValueFunction);\n+      return -1;\n+    }\n+  }\n+\n+  private void runTerminate(@NonNull final Object caseValue,\n+      @Nullable final Function terminatingValueFunction) {\n+    if (terminatingValueFunction == null) {\n+      skipAndEndFlow();\n+    } else {\n+      setNewValueAndEndFlow(checkNotNull(terminatingValueFunction.apply(caseValue)));\n+    }\n+  }\n+\n+  static void addEnd(boolean skip, @NonNull final List<Object> directives) {\n+    directives.add(END);\n+    directives.add(skip);\n+  }\n+\n+  private int runEnd(@NonNull final Object[] directives, final int index) {\n+    boolean skip = (Boolean) directives[index + 1];\n+    if (skip) {\n+      skipAndEndFlow();\n+    } else {\n+      setNewValueAndEndFlow(intermediateValue);\n+    }\n+    return -1;\n+  }\n+\n+  //endregion Running directives\n+\n+  //region Completing, pausing and resuming flow\n+\n+  private synchronized void skipAndEndFlow() {\n+    runState = IDLE;\n+    intermediateValue = initialValue; // GC the intermediate value but field must be kept non-null.\n+    checkRestartLocked();\n+  }\n+\n+  private synchronized void setNewValueAndEndFlow(@NonNull final Object newValue) {\n+    boolean wasRunningLazily = runState == RUNNING_LAZILY;\n+    runState = IDLE;\n+    intermediateValue = initialValue; // GC the intermediate value but field must be kept non-null.\n+    if (wasRunningLazily) {\n+      currentValue = newValue; // Don't notify if this new value is produced lazily\n+    } else {\n+      setNewValueLocked(newValue); // May notify otherwise\n+    }\n+    checkRestartLocked();\n+  }\n+\n+  private void setNewValueLocked(@NonNull final Object newValue) {\n+    boolean shouldNotify = notifyChecker.merge(currentValue, newValue);\n+    currentValue = newValue;\n+    if (shouldNotify) {\n+      dispatchUpdate();\n+    }\n+  }\n+\n+  private void setPausedAtGoToLocked(final int resumeIndex) {\n+    lastDirectiveIndex = resumeIndex;\n+    runState = PAUSED_AT_GO_TO;\n+  }\n+\n+  /** Called from the executor of a goTo instruction to continue processing. */\n+  @Override\n+  public void run() {\n+    Thread myThread = currentThread();\n+    int index;\n+    synchronized (this) {\n+      index = lastDirectiveIndex;\n+      checkState(runState == PAUSED_AT_GO_TO || runState == CANCEL_REQUESTED,\n+          \"Illegal call of Runnable.run()\");\n+      lastDirectiveIndex = -1;\n+\n+      if (checkCancellationLocked()) {\n+        return;\n+      }\n+      runState = RUNNING;\n+      // allow thread interruption (set this when still holding the lock)\n+      currentThread = myThread;\n+    }\n+    // leave the synchronization lock to run the rest of the flow\n+    runFlowFrom(continueFromGoTo(directives, index), true);\n+    // consume any unconsumed interrupted flag\n+    Thread.interrupted();\n+    // disallow interrupting the current thread, but chances are the next directive has started\n+    // asynchronously, so check currentThread is still this thread. This also works if a goTo\n+    // directive is given a synchronous executor, in which case the next part of the flow will\n+    // have been completed by now and currentThread will have been reset by that invocation of\n+    // runFlowFrom().\n+    synchronized (this) {\n+      if (currentThread == myThread) {\n+        currentThread = null;\n+      }\n+    }\n+  }\n+\n+  private void setLazyAndEndFlowLocked(final int resumeIndex) {\n+    lastDirectiveIndex = resumeIndex;\n+    runState = PAUSED_AT_GO_LAZY;\n+    dispatchUpdate();\n+    checkRestartLocked();\n+  }\n+\n+  @NonNull\n+  @Override\n+  public synchronized Object get() {\n+    if (runState == PAUSED_AT_GO_LAZY) {\n+      int index = lastDirectiveIndex;\n+      runState = RUNNING_LAZILY;\n+      runFlowFrom(continueFromGoLazy(directives, index), false);\n+    }\n+    return currentValue;\n+  }\n+\n+  //endregion Completing, pausing and resuming flow\n+}"},{"sha":"964061362cae4b792e1dccc81976851da0659dee","filename":"agera/src/main/java/com/google/android/agera/Condition.java","status":"added","additions":29,"deletions":0,"changes":29,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/main/java/com/google/android/agera/Condition.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/main/java/com/google/android/agera/Condition.java","contents_url":"https://api.github.com/repos/google/agera/contents/agera/src/main/java/com/google/android/agera/Condition.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,29 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera;\n+\n+/**\n+ * Determines whether a condition applies.\n+ *\n+ * <p>The {@link Conditions} class provides common conditions and related utilities.\n+ */\n+public interface Condition {\n+\n+  /**\n+   * Returns whether the condition applies.\n+   */\n+  boolean applies();\n+}"},{"sha":"050ff140831d74b2e5b81f0c92a3ed13c85458e4","filename":"agera/src/main/java/com/google/android/agera/Conditions.java","status":"added","additions":184,"deletions":0,"changes":184,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/main/java/com/google/android/agera/Conditions.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/main/java/com/google/android/agera/Conditions.java","contents_url":"https://api.github.com/repos/google/agera/contents/agera/src/main/java/com/google/android/agera/Conditions.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,184 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera;\n+\n+import static com.google.android.agera.Common.FALSE_CONDICATE;\n+import static com.google.android.agera.Common.TRUE_CONDICATE;\n+import static com.google.android.agera.Preconditions.checkNotNull;\n+\n+import android.support.annotation.NonNull;\n+\n+/**\n+ * Utility methods for obtaining {@link Condition} instances.\n+ */\n+public final class Conditions {\n+\n+  /**\n+   * Returns a {@link Condition} that always returns {@code true}.\n+   */\n+  @NonNull\n+  public static Condition trueCondition() {\n+    return TRUE_CONDICATE;\n+  }\n+\n+  /**\n+   * Returns a {@link Condition} that always returns {@code false}.\n+   */\n+  @NonNull\n+  public static Condition falseCondition() {\n+    return FALSE_CONDICATE;\n+  }\n+\n+  /**\n+   * Returns a {@link Condition} that always returns {@code value}.\n+   */\n+  @NonNull\n+  public static Condition staticCondition(final boolean value) {\n+    return value ? TRUE_CONDICATE : FALSE_CONDICATE;\n+  }\n+\n+  /**\n+   * Returns a {@link Condition} that negates the given {@code condition}.\n+   */\n+  @NonNull\n+  public static Condition not(@NonNull final Condition condition) {\n+    if (condition instanceof NegatedCondition) {\n+      return ((NegatedCondition) condition).condition;\n+    }\n+    if (condition == TRUE_CONDICATE) {\n+      return FALSE_CONDICATE;\n+    }\n+    if (condition == FALSE_CONDICATE) {\n+      return TRUE_CONDICATE;\n+    }\n+    return new NegatedCondition(condition);\n+  }\n+\n+  /**\n+   * Returns a {@link Condition} that evaluates to {@code true} if any of the given\n+   * {@code conditions} evaluates to {@code true}. If {@code conditions} is empty, the returned\n+   * {@link Condition} will always evaluate to {@code false}.\n+   */\n+  @NonNull\n+  public static Condition any(@NonNull final Condition... conditions) {\n+    return composite(conditions, falseCondition(), trueCondition());\n+  }\n+\n+  /**\n+   * Returns a {@link Condition} that evaluates to {@code true} if all of the given\n+   * {@code conditions} evaluates to {@code true}. If {@code conditions} is empty, the returned\n+   * {@link Condition} will always evaluate to {@code true}.\n+   */\n+  @NonNull\n+  public static Condition all(@NonNull final Condition... conditions) {\n+    return composite(conditions, trueCondition(), falseCondition());\n+  }\n+\n+  /**\n+   * Returns a {@link Condition} from a {@link Predicate} and a {@link Supplier}.\n+   *\n+   * <p>When applied the {@link Supplier} return value will be provided to the {@link Predicate} and\n+   * the result will be returned.\n+   * If {@link Predicates#truePredicate} or {@link Predicates#falsePredicate} is passed,\n+   * {@code supplier} will never be called.\n+   */\n+  public static <T> Condition predicateAsCondition(@NonNull final Predicate<T> predicate,\n+      @NonNull final Supplier<? extends T> supplier) {\n+    if (predicate == TRUE_CONDICATE) {\n+      return TRUE_CONDICATE;\n+    }\n+    if (predicate == FALSE_CONDICATE) {\n+      return FALSE_CONDICATE;\n+    }\n+    return new PredicateCondition<>(predicate, supplier);\n+  }\n+\n+  @NonNull\n+  private static Condition composite(@NonNull final Condition[] conditions,\n+      @NonNull final Condition defaultCondition, @NonNull final Condition definingCondition) {\n+    int nonDefaultCount = 0;\n+    Condition lastNonDefaultCondition = null;\n+    for (final Condition condition : conditions) {\n+      if (condition == definingCondition) {\n+        return definingCondition;\n+      } else if (condition != defaultCondition) {\n+        nonDefaultCount++;\n+        lastNonDefaultCondition = condition;\n+      }\n+    }\n+    if (nonDefaultCount == 0) {\n+      return defaultCondition;\n+    } else if (nonDefaultCount == 1) {\n+      return lastNonDefaultCondition;\n+    }\n+    return new CompositeCondition(conditions.clone(), definingCondition.applies());\n+  }\n+\n+  private static final class CompositeCondition implements Condition {\n+    @NonNull\n+    private final Condition[] conditions;\n+    private final boolean definingResult;\n+\n+    CompositeCondition(@NonNull final Condition[] conditions, final boolean definingResult) {\n+      this.definingResult = definingResult;\n+      this.conditions = checkNotNull(conditions);\n+    }\n+\n+    @Override\n+    public boolean applies() {\n+      for (final Condition condition : conditions) {\n+        if (condition.applies() == definingResult) {\n+          return definingResult;\n+        }\n+      }\n+      return !definingResult;\n+    }\n+  }\n+\n+  private static final class NegatedCondition implements Condition {\n+    @NonNull\n+    final Condition condition;\n+\n+    NegatedCondition(@NonNull final Condition condition) {\n+      this.condition = condition;\n+    }\n+\n+    @Override\n+    public boolean applies() {\n+      return !condition.applies();\n+    }\n+  }\n+\n+  private static final class PredicateCondition<T> implements Condition {\n+    @NonNull\n+    private final Predicate<T> predicate;\n+    @NonNull\n+    private final Supplier<? extends T> supplier;\n+\n+    PredicateCondition(@NonNull final Predicate<T> predicate,\n+        @NonNull final Supplier<? extends T> supplier) {\n+      this.predicate = checkNotNull(predicate);\n+      this.supplier = checkNotNull(supplier);\n+    }\n+\n+    @Override\n+    public boolean applies() {\n+      return predicate.apply(supplier.get());\n+    }\n+  }\n+\n+  private Conditions() {}\n+}"},{"sha":"cc2d0a206f091d422f70d9f6003691b2f499d27b","filename":"agera/src/main/java/com/google/android/agera/FailedResultException.java","status":"added","additions":29,"deletions":0,"changes":29,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/main/java/com/google/android/agera/FailedResultException.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/main/java/com/google/android/agera/FailedResultException.java","contents_url":"https://api.github.com/repos/google/agera/contents/agera/src/main/java/com/google/android/agera/FailedResultException.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,29 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera;\n+\n+import android.support.annotation.Nullable;\n+\n+/**\n+ * The exception thrown by {@link Result#get()} on a failed result. The cause of the failure can be\n+ * accessed via {@link #getCause()}.\n+ */\n+public final class FailedResultException extends IllegalStateException {\n+\n+  FailedResultException(@Nullable final Throwable cause) {\n+    super(\"Cannot get() from a failed result\", cause);\n+  }\n+}"},{"sha":"6212e5bc9710854a623945a88dcedab8d69c824d","filename":"agera/src/main/java/com/google/android/agera/Function.java","status":"added","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/main/java/com/google/android/agera/Function.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/main/java/com/google/android/agera/Function.java","contents_url":"https://api.github.com/repos/google/agera/contents/agera/src/main/java/com/google/android/agera/Function.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,32 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera;\n+\n+import android.support.annotation.NonNull;\n+\n+/**\n+ * Determines an output value based on an input value.\n+ *\n+ * <p>The {@link Functions} class provides common functions and related utilities.\n+ */\n+public interface Function<TFrom, TTo> {\n+\n+  /**\n+   * Returns the result of applying this function to {@code input}.\n+   */\n+  @NonNull\n+  TTo apply(@NonNull TFrom input);\n+}"},{"sha":"8a339d58491566a801fe9068068c5d02b1fb4c94","filename":"agera/src/main/java/com/google/android/agera/FunctionCompiler.java","status":"added","additions":208,"deletions":0,"changes":208,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/main/java/com/google/android/agera/FunctionCompiler.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/main/java/com/google/android/agera/FunctionCompiler.java","contents_url":"https://api.github.com/repos/google/agera/contents/agera/src/main/java/com/google/android/agera/FunctionCompiler.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,208 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera;\n+\n+import static com.google.android.agera.Common.IDENTITY_FUNCTION;\n+import static com.google.android.agera.Common.TRUE_CONDICATE;\n+import static com.google.android.agera.Preconditions.checkNotNull;\n+import static java.util.Collections.emptyList;\n+\n+import android.support.annotation.NonNull;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+@SuppressWarnings(\"unchecked\")\n+final class FunctionCompiler implements FunctionCompilerStates.FList, FunctionCompilerStates.FItem {\n+  @NonNull\n+  private final List<Function> functions;\n+\n+  FunctionCompiler() {\n+    this.functions = new ArrayList<>();\n+  }\n+\n+  private void addFunction(@NonNull final Function function) {\n+    if (function != IDENTITY_FUNCTION) {\n+      functions.add(function);\n+    }\n+  }\n+\n+  @NonNull\n+  @Override\n+  public Function thenApply(@NonNull final Function function) {\n+    addFunction(function);\n+    return createFunction();\n+  }\n+\n+  @NonNull\n+  private Function createFunction() {\n+    return new ChainFunction(functions.toArray(new Function[functions.size()]));\n+  }\n+\n+  @NonNull\n+  @Override\n+  public FunctionCompilerStates.FList unpack(@NonNull final Function function) {\n+    addFunction(function);\n+    return this;\n+  }\n+\n+  @NonNull\n+  @Override\n+  public FunctionCompilerStates.FItem apply(@NonNull final Function function) {\n+    addFunction(function);\n+    return this;\n+  }\n+\n+  @NonNull\n+  @Override\n+  public FunctionCompilerStates.FList morph(@NonNull Function function) {\n+    addFunction(function);\n+    return this;\n+  }\n+\n+  @NonNull\n+  @Override\n+  public FunctionCompilerStates.FList filter(@NonNull final Predicate filter) {\n+    if (filter != TRUE_CONDICATE) {\n+      addFunction(new FilterFunction(filter));\n+    }\n+    return this;\n+  }\n+\n+  @NonNull\n+  @Override\n+  public FunctionCompilerStates.FList limit(final int limit) {\n+    addFunction(new LimitFunction(limit));\n+    return this;\n+  }\n+\n+  @NonNull\n+  @Override\n+  public FunctionCompilerStates.FList map(@NonNull final Function function) {\n+    if (function != IDENTITY_FUNCTION) {\n+      addFunction(new MapFunction(function));\n+    }\n+    return this;\n+  }\n+\n+  @Override\n+  public Function thenMap(@NonNull final Function function) {\n+    map(function);\n+    return createFunction();\n+  }\n+\n+  @NonNull\n+  @Override\n+  public Function thenFilter(@NonNull final Predicate filter) {\n+    filter(filter);\n+    return createFunction();\n+  }\n+\n+  @NonNull\n+  @Override\n+  public Function thenLimit(final int limit) {\n+    limit(limit);\n+    return createFunction();\n+  }\n+\n+  private static final class LimitFunction<T> implements Function<List<T>, List<T>> {\n+    private final int limit;\n+\n+    LimitFunction(final int limit) {\n+      this.limit = limit;\n+    }\n+\n+    @NonNull\n+    @Override\n+    public List<T> apply(@NonNull final List<T> input) {\n+      if (input.size() < limit) {\n+        return input;\n+      }\n+      if (limit <= 0) {\n+        return emptyList();\n+      }\n+      return new ArrayList<>(input.subList(0, limit));\n+    }\n+  }\n+\n+  private static final class MapFunction<F, T> implements Function<List<F>, List<T>> {\n+    @NonNull\n+    private final Function<F, T> function;\n+\n+    MapFunction(@NonNull final Function<F, T> function) {\n+      this.function = checkNotNull(function);\n+    }\n+\n+    @NonNull\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public List<T> apply(@NonNull final List<F> input) {\n+      if (input.isEmpty()) {\n+        return emptyList();\n+      }\n+      final List<T> result = new ArrayList(input.size());\n+      for (final F item : input) {\n+        result.add(function.apply(item));\n+      }\n+      return result;\n+    }\n+  }\n+\n+  private static final class ChainFunction implements Function {\n+    @NonNull\n+    private final Function[] functions;\n+\n+    ChainFunction(@NonNull final Function[] functions) {\n+      this.functions = checkNotNull(functions);\n+    }\n+\n+    @NonNull\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public Object apply(@NonNull final Object input) {\n+      Object item = input;\n+      for (final Function function : functions) {\n+        item = function.apply(item);\n+      }\n+      return item;\n+    }\n+  }\n+\n+  private static final class FilterFunction<T> implements Function<List<T>, List<T>> {\n+    @NonNull\n+    private final Predicate filter;\n+\n+    FilterFunction(@NonNull final Predicate filter) {\n+      this.filter = checkNotNull(filter);\n+    }\n+\n+    @NonNull\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public List<T> apply(@NonNull final List<T> input) {\n+      if (input.isEmpty()) {\n+        return emptyList();\n+      }\n+      final List<T> result = new ArrayList(input.size());\n+      for (final T item : input) {\n+        if (filter.apply(item)) {\n+          result.add(item);\n+        }\n+      }\n+      return result;\n+    }\n+  }\n+}"},{"sha":"8afe84cb44e19934394e3dc921da90ed40fca4da","filename":"agera/src/main/java/com/google/android/agera/FunctionCompilerStates.java","status":"added","additions":129,"deletions":0,"changes":129,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/main/java/com/google/android/agera/FunctionCompilerStates.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/main/java/com/google/android/agera/FunctionCompilerStates.java","contents_url":"https://api.github.com/repos/google/agera/contents/agera/src/main/java/com/google/android/agera/FunctionCompilerStates.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,129 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera;\n+\n+import android.support.annotation.NonNull;\n+\n+import java.util.List;\n+\n+/**\n+ * Container of the compiler state interfaces supporting the declaration of {@link Function}s\n+ * using the type-safe declarative language.\n+ */\n+public interface FunctionCompilerStates {\n+\n+  /**\n+   * Methods allowed in both the {@link FItem} and {@link FList} compiler states.\n+   */\n+  interface FBase<TPrev, TFrom> {\n+\n+    /**\n+     * Adds a {@link Function} to the behavior chain to be applied to the item.\n+     *\n+     * @param function the function to apply to the item\n+     */\n+    @NonNull\n+    <TTo> FItem<TTo, TFrom> apply(@NonNull Function<? super TPrev, TTo> function);\n+\n+    /**\n+     * Adds a {@link Function} to the end of the behavior chain to be applied to the item.\n+     *\n+     * @param function the function to apply to the data\n+     */\n+    @NonNull\n+    <TTo> Function<TFrom, TTo> thenApply(@NonNull Function<? super TPrev, TTo> function);\n+  }\n+\n+  /**\n+   * Compiler state allowing to specify how the {@link Function} should modify single items.\n+   */\n+  interface FItem<TPrev, TFrom> extends FBase<TPrev, TFrom> {\n+    /**\n+     * Adds a {@link Function} to the behavior chain to unpack an item into a {@link List}, allowing\n+     * list behaviors to be used from this point on.\n+     *\n+     * @param function the unpack function\n+     */\n+    @NonNull\n+    <TTo> FList<TTo, List<TTo>, TFrom> unpack(@NonNull Function<? super TPrev, List<TTo>> function);\n+  }\n+\n+  /**\n+   * Compiler state allowing to specify how the {@link Function} should modify {@link List}s.\n+   */\n+  interface FList<TPrev, TPrevList, TFrom> extends FBase<TPrevList, TFrom> {\n+\n+    /**\n+     * Adds a {@link Function} to the behavior chain to change the entire list to a new list.\n+     *\n+     * <p>The {@code morph} directive is functionally equivalent to {@code apply}, which treats the\n+     * input list as a single item. But {@code morph} is aware of the list-typed output and allows\n+     * list behaviors to follow immediately. Since the only difference between {@link #apply} and\n+     * {@code morph} is the next state of the compiler, {@code thenMorph} does not exist since\n+     * {@link #thenApply} can be used in its place.\n+     *\n+     * @param function the function to apply to the list\n+     */\n+    @NonNull\n+    <TTo> FList<TTo, List<TTo>, TFrom> morph(@NonNull Function<List<TPrev>, List<TTo>> function);\n+\n+    /**\n+     * Adds a {@link Function} to the behavior chain to map each item into a new type.\n+     *\n+     * @param function the function to apply to each item to create a new list\n+     */\n+    @NonNull\n+    <TTo> FList<TTo, List<TTo>, TFrom> map(@NonNull Function<TPrev, TTo> function);\n+    /**\n+     * Adds a {@link Function} to the end of the behavior chain to map each item into a new type.\n+     *\n+     * @param function the function to apply to each item to create a new list\n+     */\n+    <TTo> Function<TFrom, List<TTo>> thenMap(@NonNull Function<? super TPrev, TTo> function);\n+\n+    /**\n+     * Adds a {@link Predicate} to the behavior chain to filter out items.\n+     *\n+     * @param filter the predicate to filter by\n+     */\n+    @NonNull\n+    FList<TPrev, TPrevList, TFrom> filter(@NonNull Predicate<? super TPrev> filter);\n+\n+    /**\n+     * Adds a max number of item limit to the behavior chain.\n+     *\n+     * @param limit the max number of items the list is limited to\n+     */\n+    @NonNull\n+    FList<TPrev, TPrevList, TFrom> limit(int limit);\n+\n+    /**\n+     * Adds a {@link Predicate} to the end of the behavior chain to filter out items.\n+     *\n+     * @param filter the predicate to filter by\n+     */\n+    @NonNull\n+    Function<TFrom, TPrevList> thenFilter(@NonNull Predicate<? super TPrev> filter);\n+\n+    /**\n+     * Adds a max number of item limit to the end of the behavior chain.\n+     *\n+     * @param limit the max number of items the list is limited to\n+     */\n+    @NonNull\n+    Function<TFrom, TPrevList> thenLimit(int limit);\n+  }\n+}"},{"sha":"ffa615613fad76c42663fb0f60d9f3ef57d3bb82","filename":"agera/src/main/java/com/google/android/agera/Functions.java","status":"added","additions":103,"deletions":0,"changes":103,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/main/java/com/google/android/agera/Functions.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/main/java/com/google/android/agera/Functions.java","contents_url":"https://api.github.com/repos/google/agera/contents/agera/src/main/java/com/google/android/agera/Functions.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,103 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera;\n+\n+import static com.google.android.agera.Common.IDENTITY_FUNCTION;\n+import static com.google.android.agera.Preconditions.checkNotNull;\n+\n+import com.google.android.agera.Common.StaticProducer;\n+import com.google.android.agera.FunctionCompilerStates.FItem;\n+import com.google.android.agera.FunctionCompilerStates.FList;\n+\n+import android.support.annotation.NonNull;\n+import android.support.annotation.Nullable;\n+\n+import java.util.List;\n+\n+/**\n+ * Utility methods for obtaining {@link Function} instances.\n+ */\n+public final class Functions {\n+\n+  /**\n+   * Returns a {@link Function} that returns {@code object} as the result of each\n+   * {@link Function#apply} function call.\n+   */\n+  @NonNull\n+  public static <F, T> Function<F, T> staticFunction(@NonNull final T object) {\n+    return new StaticProducer<>(object);\n+  }\n+\n+  /**\n+   * Returns a {@link Function} that returns the result of {@code supplier} as the result of each\n+   * {@link Function#apply} function call.\n+   */\n+  @NonNull\n+  public static <F, T> Function<F, T> supplierAsFunction(\n+      @NonNull final Supplier<? extends T> supplier) {\n+    return new SupplierAsFunction<>(supplier);\n+  }\n+\n+  /**\n+   * Returns a {@link Function} that passes on the {@link Function} input as output.\n+   */\n+  @NonNull\n+  public static <T> Function<T, T> identityFunction() {\n+    @SuppressWarnings(\"unchecked\")\n+    final Function<T, T> identityFunction = (Function<T, T>) IDENTITY_FUNCTION;\n+    return identityFunction;\n+  }\n+\n+  /**\n+   * Starts describing {@link Function} that starts with a single item.\n+   *\n+   * @return the next {@link FunctionCompilerStates} state\n+   */\n+  @NonNull\n+  @SuppressWarnings({\"unchecked\", \"UnusedParameters\"})\n+  public static <F> FItem<F, F> functionFrom(@Nullable Class<F> from) {\n+    return new FunctionCompiler();\n+  }\n+\n+  /**\n+   * Starts describing a {@link Function} that starts with a {@link List} of items.\n+   *\n+   * @return the next {@link FunctionCompilerStates} state\n+   */\n+  @NonNull\n+  @SuppressWarnings({\"unchecked\", \"UnusedParameters\"})\n+  public static <F> FList<F, List<F>, List<F>> functionFromListOf(\n+      @Nullable final Class<F> from) {\n+    return new FunctionCompiler();\n+  }\n+\n+  private static final class SupplierAsFunction<F, T> implements Function<F, T> {\n+    @NonNull\n+    private final Supplier<? extends T> supplier;\n+\n+    SupplierAsFunction(@NonNull final Supplier<? extends T> supplier) {\n+      this.supplier = checkNotNull(supplier);\n+    }\n+\n+    @NonNull\n+    @Override\n+    public T apply(@NonNull F from) {\n+      return supplier.get();\n+    }\n+  }\n+\n+  private Functions() {}\n+}"},{"sha":"19cbd4d0e5152adcd051473b20e43806f8045ac8","filename":"agera/src/main/java/com/google/android/agera/Merger.java","status":"added","additions":30,"deletions":0,"changes":30,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/main/java/com/google/android/agera/Merger.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/main/java/com/google/android/agera/Merger.java","contents_url":"https://api.github.com/repos/google/agera/contents/agera/src/main/java/com/google/android/agera/Merger.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,30 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera;\n+\n+import android.support.annotation.NonNull;\n+\n+/**\n+ * Takes two inputs and merges them into one output.\n+ */\n+public interface Merger<TFirst, TSecond, TTo> {\n+\n+  /**\n+   * Computes the return value merged from the two given input values.\n+   */\n+  @NonNull\n+  TTo merge(@NonNull TFirst first, @NonNull TSecond second);\n+}"},{"sha":"ca9337fc6c09c27b71d8011ac9d3bc2509e0c96a","filename":"agera/src/main/java/com/google/android/agera/Mergers.java","status":"added","additions":56,"deletions":0,"changes":56,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/main/java/com/google/android/agera/Mergers.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/main/java/com/google/android/agera/Mergers.java","contents_url":"https://api.github.com/repos/google/agera/contents/agera/src/main/java/com/google/android/agera/Mergers.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera;\n+\n+import com.google.android.agera.Common.StaticProducer;\n+\n+import android.support.annotation.NonNull;\n+\n+/**\n+ * Utility methods for obtaining {@link Merger} instances.\n+ */\n+public final class Mergers {\n+\n+  private static final ObjectsUnequalMerger OBJECTS_UNEQUAL_MERGER = new ObjectsUnequalMerger();\n+\n+  /**\n+   * Returns a {@link Merger} that outputs the given {@code value} regardless of the input values.\n+   */\n+  @NonNull\n+  public static <TFirst, TSecond, TTo> Merger<TFirst, TSecond, TTo> staticMerger(\n+      @NonNull final TTo value) {\n+    return new StaticProducer<>(value);\n+  }\n+\n+  /**\n+   * Returns a {@link Merger} that outputs the <i>negated</i> result of {@link Object#equals} called\n+   * on the first input value, using the second input value as the argument of that call.\n+   */\n+  @NonNull\n+  public static Merger<Object, Object, Boolean> objectsUnequal() {\n+    return OBJECTS_UNEQUAL_MERGER;\n+  }\n+\n+  private static final class ObjectsUnequalMerger implements Merger<Object, Object, Boolean> {\n+    @NonNull\n+    @Override\n+    public Boolean merge(@NonNull final Object oldValue, @NonNull final Object newValue) {\n+      return !oldValue.equals(newValue);\n+    }\n+  }\n+\n+  private Mergers() {}\n+}"},{"sha":"75fc6d9e371fa4f78f38912174e698a284e8b0f0","filename":"agera/src/main/java/com/google/android/agera/MutableRepository.java","status":"added","additions":25,"deletions":0,"changes":25,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/main/java/com/google/android/agera/MutableRepository.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/main/java/com/google/android/agera/MutableRepository.java","contents_url":"https://api.github.com/repos/google/agera/contents/agera/src/main/java/com/google/android/agera/MutableRepository.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,25 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera;\n+\n+/**\n+ * A {@link Repository} that can receive new data through {@link Receiver#accept(Object)}.\n+ *\n+ * <p>If the new data does not {@linkplain Object#equals equal} to the old data, the added\n+ * {@link Updatable}s will be notified. {@link MutableRepository#accept(Object)} can be called on\n+ * any thread.\n+ */\n+public interface MutableRepository<T> extends Repository<T>, Receiver<T> {}"},{"sha":"286fd407f8c2fdc4a305cf9eb41804ff27bd98eb","filename":"agera/src/main/java/com/google/android/agera/Observable.java","status":"added","additions":51,"deletions":0,"changes":51,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/main/java/com/google/android/agera/Observable.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/main/java/com/google/android/agera/Observable.java","contents_url":"https://api.github.com/repos/google/agera/contents/agera/src/main/java/com/google/android/agera/Observable.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera;\n+\n+import android.support.annotation.NonNull;\n+\n+/**\n+ * Notifies added {@link Updatable}s when something happens.\n+ *\n+ * <p>Addition and removal of {@link Updatable}s has to be balanced. Multiple add of the same\n+ * {@link Updatable} is not allowed and shall result in an {@link IllegalStateException}. Removing\n+ * non-added {@link Updatable}s shall also result in an {@link IllegalStateException}.\n+ * Forgetting to remove an {@link Updatable} may result in memory/resource leaks.\n+ *\n+ * <p>Without any {@link Updatable}s added an {@code Observable} may temporarily be\n+ * <i>inactive</i>. {@code Observable} implementations that provide values, perhaps through a\n+ * {@link Supplier}, do not guarantee an up to date value when <i>inactive</i>. In order to ensure\n+ * that the {@code Observable} is <i>active</i>, add an {@link Updatable}.\n+ *\n+ * <p>Added {@link Updatable}s shall be called back on the same thread they were added from.\n+ */\n+public interface Observable {\n+\n+  /**\n+   * Adds {@code updatable} to the {@code Observable}.\n+   *\n+   * @throws IllegalStateException if the {@link Updatable} was already added or if it was called\n+   * from a non-Looper thread\n+   */\n+  void addUpdatable(@NonNull Updatable updatable);\n+\n+  /**\n+   * Removes {@code updatable} from the {@code Observable}.\n+   *\n+   * @throws IllegalStateException if the {@link Updatable} was not added\n+   */\n+  void removeUpdatable(@NonNull Updatable updatable);\n+}"},{"sha":"139c2ef501148c34b5fa4df53f6af7555c0b9bb2","filename":"agera/src/main/java/com/google/android/agera/Observables.java","status":"added","additions":280,"deletions":0,"changes":280,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/main/java/com/google/android/agera/Observables.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/main/java/com/google/android/agera/Observables.java","contents_url":"https://api.github.com/repos/google/agera/contents/agera/src/main/java/com/google/android/agera/Observables.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,280 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera;\n+\n+import static com.google.android.agera.Common.workerHandler;\n+import static com.google.android.agera.Preconditions.checkNotNull;\n+\n+import com.google.android.agera.Common.WorkerHandler;\n+\n+import android.os.Looper;\n+import android.os.SystemClock;\n+import android.support.annotation.NonNull;\n+import android.support.annotation.Nullable;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Utility methods for obtaining {@link Observable} instances.\n+ *\n+ * <p>Any {@link Observable} created by this class have to be created from a {@link Looper} thread\n+ * or they will throw an {@link IllegalStateException}\n+ *\n+ * <p>{@link UpdateDispatcher}s created by this class will for any injected\n+ * {@link ActivationHandler} call {@link ActivationHandler#observableActivated(UpdateDispatcher)}\n+ * and {@link ActivationHandler#observableDeactivated(UpdateDispatcher)} on the thread the\n+ * {@link UpdateDispatcher} was created on.\n+ */\n+public final class Observables {\n+\n+  /**\n+   * Returns an {@link Observable} that notifies added {@link Updatable}s that any of the\n+   * {@code observables} have changed.\n+   */\n+  @NonNull\n+  public static Observable compositeObservable(@NonNull final Observable... observables) {\n+    if (observables.length == 0) {\n+      return new CompositeObservable();\n+    }\n+\n+    if (observables.length == 1) {\n+      final Observable singleObservable = observables[0];\n+      if (singleObservable instanceof CompositeObservable) {\n+        return new CompositeObservable(\n+            ((CompositeObservable) singleObservable).observables);\n+      } else {\n+        return new CompositeObservable(singleObservable);\n+      }\n+    }\n+\n+    final List<Observable> flattenedDedupedObservables = new ArrayList<>();\n+    for (final Observable observable : observables) {\n+      if (observable instanceof CompositeObservable) {\n+        for (Observable subObservable : ((CompositeObservable) observable).observables) {\n+          if (!flattenedDedupedObservables.contains(subObservable)) {\n+            flattenedDedupedObservables.add(subObservable);\n+          }\n+        }\n+      } else {\n+        if (!flattenedDedupedObservables.contains(observable)) {\n+          flattenedDedupedObservables.add(observable);\n+        }\n+      }\n+    }\n+    return new CompositeObservable(\n+        flattenedDedupedObservables.toArray(new Observable[flattenedDedupedObservables.size()]));\n+  }\n+\n+  /**\n+   * Returns an {@link Observable} that notifies added {@link Updatable}s that any of the\n+   * {@code observables} have changed only if the {@code condition} applies.\n+   */\n+  @NonNull\n+  public static Observable conditionalObservable(\n+      @NonNull final Condition condition, @NonNull final Observable... observables) {\n+    return new ConditionalObservable(compositeObservable(observables), condition);\n+  }\n+\n+  /**\n+   * Returns an {@link Observable} that notifies added {@link Updatable}s that the\n+   * {@code observable} has changed, but never more often than every\n+   * {@code shortestUpdateWindowMillis}.\n+   */\n+  @NonNull\n+  public static Observable perMillisecondObservable(\n+      final int shortestUpdateWindowMillis, @NonNull final Observable observable) {\n+    return new LowPassFilterObservable(shortestUpdateWindowMillis, observable);\n+  }\n+\n+  /**\n+   * Returns an {@link Observable} that notifies added {@link Updatable}s that the\n+   * {@code observable} has changed, but never more often than once per {@link Looper} cycle.\n+   */\n+  @NonNull\n+  public static Observable perLoopObservable(@NonNull final Observable observable) {\n+    return perMillisecondObservable(0, observable);\n+  }\n+\n+  /**\n+   * Returns an asynchronous {@link UpdateDispatcher}.\n+   *\n+   * <p>{@link UpdateDispatcher#update()} can be called from any thread\n+   * {@link UpdateDispatcher#addUpdatable(Updatable)} and\n+   * {@link UpdateDispatcher#removeUpdatable(Updatable)} can only be called from {@link Looper}\n+   * threads. Any added {@link Updatable} will be called on the thread they were added from.\n+   */\n+  @NonNull\n+  public static UpdateDispatcher updateDispatcher() {\n+    return new AsyncUpdateDispatcher(null);\n+  }\n+\n+  /**\n+   * Returns an asynchronous {@link UpdateDispatcher}.\n+   *\n+   * <p>See {@link #updateDispatcher()}\n+   *\n+   * <p>{@code updatablesChanged} will be called on the same thread as the {@link UpdateDispatcher}\n+   * was created from when the first {@link Updatable} was added / last {@link Updatable} was\n+   * removed.\n+   *\n+   * <p>This {@link UpdateDispatcher} is useful when implementing {@link Observable} services with\n+   * an <i>active</i>/<i>inactive</i> lifecycle.\n+   */\n+  @NonNull\n+  public static UpdateDispatcher updateDispatcher(\n+      @NonNull final ActivationHandler activationHandler) {\n+    return new AsyncUpdateDispatcher(activationHandler);\n+  }\n+\n+  private static final class CompositeObservable extends BaseObservable implements Updatable {\n+    @NonNull\n+    private final Observable[] observables;\n+\n+    CompositeObservable(@NonNull final Observable... observables) {\n+      this.observables = observables;\n+    }\n+\n+    @Override\n+    protected void observableActivated() {\n+      for (final Observable observable : observables) {\n+        observable.addUpdatable(this);\n+      }\n+    }\n+\n+    @Override\n+    protected void observableDeactivated() {\n+      for (final Observable observable : observables) {\n+        observable.removeUpdatable(this);\n+      }\n+    }\n+\n+    @Override\n+    public void update() {\n+      dispatchUpdate();\n+    }\n+  }\n+\n+  private static final class ConditionalObservable extends BaseObservable implements Updatable {\n+    @NonNull\n+    private final Observable observable;\n+    @NonNull\n+    private final Condition condition;\n+\n+    ConditionalObservable(@NonNull final Observable observable,\n+        @NonNull final Condition condition) {\n+      this.observable = checkNotNull(observable);\n+      this.condition = checkNotNull(condition);\n+    }\n+\n+    @Override\n+    protected void observableActivated() {\n+      observable.addUpdatable(this);\n+    }\n+\n+    @Override\n+    protected void observableDeactivated() {\n+      observable.removeUpdatable(this);\n+    }\n+\n+    @Override\n+    public void update() {\n+      if (condition.applies()) {\n+        dispatchUpdate();\n+      }\n+    }\n+  }\n+\n+  static final class LowPassFilterObservable extends BaseObservable implements Updatable {\n+    @NonNull\n+    private final Observable observable;\n+    @NonNull\n+    private final WorkerHandler workerHandler;\n+    private final int shortestUpdateWindowMillis;\n+\n+    private long lastUpdateTimestamp;\n+\n+    LowPassFilterObservable(final int shortestUpdateWindowMillis,\n+        @NonNull final Observable observable) {\n+      this.shortestUpdateWindowMillis = shortestUpdateWindowMillis;\n+      this.observable = checkNotNull(observable);\n+      this.workerHandler = workerHandler();\n+    }\n+\n+    @Override\n+    protected void observableActivated() {\n+      observable.addUpdatable(this);\n+    }\n+\n+    @Override\n+    protected void observableDeactivated() {\n+      observable.removeUpdatable(this);\n+      workerHandler.removeMessages(WorkerHandler.MSG_CALL_LOW_PASS_UPDATE, this);\n+    }\n+\n+    @Override\n+    public void update() {\n+      workerHandler.sendMessageDelayed(\n+          workerHandler.obtainMessage(WorkerHandler.MSG_CALL_LOW_PASS_UPDATE, this), (long) 0);\n+    }\n+\n+    void lowPassUpdate() {\n+      workerHandler.removeMessages(WorkerHandler.MSG_CALL_LOW_PASS_UPDATE, this);\n+      final long elapsedRealtimeMillis = SystemClock.elapsedRealtime();\n+      final long timeFromLastUpdate = elapsedRealtimeMillis - lastUpdateTimestamp;\n+      if (timeFromLastUpdate >= shortestUpdateWindowMillis) {\n+        lastUpdateTimestamp = elapsedRealtimeMillis;\n+        dispatchUpdate();\n+      } else {\n+        workerHandler.sendMessageDelayed(\n+            workerHandler.obtainMessage(WorkerHandler.MSG_CALL_LOW_PASS_UPDATE, this),\n+            shortestUpdateWindowMillis - timeFromLastUpdate);\n+      }\n+    }\n+  }\n+\n+  private static final class AsyncUpdateDispatcher extends BaseObservable\n+      implements UpdateDispatcher {\n+\n+    @Nullable\n+    private final ActivationHandler activationHandler;\n+\n+    private AsyncUpdateDispatcher(@Nullable ActivationHandler activationHandler) {\n+      this.activationHandler = activationHandler;\n+    }\n+\n+    @Override\n+    protected void observableActivated() {\n+      if (activationHandler != null) {\n+        activationHandler.observableActivated(this);\n+      }\n+    }\n+\n+    @Override\n+    protected void observableDeactivated() {\n+      if (activationHandler != null) {\n+        activationHandler.observableDeactivated(this);\n+      }\n+    }\n+\n+    @Override\n+    public void update() {\n+      dispatchUpdate();\n+    }\n+  }\n+\n+  private Observables() {}\n+}"},{"sha":"22f8c2eac16b8dece97eb3577caec78b5237b96c","filename":"agera/src/main/java/com/google/android/agera/Preconditions.java","status":"added","additions":47,"deletions":0,"changes":47,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/main/java/com/google/android/agera/Preconditions.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/main/java/com/google/android/agera/Preconditions.java","contents_url":"https://api.github.com/repos/google/agera/contents/agera/src/main/java/com/google/android/agera/Preconditions.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera;\n+\n+import android.support.annotation.NonNull;\n+import android.support.annotation.Nullable;\n+\n+/**\n+ * Precondition checks.\n+ */\n+public final class Preconditions {\n+  public static void checkState(final boolean expression, @NonNull final String errorMessage) {\n+    if (!expression) {\n+      throw new IllegalStateException(errorMessage);\n+    }\n+  }\n+\n+  public static void checkArgument(final boolean expression, @NonNull final String errorMessage) {\n+    if (!expression) {\n+      throw new IllegalArgumentException(errorMessage);\n+    }\n+  }\n+\n+  @SuppressWarnings(\"ConstantConditions\")\n+  @NonNull\n+  public static <T> T checkNotNull(@NonNull final T object) {\n+    if (object == null) {\n+      throw new NullPointerException();\n+    }\n+    return object;\n+  }\n+\n+  private Preconditions() {}\n+}"},{"sha":"68d167e97c791840de089f0b4ab8f4b91dd283c3","filename":"agera/src/main/java/com/google/android/agera/Predicate.java","status":"added","additions":31,"deletions":0,"changes":31,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/main/java/com/google/android/agera/Predicate.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/main/java/com/google/android/agera/Predicate.java","contents_url":"https://api.github.com/repos/google/agera/contents/agera/src/main/java/com/google/android/agera/Predicate.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,31 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera;\n+\n+import android.support.annotation.NonNull;\n+\n+/**\n+ * Determines a true or false value for a given input.\n+ *\n+ * <p>The {@link Predicates} class provides common predicates and related utilities.\n+ */\n+public interface Predicate<T> {\n+\n+  /**\n+   * Returns whether the predicate applies to the input {@code value}.\n+   */\n+  boolean apply(@NonNull T value);\n+}"},{"sha":"a030f1dc6c19a88da125d91db25e392efc1ec8ff","filename":"agera/src/main/java/com/google/android/agera/Predicates.java","status":"added","additions":243,"deletions":0,"changes":243,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/main/java/com/google/android/agera/Predicates.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/main/java/com/google/android/agera/Predicates.java","contents_url":"https://api.github.com/repos/google/agera/contents/agera/src/main/java/com/google/android/agera/Predicates.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,243 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera;\n+\n+import static com.google.android.agera.Common.FALSE_CONDICATE;\n+import static com.google.android.agera.Common.TRUE_CONDICATE;\n+import static com.google.android.agera.Preconditions.checkNotNull;\n+\n+import android.support.annotation.NonNull;\n+import android.text.TextUtils;\n+\n+/**\n+ * Utility methods for obtaining {@link Predicate} instances.\n+ */\n+public final class Predicates {\n+  private static final Predicate<CharSequence> EMPTY_STRING_PREDICATE = new EmptyStringPredicate();\n+\n+  /**\n+   * Returns a {@link Predicate} from a {@link Condition}.\n+   *\n+   * <p>When applied the {@link Predicate} input parameter will be ignored and the result of\n+   * {@code condition} will be returned.\n+   */\n+  @NonNull\n+  public static <T> Predicate<T> conditionAsPredicate(@NonNull final Condition condition) {\n+    if (condition == TRUE_CONDICATE) {\n+      return truePredicate();\n+    }\n+    if (condition == FALSE_CONDICATE) {\n+      return falsePredicate();\n+    }\n+    return new ConditionAsPredicate<>(condition);\n+  }\n+\n+  /**\n+   * Returns a {@link Predicate} that always returns {@code true}.\n+   */\n+  @NonNull\n+  @SuppressWarnings(\"unchecked\")\n+  public static <T> Predicate<T> truePredicate() {\n+    return TRUE_CONDICATE;\n+  }\n+\n+  /**\n+   * Returns a {@link Predicate} that always returns {@code false}.\n+   */\n+  @NonNull\n+  @SuppressWarnings(\"unchecked\")\n+  public static <T> Predicate<T> falsePredicate() {\n+    return FALSE_CONDICATE;\n+  }\n+\n+  /**\n+   * Returns a {@link Predicate} that indicates whether {@code object} is equal to the\n+   * {@link Predicate} input.\n+   */\n+  @NonNull\n+  public static <T> Predicate<T> equalTo(@NonNull final T object) {\n+    return new EqualToPredicate<>(object);\n+  }\n+\n+  /**\n+   * Returns a {@link Predicate} that indicates whether the {@link Predicate} input is an\n+   * instance of {@code type}.\n+   */\n+  @NonNull\n+  public static <T> Predicate<T> instanceOf(@NonNull final Class<?> type) {\n+    return new InstanceOfPredicate<>(type);\n+  }\n+\n+  /**\n+   * Returns a {@link Predicate} that indicates whether the {@link Predicate} input is an\n+   * empty {@link CharSequence}.\n+   */\n+  @NonNull\n+  public static Predicate<CharSequence> emptyString() {\n+    return EMPTY_STRING_PREDICATE;\n+  }\n+\n+  /**\n+   * Returns a {@link Predicate} that negates {@code predicate}.\n+   */\n+  @NonNull\n+  public static <T> Predicate<T> not(@NonNull final Predicate<T> predicate) {\n+    if (predicate instanceof NegatedPredicate) {\n+      return ((NegatedPredicate<T>) predicate).predicate;\n+    }\n+    if (predicate == truePredicate()) {\n+      return falsePredicate();\n+    }\n+    if (predicate == falsePredicate()) {\n+      return truePredicate();\n+    }\n+    return new NegatedPredicate<>(predicate);\n+  }\n+\n+  /**\n+   * Returns a {@link Predicate} that evaluates to {@code true} if any of the given\n+   * {@code predicates} evaluates to {@code true}. If {@code predicates} is empty, the returned\n+   * {@link Predicate} will always evaluate to {@code false}.\n+   */\n+  @SuppressWarnings(\"unchecked\")\n+  @SafeVarargs\n+  @NonNull\n+  public static <T> Predicate<T> any(@NonNull final Predicate<? super T>... predicates) {\n+    return composite(predicates, falsePredicate(), truePredicate(), true);\n+  }\n+\n+  /**\n+   * Returns a {@link Predicate} that evaluates to {@code true} if all of the given\n+   * {@code conditions} evaluates to {@code true}. If {@code conditions} is empty, the returned\n+   * {@link Condition} will always evaluate to {@code true}.\n+   */\n+  @SafeVarargs\n+  @NonNull\n+  @SuppressWarnings(\"unchecked\")\n+  public static <T> Predicate<T> all(@NonNull final Predicate<? super T>... predicates) {\n+    return composite(predicates, truePredicate(), falsePredicate(), false);\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  @NonNull\n+  private static Predicate composite(@NonNull final Predicate[] predicates,\n+      @NonNull final Predicate defaultPredicate, @NonNull final Predicate definingPredicate,\n+      final boolean definingResult) {\n+    int nonDefaultCount = 0;\n+    Predicate lastNonDefaultPredicate = null;\n+    for (final Predicate predicate : predicates) {\n+      if (predicate == definingPredicate) {\n+        return definingPredicate;\n+      } else if (predicate != defaultPredicate) {\n+        nonDefaultCount++;\n+        lastNonDefaultPredicate = predicate;\n+      }\n+    }\n+    if (nonDefaultCount == 0) {\n+      return defaultPredicate;\n+    } else if (nonDefaultCount == 1) {\n+      return lastNonDefaultPredicate;\n+    }\n+    return new CompositePredicate<>(predicates.clone(), definingResult);\n+  }\n+\n+  private static final class CompositePredicate<T> implements Predicate<T> {\n+    @NonNull\n+    private final Predicate<T>[] predicates;\n+    private final boolean definingResult;\n+\n+    CompositePredicate(@NonNull final Predicate<T>[] predicates, final boolean definingResult) {\n+      this.definingResult = definingResult;\n+      this.predicates = checkNotNull(predicates);\n+    }\n+\n+    @Override\n+    public boolean apply(@NonNull final T value) {\n+      for (final Predicate<T> predicate : predicates) {\n+        if (predicate.apply(value) == definingResult) {\n+          return definingResult;\n+        }\n+      }\n+      return !definingResult;\n+    }\n+  }\n+\n+  private static final class EmptyStringPredicate implements Predicate<CharSequence> {\n+\n+    @Override\n+    public boolean apply(@NonNull final CharSequence input) {\n+      return TextUtils.isEmpty(input);\n+    }\n+  }\n+\n+  private static final class NegatedPredicate<T> implements Predicate<T> {\n+    @NonNull\n+    private final Predicate<T> predicate;\n+\n+    NegatedPredicate(@NonNull final Predicate<T> predicate) {\n+      this.predicate = checkNotNull(predicate);\n+    }\n+\n+    @Override\n+    public boolean apply(@NonNull final T t) {\n+      return !predicate.apply(t);\n+    }\n+  }\n+\n+  private static final class ConditionAsPredicate<T> implements Predicate<T> {\n+    @NonNull\n+    private final Condition condition;\n+\n+    ConditionAsPredicate(@NonNull final Condition condition) {\n+      this.condition = checkNotNull(condition);\n+    }\n+\n+    @Override\n+    public boolean apply(@NonNull T input) {\n+      return condition.applies();\n+    }\n+  }\n+\n+  private static final class InstanceOfPredicate<T> implements Predicate<T> {\n+    @NonNull\n+    private final Class<?> type;\n+\n+    InstanceOfPredicate(@NonNull final Class<?> type) {\n+      this.type = checkNotNull(type);\n+    }\n+\n+    @Override\n+    public boolean apply(@NonNull final T input) {\n+      return type.isAssignableFrom(input.getClass());\n+    }\n+  }\n+\n+  private static final class EqualToPredicate<T> implements Predicate<T> {\n+    @NonNull\n+    private final T object;\n+\n+    EqualToPredicate(@NonNull final T object) {\n+      this.object = checkNotNull(object);\n+    }\n+\n+    @Override\n+    public boolean apply(@NonNull final T input) {\n+      return input.equals(object);\n+    }\n+  }\n+\n+  private Predicates() {}\n+}"},{"sha":"45d48b2d4de12009ed098c60477c5905cc3e50b5","filename":"agera/src/main/java/com/google/android/agera/Receiver.java","status":"added","additions":29,"deletions":0,"changes":29,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/main/java/com/google/android/agera/Receiver.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/main/java/com/google/android/agera/Receiver.java","contents_url":"https://api.github.com/repos/google/agera/contents/agera/src/main/java/com/google/android/agera/Receiver.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,29 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera;\n+\n+import android.support.annotation.NonNull;\n+\n+/**\n+ * A receiver of objects.\n+ */\n+public interface Receiver<T> {\n+\n+  /**\n+   * Accepts the given {@code value}.\n+   */\n+  void accept(@NonNull T value);\n+}"},{"sha":"5fd6ebfd23dc9613a623155319633c5a0643690e","filename":"agera/src/main/java/com/google/android/agera/Repositories.java","status":"added","additions":101,"deletions":0,"changes":101,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/main/java/com/google/android/agera/Repositories.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/main/java/com/google/android/agera/Repositories.java","contents_url":"https://api.github.com/repos/google/agera/contents/agera/src/main/java/com/google/android/agera/Repositories.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,101 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera;\n+\n+import static com.google.android.agera.Observables.updateDispatcher;\n+import static com.google.android.agera.Preconditions.checkNotNull;\n+import static com.google.android.agera.Preconditions.checkState;\n+\n+import com.google.android.agera.RepositoryCompilerStates.REventSource;\n+\n+import android.os.Looper;\n+import android.support.annotation.NonNull;\n+\n+/**\n+ * Utility methods for obtaining {@link Repository} instances.\n+ *\n+ * <p>Any {@link Repository} created by this class have to be created from a {@link Looper} thread\n+ * or they will throw an {@link IllegalStateException}\n+ */\n+public final class Repositories {\n+\n+  /**\n+   * Returns a static {@link Repository} of the given {@code object}.\n+   */\n+  @NonNull\n+  public static <T> Repository<T> repository(@NonNull final T object) {\n+    return new SimpleRepository<>(object, false);\n+  }\n+\n+  /**\n+   * Starts the declaration of a compiled repository. See more at {@link RepositoryCompilerStates}.\n+   */\n+  @NonNull\n+  public static <T> REventSource<T, T> repositoryWithInitialValue(@NonNull final T initialValue) {\n+    return RepositoryCompiler.repositoryWithInitialValue(initialValue);\n+  }\n+\n+  /**\n+   * Returns a {@link MutableRepository} with the given {@code object} as the initial data.\n+   */\n+  @NonNull\n+  public static <T> MutableRepository<T> mutableRepository(@NonNull final T object) {\n+    return new SimpleRepository<>(object, true);\n+  }\n+\n+  private static final class SimpleRepository<T> implements MutableRepository<T> {\n+    private final boolean mutable;\n+    @NonNull\n+    private final UpdateDispatcher updateDispatcher;\n+    @NonNull\n+    private T reference;\n+\n+    SimpleRepository(@NonNull final T reference, boolean mutable) {\n+      this.mutable = mutable;\n+      this.updateDispatcher = updateDispatcher();\n+      this.reference = checkNotNull(reference);\n+    }\n+\n+    @NonNull\n+    @Override\n+    public synchronized T get() {\n+      return reference;\n+    }\n+\n+    @Override\n+    public synchronized void accept(@NonNull final T reference) {\n+      checkState(mutable, \"So you cast me?\");\n+      if (this.reference.equals(checkNotNull(reference))) {\n+        // Keep the old reference to have a slight performance edge if GC is generational.\n+        return;\n+      }\n+      this.reference = reference;\n+      updateDispatcher.update();\n+    }\n+\n+    @Override\n+    public void addUpdatable(@NonNull final Updatable updatable) {\n+      updateDispatcher.addUpdatable(updatable);\n+    }\n+\n+    @Override\n+    public void removeUpdatable(@NonNull final Updatable updatable) {\n+      updateDispatcher.removeUpdatable(updatable);\n+    }\n+  }\n+\n+  private Repositories() {}\n+}"},{"sha":"930e899543443f72a2c43b51794323ef7ece3606","filename":"agera/src/main/java/com/google/android/agera/Repository.java","status":"added","additions":49,"deletions":0,"changes":49,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/main/java/com/google/android/agera/Repository.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/main/java/com/google/android/agera/Repository.java","contents_url":"https://api.github.com/repos/google/agera/contents/agera/src/main/java/com/google/android/agera/Repository.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,49 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera;\n+\n+/**\n+ * An {@link Observable} {@link Supplier} of data.\n+ *\n+ * <p>As the data contained in the {@code Repository} changes, the added {@link Updatable}s will be\n+ * notified of these changes and the {@link Supplier} will return the new data.\n+ *\n+ * <p>A {@code Repository} can either be implemented as\n+ * <ul>\n+ *   <li><i>Direct</i> - The contained data is always available, or can be calculated synchronously\n+ *   <li><i>Deferred</i> - The contained data is calculated/fetched asynchronously\n+ * </ul>\n+ *\n+ * <p>A {@code Repository} thus have two primary states (in addition to the different state of the\n+ * data it contains)\n+ * <ul>\n+ *   <li><i>Inactive</i> - There are no added {@link Updatable}s and the {@link Repository} is\n+ *   <i>deferred</i>. The {@link Repository} may choose to free up data to save memory and the\n+ *   data it returns calling {@link Repository#get()} will not be fresh.\n+ *   <li><i>Active</i> - There are added {@link Updatable}s or the {@link Repository} is\n+ *   <i>direct</i>. The {@link Repository} is keeping it's data updated based on external events.\n+ * </ul>\n+ *\n+ * <p>A <i>direct</i> {@code Repository} is always <i>active</i>.\n+ * A <i>deferred</i> {@code Repository} is <i>inactive</i> until an {@link Updatable} is added. As\n+ * the {@code Repository} becomes <i>active</i>, the added {@link Updatable}s will be notified and\n+ * the fresh data can be fetched using {@link Supplier#get()}.\n+ *\n+ * <p>When using the {@code Repository} interface it is not possible to know if the implementation\n+ * is <i>direct</i> or <i>deferred</i>. It is therefore important to always add an {@link Updatable}\n+ * to wake up the {@code Repository} when it is needed.\n+ */\n+public interface Repository<T> extends Observable, Supplier<T> {}"},{"sha":"4ef15f96b28caa719c903f2d2cf892350384a22c","filename":"agera/src/main/java/com/google/android/agera/RepositoryCompiler.java","status":"added","additions":429,"deletions":0,"changes":429,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/main/java/com/google/android/agera/RepositoryCompiler.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/main/java/com/google/android/agera/RepositoryCompiler.java","contents_url":"https://api.github.com/repos/google/agera/contents/agera/src/main/java/com/google/android/agera/RepositoryCompiler.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,429 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera;\n+\n+import static com.google.android.agera.CompiledRepository.compiledRepository;\n+import static com.google.android.agera.CompiledRepository.addBindWith;\n+import static com.google.android.agera.CompiledRepository.addCheck;\n+import static com.google.android.agera.CompiledRepository.addEnd;\n+import static com.google.android.agera.CompiledRepository.addFilterSuccess;\n+import static com.google.android.agera.CompiledRepository.addGetFrom;\n+import static com.google.android.agera.CompiledRepository.addGoLazy;\n+import static com.google.android.agera.CompiledRepository.addGoTo;\n+import static com.google.android.agera.CompiledRepository.addMergeIn;\n+import static com.google.android.agera.CompiledRepository.addSendTo;\n+import static com.google.android.agera.CompiledRepository.addTransform;\n+import static com.google.android.agera.Functions.identityFunction;\n+import static com.google.android.agera.Mergers.objectsUnequal;\n+import static com.google.android.agera.Preconditions.checkNotNull;\n+import static com.google.android.agera.Preconditions.checkState;\n+\n+import android.os.Looper;\n+import android.support.annotation.IntDef;\n+import android.support.annotation.NonNull;\n+import android.support.annotation.Nullable;\n+\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.util.ArrayList;\n+import java.util.concurrent.Executor;\n+\n+@SuppressWarnings({\"unchecked, rawtypes\"})\n+final class RepositoryCompiler implements\n+    RepositoryCompilerStates.RFrequency,\n+    RepositoryCompilerStates.RFlow,\n+    RepositoryCompilerStates.RTermination,\n+    RepositoryCompilerStates.RConfig {\n+\n+  private static final ThreadLocal<RepositoryCompiler> compilers = new ThreadLocal<>();\n+\n+  @NonNull\n+  static <TVal> RepositoryCompilerStates.REventSource<TVal, TVal> repositoryWithInitialValue(\n+      @NonNull final TVal initialValue) {\n+    checkNotNull(Looper.myLooper());\n+    RepositoryCompiler compiler = compilers.get();\n+    if (compiler == null) {\n+      compiler = new RepositoryCompiler();\n+    } else {\n+      // Remove compiler from the ThreadLocal to prevent reuse in the middle of a compilation.\n+      // recycle(), called by compile(), will return the compiler here. ThreadLocal.set(null) keeps\n+      // the entry (with a null value) whereas remove() removes the entry; because we expect the\n+      // return of the compiler, don't use the heavier remove().\n+      compilers.set(null);\n+    }\n+    return compiler.start(initialValue);\n+  }\n+\n+  private static void recycle(@NonNull final RepositoryCompiler compiler) {\n+    compilers.set(compiler);\n+  }\n+\n+  @Retention(RetentionPolicy.SOURCE)\n+  @IntDef({NOTHING, FIRST_EVENT_SOURCE, FREQUENCY_OR_MORE_EVENT_SOURCE, FLOW,\n+      TERMINATE_THEN_FLOW, TERMINATE_THEN_END, CONFIG})\n+  private @interface Expect {}\n+\n+  private static final int NOTHING = 0;\n+  private static final int FIRST_EVENT_SOURCE = 1;\n+  private static final int FREQUENCY_OR_MORE_EVENT_SOURCE = 2;\n+  private static final int FLOW = 3;\n+  private static final int TERMINATE_THEN_FLOW = 4;\n+  private static final int TERMINATE_THEN_END = 5;\n+  private static final int CONFIG = 6;\n+\n+  private Object initialValue;\n+  private final ArrayList<Observable> eventSources = new ArrayList<>();\n+  private int frequency;\n+  private final ArrayList<Object> directives = new ArrayList<>();\n+  // 2x fields below: store caseExtractor and casePredicate for check(caseExtractor, casePredicate)\n+  // for use in terminate(); if null then terminate() is terminating an attempt directive.\n+  private Function caseExtractor;\n+  private Predicate casePredicate;\n+  private boolean goLazyUsed;\n+  private Merger notifyChecker = objectsUnequal();\n+  @RepositoryConfig\n+  private int deactivationConfig;\n+  @RepositoryConfig\n+  private int concurrentUpdateConfig;\n+\n+  @Expect\n+  private int expect;\n+\n+  private RepositoryCompiler() {}\n+\n+  @NonNull\n+  private RepositoryCompiler start(@NonNull final Object initialValue) {\n+    checkExpect(NOTHING);\n+    expect = FIRST_EVENT_SOURCE;\n+    this.initialValue = initialValue;\n+    return this;\n+  }\n+\n+  private void checkExpect(@Expect final int accept) {\n+    checkState(expect == accept, \"Unexpected compiler state\");\n+  }\n+\n+  private void checkExpect(@Expect final int accept1, @Expect final int accept2) {\n+    checkState(expect == accept1 || expect == accept2, \"Unexpected compiler state\");\n+  }\n+\n+  private void checkGoLazyUnused() {\n+    checkState(!goLazyUsed, \"Unexpected occurrence of async directive after goLazy()\");\n+  }\n+\n+  //region REventSource\n+\n+  @NonNull\n+  @Override\n+  public RepositoryCompiler observe(@NonNull final Observable... observables) {\n+    checkExpect(FIRST_EVENT_SOURCE, FREQUENCY_OR_MORE_EVENT_SOURCE);\n+    for (Observable observable : observables) {\n+      eventSources.add(checkNotNull(observable));\n+    }\n+    expect = FREQUENCY_OR_MORE_EVENT_SOURCE;\n+    return this;\n+  }\n+\n+  //endregion REventSource\n+\n+  //region RFrequency\n+\n+  @NonNull\n+  @Override\n+  public RepositoryCompiler onUpdatesPer(int millis) {\n+    checkExpect(FREQUENCY_OR_MORE_EVENT_SOURCE);\n+    frequency = Math.max(0, millis);\n+    expect = FLOW;\n+    return this;\n+  }\n+\n+  @NonNull\n+  @Override\n+  public RepositoryCompiler onUpdatesPerLoop() {\n+    return onUpdatesPer(0);\n+  }\n+\n+  //endregion RFrequency\n+\n+  //region RSyncFlow\n+\n+  @NonNull\n+  @Override\n+  public RepositoryCompiler getFrom(@NonNull final Supplier supplier) {\n+    checkExpect(FLOW);\n+    addGetFrom(supplier, directives);\n+    return this;\n+  }\n+\n+  @NonNull\n+  @Override\n+  public RepositoryCompiler mergeIn(@NonNull final Supplier supplier,\n+      @NonNull final Merger merger) {\n+    checkExpect(FLOW);\n+    addMergeIn(supplier, merger, directives);\n+    return this;\n+  }\n+\n+  @NonNull\n+  @Override\n+  public RepositoryCompiler transform(@NonNull final Function function) {\n+    checkExpect(FLOW);\n+    addTransform(function, directives);\n+    return this;\n+  }\n+\n+  @NonNull\n+  @Override\n+  public RepositoryCompiler check(@NonNull final Predicate predicate) {\n+    return check(identityFunction(), predicate);\n+  }\n+\n+  @NonNull\n+  @Override\n+  public RepositoryCompiler check(\n+      @NonNull final Function function, @NonNull final Predicate predicate) {\n+    checkExpect(FLOW);\n+    caseExtractor = checkNotNull(function);\n+    casePredicate = checkNotNull(predicate);\n+    expect = TERMINATE_THEN_FLOW;\n+    return this;\n+  }\n+\n+  @NonNull\n+  @Override\n+  public RepositoryCompiler sendTo(@NonNull final Receiver receiver) {\n+    checkExpect(FLOW);\n+    addSendTo(checkNotNull(receiver), directives);\n+    return this;\n+  }\n+\n+  @NonNull\n+  @Override\n+  public RepositoryCompiler bindWith(@NonNull final Supplier secondValueSupplier,\n+      @NonNull final Binder binder) {\n+    checkExpect(FLOW);\n+    addBindWith(secondValueSupplier, binder, directives);\n+    return this;\n+  }\n+\n+  @NonNull\n+  @Override\n+  public RepositoryCompiler thenSkip() {\n+    endFlow(true);\n+    return this;\n+  }\n+\n+  @NonNull\n+  @Override\n+  public RepositoryCompiler thenGetFrom(@NonNull final Supplier supplier) {\n+    getFrom(supplier);\n+    endFlow(false);\n+    return this;\n+  }\n+\n+  @NonNull\n+  @Override\n+  public RepositoryCompiler thenMergeIn(\n+      @NonNull final Supplier supplier, @NonNull final Merger merger) {\n+    mergeIn(supplier, merger);\n+    endFlow(false);\n+    return this;\n+  }\n+\n+  @NonNull\n+  @Override\n+  public RepositoryCompiler thenTransform(@NonNull final Function function) {\n+    transform(function);\n+    endFlow(false);\n+    return this;\n+  }\n+\n+  private void endFlow(boolean skip) {\n+    addEnd(skip, directives);\n+    expect = CONFIG;\n+  }\n+\n+  @NonNull\n+  @Override\n+  public RepositoryCompiler attemptGetFrom(@NonNull final Supplier attemptSupplier) {\n+    getFrom(attemptSupplier);\n+    expect = TERMINATE_THEN_FLOW;\n+    return this;\n+  }\n+\n+  @NonNull\n+  @Override\n+  public RepositoryCompiler attemptMergeIn(\n+      @NonNull final Supplier supplier, @NonNull final Merger attemptMerger) {\n+    mergeIn(supplier, attemptMerger);\n+    expect = TERMINATE_THEN_FLOW;\n+    return this;\n+  }\n+\n+  @NonNull\n+  @Override\n+  public RepositoryCompiler attemptTransform(@NonNull final Function attemptFunction) {\n+    transform(attemptFunction);\n+    expect = TERMINATE_THEN_FLOW;\n+    return this;\n+  }\n+\n+  @NonNull\n+  @Override\n+  public RepositoryCompiler thenAttemptGetFrom(@NonNull final Supplier attemptSupplier) {\n+    getFrom(attemptSupplier);\n+    expect = TERMINATE_THEN_END;\n+    return this;\n+  }\n+\n+  @NonNull\n+  @Override\n+  public RepositoryCompiler thenAttemptMergeIn(\n+      @NonNull final Supplier supplier, @NonNull final Merger attemptMerger) {\n+    mergeIn(supplier, attemptMerger);\n+    expect = TERMINATE_THEN_END;\n+    return this;\n+  }\n+\n+  @NonNull\n+  @Override\n+  public RepositoryCompiler thenAttemptTransform(@NonNull final Function attemptFunction) {\n+    transform(attemptFunction);\n+    expect = TERMINATE_THEN_END;\n+    return this;\n+  }\n+\n+  //endregion RSyncFlow\n+\n+  //region RFlow\n+\n+  @NonNull\n+  @Override\n+  public RepositoryCompiler goTo(@NonNull final Executor executor) {\n+    checkExpect(FLOW);\n+    checkGoLazyUnused();\n+    addGoTo(executor, directives);\n+    return this;\n+  }\n+\n+  @NonNull\n+  @Override\n+  public RepositoryCompiler goLazy() {\n+    checkExpect(FLOW);\n+    checkGoLazyUnused();\n+    addGoLazy(directives);\n+    goLazyUsed = true;\n+    return this;\n+  }\n+\n+  //endregion RFlow\n+\n+  //region RTermination\n+\n+  @NonNull\n+  @Override\n+  public RepositoryCompiler orSkip() {\n+    terminate(null);\n+    return this;\n+  }\n+\n+  @NonNull\n+  @Override\n+  public RepositoryCompiler orEnd(@NonNull final Function valueFunction) {\n+    terminate(valueFunction);\n+    return this;\n+  }\n+\n+  private void terminate(@Nullable final Function valueFunction) {\n+    checkExpect(TERMINATE_THEN_FLOW, TERMINATE_THEN_END);\n+    if (caseExtractor != null) {\n+      addCheck(caseExtractor, checkNotNull(casePredicate), valueFunction, directives);\n+    } else {\n+      addFilterSuccess(valueFunction, directives);\n+    }\n+    caseExtractor = null;\n+    casePredicate = null;\n+    if (expect == TERMINATE_THEN_END) {\n+      endFlow(false);\n+    } else {\n+      expect = FLOW;\n+    }\n+  }\n+\n+  //endregion RTermination\n+\n+  //region RConfig\n+\n+  @NonNull\n+  @Override\n+  public RepositoryCompiler notifyIf(@NonNull final Merger notifyChecker) {\n+    checkExpect(CONFIG);\n+    this.notifyChecker = checkNotNull(notifyChecker);\n+    return this;\n+  }\n+\n+  @NonNull\n+  @Override\n+  public RepositoryCompiler onDeactivation(@RepositoryConfig final int deactivationConfig) {\n+    checkExpect(CONFIG);\n+    this.deactivationConfig = deactivationConfig;\n+    return this;\n+  }\n+\n+  @NonNull\n+  @Override\n+  public RepositoryCompiler onConcurrentUpdate(@RepositoryConfig final int concurrentUpdateConfig) {\n+    checkExpect(CONFIG);\n+    this.concurrentUpdateConfig = concurrentUpdateConfig;\n+    return this;\n+  }\n+\n+  @NonNull\n+  @Override\n+  public Repository compile() {\n+    Repository repository = compileRepositoryAndReset();\n+    recycle(this);\n+    return repository;\n+  }\n+\n+  @NonNull\n+  @Override\n+  public RepositoryCompiler compileIntoRepositoryWithInitialValue(@NonNull final Object value) {\n+    Repository repository = compileRepositoryAndReset();\n+    // Don't recycle, instead sneak in the first directive and start the second repository\n+    addGetFrom(repository, directives);\n+    return start(value).observe(repository);\n+  }\n+\n+  @NonNull\n+  private Repository compileRepositoryAndReset() {\n+    checkExpect(CONFIG);\n+    Repository repository = compiledRepository(initialValue, eventSources, frequency, directives,\n+        notifyChecker, concurrentUpdateConfig, deactivationConfig);\n+    expect = NOTHING;\n+    initialValue = null;\n+    eventSources.clear();\n+    frequency = 0;\n+    directives.clear();\n+    goLazyUsed = false;\n+    notifyChecker = objectsUnequal();\n+    deactivationConfig = RepositoryConfig.CONTINUE_FLOW;\n+    concurrentUpdateConfig = RepositoryConfig.CONTINUE_FLOW;\n+    return repository;\n+  }\n+\n+  //endregion RConfig\n+}"},{"sha":"c01428dfed820646836955516e4e59c11f0dce74","filename":"agera/src/main/java/com/google/android/agera/RepositoryCompilerStates.java","status":"added","additions":456,"deletions":0,"changes":456,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/main/java/com/google/android/agera/RepositoryCompilerStates.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/main/java/com/google/android/agera/RepositoryCompilerStates.java","contents_url":"https://api.github.com/repos/google/agera/contents/agera/src/main/java/com/google/android/agera/RepositoryCompilerStates.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,456 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera;\n+\n+import android.support.annotation.NonNull;\n+\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.RejectedExecutionException;\n+\n+/**\n+ * Container of the compiler state interfaces supporting the declaration of {@link Repository}s\n+ * using the type-safe declarative language.\n+ *\n+ * <h3>List of directives</h3>\n+ *\n+ * <b>Variables:</b> s: supplier; fs: fallible supplier; m: merger; fm: fallible merger;\n+ * f: function; ff: fallible function; p: predicate; r: receiver; b: binder; e: executor; v: value.\n+ * <ul>\n+ *   <li>({@link RFlow#thenGetFrom then}){@link RFlow#getFrom GetFrom(s)}\n+ *   <li>({@link RFlow#thenMergeIn then}){@link RFlow#mergeIn MergeIn(s, m)}\n+ *   <li>({@link RFlow#thenTransform then}){@link RFlow#transform Transform(f)}\n+ *   <li>({@link RFlow#thenAttemptGetFrom then}){@link\n+ *       RFlow#attemptGetFrom AttemptGetFrom(fs)}.<i>term</i>\n+ *   <li>({@link RFlow#thenAttemptMergeIn then}){@link\n+ *       RFlow#attemptMergeIn AttemptMergeIn(s, fm)}.<i>term</i>\n+ *   <li>({@link RFlow#thenAttemptTransform then}){@link\n+ *       RFlow#attemptTransform AttemptTransform(ff)}.<i>term</i>\n+ *   <li>{@link RFlow#check(Predicate) check(p)}.<i>term</i>\n+ *   <li>{@link RFlow#check(Function, Predicate) check(f, p)}.<i>term</i>\n+ *   <li>{@link RFlow#sendTo sendTo(r)}\n+ *   <li>{@link RFlow#bindWith bindWith(s, b)}\n+ *   <li>{@link RFlow#goTo goTo(e)}\n+ *   <li>{@link RFlow#goLazy goLazy()}\n+ *   <li>{@link RFlow#thenSkip thenSkip()}\n+ * </ul>\n+ * where <i>term</i> (the termination clause) is one of:\n+ * <ul>\n+ *   <li>{@link RTermination#orSkip orSkip()}\n+ *   <li>{@link RTermination#orEnd orEnd(f)}\n+ * </ul>\n+ *\n+ */\n+public interface RepositoryCompilerStates {\n+\n+  // Note on documentation grammar: most method summaries for flow directives use an infinitive verb\n+  // phrase (\"do something\") instead of the usual 3rd-person grammar (\"does something\"). This is\n+  // because the full sentence for these method summaries are \"this method specifies that the next\n+  // step of the flow should do something\", rather than \"this method does something\".\n+\n+  /**\n+   * Compiler state allowing to specify the event source of the repository.\n+   *\n+   * @param <TVal> Value type of the repository.\n+   * @param <TStart> Value type at the start of the data processing flow. May be different from\n+   *     {@code TVal} when chain-building a repository that starts with\n+   *     {@link RConfig#compileIntoRepositoryWithInitialValue}.\n+   */\n+  interface REventSource<TVal, TStart> {\n+\n+    /**\n+     * Specifies the event source of the compiled repository.\n+     */\n+    @NonNull\n+    RFrequency<TVal, TStart> observe(@NonNull Observable... observables);\n+  }\n+\n+  /**\n+   * Compiler state allowing to specify the frequency of invoking the data processing flow.\n+   *\n+   * @param <TVal> Value type of the repository.\n+   * @param <TStart> Value type at the start of the data processing flow.\n+   */\n+  interface RFrequency<TVal, TStart> extends REventSource<TVal, TStart> {\n+\n+    /**\n+     * Specifies the minimum timeout to wait since starting the previous data processing flow,\n+     * before starting another flow to respond to updates from the event sources. Flows will not be\n+     * started more frequent than if {@link #onUpdatesPerLoop()} were used, even if the given\n+     * timeout is sufficiently small.\n+     */\n+    @NonNull\n+    RFlow<TVal, TStart, ?> onUpdatesPer(int millis);\n+\n+    /**\n+     * Specifies that multiple updates from the event sources per worker looper loop should start\n+     * only one data processing flow.\n+     */\n+    @NonNull\n+    RFlow<TVal, TStart, ?> onUpdatesPerLoop();\n+  }\n+\n+  /**\n+   * Compiler state allowing to specify the next directive of the data processing flow.\n+   *\n+   * @param <TVal> Value type of the repository.\n+   * @param <TPre> The output value type of the previous directive.\n+   */\n+  interface RFlow<TVal, TPre, TSelf extends RFlow<TVal, TPre, TSelf>>\n+      extends RSyncFlow<TVal, TPre, TSelf> {\n+    // Methods whose return types need subtyping (due to no \"generic type of generic type\" in Java):\n+\n+    @NonNull\n+    @Override\n+    <TCur> RFlow<TVal, TCur, ?> getFrom(@NonNull Supplier<TCur> supplier);\n+\n+    @NonNull\n+    @Override\n+    <TCur> RTermination<TVal, Throwable, RFlow<TVal, TCur, ?>> attemptGetFrom(\n+        @NonNull Supplier<Result<TCur>> attemptSupplier);\n+\n+    @NonNull\n+    @Override\n+    <TAdd, TCur> RFlow<TVal, TCur, ?> mergeIn(@NonNull Supplier<TAdd> supplier,\n+        @NonNull Merger<? super TPre, ? super TAdd, TCur> merger);\n+\n+    @NonNull\n+    @Override\n+    <TAdd, TCur> RTermination<TVal, Throwable, RFlow<TVal, TCur, ?>> attemptMergeIn(\n+        @NonNull Supplier<TAdd> supplier,\n+        @NonNull Merger<? super TPre, ? super TAdd, Result<TCur>> attemptMerger);\n+\n+    @NonNull\n+    @Override\n+    <TCur> RFlow<TVal, TCur, ?> transform(@NonNull Function<? super TPre, TCur> function);\n+\n+    @NonNull\n+    @Override\n+    <TCur> RTermination<TVal, Throwable, RFlow<TVal, TCur, ?>> attemptTransform(\n+        @NonNull Function<? super TPre, Result<TCur>> attemptFunction);\n+\n+    // Asynchronous directives:\n+\n+    /**\n+     * Go to the given {@code executor} to continue the data processing flow. The executor is\n+     * assumed to never throw {@link RejectedExecutionException}. Synchronous executors are\n+     * supported but the risk of stack overflow will be higher. Note that when the executor resumes\n+     * the flow, the directives that follow are run sequentially within the same\n+     * {@link Runnable#run()} call, until the flow completes or the next {@code goTo()} or, if\n+     * applicable, {@code goLazy()} directive is reached. Depending on the directives and operators\n+     * used, this may starve the executor. If necessary, use additional {@code goTo()} directives\n+     * with the same executor to achieve fairness.\n+     */\n+    @NonNull\n+    TSelf goTo(@NonNull Executor executor);\n+\n+    /**\n+     * Suspend the data processing flow and notify the registered {@link Updatable}s of updates.\n+     * The remaining of the flow will be run synchronously <i>and uninterruptibly</i> the first time\n+     * {@link Repository#get()} is called, to produce the new repository value lazily. After this\n+     * directive, {@link #goTo(Executor)} is no longer available, and all further operators should\n+     * be fairly lightweight in order not to block the callers of {@code get()} for too long.\n+     */\n+    @NonNull\n+    RSyncFlow<TVal, TPre, ?> goLazy();\n+  }\n+\n+  /**\n+   * Compiler state allowing to specify the final synchronous steps of the data processing flow.\n+   *\n+   * @param <TVal> Value type of the repository.\n+   * @param <TPre> The output value type of the previous directive.\n+   * @param <TSelf> Self-type; for Java compiler type inference only.\n+   */\n+  interface RSyncFlow<TVal, TPre, TSelf extends RSyncFlow<TVal, TPre, TSelf>> {\n+\n+    /**\n+     * Ignore the input value, and use the value newly obtained from the given supplier as the\n+     * output value.\n+     */\n+    @NonNull\n+    <TCur> RSyncFlow<TVal, TCur, ?> getFrom(@NonNull Supplier<TCur> supplier);\n+\n+    /**\n+     * Like {@link #getFrom}, ignore the input value and attempt to get the new value from the given\n+     * supplier. If the attempt fails, terminate the data processing flow by sending the failure to\n+     * the termination clause that follows; otherwise take the successful value as the output of\n+     * this directive.\n+     */\n+    @NonNull\n+    <TCur>\n+    RTermination<TVal, Throwable, ? extends RSyncFlow<TVal, TCur, ?>> attemptGetFrom(\n+        @NonNull Supplier<Result<TCur>> attemptSupplier);\n+\n+    /**\n+     * Take the input value and the value newly obtained from the given supplier, merge them using\n+     * the given merger, and use the resulting value as the output value.\n+     */\n+    @NonNull\n+    <TAdd, TCur> RSyncFlow<TVal, TCur, ?> mergeIn(@NonNull Supplier<TAdd> supplier,\n+        @NonNull Merger<? super TPre, ? super TAdd, TCur> merger);\n+\n+    /**\n+     * Like {@link #mergeIn}, take the input value and the value newly obtained from the given\n+     * supplier, and attempt to merge them using the given merger. If the attempt fails, terminate\n+     * the data processing flow by sending the failure to the termination clause that follows;\n+     * otherwise take the successful value as the output of this directive.\n+     *\n+     * <p>This method is agnostic of the return type of the {@code supplier}. If it itself is\n+     * fallible, the {@code merger} is held responsible for processing the failure, which may choose\n+     * to pass the failure on as the result of the merge.\n+     */\n+    @NonNull\n+    <TAdd, TCur>\n+    RTermination<TVal, Throwable, ? extends RSyncFlow<TVal, TCur, ?>> attemptMergeIn(\n+        @NonNull Supplier<TAdd> supplier,\n+        @NonNull Merger<? super TPre, ? super TAdd, Result<TCur>> attemptMerger);\n+\n+    /**\n+     * Transform the input value using the given function into the output value.\n+     */\n+    @NonNull\n+    <TCur> RSyncFlow<TVal, TCur, ?> transform(@NonNull Function<? super TPre, TCur> function);\n+\n+    /**\n+     * Like {@link #transform}, attempt to transform the input value using the given function. If\n+     * the attempt fails, terminate the data processing flow by sending the failure to the\n+     * termination clause that follows; otherwise take the successful value as the output of this\n+     * directive.\n+     */\n+    @NonNull\n+    <TCur> RTermination<TVal, Throwable, ? extends RSyncFlow<TVal, TCur, ?>> attemptTransform(\n+        @NonNull Function<? super TPre, Result<TCur>> attemptFunction);\n+\n+    /**\n+     * Check the input value with the given predicate. If the predicate applies, continue the data\n+     * processing flow with the same value, otherwise terminate the flow with the termination clause\n+     * that follows. The termination clause takes the input value as its input.\n+     */\n+    @NonNull\n+    RTermination<TVal, TPre, TSelf> check(@NonNull Predicate<? super TPre> predicate);\n+\n+    /**\n+     * Use the case-function to compute a case value out of the input value and check it with the\n+     * given predicate. If the predicate applies to the case value, continue the data processing\n+     * flow with the <i>input value</i>, otherwise terminate the flow with the termination clause\n+     * that follows. The termination clause takes the <i>case value</i> as its input.\n+     */\n+    @NonNull\n+    <TCase> RTermination<TVal, TCase, TSelf> check(\n+        @NonNull Function<? super TPre, TCase> caseFunction,\n+        @NonNull Predicate<? super TCase> casePredicate);\n+\n+    /**\n+     * Send the input value to the given receiver, and then pass on the input value as the output of\n+     * this directive, not modifying it.\n+     *\n+     * <p>Typical uses of this directive include reporting progress and/or errors in the UI,\n+     * starting a side process, logging, profiling and debugging, etc. The {@link Receiver#accept}\n+     * method is called synchronously, which means its execution blocks the rest of the data\n+     * processing flow. If the flow is to cancel with {@linkplain RepositoryConfig#SEND_INTERRUPT\n+     * the interrupt signal}, the receiver may also see the signal.\n+     *\n+     * <p>The receiver does not have to use the input value, but if it does and it moves onto a\n+     * different thread for processing the input value, note that the data processing flow does not\n+     * guarantee value immutability or concurrent access for this receiver. For this reason, for a\n+     * UI-calling receiver invoked from a background thread, implementation should extract any\n+     * necessary data from the input value, and post the immutable form of it to the main thread for\n+     * the UI calls, so the UI modifications are main-thread-safe while the data processing flow can\n+     * continue concurrently.\n+     *\n+     * <p>Note that the blocking semantics of this directive should not be taken as the permission\n+     * to mutate the input in a way that affects the rest of the flow -- the appropriate directive\n+     * for that purpose is {@code transform}, with a function that returns the same input instance\n+     * after mutation.\n+     */\n+    @NonNull\n+    TSelf sendTo(@NonNull Receiver<? super TPre> receiver);\n+\n+    /**\n+     * Send the input value and the value from the given supplier to the given binder, and then pass\n+     * on the input value as the output of this directive, not modifying it.\n+     *\n+     * <p>The same usage notes for {@link #sendTo} apply to this directive.\n+     */\n+    @NonNull\n+    <TAdd> TSelf bindWith(@NonNull Supplier<TAdd> secondValueSupplier,\n+        @NonNull Binder<? super TPre, ? super TAdd> binder);\n+\n+    /**\n+     * End the data processing flow but without using the output value and without notifying the\n+     * registered {@link Updatable}s.\n+     */\n+    @NonNull\n+    RConfig<TVal> thenSkip();\n+\n+    /**\n+     * Perform the {@link #getFrom} directive and use the output value as the new value of the\n+     * compiled repository, with notification if necessary.\n+     */\n+    @NonNull\n+    RConfig<TVal> thenGetFrom(@NonNull Supplier<? extends TVal> supplier);\n+\n+    /**\n+     * Perform the {@link #attemptGetFrom} directive and use the successful output value as the new\n+     * value of the compiled repository, with notification if necessary.\n+     */\n+    @NonNull\n+    RTermination<TVal, Throwable, RConfig<TVal>> thenAttemptGetFrom(\n+            @NonNull Supplier<? extends Result<? extends TVal>> attemptSupplier);\n+\n+    /**\n+     * Perform the {@link #mergeIn} directive and use the output value as the new value of the\n+     * compiled repository, with notification if necessary.\n+     */\n+    @NonNull\n+    <TAdd> RConfig<TVal> thenMergeIn(@NonNull Supplier<TAdd> supplier,\n+        @NonNull Merger<? super TPre, ? super TAdd, ? extends TVal> merger);\n+\n+    /**\n+     * Perform the {@link #attemptMergeIn} directive and use the successful output value as the new\n+     * value of the compiled repository, with notification if necessary.\n+     */\n+    @NonNull\n+    <TAdd> RTermination<TVal, Throwable, RConfig<TVal>> thenAttemptMergeIn(\n+            @NonNull Supplier<TAdd> supplier,\n+            @NonNull Merger<? super TPre, ? super TAdd,\n+                ? extends Result<? extends TVal>> attemptMerger);\n+\n+    /**\n+     * Perform the {@link #transform} directive and use the output value as the new value of the\n+     * compiled repository, with notification if necessary.\n+     */\n+    @NonNull\n+    RConfig<TVal> thenTransform(\n+        @NonNull Function<? super TPre, ? extends TVal> function);\n+\n+    /**\n+     * Perform the {@link #attemptTransform} directive and use the successful output value as the\n+     * new value of the compiled repository, with notification if necessary.\n+     */\n+    @NonNull\n+    RTermination<TVal, Throwable, RConfig<TVal>> thenAttemptTransform(\n+            @NonNull Function<? super TPre, ? extends Result<? extends TVal>> attemptFunction);\n+  }\n+\n+  /**\n+   * Compiler state allowing to terminate the data processing flow following a failed check.\n+   *\n+   * @param <TVal> Value type of the repository.\n+   * @param <TTerm> Value type from which to terminate the flow.\n+   * @param <TRet> Compiler state to return to.\n+   */\n+  interface RTermination<TVal, TTerm, TRet> {\n+\n+    /**\n+     * If the previous check failed, skip the rest of the data processing flow, and do not notify\n+     * any registered {@link Updatable}s.\n+     */\n+    @NonNull\n+    TRet orSkip();\n+\n+    /**\n+     * If the previous check failed, terminate the data processing flow and update the compiled\n+     * repository's value to the resulting value of applying the given function to the input of this\n+     * termination clause, with notification if necessary.\n+     */\n+    @NonNull\n+    TRet orEnd(@NonNull Function<? super TTerm, ? extends TVal> valueFunction);\n+  }\n+\n+  /**\n+   * Compiler state allowing to configure and end the declaration of the repository.\n+   *\n+   * @param <TVal> Repository value type.\n+   */\n+  interface RConfig<TVal> {\n+\n+    /**\n+     * Specifies that this repository should notify the registered {@link Updatable}s if and only if\n+     * the given {@code checker} returns {@link Boolean#TRUE}. Every time the data processing flow\n+     * ends with a new repository value, the checker is called with the old repository value as the\n+     * first argument and the new value the second. The return value determines whether this update\n+     * should generate a notification. The default behavior is to notify of the update when the new\n+     * value is different as per {@link Object#equals}.\n+     *\n+     * <p>Note that the {@code goLazy()} directive will always generate a notification, as a\n+     * preventative measure to handle a potentially different value which is unknown at the time of\n+     * {@code goLazy()}. Also, technically the {@link RepositoryConfig#RESET_TO_INITIAL_VALUE}\n+     * deactivation configuration would also update the repository value, and therefore the\n+     * {@code checker} will be consulted, but because the reset happens only when the repository is\n+     * deactivated, even if the checker returns true, there is no {@link Updatable} to receive the\n+     * notification.\n+     */\n+    @NonNull\n+    RConfig<TVal> notifyIf(@NonNull Merger<? super TVal, ? super TVal, Boolean> checker);\n+\n+    /**\n+     * Specifies the behaviors when this repository is deactivated, i.e. from being observed to not\n+     * being observed. The default behavior is {@link RepositoryConfig#CONTINUE_FLOW}.\n+     *\n+     * @param deactivationConfig A bitwise combination of the constants in {@link RepositoryConfig}.\n+     */\n+    @NonNull\n+    RConfig<TVal> onDeactivation(@RepositoryConfig int deactivationConfig);\n+\n+    /**\n+     * Specifies the behaviors when an update is observed from an event source while a data\n+     * processing flow is ongoing. The default behavior is {@link RepositoryConfig#CONTINUE_FLOW}.\n+     *\n+     * @param concurrentUpdateConfig A bitwise combination of the constants in\n+     *     {@link RepositoryConfig}.\n+     */\n+    @NonNull\n+    RConfig<TVal> onConcurrentUpdate(@RepositoryConfig int concurrentUpdateConfig);\n+\n+    /**\n+     * Compiles a {@link Repository} that exhibits the previously defined behaviors.\n+     */\n+    @NonNull\n+    Repository<TVal> compile();\n+\n+    /**\n+     * Compiles a repository that exhibits the previously defined behaviors, and starts compiling\n+     * a new repository with the given initial value (which can be of a different type) that uses\n+     * the former repository as the first event source and the first data source.\n+     *\n+     * <p>This method provides a shortcut for the following code:\n+     *\n+     * <pre>\n+     * {@literal Repository<TVal>} subRepository = ….compile();\n+     * {@literal Repository<TVal2>} mainRepository = repositoryWithInitialValue(value)\n+     *     .observe(subRepository)\n+     *     .… // additional event sources and frequency which can be defined after this method\n+     *     .getFrom(subRepository) // first directive\n+     *     .… // rest of data processing flow, configuration, compile()\n+     * }</pre>\n+     *\n+     * The repository compiled by this method (the {@code subRepository}) therefore acts as a\n+     * buffer for the next repository to compile (the {@code mainRepository}), with its own event\n+     * sources and data processing flow. This simplifies or shortens the flow of the new repository,\n+     * and is typically useful if different parts of the overall data processing flow depend on\n+     * different event sources and data sources, and it is beneficial to cache the intermediate\n+     * values between parts.\n+     *\n+     * <p>However, due to the {@code getFrom} directive at the start of this new data processing\n+     * flow, the next repository to compile has no access to its previous value. Additionally, the\n+     * former repository is not exposed anywhere else. If this is undesirable, consider using the\n+     * full form, where the former repository is explicitly compiled.\n+     */\n+    @NonNull\n+    <TVal2> RFrequency<TVal2, TVal> compileIntoRepositoryWithInitialValue(@NonNull TVal2 value);\n+  }\n+}"},{"sha":"e3d5c2e48f633c093f43424bfbfd805efa65bae4","filename":"agera/src/main/java/com/google/android/agera/RepositoryConfig.java","status":"added","additions":74,"deletions":0,"changes":74,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/main/java/com/google/android/agera/RepositoryConfig.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/main/java/com/google/android/agera/RepositoryConfig.java","contents_url":"https://api.github.com/repos/google/agera/contents/agera/src/main/java/com/google/android/agera/RepositoryConfig.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera;\n+\n+import android.support.annotation.IntDef;\n+\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+\n+/**\n+ * Constants controlling some behaviors of the compiled {@link Repository}s.\n+ */\n+@Retention(RetentionPolicy.SOURCE)\n+@IntDef(flag = true, value = {\n+    RepositoryConfig.CONTINUE_FLOW,\n+    RepositoryConfig.CANCEL_FLOW,\n+    RepositoryConfig.RESET_TO_INITIAL_VALUE,\n+    RepositoryConfig.SEND_INTERRUPT,\n+})\n+public @interface RepositoryConfig {\n+\n+  /**\n+   * If a data processing flow is ongoing, allow it to finish. If this is the configuration for the\n+   * concurrent update, the new data processing flow will commence when the current one finishes.\n+   * This is the default behavior and, with a value of 0, cannot be combined with other\n+   * configurations.\n+   */\n+  int CONTINUE_FLOW = 0;\n+\n+  /**\n+   * If a data processing flow is ongoing, cancel it at the earliest opportunity, which is\n+   * immediately after the currently running directive, or during it if {@link #SEND_INTERRUPT} is\n+   * used and the current operator ({@link Function}, {@link Supplier}, {@link Merger} etc.) has\n+   * adequate support for the thread interruption signal. If this is the configuration for a\n+   * repository, cancellation prevents the flow from updating the repository value, even if the last\n+   * run directive would have set the new value otherwise. If this is the configuration for the\n+   * concurrent update, the new data processing flow will commence as soon as the current one is\n+   * terminated, effectively redoing the data processing from the start. This behavior is implicit\n+   * if {@link #RESET_TO_INITIAL_VALUE} or {@link #SEND_INTERRUPT} is specified.\n+   */\n+  int CANCEL_FLOW = 1;\n+\n+  /**\n+   * The repository value should reset to the initial value on deactivation. The reset is immediate\n+   * while the data processing flow, if ongoing, may terminate only after the currently running\n+   * directive. If this is the configuration for the concurrent update, the repository value will\n+   * <i>not</i> be reset, but due to the included {@link #CANCEL_FLOW} value, the ongoing flow will\n+   * still be cancelled.\n+   */\n+  int RESET_TO_INITIAL_VALUE = 2 | CANCEL_FLOW;\n+\n+  /**\n+   * If a data processing flow is ongoing and in the asynchronous stage (after the first\n+   * {@code goTo} directive and before the {@code goLazy} directive), {@linkplain Thread#interrupt()\n+   * interrupt} the thread currently running the flow, to signal the current operator (function,\n+   * supplier, merger etc.) to stop early. The interrupt signal will not be sent if the flow is in\n+   * a synchronous stage, to minimize unwanted effects on the worker looper thread and the thread\n+   * from which the client calls {@link Repository#get()}.\n+   */\n+  int SEND_INTERRUPT = 4 | CANCEL_FLOW;\n+}"},{"sha":"c77032615879f7a77c372629244c0de46ce5ebb2","filename":"agera/src/main/java/com/google/android/agera/Reservoir.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/main/java/com/google/android/agera/Reservoir.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/main/java/com/google/android/agera/Reservoir.java","contents_url":"https://api.github.com/repos/google/agera/contents/agera/src/main/java/com/google/android/agera/Reservoir.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,41 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera;\n+\n+/**\n+ * A buffering mechanism that enqueues the values received via the {@link Receiver} interface and\n+ * offers them back through the {@link Repository} interface.\n+ *\n+ * <p>Values can be enqueued using {@link #accept}. It is up to the implementation, typically the\n+ * backing store, to decide whether and how to enqueue each value. Values are dequeued using\n+ * {@link #get}. This is a fallible operation (an <i>attempt</i> that returns a {@link Result}).\n+ * Calling {@link #get} when the reservoir is empty yields {@link Result#absent()}.\n+ *\n+ * <p>The {@link Updatable}s observing this reservoir will be updated when a value is enqueued\n+ * while the reservoir is empty, or when a value is dequeued so the next enqueued value is exposed,\n+ * but <i>not when the last value is dequeued so the reservoir becomes empty</i>. In other words, an\n+ * update from this reservoir means the availability of the next value to be dequeued. Additionally,\n+ * when an updatable <i>activates</i> the reservoir, i.e. turns it from unobserved to observed, if\n+ * it is already non-empty, the updatable will receive an out-of-band update immediately (subject to\n+ * {@code Looper} processing delay). Subsequently added updatables will not receive this special\n+ * call: it is assumed that the availability of the currently exposed value will have been notified\n+ * to existing updatables, and that a consumer will dequeue the value soon.\n+ *\n+ * <p>Multiple {@linkplain RepositoryCompilerStates compiled repositories} using the same reservoir\n+ * as their shared event source and data source can be a simple way to achieve parallelism with load\n+ * balancing.\n+ */\n+public interface Reservoir<T> extends Receiver<T>, Repository<Result<T>> {}"},{"sha":"82fdbf8db5dd002e4f11f2b2e3809e013087964e","filename":"agera/src/main/java/com/google/android/agera/Reservoirs.java","status":"added","additions":135,"deletions":0,"changes":135,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/main/java/com/google/android/agera/Reservoirs.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/main/java/com/google/android/agera/Reservoirs.java","contents_url":"https://api.github.com/repos/google/agera/contents/agera/src/main/java/com/google/android/agera/Reservoirs.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,135 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera;\n+\n+import static com.google.android.agera.Preconditions.checkNotNull;\n+import static com.google.android.agera.Result.absentIfNull;\n+\n+import android.os.Looper;\n+import android.support.annotation.NonNull;\n+import android.support.annotation.Nullable;\n+\n+import java.util.ArrayDeque;\n+import java.util.PriorityQueue;\n+import java.util.Queue;\n+\n+/**\n+ * Utility methods for creating {@link Reservoir} instances.\n+ *\n+ * <p>Any {@link Reservoir} created by this class has to be created from a {@link Looper} thread\n+ * or the method will throw an {@link IllegalStateException}.\n+ */\n+public final class Reservoirs {\n+\n+  /**\n+   * Returns a {@link Reservoir} for the given value type.\n+   *\n+   * <p>The returned reservoir uses a standard unbounded FIFO queue as its backing storage. As a\n+   * result, all values are accepted and no duplication checks are used, and they are dequeued in\n+   * the same order.\n+   */\n+  @NonNull\n+  public static <T> Reservoir<T> reservoirOf(\n+      @SuppressWarnings(\"unused\") @Nullable final Class<T> clazz) {\n+    return reservoir();\n+  }\n+\n+  /**\n+   * Same as {@link #reservoirOf(Class)}. This variant is useful for when the value type is more\n+   * readily inferrable from the context, such as when used as a variable initializer or a return\n+   * value, so client code could simply write, for example,\n+   *\n+   * <pre>{@code Reservoir<String> stringReservoir = reservoir();}</pre>\n+   *\n+   * where this method is statically imported. This also helps in-line creation of a reservoir whose\n+   * value type is generic, such as {@code List<String>}, so client code could write\n+   * {@code Reservoirs.<List<String>>reservoir()} instead of the less readable\n+   * {@code reservoirOf((Class<List<String>>) null)}.\n+   */\n+  @NonNull\n+  public static <T> Reservoir<T> reservoir() {\n+    return reservoir(new ArrayDeque<T>());\n+  }\n+\n+  /**\n+   * Returns a {@link Reservoir} that uses the given {@code queue} as the backing storage for\n+   * enqueuing and dequeuing values. It is up to the concrete {@link Queue#offer} implementation of\n+   * the {@code queue} instance whether and how to accept each value to be enqueued.\n+   *\n+   * @param queue The backing storage of the reservoir. Any valid {@link Queue} implementation can\n+   *     be used, including non-FIFO queues such as {@link PriorityQueue}. Only these methods are\n+   *     used: {@link Queue#offer} for attempting to enqueue a value, {@link Queue#poll} for\n+   *     attempting to dequeue a value, and {@link Queue#isEmpty} for state check. All accesses are\n+   *     synchronized on this {@code queue} instance; if the queue must also be accessed elsewhere,\n+   *     those accesses must also be synchronized on this {@code queue} instance. Also note that\n+   *     modifications to the queue outside the {@link Reservoir} interface will not update the\n+   *     reservoir or its registered {@link Updatable}s.\n+   */\n+  @NonNull\n+  public static <T> Reservoir<T> reservoir(@NonNull final Queue<T> queue) {\n+    return new SynchronizedReservoir<>(checkNotNull(queue));\n+  }\n+\n+  private static final class SynchronizedReservoir<T> extends BaseObservable\n+      implements Reservoir<T> {\n+    @NonNull\n+    private final Queue<T> queue;\n+\n+    private SynchronizedReservoir(@NonNull final Queue<T> queue) {\n+      this.queue = checkNotNull(queue);\n+    }\n+\n+    @Override\n+    public void accept(@NonNull T value) {\n+      boolean shouldDispatchUpdate;\n+      synchronized (queue) {\n+        boolean wasEmpty = queue.isEmpty();\n+        boolean added = queue.offer(value);\n+        shouldDispatchUpdate = wasEmpty && added;\n+      }\n+      if (shouldDispatchUpdate) {\n+        dispatchUpdate();\n+      }\n+    }\n+\n+    @NonNull\n+    @Override\n+    public Result<T> get() {\n+      T nullableValue;\n+      boolean shouldDispatchUpdate;\n+      synchronized (queue) {\n+        nullableValue = queue.poll();\n+        shouldDispatchUpdate = !queue.isEmpty();\n+      }\n+      if (shouldDispatchUpdate) {\n+        dispatchUpdate();\n+      }\n+      return absentIfNull(nullableValue);\n+    }\n+\n+    @Override\n+    protected void observableActivated() {\n+      synchronized (queue) {\n+        if (queue.isEmpty()) {\n+          return;\n+        }\n+      }\n+      dispatchUpdate();\n+    }\n+  }\n+\n+  private Reservoirs() {}\n+}"},{"sha":"a030283b12ff04209a7cc5d2e564aac6b8e47b4e","filename":"agera/src/main/java/com/google/android/agera/Result.java","status":"added","additions":439,"deletions":0,"changes":439,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/main/java/com/google/android/agera/Result.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/main/java/com/google/android/agera/Result.java","contents_url":"https://api.github.com/repos/google/agera/contents/agera/src/main/java/com/google/android/agera/Result.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,439 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera;\n+\n+import static com.google.android.agera.Preconditions.checkArgument;\n+import static com.google.android.agera.Preconditions.checkNotNull;\n+import static com.google.android.agera.Preconditions.checkState;\n+\n+import android.support.annotation.NonNull;\n+import android.support.annotation.Nullable;\n+\n+/**\n+ * An immutable object encapsulating the result of an <i>attempt</i>. An attempt is a call to\n+ * {@link Function#apply}, {@link Merger#merge} or {@link Supplier#get} that may fail. This class\n+ * helps avoid throwing exceptions from those methods, by encapsulating either the output value of\n+ * those calls, or the failure encountered. In this way, an attempt always produces a {@link Result}\n+ * whether it has {@link #succeeded} or {@link #failed}.\n+ *\n+ * <p>This class can also be used to wrap a nullable value for situations where the value is indeed\n+ * null, but null is not accepted. In this case a {@link Result} instance representing a failed\n+ * attempt to obtain a non-null value can be used in place of the nullable value.\n+ *\n+ * @param <T> The output value type.\n+ */\n+public final class Result<T> {\n+  @NonNull\n+  private static final Result<Object> FAILURE =\n+      new Result<>(null, new Throwable(\"Attempt failed\"));\n+  @NonNull\n+  private static final Result<Object> ABSENT =\n+      new Result<>(null, new NullPointerException(\"Value is absent\"));\n+\n+  @Nullable\n+  private final T value;\n+  @Nullable\n+  private final Throwable failure;\n+\n+  Result(@Nullable final T value, @Nullable final Throwable failure) {\n+    checkArgument(value != null ^ failure != null, \"Illegal Result arguments\");\n+    this.value = value;\n+    this.failure = failure;\n+  }\n+\n+  /**\n+   * Creates a {@link Result} of a successful attempt that produced the given {@code value}.\n+   */\n+  @NonNull\n+  public static <T> Result<T> success(@NonNull final T value) {\n+    return new Result<>(checkNotNull(value), null);\n+  }\n+\n+  /**\n+   * Creates a {@link Result} of a failed attempt that encountered the given {@code failure}.\n+   */\n+  @NonNull\n+  public static <T> Result<T> failure(@NonNull final Throwable failure) {\n+    return new Result<>(null, checkNotNull(failure));\n+  }\n+\n+  /**\n+   * Returns the singleton {@link Result} denoting a failed attempt that has a generic failure.\n+   */\n+  @SuppressWarnings(\"unchecked\")\n+  @NonNull\n+  public static <T> Result<T> failure() {\n+    return (Result<T>) FAILURE;\n+  }\n+\n+  /**\n+   * Creates a {@link Result} denoting a non-null value. This is an alias of {@link #success}.\n+   */\n+  @NonNull\n+  public static <T> Result<T> present(@NonNull final T value) {\n+    return success(value);\n+  }\n+\n+  /**\n+   * Returns the singleton {@link Result} denoting an absent value, with a failure of\n+   * {@link NullPointerException}.\n+   */\n+  @SuppressWarnings(\"unchecked\")\n+  @NonNull\n+  public static <T> Result<T> absent() {\n+    return (Result<T>) ABSENT;\n+  }\n+\n+  /**\n+   * Creates a {@code Result} denoting the {@code value} if it is non-null, or returns the singleton\n+   * {@link #absent} result.\n+   */\n+  @NonNull\n+  public static <T> Result<T> absentIfNull(@Nullable final T value) {\n+    return value == null ? Result.<T>absent() : present(value);\n+  }\n+\n+  /**\n+   * Returns whether this is the result of a successful attempt.\n+   */\n+  public boolean succeeded() {\n+    return value != null;\n+  }\n+\n+  /**\n+   * Returns whether this is the result of a failed attempt.\n+   */\n+  public boolean failed() {\n+    return value == null;\n+  }\n+\n+  /**\n+   * Returns whether the output value is present. This is an alias of {@link #succeeded()}.\n+   */\n+  public boolean isPresent() {\n+    return succeeded();\n+  }\n+\n+  /**\n+   * Returns whether this is a result denoting an absent value. This is <i>not</i> an alias of\n+   * {@link #failed()}; this checks whether this instance is obtained from {@link #absent()}.\n+   */\n+  public boolean isAbsent() {\n+    return this == ABSENT;\n+  }\n+\n+  /**\n+   * Returns the output value of the successful attempt that produced this result.\n+   *\n+   * @throws FailedResultException If this is the result of a {@link #failed} attempt. The failure\n+   *     is available from {@link FailedResultException#getCause()}. This is an unchecked exception\n+   *     because it is easily avoidable by first checking whether the attempt has {@link #succeeded}\n+   *     or {@link #failed}, or by using other fluent style methods to achieve the same purpose.\n+   */\n+  @NonNull\n+  public T get() throws FailedResultException {\n+    if (value != null) {\n+      return value;\n+    }\n+    throw new FailedResultException(failure);\n+  }\n+\n+  /**\n+   * Returns the failure encountered in the attempt that produced this result.\n+   *\n+   * @throws IllegalStateException If this is the result of a {@link #succeeded} attempt.\n+   */\n+  @NonNull\n+  public Throwable getFailure() {\n+    checkState(failure != null, \"Not a failure\");\n+    return failure;\n+  }\n+\n+  /**\n+   * Returns the output value of the successful attempt, or null if the attempt has {@link #failed}.\n+   */\n+  @Nullable\n+  public T orNull() {\n+    return value;\n+  }\n+\n+  /**\n+   * Returns the failure encountered in the attempt that produced this result, or null if the\n+   * attempt has {@link #succeeded}.\n+   */\n+  @Nullable\n+  public Throwable failureOrNull() {\n+    return failure;\n+  }\n+\n+  /**\n+   * Passes the output value to the {@code receiver} if the attempt has succeeded; otherwise does\n+   * nothing.\n+   *\n+   * @return This instance, for chaining.\n+   */\n+  @NonNull\n+  public Result<T> ifSucceededSendTo(@NonNull final Receiver<? super T> receiver) {\n+    if (value != null) {\n+      receiver.accept(value);\n+    }\n+    return this;\n+  }\n+\n+  /**\n+   * Passes the encountered failure to the {@code receiver} if the attempt has failed; otherwise\n+   * does nothing.\n+   *\n+   * @return This instance, for chaining.\n+   */\n+  @NonNull\n+  public Result<T> ifFailedSendTo(@NonNull final Receiver<? super Throwable> receiver) {\n+    if (failure != null) {\n+      receiver.accept(failure);\n+    }\n+    return this;\n+  }\n+\n+  /**\n+   * Binds the output value with {@code bindValue} using {@code binder} if the attempt has\n+   * succeeded; otherwise does nothing.\n+   *\n+   * @return This instance, for chaining.\n+   */\n+  @NonNull\n+  public <U> Result<T> ifSucceededBind(@NonNull final U bindValue,\n+      @NonNull final Binder<? super T, ? super U> binder) {\n+    if (value != null) {\n+      binder.bind(value, bindValue);\n+    }\n+    return this;\n+  }\n+\n+  /**\n+   * Binds the output value with the value from the {@code supplier} using {@code binder} if the\n+   * attempt has succeeded; otherwise does nothing, not calling either the binder or the supplier.\n+   *\n+   * @return This instance, for chaining.\n+   */\n+  @NonNull\n+  public <U> Result<T> ifSucceededBindFrom(@NonNull final Supplier<U> supplier,\n+      @NonNull final Binder<? super T, ? super U> binder) {\n+    if (value != null) {\n+      binder.bind(value, supplier.get());\n+    }\n+    return this;\n+  }\n+\n+  /**\n+   * Returns a result denoting a failed attempt to obtain a value of a different type, with the same\n+   * failure.\n+   *\n+   * @throws IllegalStateException If this is the result of a {@link #succeeded} attempt.\n+   */\n+  @SuppressWarnings(\"unchecked\")\n+  @NonNull\n+  public <U> Result<U> sameFailure() {\n+    checkState(failed(), \"Not a failure\");\n+    return (Result<U>) this;\n+  }\n+\n+  /**\n+   * Returns a {@link Result} wrapping the result of applying the given {@code function} to the\n+   * output value encapsulated in this result, or if this is the result of a {@link #failed}\n+   * attempt, returns the {@link #sameFailure}.\n+   */\n+  @NonNull\n+  public <U> Result<U> ifSucceededMap(@NonNull final Function<? super T, U> function) {\n+    if (value != null) {\n+      return success(function.apply(value));\n+    }\n+    return sameFailure();\n+  }\n+\n+  /**\n+   * Returns the result of a follow-up attempt to apply the given {@code attemptFunction} to the\n+   * output value encapsulated in this result, or if this is the result of a {@link #failed}\n+   * attempt, returns the {@link #sameFailure}.\n+   */\n+  @NonNull\n+  public <U> Result<U> ifSucceededAttemptMap(\n+      @NonNull final Function<? super T, Result<U>> attemptFunction) {\n+    if (value != null) {\n+      return attemptFunction.apply(value);\n+    }\n+    return sameFailure();\n+  }\n+\n+  /**\n+   * Returns a {@link Result} wrapping the result of merging the output value encapsulated in this\n+   * result with the given {@code mergeValue} using the {@code merger}, or if this is the result of\n+   * a {@link #failed} attempt, returns the {@link #sameFailure}.\n+   */\n+  @NonNull\n+  public <U, V> Result<V> ifSucceededMerge(@NonNull final U mergeValue,\n+      @NonNull final Merger<? super T, ? super U, V> merger) {\n+    if (value != null) {\n+      return success(merger.merge(value, mergeValue));\n+    }\n+    return sameFailure();\n+  }\n+\n+  /**\n+   * Returns the result of a follow-up attempt to merge the output value encapsulated in this\n+   * result with the given {@code mergeValue} using the {@code attemptMerger}, or if this is the\n+   * result of a {@link #failed} attempt, returns the {@link #sameFailure}.\n+   */\n+  @NonNull\n+  public <U, V> Result<V> ifSucceededAttemptMerge(@NonNull final U mergeValue,\n+      @NonNull final Merger<? super T, ? super U, Result<V>> attemptMerger) {\n+    if (value != null) {\n+      return attemptMerger.merge(value, mergeValue);\n+    }\n+    return sameFailure();\n+  }\n+\n+  /**\n+   * Returns a {@link Result} wrapping the result of merging the output value encapsulated in this\n+   * result with the value from the given {@code mergeValueSupplier} using the {@code merger}, or if\n+   * this is the result of a {@link #failed} attempt, returns the {@link #sameFailure}.\n+   */\n+  @NonNull\n+  public <U, V> Result<V> ifSucceededMergeFrom(@NonNull final Supplier<U> mergeValueSupplier,\n+      @NonNull final Merger<? super T, ? super U, V> merger) {\n+    if (value != null) {\n+      return success(merger.merge(value, mergeValueSupplier.get()));\n+    }\n+    return sameFailure();\n+  }\n+\n+  /**\n+   * Returns the result of a follow-up attempt to merge the output value encapsulated in this\n+   * result with the value from the given {@code mergeValueSupplier} using the\n+   * {@code attemptMerger}, or if this is the result of a {@link #failed} attempt, returns the\n+   * {@link #sameFailure}.\n+   *\n+   * <p>This method is agnostic of the value type of the {@code mergeValueSupplier}. If it is also\n+   * fallible, the {@code attemptMerger} has the responsibility to interpret the result should the\n+   * supplier fail. The merger may choose to, for example, return the {@code sameFailure()} if this\n+   * happens.\n+   */\n+  @NonNull\n+  public <U, V> Result<V> ifSucceededAttemptMergeFrom(\n+      @NonNull final Supplier<U> mergeValueSupplier,\n+      @NonNull final Merger<? super T, ? super U, Result<V>> attemptMerger) {\n+    if (value != null) {\n+      return attemptMerger.merge(value, mergeValueSupplier.get());\n+    }\n+    return sameFailure();\n+  }\n+\n+  /**\n+   * Returns the output value if the attempt has succeeded, or the given {@code other} value\n+   * otherwise.\n+   */\n+  @NonNull\n+  public T orElse(@NonNull final T other) {\n+    return value != null ? value : checkNotNull(other);\n+  }\n+\n+  /**\n+   * Returns the output value if the attempt has succeeded, or the value from the given\n+   * {@code supplier} otherwise.\n+   */\n+  @NonNull\n+  public T orGetFrom(@NonNull final Supplier<? extends T> supplier) {\n+    return value != null ? value : checkNotNull(supplier.get());\n+  }\n+\n+  /**\n+   * Returns the same result if the attempt has succeeded, or the result of the attempt to get from\n+   * the given {@code attemptSupplier} otherwise.\n+   */\n+  @SuppressWarnings(\"unchecked\")\n+  @NonNull\n+  public Result<T> orAttemptGetFrom(\n+      @NonNull final Supplier<? extends Result<? extends T>> supplier) {\n+    return value != null ? this : (Result<T>) checkNotNull(supplier.get());\n+  }\n+\n+  /**\n+   * Returns the output value if the attempt has succeeded, or the resulting value of applying the\n+   * given {@code recoverFunction} to the failure of the attempt.\n+   */\n+  @SuppressWarnings(\"ConstantConditions\")\n+  @NonNull\n+  public T recover(@NonNull final Function<? super Throwable, ? extends T> recoverFunction) {\n+    if (value != null) {\n+      return value;\n+    }\n+    return recoverFunction.apply(failure);\n+  }\n+\n+  /**\n+   * Returns the same result if the attempt has succeeded, or the result of the attempt to apply the\n+   * given {@code attemptRecoverFunction} to the failure of the attempt.\n+   */\n+  @SuppressWarnings({\"ConstantConditions\", \"unchecked\"})\n+  @NonNull\n+  public Result<T> attemptRecover(\n+      @NonNull final Function<? super Throwable, ? extends Result<? extends T>>\n+          attemptRecoverFunction) {\n+    if (value != null) {\n+      return this;\n+    }\n+    return (Result<T>) attemptRecoverFunction.apply(failure);\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (!(o instanceof Result)) {\n+      return false;\n+    }\n+\n+    final Result<?> other = (Result<?>) o;\n+\n+    if (value != null) {\n+      return value.equals(other.value);\n+    } else {\n+      //noinspection ConstantConditions -- value == null implies failure != null\n+      return failure.equals(other.failure);\n+    }\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    int result = (value != null ? value.hashCode() : 0);\n+    result = 31 * result + (failure != null ? failure.hashCode() : 0);\n+    return result;\n+  }\n+\n+  @Override\n+  public String toString() {\n+    if (this == ABSENT) {\n+      return \"Result{Absent}\";\n+    }\n+    if (this == FAILURE) {\n+      return \"Result{Failure}\";\n+    }\n+    if (value != null) {\n+      return \"Result{Success; value=\" + value + \"}\";\n+    }\n+    return \"Result{Failure; failure=\" + failure + \"}\";\n+  }\n+}"},{"sha":"358678ad66ac9fa8ca5b378aed70095d4c27a28c","filename":"agera/src/main/java/com/google/android/agera/Supplier.java","status":"added","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/main/java/com/google/android/agera/Supplier.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/main/java/com/google/android/agera/Supplier.java","contents_url":"https://api.github.com/repos/google/agera/contents/agera/src/main/java/com/google/android/agera/Supplier.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,32 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera;\n+\n+import android.support.annotation.NonNull;\n+\n+/**\n+ * A supplier of data. Semantically, this could be a factory, generator, builder, or something else\n+ * entirely. No guarantees are implied by this interface.\n+ */\n+public interface Supplier<T> {\n+\n+  /**\n+   * Returns an instance of the appropriate type. The returned object may or may not be a new\n+   * instance, depending on the implementation.\n+   */\n+  @NonNull\n+  T get();\n+}"},{"sha":"83c6e4f9e2f61b735a1a1b4ee730bc636dc60a1e","filename":"agera/src/main/java/com/google/android/agera/Suppliers.java","status":"added","additions":68,"deletions":0,"changes":68,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/main/java/com/google/android/agera/Suppliers.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/main/java/com/google/android/agera/Suppliers.java","contents_url":"https://api.github.com/repos/google/agera/contents/agera/src/main/java/com/google/android/agera/Suppliers.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera;\n+\n+import static com.google.android.agera.Preconditions.checkNotNull;\n+\n+import com.google.android.agera.Common.StaticProducer;\n+\n+import android.support.annotation.NonNull;\n+\n+/**\n+ * Utility methods for obtaining {@link Supplier} instances.\n+ */\n+public final class Suppliers {\n+\n+  /**\n+   * Returns a {@link Supplier} that always supplies the given {@code object} when its\n+   * {@link Supplier#get()} is called.\n+   */\n+  @NonNull\n+  public static <T> Supplier<T> staticSupplier(@NonNull final T object) {\n+    return new StaticProducer<>(object);\n+  }\n+\n+  /**\n+   * Returns a {@link Supplier} that always supplies the value returned from the given\n+   * {@link Function} {@code function} when called with {@code from}.\n+   */\n+  @NonNull\n+  public static <T, F> Supplier<T> functionAsSupplier(\n+      @NonNull final Function<F, T> function, @NonNull final F from) {\n+    return new FunctionToSupplierConverter<>(function, from);\n+  }\n+\n+  private static final class FunctionToSupplierConverter<T, F> implements Supplier<T> {\n+    @NonNull\n+    private final Function<F, T> function;\n+    @NonNull\n+    private final F from;\n+\n+    private FunctionToSupplierConverter(@NonNull final Function<F, T> function,\n+        @NonNull final F from) {\n+      this.function = checkNotNull(function);\n+      this.from = checkNotNull(from);\n+    }\n+\n+    @NonNull\n+    @Override\n+    public T get() {\n+      return function.apply(from);\n+    }\n+  }\n+\n+  private Suppliers() {}\n+}"},{"sha":"28c15d8b6e5d6c3c964bee5fdd7d56e110627e59","filename":"agera/src/main/java/com/google/android/agera/Updatable.java","status":"added","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/main/java/com/google/android/agera/Updatable.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/main/java/com/google/android/agera/Updatable.java","contents_url":"https://api.github.com/repos/google/agera/contents/agera/src/main/java/com/google/android/agera/Updatable.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,28 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera;\n+\n+/**\n+ * Called when when an event has occurred. Can be added to {@link Observable}s to be notified\n+ * of {@link Observable} events.\n+ */\n+public interface Updatable {\n+\n+  /**\n+   * Called when an event has occurred.\n+   */\n+  void update();\n+}"},{"sha":"a4984688d682b131959ff1b35db844e50dc2d988","filename":"agera/src/main/java/com/google/android/agera/UpdateDispatcher.java","status":"added","additions":27,"deletions":0,"changes":27,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/main/java/com/google/android/agera/UpdateDispatcher.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/main/java/com/google/android/agera/UpdateDispatcher.java","contents_url":"https://api.github.com/repos/google/agera/contents/agera/src/main/java/com/google/android/agera/UpdateDispatcher.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,27 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera;\n+\n+/**\n+ * Passes on updates from an {@link Updatable#update} call to any {@link Updatable} added using\n+ * {@link Observable#addUpdatable}. It should be possible to call {@link UpdateDispatcher#update}\n+ * from any thread.\n+ *\n+ * <p>This interface should typically not be implemented by client code; the standard\n+ * implementations obtainable from {@link Observables#updateDispatcher} help implement\n+ * {@link Observable}s adhering to the contract.\n+ */\n+public interface UpdateDispatcher extends Observable, Updatable {}"},{"sha":"7b0a57b2e0b23db1b15403480d257b31524f3f28","filename":"agera/src/test/java/com/google/android/agera/BuildConfigTest.java","status":"added","additions":25,"deletions":0,"changes":25,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/test/java/com/google/android/agera/BuildConfigTest.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/test/java/com/google/android/agera/BuildConfigTest.java","contents_url":"https://api.github.com/repos/google/agera/contents/agera/src/test/java/com/google/android/agera/BuildConfigTest.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,25 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera;\n+\n+import org.junit.Test;\n+\n+public final class BuildConfigTest {\n+  @Test\n+  public void shouldRemoveBuildConfigFromCoverageReport() {\n+    new BuildConfig();\n+  }\n+}"},{"sha":"b154953fc2d04f7b2ade0209282f337cca6de95a","filename":"agera/src/test/java/com/google/android/agera/CommonTest.java","status":"added","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/test/java/com/google/android/agera/CommonTest.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/test/java/com/google/android/agera/CommonTest.java","contents_url":"https://api.github.com/repos/google/agera/contents/agera/src/test/java/com/google/android/agera/CommonTest.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,28 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera;\n+\n+import static com.google.android.agera.test.matchers.HasPrivateConstructor.hasPrivateConstructor;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+\n+import org.junit.Test;\n+\n+public final class CommonTest {\n+  @Test\n+  public void shouldHavePrivateConstructor() {\n+    assertThat(Common.class, hasPrivateConstructor());\n+  }\n+}"},{"sha":"a4ee34dc3f532c16f0581a41a974a9567dfa9ccf","filename":"agera/src/test/java/com/google/android/agera/CompiledRepositoryUsageTest.java","status":"added","additions":123,"deletions":0,"changes":123,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/test/java/com/google/android/agera/CompiledRepositoryUsageTest.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/test/java/com/google/android/agera/CompiledRepositoryUsageTest.java","contents_url":"https://api.github.com/repos/google/agera/contents/agera/src/test/java/com/google/android/agera/CompiledRepositoryUsageTest.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,123 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera;\n+\n+import static com.google.android.agera.Repositories.mutableRepository;\n+import static com.google.android.agera.Repositories.repositoryWithInitialValue;\n+import static com.google.android.agera.RepositoryConfig.CANCEL_FLOW;\n+import static com.google.android.agera.RepositoryConfig.CONTINUE_FLOW;\n+import static com.google.android.agera.RepositoryConfig.RESET_TO_INITIAL_VALUE;\n+import static com.google.android.agera.RepositoryConfig.SEND_INTERRUPT;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.not;\n+import static org.hamcrest.Matchers.nullValue;\n+import static org.mockito.MockitoAnnotations.initMocks;\n+import static org.robolectric.annotation.Config.NONE;\n+\n+import com.google.android.agera.test.SingleSlotDelayedExecutor;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.Config;\n+\n+@Config(manifest = NONE)\n+@RunWith(RobolectricTestRunner.class)\n+public final class CompiledRepositoryUsageTest {\n+  private static final String STRING_A = \"STRING_A\";\n+  private static final String STRING_B = \"STRING_B\";\n+  private static final int INTEGER_1 = 1;\n+  private static final int INTEGER_2 = 2;\n+  private static final double DOUBLE_3 = 3.0;\n+  private static final double DOUBLE_4 = 4.0;\n+\n+  @Mock\n+  private Supplier<String> mockStringSupplier;\n+  @Mock\n+  private Supplier<Result<Integer>> mockIntegerAttemptSupplier;\n+  @Mock\n+  private Supplier<Double> mockDoubleSupplier;\n+  @Mock\n+  private Function<String, Integer> mockStringToInteger;\n+  @Mock\n+  private Function<String, Result<Integer>> mockStringToIntegerAttempt;\n+  @Mock\n+  private Function<Integer, Double> mockIntegerToDouble;\n+  @Mock\n+  private Function<Integer, Result<Double>> mockIntegerToDoubleAttempt;\n+  @Mock\n+  private Function<Result<Integer>, String> mockRecoverIntegerToString;\n+  @Mock\n+  private Merger<Number, Number, String> mockNumbersToString;\n+  @Mock\n+  private Merger<Number, Number, Result<String>> mockNumbersToStringAttempt;\n+  @Mock\n+  private Merger<Object, Object, Boolean> mockChecker;\n+\n+  private SingleSlotDelayedExecutor delayedExecutor1;\n+  private SingleSlotDelayedExecutor delayedExecutor2;\n+  private SingleSlotDelayedExecutor delayedExecutor3;\n+\n+  private MutableRepository<String> stringVariable;\n+  private MutableRepository<Integer> integerVariable;\n+  private MutableRepository<Double> doubleVariable;\n+\n+  @Before\n+  public void setUp() {\n+    initMocks(this);\n+    delayedExecutor1 = new SingleSlotDelayedExecutor();\n+    delayedExecutor2 = new SingleSlotDelayedExecutor();\n+    delayedExecutor3 = new SingleSlotDelayedExecutor();\n+\n+    stringVariable = mutableRepository(STRING_A);\n+    integerVariable = mutableRepository(INTEGER_1);\n+    doubleVariable = mutableRepository(DOUBLE_3);\n+  }\n+\n+  @Test\n+  public void shouldCompileComplexRepository() {\n+    assertThat(repositoryWithInitialValue(STRING_A)\n+        .observe(stringVariable, integerVariable, doubleVariable)\n+        .onUpdatesPer(5000)\n+        .getFrom(mockStringSupplier)\n+        .transform(mockStringToInteger)\n+        .mergeIn(mockDoubleSupplier, mockNumbersToString)\n+        .goTo(delayedExecutor1)\n+        .transform(mockStringToIntegerAttempt)\n+        .transform(mockRecoverIntegerToString)\n+        .goTo(delayedExecutor2)\n+        .attemptTransform(mockStringToIntegerAttempt).orSkip()\n+        .attemptGetFrom(mockIntegerAttemptSupplier).orSkip()\n+        .attemptMergeIn(mockDoubleSupplier, mockNumbersToStringAttempt).orSkip()\n+        .goTo(delayedExecutor3)\n+        .thenGetFrom(mockStringSupplier)\n+        .notifyIf(mockChecker)\n+        .onDeactivation(SEND_INTERRUPT | RESET_TO_INITIAL_VALUE)\n+        .onConcurrentUpdate(SEND_INTERRUPT | RESET_TO_INITIAL_VALUE)\n+        .compileIntoRepositoryWithInitialValue(INTEGER_1)\n+        .onUpdatesPerLoop()\n+        .attemptTransform(mockStringToIntegerAttempt).orSkip()\n+        .sendTo(integerVariable)\n+        .attemptMergeIn(integerVariable, mockNumbersToStringAttempt).orSkip()\n+        .thenTransform(mockStringToInteger)\n+        .notifyIf(mockChecker)\n+        .onDeactivation(CONTINUE_FLOW)\n+        .onConcurrentUpdate(CANCEL_FLOW)\n+        .compile(), not(nullValue()));\n+  }\n+}"},{"sha":"f45267cefb11b907f9ef3ef1054b50cb6e3d88fd","filename":"agera/src/test/java/com/google/android/agera/ConditionsTest.java","status":"added","additions":207,"deletions":0,"changes":207,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/test/java/com/google/android/agera/ConditionsTest.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/test/java/com/google/android/agera/ConditionsTest.java","contents_url":"https://api.github.com/repos/google/agera/contents/agera/src/test/java/com/google/android/agera/ConditionsTest.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,207 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera;\n+\n+import static com.google.android.agera.Conditions.all;\n+import static com.google.android.agera.Conditions.any;\n+import static com.google.android.agera.Conditions.falseCondition;\n+import static com.google.android.agera.Conditions.not;\n+import static com.google.android.agera.Conditions.predicateAsCondition;\n+import static com.google.android.agera.Conditions.staticCondition;\n+import static com.google.android.agera.Conditions.trueCondition;\n+import static com.google.android.agera.Predicates.falsePredicate;\n+import static com.google.android.agera.Predicates.truePredicate;\n+import static com.google.android.agera.test.matchers.ConditionApplies.applies;\n+import static com.google.android.agera.test.matchers.ConditionApplies.doesNotApply;\n+import static com.google.android.agera.test.matchers.HasPrivateConstructor.hasPrivateConstructor;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.sameInstance;\n+import static org.mockito.Matchers.anyInt;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+import static org.mockito.MockitoAnnotations.initMocks;\n+import static org.robolectric.annotation.Config.NONE;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.Config;\n+\n+@Config(manifest = NONE)\n+@RunWith(RobolectricTestRunner.class)\n+public final class ConditionsTest {\n+  private static final int VALUE = 1;\n+\n+  @Mock\n+  private Condition mockConditionFalse;\n+  @Mock\n+  private Condition mockConditionTrue;\n+  @Mock\n+  private Predicate<Integer> mockPredicateFalse;\n+  @Mock\n+  private Predicate<Integer> mockPredicateTrue;\n+  @Mock\n+  private Supplier<Integer> mockValueSupplier;\n+\n+  @Before\n+  public void setUp() {\n+    initMocks(this);\n+    when(mockValueSupplier.get()).thenReturn(VALUE);\n+    when(mockConditionTrue.applies()).thenReturn(true);\n+    when(mockPredicateTrue.apply(anyInt())).thenReturn(true);\n+  }\n+\n+  @Test\n+  public void shouldReturnTrueForTrueCondition() {\n+    assertThat(trueCondition(), applies());\n+  }\n+\n+  @Test\n+  public void shouldReturnFalseForFalseCondition() {\n+    assertThat(falseCondition(), doesNotApply());\n+  }\n+\n+  @Test\n+  public void shouldReturnTrueForTrueStaticCondition() {\n+    assertThat(staticCondition(true), sameInstance(trueCondition()));\n+  }\n+\n+  @Test\n+  public void shouldReturnFalseForFalseStaticCondition() {\n+    assertThat(staticCondition(false), sameInstance(falseCondition()));\n+  }\n+\n+  @Test\n+  public void shouldNegateTrueCondition() {\n+    assertThat(not(trueCondition()), sameInstance(falseCondition()));\n+  }\n+\n+  @Test\n+  public void shouldNegateFalseCondition() {\n+    assertThat(not(falseCondition()), sameInstance(trueCondition()));\n+  }\n+\n+  @Test\n+  public void shouldNegateNonStaticFalseCondition() {\n+    assertThat(not(mockConditionFalse), applies());\n+  }\n+\n+  @Test\n+  public void shouldNegateNonStaticTrueCondition() {\n+    assertThat(not(mockConditionTrue), doesNotApply());\n+  }\n+\n+  @Test\n+  public void shouldReturnOriginalConditionIfNegatedTwice() {\n+    assertThat(not(not(mockConditionFalse)), is(sameInstance(mockConditionFalse)));\n+  }\n+\n+  @Test\n+  public void shouldReturnTrueForAllWithNoConditions() {\n+    assertThat(all(), sameInstance(trueCondition()));\n+  }\n+\n+  @Test\n+  public void shouldReturnOriginalConditionIfAllOfOne() {\n+    assertThat(all(mockConditionFalse), is(sameInstance(mockConditionFalse)));\n+  }\n+\n+  @Test\n+  public void shouldReturnTrueForAllWithTrueConditions() {\n+    assertThat(all(trueCondition(), trueCondition()), sameInstance(trueCondition()));\n+  }\n+\n+  @Test\n+  public void shouldReturnFalseForAllWithOneFalseCondition() {\n+    assertThat(all(trueCondition(), falseCondition()), sameInstance(falseCondition()));\n+  }\n+\n+  @Test\n+  public void shouldReturnTrueForAllWithNonStaticTrueConditions() {\n+    assertThat(all(mockConditionTrue, mockConditionTrue), applies());\n+  }\n+\n+  @Test\n+  public void shouldReturnFalseForAllWithNonStaticOneFalseCondition() {\n+    assertThat(all(mockConditionTrue, mockConditionFalse), doesNotApply());\n+  }\n+\n+  @Test\n+  public void shouldReturnFalseForAllWithNonStaticOneStaticFalseCondition() {\n+    assertThat(all(mockConditionTrue, falseCondition()), sameInstance(falseCondition()));\n+  }\n+\n+  @Test\n+  public void shouldReturnFalseForAnyWithNoConditions() {\n+    assertThat(any(), sameInstance(falseCondition()));\n+  }\n+\n+  @Test\n+  public void shouldReturnOriginalConditionIfAnyOfOne() {\n+    assertThat(any(mockConditionFalse), is(sameInstance(mockConditionFalse)));\n+  }\n+\n+  @Test\n+  public void shouldReturnTrueForAnyWithOneTrueCondition() {\n+    assertThat(any(trueCondition(), falseCondition()), sameInstance(trueCondition()));\n+  }\n+\n+  @Test\n+  public void shouldReturnFalseForAnyWithNoTrueCondition() {\n+    assertThat(any(falseCondition(), falseCondition()), sameInstance(falseCondition()));\n+  }\n+\n+  @Test\n+  public void shouldReturnTrueForAnyWithNonStaticOneTrueCondition() {\n+    assertThat(any(mockConditionTrue, mockConditionFalse), applies());\n+  }\n+\n+  @Test\n+  public void shouldReturnFalseForAnyWithNonStaticNoTrueCondition() {\n+    assertThat(any(mockConditionFalse, mockConditionFalse), doesNotApply());\n+  }\n+\n+  @Test\n+  public void shouldReturnTrueForTruePredicateAsCondition() {\n+    assertThat(predicateAsCondition(truePredicate(), mockValueSupplier),\n+        sameInstance(trueCondition()));\n+  }\n+\n+  @Test\n+  public void shouldReturnFalseForFalsePredicateAsCondition() {\n+    assertThat(predicateAsCondition(falsePredicate(), mockValueSupplier),\n+        sameInstance(falseCondition()));\n+  }\n+\n+  @Test\n+  public void shouldPassSupplierObjectToPredicateForTruePredicateAsCondition() {\n+    assertThat(predicateAsCondition(mockPredicateTrue, mockValueSupplier), applies());\n+  }\n+\n+  @Test\n+  public void shouldPassSupplierObjectToPredicateForFalsePredicateAsCondition() {\n+    assertThat(predicateAsCondition(mockPredicateFalse, mockValueSupplier), doesNotApply());\n+    verify(mockPredicateFalse).apply(VALUE);\n+  }\n+\n+  @Test\n+  public void shouldHavePrivateConstructor() {\n+    assertThat(Conditions.class, hasPrivateConstructor());\n+  }\n+}\n\\ No newline at end of file"},{"sha":"0619891672a5c9d3f0fbfbd0567ca9afcd34dc02","filename":"agera/src/test/java/com/google/android/agera/FunctionsTest.java","status":"added","additions":270,"deletions":0,"changes":270,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/test/java/com/google/android/agera/FunctionsTest.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/test/java/com/google/android/agera/FunctionsTest.java","contents_url":"https://api.github.com/repos/google/agera/contents/agera/src/test/java/com/google/android/agera/FunctionsTest.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,270 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera;\n+\n+import static com.google.android.agera.Functions.functionFrom;\n+import static com.google.android.agera.Functions.functionFromListOf;\n+import static com.google.android.agera.Functions.identityFunction;\n+import static com.google.android.agera.Functions.staticFunction;\n+import static com.google.android.agera.Functions.supplierAsFunction;\n+import static com.google.android.agera.Result.failure;\n+import static com.google.android.agera.Result.success;\n+import static com.google.android.agera.test.matchers.HasPrivateConstructor.hasPrivateConstructor;\n+import static java.util.Arrays.asList;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.contains;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.sameInstance;\n+import static org.mockito.Matchers.anyInt;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.when;\n+import static org.mockito.MockitoAnnotations.initMocks;\n+import static org.robolectric.annotation.Config.NONE;\n+\n+import android.support.annotation.NonNull;\n+\n+import org.hamcrest.Matchers;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.Config;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+@Config(manifest = NONE)\n+@RunWith(RobolectricTestRunner.class)\n+public final class FunctionsTest {\n+  private static final int VALUE = 42;\n+  private static final int VALUE_PLUS_TWO = 44;\n+  private static final int RECOVER_VALUE = 43;\n+  private static final String INPUT_STRING = \"input\";\n+  private static final List<String> INPUT_LIST = asList(\"some\", \"strings\", \"for\", \"testing\");\n+  private static final Result<Integer> SUCCESS = success(VALUE);\n+  @SuppressWarnings(\"ThrowableInstanceNeverThrown\")\n+  private static final Throwable THROWABLE = new Throwable();\n+  private static final Result<Integer> FAILURE = failure(THROWABLE);\n+  private static final Result<Integer> RECOVER_SUCCESS = success(RECOVER_VALUE);\n+\n+  @Mock\n+  private Function<Integer, Result<Integer>> mockDivideTenFunction;\n+  @Mock\n+  private Function<Integer, Integer> mockPlusTwoFunction;\n+  @Mock\n+  private Function<Throwable, Result<Integer>> mockTryRecoverFunction;\n+  @Mock\n+  private Function<Throwable, Integer> mockRecoverFunction;\n+  @Mock\n+  private Supplier<String> mockSupplier;\n+\n+  @Before\n+  public void setup() {\n+    initMocks(this);\n+    when(mockRecoverFunction.apply(THROWABLE)).thenReturn(RECOVER_VALUE);\n+    when(mockTryRecoverFunction.apply(THROWABLE)).thenReturn(RECOVER_SUCCESS);\n+    when(mockPlusTwoFunction.apply(anyInt())).thenReturn(VALUE_PLUS_TWO);\n+    when(mockDivideTenFunction.apply(eq(2))).thenReturn(success(5));\n+    when(mockDivideTenFunction.apply(eq(0))).thenReturn(FAILURE);\n+    when(mockSupplier.get()).thenReturn(INPUT_STRING);\n+  }\n+\n+  @Test\n+  public void shouldReturnObjectFromStaticFunction() {\n+    assertThat(staticFunction(INPUT_STRING).apply(new Object()), is(sameInstance(INPUT_STRING)));\n+  }\n+\n+  @Test\n+  public void shouldReturnObjectFromSupplierForSupplierAsFunction() {\n+    assertThat(supplierAsFunction(mockSupplier).apply(new Object()),\n+        is(sameInstance(INPUT_STRING)));\n+  }\n+\n+  @Test\n+  public void shouldReturnFromObject() {\n+    assertThat(Functions.<String>identityFunction().apply(INPUT_STRING),\n+        is(sameInstance(INPUT_STRING)));\n+  }\n+\n+  @Test\n+  public void shouldBeASingleton() {\n+    assertThat(identityFunction(), is(sameInstance(identityFunction())));\n+  }\n+\n+  @Test\n+  public void shouldHavePrivateConstructor() {\n+    assertThat(Functions.class, hasPrivateConstructor());\n+  }\n+\n+  @Test\n+  public void shouldCreateFunctionFromItemToItem() {\n+    final Function<String, Integer> function = functionFrom(String.class)\n+        .apply(new DoubleString())\n+        .thenApply(new StringLength());\n+\n+    assertThat(function.apply(INPUT_STRING), is(10));\n+  }\n+\n+  @Test\n+  public void shouldCreateFunctionFromItemToItemViaList() {\n+    final Function<String, String> function = functionFrom(String.class)\n+        .apply(new DoubleString())\n+        .unpack(new StringToListChar())\n+        .morph(new SortList<Character>())\n+        .limit(5)\n+        .filter(new CharacterFilter('n'))\n+        .thenApply(new CharacterListToString());\n+\n+    assertThat(function.apply(INPUT_STRING), is(\"nn\"));\n+  }\n+\n+  @Test\n+  public void shouldCreateFunctionFromListToItem() {\n+    final Function<List<String>, Integer> function = functionFromListOf(String.class)\n+        .limit(3)\n+        .map(new StringLength())\n+        .thenApply(new SumOfIntegersInList());\n+\n+    assertThat(function.apply(INPUT_LIST), is(14));\n+  }\n+\n+  @Test\n+  public void shouldCreateFunctionFromItemToList() {\n+    final Function<String, List<Character>> function = functionFrom(String.class)\n+        .apply(new DoubleString())\n+        .unpack(new StringToListChar())\n+        .thenLimit(7);\n+\n+    assertThat(function.apply(INPUT_STRING), contains('i', 'n', 'p', 'u', 't', 'i', 'n'));\n+  }\n+\n+  @Test\n+  public void shouldCreateFunctionFromItemToListWithThenFilter() {\n+    final Function<String, List<Character>> function = functionFrom(String.class)\n+        .apply(new DoubleString())\n+        .unpack(new StringToListChar())\n+        .thenFilter(new CharacterFilter('n'));\n+\n+    assertThat(function.apply(INPUT_STRING), contains('n', 'n'));\n+  }\n+\n+  @Test\n+  public void shouldCreateFunctionFromListToList() {\n+    final Function<List<String>, List<Integer>> function = functionFromListOf(String.class)\n+        .limit(3)\n+        .thenMap(new StringLength());\n+\n+    assertThat(function.apply(INPUT_LIST), contains(4, 7, 3));\n+  }\n+\n+  @Test\n+  public void shouldCreateFunctionFromListToListWithZeroLimit() {\n+    final Function<List<String>, List<Integer>> function = functionFromListOf(String.class)\n+        .limit(0)\n+        .thenMap(new StringLength());\n+\n+    assertThat(function.apply(INPUT_LIST), Matchers.<Integer>emptyIterable());\n+  }\n+\n+  @Test\n+  public void shouldCreateFunctionFromListToListWithLimitLargerThanInputList() {\n+    final Function<List<String>, List<Integer>> function = functionFromListOf(String.class)\n+        .limit(INPUT_LIST.size() * 2)\n+        .thenMap(new StringLength());\n+\n+    assertThat(function.apply(INPUT_LIST), contains(4, 7, 3, 7));\n+  }\n+\n+  private static final class DoubleString implements Function<String, String> {\n+    @NonNull\n+    @Override\n+    public String apply(@NonNull final String input) {\n+      return input + input;\n+    }\n+  }\n+\n+  private static final class StringLength implements Function<String, Integer> {\n+    @NonNull\n+    @Override\n+    public Integer apply(@NonNull final String input) {\n+      return input.length();\n+    }\n+  }\n+\n+  private static final class StringToListChar implements Function<String, List\n+      <Character>> {\n+    @NonNull\n+    @Override\n+    public List<Character> apply(@NonNull final String input) {\n+      List<Character> list = new ArrayList<>();\n+      for (final char c : input.toCharArray()) {\n+        list.add(c);\n+      }\n+      return list;\n+    }\n+  }\n+\n+  private static final class SortList<T extends Comparable<T>>\n+      implements Function<List<T>, List<T>> {\n+    @NonNull\n+    @Override\n+    public List<T> apply(@NonNull final List<T> input) {\n+      final List<T> output = new ArrayList<>(input);\n+      Collections.sort(output);\n+      return output;\n+    }\n+  }\n+\n+  private static final class CharacterFilter implements Predicate<Character> {\n+    private final char character;\n+\n+    public CharacterFilter(final char p) {\n+      character = p;\n+    }\n+\n+    @Override\n+    public boolean apply(@NonNull final Character value) {\n+      return value.equals(character);\n+    }\n+  }\n+\n+  private final class CharacterListToString implements Function<List<Character>, String> {\n+\n+    @NonNull\n+    @Override\n+    public String apply(@NonNull final List<Character> input) {\n+      final StringBuilder stringBuilder = new StringBuilder();\n+      for (final char character : input) {\n+        stringBuilder.append(character);\n+      }\n+      return stringBuilder.toString();\n+    }\n+  }\n+\n+  private static final class SumOfIntegersInList implements Function<List<Integer>, Integer> {\n+    @NonNull\n+    @Override\n+    public Integer apply(@NonNull final List<Integer> input) {\n+      int output = 0;\n+      for (final int integer : input) {\n+        output += integer;\n+      }\n+      return output;\n+    }\n+  }\n+}"},{"sha":"1d73eba6b3989b168405ece12b0f4ac7acda8f37","filename":"agera/src/test/java/com/google/android/agera/MergersTest.java","status":"added","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/test/java/com/google/android/agera/MergersTest.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/test/java/com/google/android/agera/MergersTest.java","contents_url":"https://api.github.com/repos/google/agera/contents/agera/src/test/java/com/google/android/agera/MergersTest.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,34 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera;\n+\n+import static com.google.android.agera.test.matchers.HasPrivateConstructor.hasPrivateConstructor;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.robolectric.annotation.Config.NONE;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.Config;\n+\n+@Config(manifest = NONE)\n+@RunWith(RobolectricTestRunner.class)\n+public final class MergersTest {\n+  @Test\n+  public void shouldHavePrivateConstructor() {\n+    assertThat(Mergers.class, hasPrivateConstructor());\n+  }\n+}"},{"sha":"c4b7f536ab5db3f90901b014ae3cc8e9c301174a","filename":"agera/src/test/java/com/google/android/agera/ObservablesTest.java","status":"added","additions":282,"deletions":0,"changes":282,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/test/java/com/google/android/agera/ObservablesTest.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/test/java/com/google/android/agera/ObservablesTest.java","contents_url":"https://api.github.com/repos/google/agera/contents/agera/src/test/java/com/google/android/agera/ObservablesTest.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,282 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera;\n+\n+import static android.os.Looper.myLooper;\n+import static com.google.android.agera.Conditions.falseCondition;\n+import static com.google.android.agera.Conditions.trueCondition;\n+import static com.google.android.agera.Observables.compositeObservable;\n+import static com.google.android.agera.Observables.conditionalObservable;\n+import static com.google.android.agera.Observables.perLoopObservable;\n+import static com.google.android.agera.Observables.perMillisecondObservable;\n+import static com.google.android.agera.Observables.updateDispatcher;\n+import static com.google.android.agera.test.matchers.HasPrivateConstructor.hasPrivateConstructor;\n+import static com.google.android.agera.test.matchers.UpdatableUpdated.wasUpdated;\n+import static com.google.android.agera.test.mocks.MockUpdatable.mockUpdatable;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.greaterThanOrEqualTo;\n+import static org.hamcrest.Matchers.not;\n+import static org.hamcrest.Matchers.notNullValue;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.MockitoAnnotations.initMocks;\n+import static org.robolectric.annotation.Config.NONE;\n+import static org.robolectric.internal.ShadowExtractor.extract;\n+import static org.robolectric.shadows.ShadowLooper.idleMainLooper;\n+\n+import com.google.android.agera.test.mocks.MockUpdatable;\n+\n+import android.app.Application;\n+import android.content.Intent;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.RuntimeEnvironment;\n+import org.robolectric.annotation.Config;\n+import org.robolectric.shadows.ShadowLooper;\n+import org.robolectric.util.Scheduler;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+@Config(manifest = NONE)\n+@RunWith(RobolectricTestRunner.class)\n+public final class ObservablesTest {\n+  private static final int FILTER_TIME = 10000;\n+\n+  private Observable compositeObservableOfMany;\n+  private Observable chainedCompositeObservableOfOne;\n+  private Observable chainedCompositeObservable;\n+  private UpdateDispatcher firstUpdateDispatcher;\n+  private UpdateDispatcher secondUpdateDispatcher;\n+  private UpdateDispatcher thirdUpdateDispatcher;\n+  private Observable trueConditionalObservable;\n+  private Observable falseConditionalObservable;\n+  private MockUpdatable updatable;\n+  private MockUpdatable secondUpdatable;\n+  private Scheduler scheduler;\n+  private UpdateDispatcher updateDispatcher;\n+  @Mock\n+  private ActivationHandler mockActivationHandler;\n+  private UpdateDispatcher updateDispatcherWithUpdatablesChanged;\n+\n+  @Before\n+  public void setUp() {\n+    initMocks(this);\n+    //noinspection ConstantConditions\n+    scheduler = ((ShadowLooper) extract(myLooper())).getScheduler();\n+    updateDispatcherWithUpdatablesChanged = updateDispatcher(mockActivationHandler);\n+    updateDispatcher = updateDispatcher();\n+    firstUpdateDispatcher = updateDispatcher();\n+    secondUpdateDispatcher = updateDispatcher();\n+    thirdUpdateDispatcher = updateDispatcher();\n+    trueConditionalObservable = conditionalObservable(trueCondition(), firstUpdateDispatcher);\n+    falseConditionalObservable = conditionalObservable(falseCondition(), firstUpdateDispatcher);\n+    compositeObservableOfMany = compositeObservable(firstUpdateDispatcher,\n+        secondUpdateDispatcher);\n+    chainedCompositeObservableOfOne = compositeObservable(\n+        compositeObservable(firstUpdateDispatcher));\n+    chainedCompositeObservable = compositeObservable(compositeObservable(firstUpdateDispatcher,\n+        secondUpdateDispatcher), thirdUpdateDispatcher);\n+    updatable = mockUpdatable();\n+    secondUpdatable = mockUpdatable();\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    updatable.removeFromObservables();\n+    secondUpdatable.removeFromObservables();\n+  }\n+\n+  @Test\n+  public void shouldUpdateFromFirstObservablesInCompositeOfMany() {\n+    updatable.addToObservable(compositeObservableOfMany);\n+\n+    firstUpdateDispatcher.update();\n+\n+    assertThat(updatable, wasUpdated());\n+  }\n+\n+  @Test\n+  public void shouldUpdateFromSecondObservablesInCompositeOfMany() {\n+    updatable.addToObservable(compositeObservableOfMany);\n+\n+    secondUpdateDispatcher.update();\n+\n+    assertThat(updatable, wasUpdated());\n+  }\n+\n+  @Test\n+  public void shouldUpdateFromFirstObservablesInChainedCompositeOfOne() {\n+    updatable.addToObservable(chainedCompositeObservableOfOne);\n+\n+    firstUpdateDispatcher.update();\n+\n+    assertThat(updatable, wasUpdated());\n+  }\n+\n+  @Test\n+  public void shouldUpdateFromFirstChainInChainedComposite() {\n+    updatable.addToObservable(chainedCompositeObservable);\n+\n+    secondUpdateDispatcher.update();\n+\n+    assertThat(updatable, wasUpdated());\n+  }\n+\n+  @Test\n+  public void shouldUpdateFromSecondChainInChainedComposite() {\n+    updatable.addToObservable(chainedCompositeObservable);\n+\n+    thirdUpdateDispatcher.update();\n+\n+    assertThat(updatable, wasUpdated());\n+  }\n+\n+  @Test\n+  public void shouldNotUpdateConditionalObservableForFalseCondition() {\n+    updatable.addToObservable(trueConditionalObservable);\n+\n+    firstUpdateDispatcher.update();\n+\n+    assertThat(updatable, wasUpdated());\n+  }\n+\n+  @Test\n+  public void shouldUpdateConditionalObservableForTrueCondition() {\n+    updatable.addToObservable(falseConditionalObservable);\n+\n+    firstUpdateDispatcher.update();\n+\n+    assertThat(updatable, not(wasUpdated()));\n+  }\n+\n+  @Test\n+  public void shouldBeAbleToCreateEmptyObservable() {\n+    assertThat(compositeObservable(), notNullValue());\n+  }\n+\n+  @Test\n+  public void shouldCallFirstAddedForUpdateDispatcher() {\n+    updatable.addToObservable(updateDispatcherWithUpdatablesChanged);\n+\n+    verify(mockActivationHandler).observableActivated(updateDispatcherWithUpdatablesChanged);\n+  }\n+\n+  @Test\n+  public void shouldCallFirstAddedOnceOnlyForUpdateDispatcher() {\n+    updatable.addToObservable(updateDispatcherWithUpdatablesChanged);\n+    mockUpdatable().addToObservable(updateDispatcherWithUpdatablesChanged);\n+\n+    verify(mockActivationHandler).observableActivated(updateDispatcherWithUpdatablesChanged);\n+  }\n+\n+  @Test\n+  public void shouldCallLastRemovedForUpdateDispatcher() {\n+    updatable.addToObservable(updateDispatcherWithUpdatablesChanged);\n+\n+    verify(mockActivationHandler).observableActivated(updateDispatcherWithUpdatablesChanged);\n+  }\n+\n+  @Test\n+  public void shouldCallLastRemovedOnceOnlyForUpdateDispatcher() {\n+    updatable.addToObservable(updateDispatcherWithUpdatablesChanged);\n+    secondUpdatable.addToObservable(updateDispatcherWithUpdatablesChanged);\n+\n+    updatable.removeFromObservables();\n+    secondUpdatable.removeFromObservables();\n+\n+    verify(mockActivationHandler).observableActivated(updateDispatcherWithUpdatablesChanged);\n+  }\n+\n+\n+  @Test\n+  public void shouldUpdateAllUpdatablesWhenUpdateFromSameThreadForUpdateDispatcher() {\n+    updatable.addToObservable(updateDispatcher);\n+    secondUpdatable.addToObservable(updateDispatcher);\n+\n+    updateDispatcher.update();\n+\n+    assertThat(updatable, wasUpdated());\n+    assertThat(secondUpdatable, wasUpdated());\n+  }\n+\n+  @Test(expected = IllegalStateException.class)\n+  public void shouldThrowIllegalArgumentExceptionIfAddingTheSameUpdatableTwice() {\n+    updatable.addToObservable(updateDispatcher);\n+    updatable.addToObservable(updateDispatcher);\n+  }\n+\n+  @Test(expected = IllegalStateException.class)\n+  public void shouldThrowIllegalArgumentExceptionIfRemovingANotAddedUpdatable() {\n+    updateDispatcher.removeUpdatable(updatable);\n+  }\n+\n+  @Test\n+  public void shouldUpdatePerCycleObservable() {\n+    updatable.addToObservable(perLoopObservable(updateDispatcher));\n+\n+    updateDispatcher.update();\n+\n+    assertThat(updatable, wasUpdated());\n+  }\n+\n+  @Test\n+  public void shouldUpdatePerMillisecondObservable() {\n+    final long expectedDelayedTime = scheduler.getCurrentTime() + FILTER_TIME;\n+    updatable.addToObservable(perMillisecondObservable(FILTER_TIME, updateDispatcher));\n+\n+    updateDispatcher.update();\n+    idleMainLooper(FILTER_TIME);\n+\n+    assertThat(updatable, wasUpdated());\n+    assertThat(scheduler.getCurrentTime(), greaterThanOrEqualTo(expectedDelayedTime));\n+  }\n+\n+  @Test\n+  public void shouldHandleManyObservables() {\n+    final int numberOfObservables = 10;\n+    for (int passes = 0; passes < 3; passes++) {\n+      List<MockUpdatable> mockUpdatables = new ArrayList<>(numberOfObservables);\n+      for (int i = 0; i < numberOfObservables; i++) {\n+        MockUpdatable mockUpdatable = mockUpdatable();\n+        mockUpdatables.add(mockUpdatable);\n+        mockUpdatable.addToObservable(updateDispatcher);\n+      }\n+      Collections.shuffle(mockUpdatables);\n+      for (MockUpdatable mockUpdatable : mockUpdatables) {\n+        mockUpdatable.removeFromObservables();\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void shouldHavePrivateConstructor() {\n+    assertThat(Observables.class, hasPrivateConstructor());\n+  }\n+\n+  private void sendBroadcast(final Intent intent) {\n+    getApplication().sendBroadcast(intent);\n+  }\n+\n+  private static Application getApplication() {\n+    return RuntimeEnvironment.application;\n+  }\n+}"},{"sha":"2254b5d411f394a4f194342aefb8804f3e57bc51","filename":"agera/src/test/java/com/google/android/agera/PreconditionsTest.java","status":"added","additions":68,"deletions":0,"changes":68,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/test/java/com/google/android/agera/PreconditionsTest.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/test/java/com/google/android/agera/PreconditionsTest.java","contents_url":"https://api.github.com/repos/google/agera/contents/agera/src/test/java/com/google/android/agera/PreconditionsTest.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera;\n+\n+import static com.google.android.agera.Preconditions.checkArgument;\n+import static com.google.android.agera.Preconditions.checkNotNull;\n+import static com.google.android.agera.Preconditions.checkState;\n+import static com.google.android.agera.test.matchers.HasPrivateConstructor.hasPrivateConstructor;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.robolectric.annotation.Config.NONE;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.Config;\n+\n+@Config(manifest = NONE)\n+@RunWith(RobolectricTestRunner.class)\n+public final class PreconditionsTest {\n+\n+  @Test(expected = IllegalStateException.class)\n+  public void shouldThrowIllegalStateExceptionForCheckStateWithFalseExpression() {\n+    checkState(false, \"\");\n+  }\n+\n+  @Test\n+  public void shouldNotThrowExceptionForCheckStateWithTrueExpression() {\n+    checkState(true, \"\");\n+  }\n+\n+  @Test\n+  public void shouldNotThrowExceptionForCheckArgumentWithTrueExpression() {\n+    checkArgument(true, \"\");\n+  }\n+\n+  @Test(expected = IllegalArgumentException.class)\n+  public void shouldThrowIllegalArgumentExceptionForCheckArgumentWithFalseExpression() {\n+    checkArgument(false, \"\");\n+  }\n+\n+  @Test(expected = NullPointerException.class)\n+  public void shouldThrowNullPointerExceptionForCheckNotNullWithNull() {\n+    checkNotNull(null);\n+  }\n+\n+  @Test\n+  public void shouldNotThrowExceptionForCheckNotNullWithValidObject() {\n+    checkNotNull(new Object());\n+  }\n+\n+  @Test\n+  public void shouldHavePrivateConstructor() {\n+    assertThat(Preconditions.class, hasPrivateConstructor());\n+  }\n+}\n\\ No newline at end of file"},{"sha":"3a7253d034399791119d4f5539759f595d85c634","filename":"agera/src/test/java/com/google/android/agera/PredicatesTest.java","status":"added","additions":211,"deletions":0,"changes":211,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/test/java/com/google/android/agera/PredicatesTest.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/test/java/com/google/android/agera/PredicatesTest.java","contents_url":"https://api.github.com/repos/google/agera/contents/agera/src/test/java/com/google/android/agera/PredicatesTest.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,211 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera;\n+\n+import static com.google.android.agera.Conditions.falseCondition;\n+import static com.google.android.agera.Conditions.trueCondition;\n+import static com.google.android.agera.Predicates.all;\n+import static com.google.android.agera.Predicates.any;\n+import static com.google.android.agera.Predicates.conditionAsPredicate;\n+import static com.google.android.agera.Predicates.emptyString;\n+import static com.google.android.agera.Predicates.equalTo;\n+import static com.google.android.agera.Predicates.falsePredicate;\n+import static com.google.android.agera.Predicates.instanceOf;\n+import static com.google.android.agera.Predicates.not;\n+import static com.google.android.agera.Predicates.truePredicate;\n+import static com.google.android.agera.test.matchers.HasPrivateConstructor.hasPrivateConstructor;\n+import static com.google.android.agera.test.matchers.PredicateApply.appliesFor;\n+import static com.google.android.agera.test.matchers.PredicateApply.doesNotApplyFor;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.sameInstance;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+import static org.mockito.MockitoAnnotations.initMocks;\n+import static org.robolectric.annotation.Config.NONE;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.Config;\n+\n+@Config(manifest = NONE)\n+@RunWith(RobolectricTestRunner.class)\n+public final class PredicatesTest {\n+  private static final String ITEM = \"item\";\n+  private static final String OTHER_ITEM = \"otheritem\";\n+\n+  @Mock\n+  private Predicate<Object> mockPredicateFalse;\n+  @Mock\n+  private Predicate<Object> mockPredicateTrue;\n+  @Mock\n+  private Condition mockCondition;\n+\n+  @Before\n+  public void setUp() {\n+    initMocks(this);\n+    when(mockPredicateTrue.apply(Mockito.any())).thenReturn(true);\n+  }\n+\n+  @Test\n+  public void shouldReturnTruePredicateForTrueConditionInConditionAsPredicate() {\n+    assertThat(conditionAsPredicate(trueCondition()), sameInstance(truePredicate()));\n+  }\n+\n+  @Test\n+  public void shouldReturnFalsePredicateForFalseConditionInConditionAsPredicate() {\n+    assertThat(conditionAsPredicate(falseCondition()), sameInstance(falsePredicate()));\n+  }\n+\n+  @Test\n+  public void shouldReturnFalseForConditionWithFalseInConditionAsPredicate() {\n+    assertThat(conditionAsPredicate(mockCondition), doesNotApplyFor(new Object()));\n+    verify(mockCondition).applies();\n+  }\n+\n+  @Test\n+  public void shouldNegateTruePredicate() {\n+    assertThat(not(truePredicate()), sameInstance(falsePredicate()));\n+  }\n+\n+  @Test\n+  public void shouldNegateFalsePredicate() {\n+    assertThat(not(falsePredicate()), sameInstance(truePredicate()));\n+  }\n+\n+  @Test\n+  public void shouldNegateNonStaticFalseCondition() {\n+    assertThat(not(mockPredicateFalse), appliesFor(new Object()));\n+  }\n+\n+  @Test\n+  public void shouldNegateNonStaticTrueCondition() {\n+    assertThat(not(mockPredicateTrue), doesNotApplyFor(new Object()));\n+  }\n+\n+  @Test\n+  public void shouldNegatePredicateTwice() {\n+    assertThat(not(not(truePredicate())), appliesFor(new Object()));\n+  }\n+\n+  @Test\n+  public void shouldReturnOriginalPredicateIfNegatedTwice() {\n+    assertThat(not(not(mockPredicateFalse)), is(sameInstance(mockPredicateFalse)));\n+  }\n+\n+  @Test\n+  public void shouldReturnTrueForEmptyStringInEmptyStringPredicate() {\n+    assertThat(emptyString(), appliesFor(\"\"));\n+  }\n+\n+  @Test\n+  public void shouldReturnFalseForStringInEmptyStringPredicate() {\n+    assertThat(emptyString(), doesNotApplyFor(\"A\"));\n+  }\n+\n+  @Test\n+  public void shouldReturnFalseForIncorrectInstanceInInstanceOfPredicate() {\n+    assertThat(instanceOf(Integer.class), doesNotApplyFor(1L));\n+  }\n+\n+  @Test\n+  public void shouldReturnTrueForCorrectInstanceInInstanceOfPredicate() {\n+    assertThat(instanceOf(Long.class), appliesFor(1L));\n+  }\n+\n+  @Test\n+  public void shouldReturnTrueForAllWithNoConditions() {\n+    assertThat(all(), appliesFor(new Object()));\n+  }\n+\n+  @Test\n+  public void shouldReturnOriginalPredicateIfAllOfOne() {\n+    assertThat(all(mockPredicateFalse), is(sameInstance(mockPredicateFalse)));\n+  }\n+\n+  @Test\n+  public void shouldReturnTrueForAllWithTrueConditions() {\n+    assertThat(all(truePredicate(), truePredicate()), appliesFor(new Object()));\n+  }\n+\n+  @Test\n+  public void shouldReturnFalseForAllWithOneFalseCondition() {\n+    assertThat(all(truePredicate(), falsePredicate()), doesNotApplyFor(new Object()));\n+  }\n+\n+  @Test\n+  public void shouldReturnFalseForAnyWithNoConditions() {\n+    assertThat(any(), doesNotApplyFor(new Object()));\n+  }\n+\n+  @Test\n+  public void shouldReturnOriginalPredicateIfAnyOfOne() {\n+    assertThat(any(mockPredicateFalse), is(sameInstance(mockPredicateFalse)));\n+  }\n+\n+  @Test\n+  public void shouldReturnTrueForAnyWithOneTrueCondition() {\n+    assertThat(any(truePredicate(), falsePredicate()), appliesFor(new Object()));\n+  }\n+\n+  @Test\n+  public void shouldReturnFalseForAnyWithNoTrueCondition() {\n+    assertThat(any(falsePredicate(), falsePredicate()), doesNotApplyFor(new Object()));\n+  }\n+\n+  @Test\n+  public void shouldReturnFalseForEqualToWhenNotEqual() {\n+    assertThat(equalTo(ITEM), doesNotApplyFor(OTHER_ITEM));\n+  }\n+\n+  @Test\n+  public void shouldReturnTrueForEqualToWhenEqual() {\n+    assertThat(equalTo(ITEM), appliesFor(ITEM));\n+  }\n+\n+  public void shouldReturnTrueForAnyWithNonStaticOneTrueCondition() {\n+    assertThat(any(mockPredicateTrue, mockPredicateFalse), appliesFor(new Object()));\n+  }\n+\n+  @Test\n+  public void shouldReturnFalseForAnyWithNonStaticNoTrueCondition() {\n+    assertThat(any(mockPredicateFalse, mockPredicateFalse), doesNotApplyFor(new Object()));\n+  }\n+\n+  @Test\n+  public void shouldReturnTrueForAllWithNonStaticTrueConditions() {\n+    assertThat(all(mockPredicateTrue, mockPredicateTrue), appliesFor(new Object()));\n+  }\n+\n+  @Test\n+  public void shouldReturnFalseForAllWithNonStaticOneFalseCondition() {\n+    assertThat(all(mockPredicateTrue, mockPredicateFalse), doesNotApplyFor(new Object()));\n+  }\n+\n+  @Test\n+  public void shouldReturnFalseForAllWithNonStaticOneStaticFalseCondition() {\n+    assertThat(all(mockPredicateTrue, falsePredicate()), sameInstance(falsePredicate()));\n+  }\n+\n+  @Test\n+  public void shouldHavePrivateConstructor() {\n+    assertThat(Predicates.class, hasPrivateConstructor());\n+  }\n+}"},{"sha":"9da3f0153c1fe84fe6e8489ea454f04e4eb0beeb","filename":"agera/src/test/java/com/google/android/agera/RepositoriesTest.java","status":"added","additions":367,"deletions":0,"changes":367,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/test/java/com/google/android/agera/RepositoriesTest.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/test/java/com/google/android/agera/RepositoriesTest.java","contents_url":"https://api.github.com/repos/google/agera/contents/agera/src/test/java/com/google/android/agera/RepositoriesTest.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,367 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera;\n+\n+import static com.google.android.agera.Mergers.staticMerger;\n+import static com.google.android.agera.Observables.updateDispatcher;\n+import static com.google.android.agera.Repositories.mutableRepository;\n+import static com.google.android.agera.Repositories.repository;\n+import static com.google.android.agera.Repositories.repositoryWithInitialValue;\n+import static com.google.android.agera.test.matchers.HasPrivateConstructor.hasPrivateConstructor;\n+import static com.google.android.agera.test.matchers.SupplierGives.has;\n+import static com.google.android.agera.test.matchers.UpdatableUpdated.wasNotUpdated;\n+import static com.google.android.agera.test.matchers.UpdatableUpdated.wasUpdated;\n+import static com.google.android.agera.test.mocks.MockUpdatable.mockUpdatable;\n+import static java.util.Arrays.asList;\n+import static java.util.Collections.singletonList;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyZeroInteractions;\n+import static org.mockito.Mockito.when;\n+import static org.mockito.MockitoAnnotations.initMocks;\n+import static org.robolectric.annotation.Config.NONE;\n+\n+import com.google.android.agera.test.mocks.MockUpdatable;\n+\n+import android.support.annotation.NonNull;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Matchers;\n+import org.mockito.Mock;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.Config;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.Executor;\n+\n+@Config(manifest = NONE)\n+@RunWith(RobolectricTestRunner.class)\n+public final class RepositoriesTest {\n+  private static final int INITIAL_INT_VALUE = 0;\n+  private static final int INT_VALUE = 2;\n+  private static final List<Integer> INITIAL_VALUE = singletonList(1);\n+  private static final List<Integer> LIST = asList(1, 2, 3);\n+  private static final List<Integer> OTHER_LIST = asList(4, 5);\n+  private static final List<Integer> LIST_AND_OTHER_LIST = asList(1, 2, 3, 4, 5);\n+  private static final List<Integer> LIST_PLUS_TWO = asList(3, 4, 5);\n+\n+  private MutableRepository<List<Integer>> listSource;\n+  private MutableRepository<List<Integer>> otherListSource;\n+  private MockUpdatable updatable;\n+  private UpdateDispatcher updateDispatcher;\n+  @Mock\n+  private Receiver<Integer> mockIntegerReceiver;\n+  @Mock\n+  private Receiver<List<Integer>> mockIntegerListReceiver;\n+  @Mock\n+  private Supplier<List<Integer>> mockIntegerListSupplier;\n+  @Mock\n+  private Predicate<List<Integer>> mockIntegerListPredicate;\n+  @Mock\n+  private Function<List<Integer>, Integer> mockIntegerListToIntValueFunction;\n+\n+  @Before\n+  public void setUp() {\n+    initMocks(this);\n+    when(mockIntegerListSupplier.get()).thenReturn(LIST);\n+    when(mockIntegerListToIntValueFunction.apply(Matchers.<List<Integer>>any()))\n+        .thenReturn(INT_VALUE);\n+    updateDispatcher = updateDispatcher();\n+    listSource = mutableRepository(LIST);\n+    otherListSource = mutableRepository(OTHER_LIST);\n+    updatable = mockUpdatable();\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    updatable.removeFromObservables();\n+  }\n+\n+  @Test\n+  public void shouldCreateStaticRepository() {\n+    assertThat(repository(1), has(1));\n+  }\n+\n+  @Test\n+  public void shouldNotGetUpdatesFromStaticRepository() {\n+    final Repository<Integer> repository = repository(INITIAL_INT_VALUE);\n+\n+    updatable.addToObservable(repository);\n+\n+    assertThat(updatable, wasNotUpdated());\n+  }\n+\n+  @Test\n+  public void shouldBePossibleToObserveMutableRepository() {\n+    final Repository<Integer> repository = mutableRepository(INITIAL_INT_VALUE);\n+\n+    updatable.addToObservable(repository);\n+\n+    assertThat(updatable, wasNotUpdated());\n+  }\n+\n+  @Test\n+  public void shouldGetUpdateFromChangedMutableRepository() {\n+    final MutableRepository<Integer> repository = mutableRepository(INITIAL_INT_VALUE);\n+    updatable.addToObservable(repository);\n+\n+    repository.accept(INT_VALUE);\n+\n+    assertThat(updatable, wasUpdated());\n+  }\n+\n+  @Test\n+  public void shouldNotGetUpdateFromMutableRepositoryChangedToSameValue() {\n+    final MutableRepository<Integer> repository = mutableRepository(INITIAL_INT_VALUE);\n+    updatable.addToObservable(repository);\n+\n+    repository.accept(INITIAL_INT_VALUE);\n+\n+    assertThat(updatable, wasNotUpdated());\n+  }\n+\n+  @Test\n+  public void shouldGetUpdateFromRepositoryChangedToNewValue() {\n+    final Repository<List<Integer>> repository = repositoryWithInitialValue(INITIAL_VALUE)\n+        .observe()\n+        .onUpdatesPerLoop()\n+        .thenGetFrom(listSource)\n+        .compile();\n+    updatable.addToObservable(repository);\n+\n+    listSource.accept(OTHER_LIST);\n+\n+    assertThat(updatable, wasUpdated());\n+  }\n+\n+  @Test\n+  public void shouldNotGetUpdateFromRepositoryChangedToSameValue() {\n+    final Repository<List<Integer>> repository = repositoryWithInitialValue(LIST)\n+        .observe()\n+        .onUpdatesPerLoop()\n+        .thenGetFrom(listSource)\n+        .compile();\n+    updatable.addToObservable(repository);\n+\n+    listSource.accept(LIST);\n+\n+    assertThat(updatable, wasNotUpdated());\n+  }\n+\n+  @Test\n+  public void shouldGetUpdateFromAlwaysNotifyRepositoryChangedToSameValue() {\n+    final Repository<List<Integer>> repository = repositoryWithInitialValue(LIST)\n+        .observe()\n+        .onUpdatesPerLoop()\n+        .thenGetFrom(listSource)\n+        .notifyIf(staticMerger(true))\n+        .compile();\n+\n+    updatable.addToObservable(repository);\n+\n+    assertThat(updatable, wasUpdated());\n+  }\n+\n+  @Test\n+  public void shouldContainCorrectValueForLazyRepository() {\n+    final Repository<List<Integer>> repository = repositoryWithInitialValue(INITIAL_VALUE)\n+        .observe()\n+        .onUpdatesPerLoop()\n+        .goLazy()\n+        .thenGetFrom(listSource)\n+        .compile();\n+\n+    updatable.addToObservable(repository);\n+\n+    assertThat(repository, has(LIST));\n+  }\n+\n+  @Test\n+  public void shouldContainCorrectValueForTransformInExecutor() {\n+    final Repository<List<Integer>> repository = repositoryWithInitialValue(INITIAL_VALUE)\n+        .observe()\n+        .onUpdatesPerLoop()\n+        .goTo(new SyncExecutor())\n+        .getFrom(listSource)\n+        .thenTransform(new AddTwoForEachFunction())\n+        .compile();\n+\n+    updatable.addToObservable(repository);\n+\n+    assertThat(repository, has(LIST_PLUS_TWO));\n+  }\n+\n+  @Test\n+  public void shouldContainCorrectValueForTransformInExecutorMidFlow() {\n+    final Repository<List<Integer>> repository = repositoryWithInitialValue(INITIAL_VALUE)\n+        .observe()\n+        .onUpdatesPerLoop()\n+        .getFrom(listSource)\n+        .goTo(new SyncExecutor())\n+        .thenTransform(new AddTwoForEachFunction())\n+        .compile();\n+\n+    updatable.addToObservable(repository);\n+\n+    assertThat(repository, has(LIST_PLUS_TWO));\n+  }\n+\n+  @Test\n+  public void shouldContainCorrectValueForLazyTransformMidFlow() {\n+    final Repository<List<Integer>> repository = repositoryWithInitialValue(INITIAL_VALUE)\n+        .observe()\n+        .onUpdatesPerLoop()\n+        .getFrom(listSource)\n+        .goLazy()\n+        .thenTransform(new AddTwoForEachFunction())\n+        .compile();\n+\n+    updatable.addToObservable(repository);\n+\n+    assertThat(repository, has(LIST_PLUS_TWO));\n+  }\n+\n+  @Test\n+  public void shouldBeAbleToObserveRepository() {\n+    final Repository<List<Integer>> repository = repositoryWithInitialValue(INITIAL_VALUE)\n+        .observe()\n+        .onUpdatesPerLoop()\n+        .thenGetFrom(listSource)\n+        .compile();\n+    updatable.addToObservable(repository);\n+  }\n+\n+  @Test\n+  public void shouldMergeInSecondSource() {\n+    final Repository<List<Integer>> repository = repositoryWithInitialValue(INITIAL_VALUE)\n+        .observe()\n+        .onUpdatesPerLoop()\n+        .getFrom(listSource)\n+        .thenMergeIn(otherListSource, new ListMerger<Integer, Integer, Integer>())\n+        .compile();\n+\n+    updatable.addToObservable(repository);\n+\n+    assertThat(repository, has(LIST_AND_OTHER_LIST));\n+  }\n+\n+  @Test\n+  public void shouldUpdateOnExplicitObservable() {\n+    final Repository<List<Integer>> repository = repositoryWithInitialValue(INITIAL_VALUE)\n+        .observe(updateDispatcher)\n+        .onUpdatesPerLoop()\n+        .thenGetFrom(mockIntegerListSupplier)\n+        .compile();\n+\n+    updatable.addToObservable(repository);\n+    updateDispatcher.update();\n+\n+    assertThat(repository, has(LIST));\n+    verify(mockIntegerListSupplier, times(2)).get();\n+  }\n+\n+  @Test\n+  public void shouldReturnDataWithGoLazyOnDemand() {\n+    final Repository<List<Integer>> repository = repositoryWithInitialValue(INITIAL_VALUE)\n+        .observe()\n+        .onUpdatesPerLoop()\n+        .goLazy()\n+        .thenGetFrom(mockIntegerListSupplier)\n+        .compile();\n+\n+    updatable.addToObservable(repository);\n+\n+    verifyZeroInteractions(mockIntegerListSupplier);\n+    assertThat(repository, has(LIST));\n+    verify(mockIntegerListSupplier).get();\n+  }\n+\n+  @Test\n+  public void shouldCompileIntoNextRepository() throws Exception {\n+    final Repository<Integer> repository = repositoryWithInitialValue(INITIAL_VALUE)\n+        .observe()\n+        .onUpdatesPerLoop()\n+        .thenGetFrom(listSource)\n+        .compileIntoRepositoryWithInitialValue(INITIAL_INT_VALUE)\n+        .onUpdatesPerLoop()\n+        .thenTransform(mockIntegerListToIntValueFunction)\n+        .compile();\n+\n+    updatable.addToObservable(repository);\n+\n+    verify(mockIntegerListToIntValueFunction).apply(LIST);\n+    assertThat(repository, has(INT_VALUE));\n+  }\n+\n+  @Test\n+  public void shouldSendTo() throws Exception {\n+    final Repository<List<Integer>> repository = repositoryWithInitialValue(INITIAL_VALUE)\n+        .observe()\n+        .onUpdatesPerLoop()\n+        .sendTo(mockIntegerListReceiver)\n+        .thenSkip()\n+        .compile();\n+\n+    updatable.addToObservable(repository);\n+\n+    verify(mockIntegerListReceiver).accept(INITIAL_VALUE);\n+    assertThat(updatable, wasNotUpdated());\n+    assertThat(repository, has(INITIAL_VALUE));\n+  }\n+\n+  @Test\n+  public void shouldHavePrivateConstructor() {\n+    assertThat(Repositories.class, hasPrivateConstructor());\n+  }\n+\n+  private final static class ListMerger<A extends C, B extends C, C>\n+      implements Merger<List<A>, List<B>, List<C>> {\n+    @NonNull\n+    @Override\n+    public List<C> merge(@NonNull final List<A> firstList,\n+        @NonNull final List<B> secondList) {\n+      final List<C> result = new ArrayList<>(firstList.size() + secondList.size());\n+      result.addAll(firstList);\n+      result.addAll(secondList);\n+      return result;\n+    }\n+  }\n+\n+  private static final class AddTwoForEachFunction\n+      implements Function<List<Integer>, List<Integer>> {\n+    @NonNull\n+    @Override\n+    public List<Integer> apply(@NonNull final List<Integer> integers) {\n+      final List<Integer> result = new ArrayList<>();\n+      for (final Integer integer : integers) {\n+        result.add(integer + 2);\n+      }\n+      return result;\n+    }\n+  }\n+\n+  private static class SyncExecutor implements Executor {\n+    @Override\n+    public void execute(@NonNull final Runnable command) {\n+      command.run();\n+    }\n+  }\n+}"},{"sha":"8f16595b9d2843c90bfa19519a942b469e7ca775","filename":"agera/src/test/java/com/google/android/agera/RepositoryConfigTest.java","status":"added","additions":333,"deletions":0,"changes":333,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/test/java/com/google/android/agera/RepositoryConfigTest.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/test/java/com/google/android/agera/RepositoryConfigTest.java","contents_url":"https://api.github.com/repos/google/agera/contents/agera/src/test/java/com/google/android/agera/RepositoryConfigTest.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,333 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera;\n+\n+import static com.google.android.agera.Mergers.staticMerger;\n+import static com.google.android.agera.Observables.updateDispatcher;\n+import static com.google.android.agera.Repositories.repositoryWithInitialValue;\n+import static com.google.android.agera.RepositoryConfig.CANCEL_FLOW;\n+import static com.google.android.agera.RepositoryConfig.RESET_TO_INITIAL_VALUE;\n+import static com.google.android.agera.RepositoryConfig.SEND_INTERRUPT;\n+import static com.google.android.agera.test.matchers.SupplierGives.has;\n+import static com.google.android.agera.test.matchers.UpdatableUpdated.wasNotUpdated;\n+import static com.google.android.agera.test.matchers.UpdatableUpdated.wasUpdated;\n+import static com.google.android.agera.test.mocks.MockUpdatable.mockUpdatable;\n+import static java.util.concurrent.Executors.newSingleThreadExecutor;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyZeroInteractions;\n+import static org.mockito.Mockito.when;\n+import static org.mockito.MockitoAnnotations.initMocks;\n+import static org.robolectric.annotation.Config.NONE;\n+import static org.robolectric.shadows.ShadowLooper.runUiThreadTasksIncludingDelayedTasks;\n+\n+import com.google.android.agera.test.SingleSlotDelayedExecutor;\n+import com.google.android.agera.test.mocks.MockUpdatable;\n+\n+import android.support.annotation.NonNull;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.Config;\n+\n+@Config(manifest = NONE)\n+@RunWith(RobolectricTestRunner.class)\n+public final class RepositoryConfigTest {\n+  private static final Object INITIAL_VALUE = \"INITIAL_VALUE\";\n+  private static final Object UPDATED_VALUE = \"UPDATED_VALUE\";\n+  private static final Object ANOTHER_VALUE = \"ANOTHER_VALUE\";\n+  private static final Object RESUMED_VALUE = \"RESUMED_VALUE\";\n+  private static final Object UNEXPECTED_VALUE = \"UNEXPECTED_VALUE\";\n+\n+  private MockUpdatable updatable;\n+  private UpdateDispatcher updateDispatcher;\n+  private SingleSlotDelayedExecutor delayedExecutor;\n+  private InterruptibleMonitoredSupplier monitoredSupplier;\n+  @Mock\n+  private Supplier<Object> mockSupplier;\n+\n+  @Before\n+  public void setUp() {\n+    initMocks(this);\n+    updatable = mockUpdatable();\n+    updateDispatcher = updateDispatcher();\n+    delayedExecutor = new SingleSlotDelayedExecutor();\n+    monitoredSupplier = new InterruptibleMonitoredSupplier();\n+    when(mockSupplier.get()).thenReturn(UPDATED_VALUE);\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    updatable.removeFromObservables();\n+  }\n+\n+  private void retriggerUpdate() {\n+    updatable.resetUpdated();\n+    updateDispatcher.update();\n+    runUiThreadTasksIncludingDelayedTasks();\n+  }\n+\n+  @Test\n+  public void shouldNotNotifyWhenValueUnchanged() throws Exception {\n+    final Repository<Object> repository = repositoryWithInitialValue(INITIAL_VALUE)\n+        .observe(updateDispatcher)\n+        .onUpdatesPerLoop()\n+        .thenGetFrom(mockSupplier)\n+        .compile();\n+\n+    updatable.addToObservable(repository);\n+    retriggerUpdate();\n+    assertThat(updatable, wasNotUpdated());\n+    verify(mockSupplier, times(2)).get();\n+  }\n+\n+  @Test\n+  public void shouldNotifyWhenValueUnchangedButAlwaysNotify() throws Exception {\n+    final Repository<Object> repository = repositoryWithInitialValue(INITIAL_VALUE)\n+        .observe(updateDispatcher)\n+        .onUpdatesPerLoop()\n+        .thenGetFrom(mockSupplier)\n+        .notifyIf(staticMerger(true))\n+        .compile();\n+\n+    updatable.addToObservable(repository);\n+    retriggerUpdate();\n+    assertThat(updatable, wasUpdated());\n+  }\n+\n+  @Test\n+  public void shouldContinueFlowOnDeactivate() throws Exception {\n+    final Repository<Object> repository = repositoryWithInitialValue(INITIAL_VALUE)\n+        .observe(updateDispatcher)\n+        .onUpdatesPerLoop()\n+        .goTo(delayedExecutor)\n+        .thenGetFrom(mockSupplier)\n+        .compile();\n+\n+    updatable.addToObservable(repository);\n+    assertThat(delayedExecutor.hasRunnable(), is(true));\n+    updatable.removeFromObservables();\n+    delayedExecutor.resumeOrThrow();\n+    assertThat(repository, has(UPDATED_VALUE));\n+  }\n+\n+  @Test\n+  public void shouldContinueFlowOnConcurrentUpdate() throws Exception {\n+    when(mockSupplier.get()).thenReturn(UPDATED_VALUE, ANOTHER_VALUE);\n+    final Repository<Object> repository = repositoryWithInitialValue(INITIAL_VALUE)\n+        .observe(updateDispatcher)\n+        .onUpdatesPerLoop()\n+        .goTo(delayedExecutor)\n+        .thenGetFrom(mockSupplier)\n+        .compile();\n+\n+    updatable.addToObservable(repository);\n+    assertThat(delayedExecutor.hasRunnable(), is(true));\n+    retriggerUpdate();\n+    delayedExecutor.resumeOrThrow();\n+    assertThat(updatable, wasUpdated());\n+    assertThat(repository, has(UPDATED_VALUE));\n+\n+    updatable.resetUpdated();\n+    delayedExecutor.resumeOrThrow(); // this asserts second run started for the triggered update\n+    assertThat(updatable, wasUpdated());\n+    assertThat(repository, has(ANOTHER_VALUE));\n+  }\n+\n+  @Test\n+  public void shouldCancelFlowOnDeactivate() throws Exception {\n+    final Repository<Object> repository = repositoryWithInitialValue(INITIAL_VALUE)\n+        .observe(updateDispatcher)\n+        .onUpdatesPerLoop()\n+        .goTo(delayedExecutor)\n+        .thenGetFrom(mockSupplier)\n+        .onDeactivation(CANCEL_FLOW)\n+        .compile();\n+\n+    updatable.addToObservable(repository);\n+    assertThat(delayedExecutor.hasRunnable(), is(true));\n+    updatable.removeFromObservables();\n+    delayedExecutor.resumeOrThrow();\n+    assertThat(repository, has(INITIAL_VALUE));\n+    verifyZeroInteractions(mockSupplier);\n+  }\n+\n+  @Test\n+  public void shouldCancelFlowOnConcurrentUpdate() throws Exception {\n+    final Repository<Object> repository = repositoryWithInitialValue(INITIAL_VALUE)\n+        .observe(updateDispatcher)\n+        .onUpdatesPerLoop()\n+        .goTo(delayedExecutor)\n+        .thenGetFrom(mockSupplier)\n+        .onConcurrentUpdate(CANCEL_FLOW)\n+        .compile();\n+\n+    updatable.addToObservable(repository);\n+    assertThat(delayedExecutor.hasRunnable(), is(true));\n+    retriggerUpdate();\n+    delayedExecutor.resumeOrThrow();\n+    assertThat(updatable, wasNotUpdated());\n+    assertThat(repository, has(INITIAL_VALUE));\n+\n+    delayedExecutor.resumeOrThrow(); // this asserts second run started for the triggered update\n+    assertThat(updatable, wasUpdated());\n+    assertThat(repository, has(UPDATED_VALUE));\n+  }\n+\n+  @Test\n+  public void shouldCancelFlowMidFlow() throws Exception {\n+    final Function<Object, Object> cancellingFunction = new Function<Object, Object>() {\n+      @NonNull\n+      @Override\n+      public Object apply(@NonNull Object input) {\n+        // Sneak in a deactivation here to test cancellation mid-flow.\n+        updatable.removeFromObservables();\n+        return input;\n+      }\n+    };\n+    final Repository<Object> repository = repositoryWithInitialValue(INITIAL_VALUE)\n+        .observe(updateDispatcher)\n+        .onUpdatesPerLoop()\n+        .goTo(delayedExecutor)\n+        .transform(cancellingFunction)\n+        .thenGetFrom(mockSupplier)\n+        .onDeactivation(CANCEL_FLOW)\n+        .compile();\n+\n+    updatable.addToObservable(repository);\n+    delayedExecutor.resumeOrThrow();\n+    assertThat(repository, has(INITIAL_VALUE));\n+    verifyZeroInteractions(mockSupplier);\n+  }\n+\n+  @Test\n+  public void shouldResetToInitialValueOnDeactivate() throws Exception {\n+    final Repository<Object> repository = repositoryWithInitialValue(INITIAL_VALUE)\n+        .observe(updateDispatcher)\n+        .onUpdatesPerLoop()\n+        .thenGetFrom(mockSupplier)\n+        .onDeactivation(RESET_TO_INITIAL_VALUE)\n+        .compile();\n+\n+    updatable.addToObservable(repository);\n+    assertThat(repository, has(UPDATED_VALUE));\n+    updatable.removeFromObservables();\n+    assertThat(repository, has(INITIAL_VALUE));\n+  }\n+\n+  @Test\n+  public void shouldInterruptOnDeactivate() throws Exception {\n+    final Repository<Object> repository = repositoryWithInitialValue(INITIAL_VALUE)\n+        .observe(updateDispatcher)\n+        .onUpdatesPerLoop()\n+        .goTo(newSingleThreadExecutor()) // need background thread to test interrupt\n+        .thenGetFrom(monitoredSupplier)\n+        .onDeactivation(SEND_INTERRUPT)\n+        .compile();\n+\n+    updatable.addToObservable(repository);\n+    monitoredSupplier.waitForGetToStart();\n+    updatable.removeFromObservables();\n+    monitoredSupplier.waitForGetToEnd();\n+    assertThat(monitoredSupplier.wasInterrupted(), is(true));\n+    assertThat(repository, has(INITIAL_VALUE));\n+  }\n+\n+  @Test\n+  public void shouldInterruptOnConcurrentUpdate() throws Exception {\n+    final Repository<Object> repository = repositoryWithInitialValue(INITIAL_VALUE)\n+        .observe(updateDispatcher)\n+        .onUpdatesPerLoop()\n+        .goTo(newSingleThreadExecutor()) // need background thread to test interrupt\n+        .thenGetFrom(monitoredSupplier)\n+        .onConcurrentUpdate(SEND_INTERRUPT)\n+        .compile();\n+\n+    updatable.addToObservable(repository);\n+    monitoredSupplier.waitForGetToStart();\n+    retriggerUpdate();\n+    monitoredSupplier.waitForGetToEnd();\n+    assertThat(monitoredSupplier.wasInterrupted(), is(true));\n+    assertThat(repository, has(INITIAL_VALUE));\n+\n+    runUiThreadTasksIncludingDelayedTasks(); // allows second run; asserted in waitForGetToStart()\n+    monitoredSupplier.waitForGetToStart().resumeIfWaiting().waitForGetToEnd();\n+    assertThat(repository, has(RESUMED_VALUE));\n+  }\n+\n+  private static final class InterruptibleMonitoredSupplier implements Supplier<Object> {\n+    private static final int ENDED = 0;\n+    private static final int STARTED = 1;\n+    private static final int RESUMED = 2;\n+\n+    private int state = ENDED;\n+    private boolean interrupted;\n+\n+    @NonNull\n+    @Override\n+    public synchronized Object get() {\n+      interrupted = false;\n+      state = STARTED;\n+      notifyAll();\n+      try {\n+        return waitForState(RESUMED) ? RESUMED_VALUE : UNEXPECTED_VALUE;\n+      } catch (InterruptedException e) {\n+        interrupted = true;\n+        return UNEXPECTED_VALUE;\n+      } finally {\n+        state = ENDED;\n+        notifyAll();\n+      }\n+    }\n+\n+    public synchronized InterruptibleMonitoredSupplier waitForGetToStart()\n+        throws InterruptedException {\n+      assertThat(\"monitoredSupplier.get() should start\", waitForState(STARTED));\n+      return this;\n+    }\n+\n+    public synchronized InterruptibleMonitoredSupplier resumeIfWaiting() {\n+      state = RESUMED;\n+      notifyAll();\n+      return this;\n+    }\n+\n+    public synchronized void waitForGetToEnd() throws InterruptedException {\n+      assertThat(\"monitoredSupplier.get() should end\", waitForState(ENDED));\n+    }\n+\n+    private boolean waitForState(int waitForState) throws InterruptedException {\n+      long now = System.currentTimeMillis();\n+      long giveUpTime = now + 5000;\n+      while (state != waitForState && now < giveUpTime) {\n+        wait(giveUpTime - now);\n+        now = System.currentTimeMillis();\n+      }\n+      return state == waitForState;\n+    }\n+\n+    public synchronized boolean wasInterrupted() {\n+      return interrupted;\n+    }\n+  }\n+\n+}"},{"sha":"b2b518183475fb1419605c53a0497f5093dbd744","filename":"agera/src/test/java/com/google/android/agera/RepositoryTerminationTest.java","status":"added","additions":170,"deletions":0,"changes":170,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/test/java/com/google/android/agera/RepositoryTerminationTest.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/test/java/com/google/android/agera/RepositoryTerminationTest.java","contents_url":"https://api.github.com/repos/google/agera/contents/agera/src/test/java/com/google/android/agera/RepositoryTerminationTest.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,170 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera;\n+\n+import static com.google.android.agera.Repositories.mutableRepository;\n+import static com.google.android.agera.Repositories.repositoryWithInitialValue;\n+import static com.google.android.agera.Result.failure;\n+import static com.google.android.agera.Result.success;\n+import static com.google.android.agera.test.matchers.SupplierGives.has;\n+import static com.google.android.agera.test.matchers.UpdatableUpdated.wasNotUpdated;\n+import static com.google.android.agera.test.matchers.UpdatableUpdated.wasUpdated;\n+import static com.google.android.agera.test.mocks.MockUpdatable.mockUpdatable;\n+import static java.util.Arrays.asList;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.mockito.Matchers.anyListOf;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+import static org.mockito.MockitoAnnotations.initMocks;\n+import static org.robolectric.annotation.Config.NONE;\n+\n+import com.google.android.agera.test.mocks.MockUpdatable;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.Config;\n+\n+import java.util.List;\n+\n+@Config(manifest = NONE)\n+@RunWith(RobolectricTestRunner.class)\n+public final class RepositoryTerminationTest {\n+  private static final List<Integer> INITIAL_LIST = asList(1, 2, 3);\n+  private static final List<Integer> LIST = asList(4, 5);\n+  private static final List<Integer> OTHER_LIST = asList(6, 7);\n+\n+  private static final int INITIAL_VALUE = 8;\n+  private static final int VALUE = 42;\n+  private static final Result<Integer> SUCCESS_WITH_VALUE = success(VALUE);\n+  private static final Result<Integer> FAILURE = failure();\n+\n+  private MutableRepository<List<Integer>> listSource;\n+  private MutableRepository<List<Integer>> otherListSource;\n+  private MockUpdatable updatable;\n+  @Mock\n+  private Predicate<List<Integer>> mockPredicate;\n+  @Mock\n+  private Receiver<Object> mockReceiver;\n+  @Mock\n+  private Function<List<Integer>, List<Integer>> mockFunction;\n+  @Mock\n+  private Function<List<Integer>, List<Integer>> mockOtherFunction;\n+  @Mock\n+  private Supplier<Result<Integer>> mockAttemptSupplier;\n+\n+  @Before\n+  public void setUp() {\n+    initMocks(this);\n+    listSource = mutableRepository(LIST);\n+    otherListSource = mutableRepository(OTHER_LIST);\n+    updatable = mockUpdatable();\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    updatable.removeFromObservables();\n+  }\n+\n+  @Test\n+  public void shouldEndAfterFailedCheck() {\n+    when(mockPredicate.apply(anyListOf(Integer.class))).thenReturn(true);\n+    when(mockPredicate.apply(INITIAL_LIST)).thenReturn(false);\n+    when(mockFunction.apply(INITIAL_LIST)).thenReturn(LIST);\n+\n+    final Repository<List<Integer>> repository = repositoryWithInitialValue(INITIAL_LIST)\n+        .observe()\n+        .onUpdatesPerLoop()\n+        .check(mockPredicate).orEnd(mockFunction)\n+        .thenGetFrom(otherListSource)\n+        .compile();\n+\n+    updatable.addToObservable(repository);\n+\n+    assertThat(repository, has(LIST));\n+  }\n+\n+  @Test\n+  public void shouldSkipAfterFailedCheck() {\n+    when(mockPredicate.apply(anyListOf(Integer.class))).thenReturn(true);\n+    when(mockPredicate.apply(INITIAL_LIST)).thenReturn(false);\n+\n+    final Repository<List<Integer>> repository = repositoryWithInitialValue(INITIAL_LIST)\n+        .observe()\n+        .onUpdatesPerLoop()\n+        .check(mockPredicate).orSkip()\n+        .thenGetFrom(otherListSource)\n+        .compile();\n+\n+    updatable.addToObservable(repository);\n+\n+    assertThat(repository, has(INITIAL_LIST));\n+    assertThat(updatable, wasNotUpdated());\n+  }\n+\n+  @Test\n+  public void shouldNotSkipAfterPassedCheck() {\n+    when(mockPredicate.apply(anyListOf(Integer.class))).thenReturn(true);\n+\n+    final Repository<List<Integer>> repository = repositoryWithInitialValue(INITIAL_LIST)\n+        .observe()\n+        .onUpdatesPerLoop()\n+        .check(mockPredicate).orSkip()\n+        .thenGetFrom(listSource)\n+        .compile();\n+\n+    updatable.addToObservable(repository);\n+\n+    assertThat(repository, has(LIST));\n+    assertThat(updatable, wasUpdated());\n+  }\n+\n+  @Test\n+  public void shouldSkipWhenAttemptGetFromFails() {\n+    when(mockAttemptSupplier.get()).thenReturn(FAILURE);\n+\n+    final Repository<Integer> repository = repositoryWithInitialValue(INITIAL_VALUE)\n+        .observe()\n+        .onUpdatesPerLoop()\n+        .attemptGetFrom(mockAttemptSupplier).orSkip()\n+        .thenTransform(Functions.<Integer>identityFunction())\n+        .compile();\n+\n+    updatable.addToObservable(repository);\n+\n+    verify(mockAttemptSupplier).get();\n+    assertThat(repository, has(INITIAL_VALUE));\n+  }\n+\n+  @Test\n+  public void shouldNotSkipWhenAttemptGetFromSucceeds() {\n+    when(mockAttemptSupplier.get()).thenReturn(SUCCESS_WITH_VALUE);\n+\n+    final Repository<Integer> repository = repositoryWithInitialValue(INITIAL_VALUE)\n+        .observe()\n+        .onUpdatesPerLoop()\n+        .attemptGetFrom(mockAttemptSupplier).orSkip()\n+        .thenTransform(Functions.<Integer>identityFunction())\n+        .compile();\n+\n+    updatable.addToObservable(repository);\n+\n+    assertThat(repository, has(VALUE));\n+  }\n+}"},{"sha":"cb5ff8c9ac3f538dd825cfe55e3b0171263bb0a7","filename":"agera/src/test/java/com/google/android/agera/ReservoirsTest.java","status":"added","additions":330,"deletions":0,"changes":330,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/test/java/com/google/android/agera/ReservoirsTest.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/test/java/com/google/android/agera/ReservoirsTest.java","contents_url":"https://api.github.com/repos/google/agera/contents/agera/src/test/java/com/google/android/agera/ReservoirsTest.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,330 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera;\n+\n+import static com.google.android.agera.Reservoirs.reservoir;\n+import static com.google.android.agera.Reservoirs.reservoirOf;\n+import static com.google.android.agera.test.matchers.HasPrivateConstructor.hasPrivateConstructor;\n+import static com.google.android.agera.test.matchers.ReservoirGives.givesAbsentValueOf;\n+import static com.google.android.agera.test.matchers.ReservoirGives.givesPresentValue;\n+import static com.google.android.agera.test.matchers.UpdatableUpdated.wasNotUpdated;\n+import static com.google.android.agera.test.matchers.UpdatableUpdated.wasUpdated;\n+import static com.google.android.agera.test.mocks.MockUpdatable.mockUpdatable;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.robolectric.Robolectric.flushForegroundThreadScheduler;\n+import static org.robolectric.annotation.Config.NONE;\n+\n+import com.google.android.agera.test.mocks.MockUpdatable;\n+\n+import android.support.annotation.NonNull;\n+import android.support.annotation.Nullable;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.Config;\n+\n+import java.util.ArrayDeque;\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Queue;\n+import java.util.Set;\n+\n+@Config(manifest = NONE)\n+@RunWith(RobolectricTestRunner.class)\n+public final class ReservoirsTest {\n+  private static final String STRING_A = \"STRING_A\";\n+  private static final String STRING_B = \"STRING_B\";\n+  private static final Integer INTEGER_1 = 1;\n+  private static final Integer INTEGER_2 = 2;\n+\n+  private MockQueue mockQueue;\n+  private Reservoir<String> stringReservoir;\n+  private Reservoir<Integer> integerReservoir;\n+  private Reservoir<Object> customQueueReservoir;\n+  private MockUpdatable updatable;\n+  private MockUpdatable anotherUpdatable;\n+\n+  @Before\n+  public void setUp() {\n+    mockQueue = new MockQueue();\n+    stringReservoir = reservoirOf(String.class);\n+    integerReservoir = reservoir();\n+    customQueueReservoir = reservoir(mockQueue);\n+    updatable = mockUpdatable();\n+    anotherUpdatable = mockUpdatable();\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    updatable.removeFromObservables();\n+    anotherUpdatable.removeFromObservables();\n+  }\n+\n+  @Test\n+  public void shouldGiveAbsentValueFromEmptyReservoir() throws Exception {\n+    assertThat(integerReservoir, givesAbsentValueOf(Integer.class));\n+  }\n+\n+  @Test\n+  public void shouldQueueValues() throws Exception {\n+    stringReservoir.accept(STRING_A);\n+    stringReservoir.accept(STRING_A);\n+    stringReservoir.accept(STRING_B);\n+    stringReservoir.accept(STRING_B);\n+\n+    assertThat(stringReservoir, givesPresentValue(STRING_A));\n+    assertThat(stringReservoir, givesPresentValue(STRING_A));\n+    assertThat(stringReservoir, givesPresentValue(STRING_B));\n+    assertThat(stringReservoir, givesPresentValue(STRING_B));\n+    assertThat(stringReservoir, givesAbsentValueOf(String.class));\n+  }\n+\n+  @Test\n+  public void shouldNotGetUpdateFromEmptyReservoir() throws Exception {\n+    updatable.addToObservable(stringReservoir);\n+\n+    assertThat(updatable, wasNotUpdated());\n+  }\n+\n+  @Test\n+  public void shouldGetUpdateOnFirstValue() throws Exception {\n+    updatable.addToObservable(integerReservoir);\n+    give(integerReservoir, INTEGER_1);\n+\n+    assertThat(updatable, wasUpdated());\n+  }\n+\n+  @Test\n+  public void shouldGetUpdateOnFirstAcceptedValue() throws Exception {\n+    mockQueue.reject(STRING_A);\n+    updatable.addToObservable(customQueueReservoir);\n+\n+    give(customQueueReservoir, STRING_A);\n+    assertThat(updatable, wasNotUpdated());\n+\n+    give(customQueueReservoir, STRING_B);\n+    assertThat(updatable, wasUpdated());\n+  }\n+\n+  @Test\n+  public void shouldGetUpdateFromFirstUpdatableOnRegisteringToNonEmptyReservoir() throws Exception {\n+    give(stringReservoir, STRING_A);\n+\n+    updatable.addToObservable(stringReservoir);\n+    anotherUpdatable.addToObservable(stringReservoir);\n+\n+    assertThat(updatable, wasUpdated());\n+    assertThat(anotherUpdatable, wasNotUpdated());\n+  }\n+\n+  @Test\n+  public void shouldNotGetUpdateOnSecondValueWithoutDequeuingFirst() throws Exception {\n+    updatable.addToObservable(stringReservoir);\n+    give(stringReservoir, STRING_A);\n+    updatable.resetUpdated();\n+    give(stringReservoir, STRING_B);\n+\n+    assertThat(updatable, wasNotUpdated());\n+  }\n+\n+  @Test\n+  public void shouldGetUpdateOnDequeuingNonLastValue() throws Exception {\n+    updatable.addToObservable(integerReservoir);\n+    give(integerReservoir, INTEGER_1);\n+    give(integerReservoir, INTEGER_2);\n+    updatable.resetUpdated();\n+\n+    retrieveFrom(integerReservoir);\n+\n+    assertThat(updatable, wasUpdated());\n+  }\n+\n+  @Test\n+  public void shouldNotGetUpdateOnDequeuingLastValue() throws Exception {\n+    updatable.addToObservable(integerReservoir);\n+    give(integerReservoir, INTEGER_1);\n+    updatable.resetUpdated();\n+\n+    retrieveFrom(integerReservoir);\n+\n+    assertThat(updatable, wasNotUpdated());\n+  }\n+\n+  @Test\n+  public void shouldUseCustomQueue() throws Exception {\n+    mockQueue.reject(INTEGER_1).prioritize(STRING_A);\n+    give(customQueueReservoir, INTEGER_2);\n+    give(customQueueReservoir, STRING_B);\n+    give(customQueueReservoir, INTEGER_1);\n+    give(customQueueReservoir, STRING_A);\n+\n+    assertThat(customQueueReservoir, givesPresentValue((Object) STRING_A));\n+    assertThat(customQueueReservoir, givesPresentValue((Object) INTEGER_2));\n+    assertThat(customQueueReservoir, givesPresentValue((Object) STRING_B));\n+    assertThat(customQueueReservoir, givesAbsentValueOf(Object.class));\n+  }\n+\n+  @Test\n+  public void shouldNotGetUpdateWhenCustomQueuePrioritizesAnotherValue() throws Exception {\n+    mockQueue.prioritize(INTEGER_2);\n+    updatable.addToObservable(customQueueReservoir);\n+    give(customQueueReservoir, INTEGER_1);\n+    updatable.resetUpdated();\n+\n+    give(customQueueReservoir, INTEGER_2);\n+\n+    assertThat(updatable, wasNotUpdated());\n+  }\n+\n+  @Test\n+  public void shouldHavePrivateConstructor() {\n+    assertThat(Reservoirs.class, hasPrivateConstructor());\n+  }\n+\n+  private <T> void give(@NonNull final Reservoir<T> reservoir, @NonNull final T value) {\n+    reservoir.accept(value);\n+    flushForegroundThreadScheduler();\n+  }\n+\n+  private <T> Result<T> retrieveFrom(@NonNull final Reservoir<T> reservoir) {\n+    Result<T> value = reservoir.get();\n+    flushForegroundThreadScheduler();\n+    return value;\n+  }\n+\n+  private static final class MockQueue implements Queue<Object> {\n+\n+    private final Set<Object> toReject = new HashSet<>();\n+    private final Set<Object> toPrioritize = new HashSet<>();\n+    private final ArrayDeque<Object> store = new ArrayDeque<>();\n+\n+    public MockQueue reject(@NonNull final Object o) {\n+      toReject.add(o);\n+      return this;\n+    }\n+\n+    public MockQueue prioritize(@NonNull final Object o) {\n+      toPrioritize.add(o);\n+      return this;\n+    }\n+\n+    @Override\n+    public boolean isEmpty() {\n+      return store.isEmpty();\n+    }\n+\n+    @Override\n+    public boolean offer(@NonNull final Object o) {\n+      if (toReject.contains(o)) {\n+        return false;\n+      }\n+      if (toPrioritize.contains(o)) {\n+        store.offerFirst(o);\n+      } else {\n+        store.offerLast(o);\n+      }\n+      return true;\n+    }\n+\n+    @Nullable\n+    @Override\n+    public Object poll() {\n+      return store.pollFirst();\n+    }\n+\n+    @Override\n+    public boolean add(@NonNull final Object o) {\n+      throw new AssertionError(\"Unexpected\");\n+    }\n+\n+    @Override\n+    public boolean addAll(@NonNull final Collection<?> collection) {\n+      throw new AssertionError(\"Unexpected\");\n+    }\n+\n+    @Override\n+    public void clear() {\n+      throw new AssertionError(\"Unexpected\");\n+    }\n+\n+    @Override\n+    public boolean contains(@NonNull final Object object) {\n+      throw new AssertionError(\"Unexpected\");\n+    }\n+\n+    @Override\n+    public boolean containsAll(@NonNull final Collection<?> ignore) {\n+      throw new AssertionError(\"Unexpected\");\n+    }\n+\n+    @NonNull\n+    @Override\n+    public Iterator<Object> iterator() {\n+      throw new AssertionError(\"Unexpected\");\n+    }\n+\n+    @Override\n+    public boolean remove(Object object) {\n+      throw new AssertionError(\"Unexpected\");\n+    }\n+\n+    @Override\n+    public boolean removeAll(@NonNull final Collection<?> ignore) {\n+      throw new AssertionError(\"Unexpected\");\n+    }\n+\n+    @Override\n+    public boolean retainAll(@NonNull final Collection<?> ignore) {\n+      throw new AssertionError(\"Unexpected\");\n+    }\n+\n+    @Override\n+    public int size() {\n+      throw new AssertionError(\"Unexpected\");\n+    }\n+\n+    @NonNull\n+    @Override\n+    public Object[] toArray() {\n+      throw new AssertionError(\"Unexpected\");\n+    }\n+\n+    @NonNull\n+    @Override\n+    public <T> T[] toArray(@NonNull final T[] ignore) {\n+      throw new AssertionError(\"Unexpected\");\n+    }\n+\n+    @Override\n+    public Object remove() {\n+      throw new AssertionError(\"Unexpected\");\n+    }\n+\n+    @Override\n+    public Object element() {\n+      throw new AssertionError(\"Unexpected\");\n+    }\n+\n+    @Override\n+    public Object peek() {\n+      throw new AssertionError(\"Unexpected\");\n+    }\n+  }\n+}"},{"sha":"bb0d92641b5b8bc325b60e7d1b0b1ec7f34e05b7","filename":"agera/src/test/java/com/google/android/agera/ResultTest.java","status":"added","additions":521,"deletions":0,"changes":521,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/test/java/com/google/android/agera/ResultTest.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/test/java/com/google/android/agera/ResultTest.java","contents_url":"https://api.github.com/repos/google/agera/contents/agera/src/test/java/com/google/android/agera/ResultTest.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,521 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera;\n+\n+import static com.google.android.agera.Result.absent;\n+import static com.google.android.agera.Result.absentIfNull;\n+import static com.google.android.agera.Result.failure;\n+import static com.google.android.agera.Result.present;\n+import static com.google.android.agera.Result.success;\n+import static com.google.android.agera.test.matchers.HasHashCodeOf.hasHashCodeOf;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasToString;\n+import static org.hamcrest.Matchers.instanceOf;\n+import static org.hamcrest.Matchers.isEmptyOrNullString;\n+import static org.hamcrest.Matchers.not;\n+import static org.hamcrest.Matchers.notNullValue;\n+import static org.hamcrest.Matchers.nullValue;\n+import static org.hamcrest.Matchers.sameInstance;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Matchers.anyInt;\n+import static org.mockito.Matchers.anyString;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyZeroInteractions;\n+import static org.mockito.Mockito.when;\n+import static org.mockito.MockitoAnnotations.initMocks;\n+import static org.robolectric.annotation.Config.NONE;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.Config;\n+\n+@Config(manifest = NONE)\n+@RunWith(RobolectricTestRunner.class)\n+public final class ResultTest {\n+  @SuppressWarnings(\"ThrowableInstanceNeverThrown\")\n+  private static final Throwable THROWABLE = new Throwable();\n+  private static final int VALUE = 42;\n+  private static final String STRING_VALUE = \"stringvalue\";\n+  private static final int OTHER_VALUE = 1;\n+  private static final float FLOAT_VALUE = 2;\n+  private static final Result<Integer> SUCCESS_WITH_VALUE = success(VALUE);\n+  private static final Result<Integer> SUCCESS_WITH_OTHER_VALUE = success(OTHER_VALUE);\n+  private static final Result<Float> SUCCESS_WITH_FLOAT_VALUE = success(FLOAT_VALUE);\n+  private static final Result<Integer> FAILURE_WITH_THROWABLE = failure(THROWABLE);\n+  private static final Result<Integer> FAILURE = failure();\n+  private static final Result<Integer> PRESENT_WITH_VALUE = present(VALUE);\n+  private static final Result<Integer> ABSENT = absent();\n+\n+  @Mock\n+  private Function<Integer, Result<Integer>> mockSucceededValueFunction;\n+  @Mock\n+  private Function<Integer, Result<Integer>> mockFailedFunction;\n+  @Mock\n+  private Function<Integer, Integer> mockValueFunction;\n+  @Mock\n+  private Function<Throwable, Integer> mockRecoverValueFunction;\n+  @Mock\n+  private Function<Throwable, Result<Integer>> mockAttemptRecoverValueFunction;\n+  @Mock\n+  private Binder<Integer, String> mockBinder;\n+  @Mock\n+  private Merger<Integer, String, Float> mockMerger;\n+  @Mock\n+  private Merger<Integer, String, Result<Float>> mockAttemptMerger;\n+  @Mock\n+  private Supplier<String> mockSupplier;\n+  @Mock\n+  private Receiver<Integer> mockReceiver;\n+  @Mock\n+  private Receiver<Throwable> mockThrowableReceiver;\n+  @Mock\n+  private Supplier<Integer> mockOtherValueSupplier;\n+  @Mock\n+  private Supplier<Result<Integer>> mockOtherValueSuccessfulAttemptSupplier;\n+  @Mock\n+  private Supplier<Result<Integer>> mockOtherValueFailingAttemptSupplier;\n+\n+  @Before\n+  public void setUp() {\n+    initMocks(this);\n+    when(mockSupplier.get()).thenReturn(STRING_VALUE);\n+    when(mockMerger.merge(anyInt(), anyString())).thenReturn(FLOAT_VALUE);\n+    when(mockAttemptMerger.merge(anyInt(), anyString())).thenReturn(SUCCESS_WITH_FLOAT_VALUE);\n+    when(mockRecoverValueFunction.apply(any(Throwable.class))).thenReturn(VALUE);\n+    when(mockAttemptRecoverValueFunction.apply(any(Throwable.class)))\n+        .thenReturn(SUCCESS_WITH_VALUE);\n+    when(mockSucceededValueFunction.apply(anyInt())).thenReturn(SUCCESS_WITH_VALUE);\n+    when(mockValueFunction.apply(anyInt())).thenReturn(VALUE);\n+    when(mockFailedFunction.apply(anyInt())).thenReturn(FAILURE_WITH_THROWABLE);\n+    when(mockOtherValueSupplier.get()).thenReturn(OTHER_VALUE);\n+    when(mockOtherValueSuccessfulAttemptSupplier.get()).thenReturn(SUCCESS_WITH_OTHER_VALUE);\n+    when(mockOtherValueFailingAttemptSupplier.get()).thenReturn(FAILURE);\n+  }\n+\n+  @Test(expected = FailedResultException.class)\n+  public void shouldThrowExceptionForGetOfFailure() {\n+    FAILURE_WITH_THROWABLE.get();\n+  }\n+\n+  @Test(expected = FailedResultException.class)\n+  public void shouldThrowExceptionForGetOfAbsent() {\n+    ABSENT.get();\n+  }\n+\n+  @Test\n+  public void shouldReturnValueForGetOfSuccess() {\n+    assertThat(SUCCESS_WITH_VALUE.get(), equalTo(VALUE));\n+  }\n+\n+  @Test\n+  public void shouldReturnFalseForSucceededOfFailure() {\n+    assertThat(FAILURE_WITH_THROWABLE.succeeded(), equalTo(false));\n+  }\n+\n+  @Test\n+  public void shouldReturnTrueForSucceeded() {\n+    assertThat(SUCCESS_WITH_VALUE.succeeded(), equalTo(true));\n+  }\n+\n+  @Test\n+  public void shouldReturnTrueForFailedOfFailure() {\n+    assertThat(FAILURE_WITH_THROWABLE.failed(), equalTo(true));\n+  }\n+\n+  @Test\n+  public void shouldReturnFalseForFailedOfSucceeded() {\n+    assertThat(SUCCESS_WITH_VALUE.failed(), equalTo(false));\n+  }\n+\n+  @Test\n+  public void shouldReturnFalseForIsPresentOfAbsent() {\n+    assertThat(ABSENT.isPresent(), equalTo(false));\n+  }\n+\n+  @Test\n+  public void shouldReturnTrueForIsPresentWithValue() {\n+    assertThat(PRESENT_WITH_VALUE.isPresent(), equalTo(true));\n+  }\n+\n+  @Test\n+  public void shouldReturnTrueForIsAbsentOfAbsent() {\n+    assertThat(ABSENT.isAbsent(), equalTo(true));\n+  }\n+\n+  @Test\n+  public void shouldReturnFalseForIsAbsentWithValue() {\n+    assertThat(PRESENT_WITH_VALUE.isAbsent(), equalTo(false));\n+  }\n+\n+  @Test\n+  public void shouldReturnFalseForIsAbsentOfNonAbsentFailure() {\n+    assertThat(FAILURE.isAbsent(), equalTo(false));\n+  }\n+\n+  @Test\n+  public void shouldReturnAbsentForOfNullableWithNull() {\n+    assertThat(Result.<Integer>absentIfNull(null), sameInstance(ABSENT));\n+  }\n+\n+  @Test\n+  public void shouldReturnPresentWithValueForOfNullableWithValue() {\n+    assertThat(absentIfNull(VALUE), equalTo(PRESENT_WITH_VALUE));\n+  }\n+\n+  @Test\n+  public void shouldReturnExceptionForGetFailureOfFailure() {\n+    assertThat(FAILURE.getFailure(), notNullValue());\n+  }\n+\n+  @Test\n+  public void shouldReturnExceptionForGetFailureOfFailureOfExplicitException() {\n+    assertThat(failure(THROWABLE).getFailure(), sameInstance(THROWABLE));\n+  }\n+\n+  @SuppressWarnings(\"ThrowableResultOfMethodCallIgnored\")\n+  @Test(expected = IllegalStateException.class)\n+  public void shouldThrowExceptionForGetFailureOfSuccess() {\n+    SUCCESS_WITH_VALUE.getFailure();\n+  }\n+\n+  @Test\n+  public void shouldReturnValueForOrElseOfSuccess() {\n+    assertThat(SUCCESS_WITH_VALUE.orElse(OTHER_VALUE), equalTo(VALUE));\n+  }\n+\n+  @Test\n+  public void shouldReturnValueForOrGetFromOfSuccessWithValue() {\n+    assertThat(SUCCESS_WITH_VALUE.orGetFrom(mockOtherValueSupplier), equalTo(VALUE));\n+    verifyZeroInteractions(mockOtherValueSupplier);\n+  }\n+\n+  @Test\n+  public void shouldReturnSameInstanceForOrAttemptGetFromOfSuccessWithValue() {\n+    assertThat(SUCCESS_WITH_VALUE.orAttemptGetFrom(mockOtherValueSuccessfulAttemptSupplier),\n+        sameInstance(SUCCESS_WITH_VALUE));\n+    verifyZeroInteractions(mockOtherValueSuccessfulAttemptSupplier);\n+  }\n+\n+  @Test\n+  public void shouldReturnElseValueForOrElseOfFailure() {\n+    assertThat(FAILURE_WITH_THROWABLE.orElse(OTHER_VALUE), equalTo(OTHER_VALUE));\n+  }\n+\n+  @Test\n+  public void shouldReturnOtherValueForOrGetFromOfFailure() {\n+    assertThat(FAILURE_WITH_THROWABLE.orGetFrom(mockOtherValueSupplier), equalTo(OTHER_VALUE));\n+  }\n+\n+  @Test\n+  public void shouldReturnSuccessWithOtherValueForOrAttemptGetFromOfFailure() {\n+    assertThat(FAILURE_WITH_THROWABLE.orAttemptGetFrom(mockOtherValueSuccessfulAttemptSupplier),\n+        sameInstance(SUCCESS_WITH_OTHER_VALUE));\n+  }\n+\n+  @Test\n+  public void shouldReturnOtherResultForOrAttemptGetFromOfFailure() {\n+    assertThat(FAILURE_WITH_THROWABLE.orAttemptGetFrom(mockOtherValueFailingAttemptSupplier),\n+        sameInstance(FAILURE));\n+  }\n+\n+  @Test\n+  public void shouldApplySendIfSucceeded() {\n+    SUCCESS_WITH_VALUE.ifSucceededSendTo(mockReceiver);\n+\n+    verify(mockReceiver).accept(VALUE);\n+  }\n+\n+  @Test\n+  public void shouldNotApplySendIfFailed() {\n+    FAILURE_WITH_THROWABLE.ifSucceededSendTo(mockReceiver);\n+\n+    verifyZeroInteractions(mockReceiver);\n+  }\n+\n+  @Test\n+  public void shouldApplyBindIfSucceeded() {\n+    SUCCESS_WITH_VALUE.ifSucceededBind(STRING_VALUE, mockBinder);\n+\n+    verify(mockBinder).bind(VALUE, STRING_VALUE);\n+  }\n+\n+  @Test\n+  public void shouldNotApplyBindIfFailed() {\n+    FAILURE_WITH_THROWABLE.ifSucceededBind(STRING_VALUE, mockBinder);\n+\n+    verifyZeroInteractions(mockSupplier);\n+    verifyZeroInteractions(mockBinder);\n+  }\n+\n+  @Test\n+  public void shouldApplyBindFromIfSucceeded() {\n+    SUCCESS_WITH_VALUE.ifSucceededBindFrom(mockSupplier, mockBinder);\n+\n+    verify(mockBinder).bind(VALUE, STRING_VALUE);\n+  }\n+\n+  @Test\n+  public void shouldNotApplyBindFromIfFailed() {\n+    FAILURE_WITH_THROWABLE.ifSucceededBindFrom(mockSupplier, mockBinder);\n+\n+    verifyZeroInteractions(mockSupplier);\n+    verifyZeroInteractions(mockBinder);\n+  }\n+\n+  @Test\n+  public void shouldApplySendIfFailed() {\n+    failure(THROWABLE).ifFailedSendTo(mockThrowableReceiver);\n+\n+    verify(mockThrowableReceiver).accept(THROWABLE);\n+  }\n+\n+  @Test\n+  public void shouldAllowForChainedCallsToSendIfFailed() {\n+    assertThat(SUCCESS_WITH_VALUE.ifSucceededSendTo(mockReceiver),\n+        sameInstance(SUCCESS_WITH_VALUE));\n+  }\n+\n+  @Test\n+  public void shouldAllowForChainedCallsToSendIfSucceeded() {\n+    assertThat(SUCCESS_WITH_VALUE.ifFailedSendTo(mockThrowableReceiver),\n+        sameInstance(SUCCESS_WITH_VALUE));\n+    verifyZeroInteractions(mockThrowableReceiver);\n+  }\n+\n+  @Test\n+  public void shouldAllowForChainedCallsToBind() {\n+    assertThat(SUCCESS_WITH_VALUE.ifSucceededBind(STRING_VALUE, mockBinder),\n+        sameInstance(SUCCESS_WITH_VALUE));\n+  }\n+\n+  @Test\n+  public void shouldAllowForChainedCallsToBindFrom() {\n+    assertThat(SUCCESS_WITH_VALUE.ifSucceededBindFrom(mockSupplier, mockBinder),\n+        sameInstance(SUCCESS_WITH_VALUE));\n+  }\n+\n+  @Test\n+  public void shouldReturnFailureForMapOfFailed() {\n+    assertThat(FAILURE_WITH_THROWABLE.ifSucceededMap(mockValueFunction),\n+        sameInstance(FAILURE_WITH_THROWABLE));\n+    verifyZeroInteractions(mockValueFunction);\n+  }\n+\n+  @Test\n+  public void shouldApplyFunctionForMapOfSuccess() {\n+    assertThat(SUCCESS_WITH_OTHER_VALUE.ifSucceededMap(mockValueFunction),\n+        equalTo(SUCCESS_WITH_VALUE));\n+    verify(mockValueFunction).apply(OTHER_VALUE);\n+  }\n+\n+  @Test\n+  @SuppressWarnings(\"unchecked\")\n+  public void shouldReturnFailureForMergeOfFailed() {\n+    assertThat(FAILURE_WITH_THROWABLE.ifSucceededMerge(STRING_VALUE, mockMerger),\n+        sameInstance((Result) FAILURE_WITH_THROWABLE));\n+    verifyZeroInteractions(mockValueFunction);\n+  }\n+\n+  @Test\n+  public void shouldApplyFunctionForMergeOfSuccess() {\n+    assertThat(SUCCESS_WITH_VALUE.ifSucceededMerge(STRING_VALUE, mockMerger),\n+        equalTo(SUCCESS_WITH_FLOAT_VALUE));\n+    verify(mockMerger).merge(VALUE, STRING_VALUE);\n+  }\n+\n+  @Test\n+  @SuppressWarnings(\"unchecked\")\n+  public void shouldReturnFailureForMergeFromOfFailed() {\n+    assertThat(FAILURE_WITH_THROWABLE.ifSucceededMergeFrom(mockSupplier, mockMerger),\n+        sameInstance((Result) FAILURE_WITH_THROWABLE));\n+    verifyZeroInteractions(mockValueFunction);\n+    verifyZeroInteractions(mockSupplier);\n+  }\n+\n+  @Test\n+  public void shouldApplyFunctionForMergeFromOfSuccess() {\n+    assertThat(SUCCESS_WITH_VALUE.ifSucceededMergeFrom(mockSupplier, mockMerger),\n+        equalTo(SUCCESS_WITH_FLOAT_VALUE));\n+    verify(mockMerger).merge(VALUE, STRING_VALUE);\n+  }\n+\n+  @Test\n+  @SuppressWarnings(\"unchecked\")\n+  public void shouldReturnFailureForAttemptMergeOfFailed() {\n+    assertThat(FAILURE_WITH_THROWABLE.ifSucceededAttemptMerge(STRING_VALUE, mockAttemptMerger),\n+        sameInstance((Result) FAILURE_WITH_THROWABLE));\n+    verifyZeroInteractions(mockValueFunction);\n+  }\n+\n+  @Test\n+  public void shouldApplyFunctionForAttemptMergeOfSuccess() {\n+    assertThat(SUCCESS_WITH_VALUE.ifSucceededAttemptMerge(STRING_VALUE, mockAttemptMerger),\n+        equalTo(SUCCESS_WITH_FLOAT_VALUE));\n+    verify(mockAttemptMerger).merge(VALUE, STRING_VALUE);\n+  }\n+\n+  @Test\n+  @SuppressWarnings(\"unchecked\")\n+  public void shouldReturnFailureForAttemptMergeFromOfFailed() {\n+    assertThat(FAILURE_WITH_THROWABLE.ifSucceededAttemptMergeFrom(mockSupplier, mockAttemptMerger),\n+        sameInstance((Result) FAILURE_WITH_THROWABLE));\n+    verifyZeroInteractions(mockValueFunction);\n+    verifyZeroInteractions(mockSupplier);\n+  }\n+\n+  @Test\n+  public void shouldApplyFunctionForAttemptMergeFromOfSuccess() {\n+    assertThat(SUCCESS_WITH_VALUE.ifSucceededAttemptMergeFrom(mockSupplier, mockAttemptMerger),\n+        equalTo(SUCCESS_WITH_FLOAT_VALUE));\n+    verify(mockAttemptMerger).merge(VALUE, STRING_VALUE);\n+  }\n+\n+  @Test\n+  public void shouldReturnFailureForFlatMapOfFailed() {\n+    assertThat(FAILURE_WITH_THROWABLE.ifSucceededAttemptMap(mockSucceededValueFunction),\n+        sameInstance(FAILURE_WITH_THROWABLE));\n+    verifyZeroInteractions(mockSucceededValueFunction);\n+  }\n+\n+  @Test\n+  public void shouldReturnValueOfSucceededFromAppliedFunctionForFlatMapOfSucceeded() {\n+    assertThat(SUCCESS_WITH_OTHER_VALUE.ifSucceededAttemptMap(mockSucceededValueFunction),\n+        equalTo(SUCCESS_WITH_VALUE));\n+    verify(mockSucceededValueFunction).apply(OTHER_VALUE);\n+  }\n+\n+  @Test\n+  public void shouldReturnFailureIfAttemptFromAppliedFunctionForFlatMapOfValueReturnsFailure() {\n+    assertThat(SUCCESS_WITH_VALUE.ifSucceededAttemptMap(mockFailedFunction),\n+        equalTo(FAILURE_WITH_THROWABLE));\n+    verify(mockFailedFunction).apply(VALUE);\n+  }\n+\n+  @Test\n+  public void shouldReturnRecoverSuccessForAttemptRecoverOfFailure() {\n+    assertThat(FAILURE_WITH_THROWABLE.attemptRecover(mockAttemptRecoverValueFunction),\n+        equalTo(SUCCESS_WITH_VALUE));\n+    verify(mockAttemptRecoverValueFunction).apply(THROWABLE);\n+  }\n+\n+  @Test\n+  public void shouldReturnRecoverValueForRecoverOfFailure() {\n+    assertThat(FAILURE_WITH_THROWABLE.recover(mockRecoverValueFunction), equalTo(VALUE));\n+    verify(mockRecoverValueFunction).apply(THROWABLE);\n+  }\n+\n+  @Test\n+  public void shouldReturnSuccessForAttemptRecoverOfSuccess() {\n+    assertThat(SUCCESS_WITH_OTHER_VALUE.attemptRecover(mockAttemptRecoverValueFunction),\n+        equalTo(SUCCESS_WITH_OTHER_VALUE));\n+    verifyZeroInteractions(mockRecoverValueFunction);\n+  }\n+\n+  @Test\n+  public void shouldReturnValueForRecoverOfSuccess() {\n+    assertThat(SUCCESS_WITH_VALUE.recover(mockRecoverValueFunction), equalTo(VALUE));\n+    verifyZeroInteractions(mockRecoverValueFunction);\n+  }\n+\n+  @Test\n+  public void shouldNotBeEqualForDifferentValues() {\n+    assertThat(SUCCESS_WITH_VALUE, not(equalTo(SUCCESS_WITH_OTHER_VALUE)));\n+  }\n+\n+  @Test\n+  public void shouldBeEqualForSameValue() {\n+    assertThat(SUCCESS_WITH_VALUE, equalTo(success(VALUE)));\n+  }\n+\n+  @Test\n+  public void shouldReturnValueForOrNullOnSuccess() {\n+    assertThat(SUCCESS_WITH_VALUE.orNull(), equalTo(VALUE));\n+  }\n+\n+  @Test\n+  public void shouldReturnNullForOrNullOnFailure() {\n+    assertThat(FAILURE_WITH_THROWABLE.orNull(), nullValue());\n+  }\n+\n+  @Test\n+  public void shouldReturnNullForFailureOrNullOnSuccess() {\n+    assertThat(SUCCESS_WITH_VALUE.failureOrNull(), nullValue());\n+  }\n+\n+  @Test\n+  public void shouldReturnSameThrowableForFailureOrNullOnFailureWithExplicitThrowable() {\n+    assertThat(FAILURE_WITH_THROWABLE.failureOrNull(), sameInstance(THROWABLE));\n+  }\n+\n+  @Test\n+  public void shouldReturnSomethingForFailureOrNullOnFailure() {\n+    assertThat(FAILURE.failureOrNull(), notNullValue());\n+  }\n+\n+  @Test\n+  public void shouldReturnNullPointerExceptionForFailureOrNullOnAbsent() {\n+    assertThat(ABSENT.failureOrNull(), instanceOf(NullPointerException.class));\n+  }\n+\n+  @Test\n+  public void shouldBeEqualForFailureAndFailure() {\n+    assertThat(FAILURE_WITH_THROWABLE, equalTo(Result.<Integer>failure(THROWABLE)));\n+  }\n+\n+  @Test\n+  public void shouldBeSingletonForFailureWithoutExplicitThrowable() {\n+    assertThat(failure(), equalTo(failure()));\n+  }\n+\n+  @Test\n+  public void shouldNotBeEqualForFailureAndSuccess() {\n+    assertThat(SUCCESS_WITH_VALUE, not(equalTo(FAILURE_WITH_THROWABLE)));\n+  }\n+\n+  @Test\n+  public void shouldNotBeEqualForDifferentType() {\n+    assertThat(SUCCESS_WITH_VALUE, not(equalTo(new Object())));\n+  }\n+\n+  @Test\n+  public void shouldHaveSameHashcodeForSameValue() {\n+    assertThat(SUCCESS_WITH_VALUE, hasHashCodeOf(success(VALUE)));\n+  }\n+\n+  @Test\n+  public void shouldPrintStringRepresentationForSuccess() {\n+    assertThat(SUCCESS_WITH_VALUE, hasToString(not(isEmptyOrNullString())));\n+  }\n+\n+  @Test\n+  public void shouldPrintStringRepresentationForFailure() {\n+    assertThat(FAILURE, hasToString(not(isEmptyOrNullString())));\n+  }\n+\n+  @Test\n+  public void shouldPrintStringRepresentationForFailureWithExplicitThrowable() {\n+    assertThat(FAILURE_WITH_THROWABLE, hasToString(not(isEmptyOrNullString())));\n+  }\n+\n+  @Test\n+  public void shouldPrintStringRepresentationForAbsent() {\n+    assertThat(ABSENT, hasToString(not(isEmptyOrNullString())));\n+  }\n+}"},{"sha":"5bcd15b2055bc5ba1d6f11071cbd27ee920b1cc3","filename":"agera/src/test/java/com/google/android/agera/SuppliersTest.java","status":"added","additions":63,"deletions":0,"changes":63,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/test/java/com/google/android/agera/SuppliersTest.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/test/java/com/google/android/agera/SuppliersTest.java","contents_url":"https://api.github.com/repos/google/agera/contents/agera/src/test/java/com/google/android/agera/SuppliersTest.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,63 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera;\n+\n+import static com.google.android.agera.Suppliers.functionAsSupplier;\n+import static com.google.android.agera.Suppliers.staticSupplier;\n+import static com.google.android.agera.test.matchers.HasPrivateConstructor.hasPrivateConstructor;\n+import static com.google.android.agera.test.matchers.SupplierGives.gives;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.mockito.Mockito.when;\n+import static org.mockito.MockitoAnnotations.initMocks;\n+import static org.robolectric.annotation.Config.NONE;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.Config;\n+\n+@Config(manifest = NONE)\n+@RunWith(RobolectricTestRunner.class)\n+public final class SuppliersTest {\n+  private static final Object ITEM = new Object();\n+  private static final Object RETURN_ITEM = new Object();\n+\n+  @Mock\n+  private Function<Object, Object> mockFunction;\n+\n+  @Before\n+  public void setUp() {\n+    initMocks(this);\n+    when(mockFunction.apply(ITEM)).thenReturn(RETURN_ITEM);\n+  }\n+\n+  @Test\n+  public void shouldRunFactoryWithFromObjectAndReturnFactoryOutputForFunctionWithSupplier() {\n+    assertThat(functionAsSupplier(mockFunction, ITEM), gives(RETURN_ITEM));\n+  }\n+\n+  @Test\n+  public void shouldReturnStaticSupplierValue() {\n+    assertThat(staticSupplier(ITEM), gives(ITEM));\n+  }\n+\n+  @Test\n+  public void shouldHavePrivateConstructor() {\n+    assertThat(Suppliers.class, hasPrivateConstructor());\n+  }\n+}"},{"sha":"4b630b1115c8e2414833deb820a578d002ba6e22","filename":"agera/src/test/java/com/google/android/agera/test/SingleSlotDelayedExecutor.java","status":"added","additions":50,"deletions":0,"changes":50,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/test/java/com/google/android/agera/test/SingleSlotDelayedExecutor.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/test/java/com/google/android/agera/test/SingleSlotDelayedExecutor.java","contents_url":"https://api.github.com/repos/google/agera/contents/agera/src/test/java/com/google/android/agera/test/SingleSlotDelayedExecutor.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera.test;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.notNullValue;\n+import static org.hamcrest.Matchers.nullValue;\n+\n+import android.support.annotation.NonNull;\n+import android.support.annotation.Nullable;\n+\n+import java.util.concurrent.Executor;\n+\n+public final class SingleSlotDelayedExecutor implements Executor {\n+  @Nullable\n+  private Runnable runnable;\n+\n+  @Override\n+  public void execute(@NonNull final Runnable command) {\n+    assertThat(\"delayedExecutor cannot queue more than one Runnable\", runnable, is(nullValue()));\n+    runnable = command;\n+  }\n+\n+  public boolean hasRunnable() {\n+    return runnable != null;\n+  }\n+\n+  public void resumeOrThrow() {\n+    Runnable runnable = this.runnable;\n+    assertThat(\"delayedExecutor should have queued a Runnable for resumeOrThrow()\",\n+        runnable, is(notNullValue()));\n+    this.runnable = null;\n+    //noinspection ConstantConditions\n+    runnable.run();\n+  }\n+}"},{"sha":"cda7bf31a7e02b72a36ec1338bb4cb71395f7167","filename":"agera/src/test/java/com/google/android/agera/test/matchers/ConditionApplies.java","status":"added","additions":51,"deletions":0,"changes":51,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/test/java/com/google/android/agera/test/matchers/ConditionApplies.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/test/java/com/google/android/agera/test/matchers/ConditionApplies.java","contents_url":"https://api.github.com/repos/google/agera/contents/agera/src/test/java/com/google/android/agera/test/matchers/ConditionApplies.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera.test.matchers;\n+\n+import com.google.android.agera.Condition;\n+\n+import org.hamcrest.Description;\n+import org.hamcrest.Factory;\n+import org.hamcrest.Matcher;\n+import org.hamcrest.TypeSafeMatcher;\n+\n+public final class ConditionApplies extends TypeSafeMatcher<Condition> {\n+  private final boolean value;\n+\n+  private ConditionApplies(final boolean value) {\n+    this.value = value;\n+  }\n+\n+  @Override\n+  protected boolean matchesSafely(final Condition condition) {\n+    return condition.applies() == value;\n+  }\n+\n+  @Override\n+  public void describeTo(final Description description) {\n+    description.appendText(value ? \"applies \" : \"does not apply\");\n+  }\n+\n+  @Factory\n+  public static Matcher<Condition> applies() {\n+    return new ConditionApplies(true);\n+  }\n+\n+  @Factory\n+  public static Matcher<Condition> doesNotApply() {\n+    return new ConditionApplies(false);\n+  }\n+}"},{"sha":"7581d7f5a51e5c1a93294ac3e25875a8e2fac6a7","filename":"agera/src/test/java/com/google/android/agera/test/matchers/HasHashCodeOf.java","status":"added","additions":48,"deletions":0,"changes":48,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/test/java/com/google/android/agera/test/matchers/HasHashCodeOf.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/test/java/com/google/android/agera/test/matchers/HasHashCodeOf.java","contents_url":"https://api.github.com/repos/google/agera/contents/agera/src/test/java/com/google/android/agera/test/matchers/HasHashCodeOf.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,48 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera.test.matchers;\n+\n+import android.support.annotation.NonNull;\n+\n+import org.hamcrest.Description;\n+import org.hamcrest.Factory;\n+import org.hamcrest.Matcher;\n+import org.hamcrest.TypeSafeMatcher;\n+\n+public final class HasHashCodeOf extends TypeSafeMatcher<Object> {\n+  @NonNull\n+  private final Object object;\n+\n+  private HasHashCodeOf(@NonNull final Object object) {\n+    this.object = object;\n+  }\n+\n+  @Override\n+  protected boolean matchesSafely(@NonNull final Object item) {\n+    return item.hashCode() == object.hashCode();\n+  }\n+\n+  @Override\n+  public void describeTo(final Description description) {\n+    description.appendText(\"same hashcode as \");\n+    description.appendValue(object);\n+  }\n+\n+  @Factory\n+  public static Matcher<Object> hasHashCodeOf(@NonNull final Object object) {\n+    return new HasHashCodeOf(object);\n+  }\n+}"},{"sha":"1212ab28b67e429271d406bab2e249cb50544258","filename":"agera/src/test/java/com/google/android/agera/test/matchers/HasPrivateConstructor.java","status":"added","additions":53,"deletions":0,"changes":53,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/test/java/com/google/android/agera/test/matchers/HasPrivateConstructor.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/test/java/com/google/android/agera/test/matchers/HasPrivateConstructor.java","contents_url":"https://api.github.com/repos/google/agera/contents/agera/src/test/java/com/google/android/agera/test/matchers/HasPrivateConstructor.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,53 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera.test.matchers;\n+\n+import org.hamcrest.Description;\n+import org.hamcrest.Factory;\n+import org.hamcrest.Matcher;\n+import org.hamcrest.TypeSafeMatcher;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Modifier;\n+\n+public final class HasPrivateConstructor extends TypeSafeMatcher<Class<?>> {\n+  private static final HasPrivateConstructor INSTANCE = new HasPrivateConstructor();\n+\n+  private HasPrivateConstructor() {\n+  }\n+\n+  @Override\n+  protected boolean matchesSafely(final Class<?> clazz) {\n+    try {\n+      Constructor<?> constructor = clazz.getDeclaredConstructor();\n+      constructor.setAccessible(true);\n+      constructor.newInstance();\n+      return Modifier.isPrivate(constructor.getModifiers());\n+    } catch (final Exception ignored) {\n+    }\n+    return false;\n+  }\n+\n+  @Override\n+  public void describeTo(final Description description) {\n+    description.appendText(\"should have private constructor\");\n+  }\n+\n+  @Factory\n+  public static Matcher<Class<?>> hasPrivateConstructor() {\n+    return INSTANCE;\n+  }\n+}"},{"sha":"7d93c7619ca70544922dddd5eb74edd4e39a2b55","filename":"agera/src/test/java/com/google/android/agera/test/matchers/PredicateApply.java","status":"added","additions":56,"deletions":0,"changes":56,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/test/java/com/google/android/agera/test/matchers/PredicateApply.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/test/java/com/google/android/agera/test/matchers/PredicateApply.java","contents_url":"https://api.github.com/repos/google/agera/contents/agera/src/test/java/com/google/android/agera/test/matchers/PredicateApply.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera.test.matchers;\n+\n+import com.google.android.agera.Predicate;\n+\n+import android.support.annotation.NonNull;\n+\n+import org.hamcrest.Description;\n+import org.hamcrest.Factory;\n+import org.hamcrest.Matcher;\n+import org.hamcrest.TypeSafeMatcher;\n+\n+public final class PredicateApply<T> extends TypeSafeMatcher<Predicate<? super T>> {\n+  private final boolean value;\n+  @NonNull\n+  private final T data;\n+\n+  private PredicateApply(final boolean value, @NonNull final T data) {\n+    this.value = value;\n+    this.data = data;\n+  }\n+\n+  @Override\n+  protected boolean matchesSafely(final Predicate<? super T> predicate) {\n+    return predicate.apply(data) == value;\n+  }\n+\n+  @Override\n+  public void describeTo(final Description description) {\n+    description.appendText(value ? \"applies for \" : \"does not apply for \").appendValue(data);\n+  }\n+\n+  @Factory\n+  public static <T> Matcher<Predicate<? super T>> appliesFor(@NonNull final T data) {\n+    return new PredicateApply<>(true, data);\n+  }\n+\n+  @Factory\n+  public static <T> Matcher<Predicate<? super T>> doesNotApplyFor(@NonNull final T data) {\n+    return new PredicateApply<>(false, data);\n+  }\n+}"},{"sha":"59b2861aebd64c07eb9ae43a9a5d7b963e07a403","filename":"agera/src/test/java/com/google/android/agera/test/matchers/ReservoirGives.java","status":"added","additions":87,"deletions":0,"changes":87,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/test/java/com/google/android/agera/test/matchers/ReservoirGives.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/test/java/com/google/android/agera/test/matchers/ReservoirGives.java","contents_url":"https://api.github.com/repos/google/agera/contents/agera/src/test/java/com/google/android/agera/test/matchers/ReservoirGives.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera.test.matchers;\n+\n+import static com.google.android.agera.Result.present;\n+\n+import com.google.android.agera.Reservoir;\n+import com.google.android.agera.Result;\n+\n+import android.support.annotation.NonNull;\n+import android.support.annotation.Nullable;\n+\n+import org.hamcrest.Description;\n+import org.hamcrest.Factory;\n+import org.hamcrest.Matcher;\n+import org.hamcrest.TypeSafeMatcher;\n+\n+/**\n+ * Similar to {@link SupplierGives} but takes care not to dequeue another item from\n+ * the {@link Reservoir} that failed to match.\n+ */\n+public final class ReservoirGives<T> extends TypeSafeMatcher<Reservoir<T>> {\n+  @NonNull\n+  private final Result<T> value;\n+\n+  @Nullable\n+  private Reservoir<T> lastFailedMatch;\n+  @Nullable\n+  private Result<T> lastUnequalValue;\n+\n+  private ReservoirGives(@NonNull final Result<T> value) {\n+    this.value = value;\n+  }\n+\n+  @Factory\n+  public static <T> Matcher<Reservoir<T>> givesPresentValue(final T value) {\n+    return new ReservoirGives<>(present(value));\n+  }\n+\n+  @Factory\n+  public static <T> Matcher<Reservoir<T>> givesAbsentValueOf(\n+      @SuppressWarnings(\"unused\") @Nullable final Class<T> ofClass) {\n+    return new ReservoirGives<>(Result.<T>absent());\n+  }\n+\n+  @Override\n+  protected boolean matchesSafely(@NonNull final Reservoir<T> item) {\n+    Result<T> got = item.get();\n+    if (value.equals(got)) {\n+      if (lastFailedMatch == item) {\n+        lastFailedMatch = null;\n+      }\n+      return true;\n+    }\n+    lastFailedMatch = item;\n+    lastUnequalValue = got;\n+    return false;\n+  }\n+\n+  @Override\n+  public void describeTo(@NonNull final Description description) {\n+    description.appendText(\"gives value \").appendValue(value);\n+  }\n+\n+  @Override\n+  protected void describeMismatchSafely(@NonNull final Reservoir<T> item,\n+      @NonNull final Description mismatchDescription) {\n+    if (item == lastFailedMatch) {\n+      mismatchDescription.appendText(\"got \").appendValue(lastUnequalValue);\n+    } else {\n+      mismatchDescription.appendText(\"got a wrong value from reservoir \" + item);\n+    }\n+  }\n+}"},{"sha":"0da5ee39e32496ecd7a11483639eda4c425c4f08","filename":"agera/src/test/java/com/google/android/agera/test/matchers/SupplierGives.java","status":"added","additions":60,"deletions":0,"changes":60,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/test/java/com/google/android/agera/test/matchers/SupplierGives.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/test/java/com/google/android/agera/test/matchers/SupplierGives.java","contents_url":"https://api.github.com/repos/google/agera/contents/agera/src/test/java/com/google/android/agera/test/matchers/SupplierGives.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera.test.matchers;\n+\n+import com.google.android.agera.Supplier;\n+\n+import android.support.annotation.NonNull;\n+\n+import org.hamcrest.Description;\n+import org.hamcrest.Factory;\n+import org.hamcrest.Matcher;\n+import org.hamcrest.TypeSafeMatcher;\n+\n+public final class SupplierGives<T> extends TypeSafeMatcher<Supplier<T>> {\n+  @NonNull\n+  private final T value;\n+\n+  private SupplierGives(@NonNull final T value) {\n+    this.value = value;\n+  }\n+\n+  @Override\n+  protected boolean matchesSafely(@NonNull final Supplier<T> reference) {\n+    return value.equals(reference.get());\n+  }\n+\n+  @Override\n+  public void describeTo(final Description description) {\n+    description.appendText(\"gives value \").appendValue(value);\n+  }\n+\n+  @Override\n+  protected void describeMismatchSafely(final Supplier<T> supplier,\n+      final Description description) {\n+    description.appendText(\"was \").appendValue(supplier.get());\n+  }\n+\n+  @Factory\n+  public static <T> Matcher<Supplier<T>> gives(@NonNull final T value) {\n+    return new SupplierGives<>(value);\n+  }\n+\n+  @Factory\n+  public static <T> Matcher<Supplier<T>> has(@NonNull final T value) {\n+    return new SupplierGives<>(value);\n+  }\n+}"},{"sha":"be9059f8324e5acfcfb0486274730806a0ac20ff","filename":"agera/src/test/java/com/google/android/agera/test/matchers/UpdatableUpdated.java","status":"added","additions":55,"deletions":0,"changes":55,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/test/java/com/google/android/agera/test/matchers/UpdatableUpdated.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/test/java/com/google/android/agera/test/matchers/UpdatableUpdated.java","contents_url":"https://api.github.com/repos/google/agera/contents/agera/src/test/java/com/google/android/agera/test/matchers/UpdatableUpdated.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,55 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera.test.matchers;\n+\n+import com.google.android.agera.test.mocks.MockUpdatable;\n+\n+import android.support.annotation.NonNull;\n+\n+import org.hamcrest.Description;\n+import org.hamcrest.Factory;\n+import org.hamcrest.TypeSafeMatcher;\n+\n+public final class UpdatableUpdated extends TypeSafeMatcher<MockUpdatable> {\n+  private static final UpdatableUpdated WAS_UPDATED = new UpdatableUpdated(true);\n+  private static final UpdatableUpdated WAS_NOT_UPDATED = new UpdatableUpdated(false);\n+\n+  private final boolean updated;\n+\n+  private UpdatableUpdated(final boolean updated) {\n+    this.updated = updated;\n+  }\n+\n+  @Override\n+  protected boolean matchesSafely(@NonNull final MockUpdatable updatable) {\n+    return updated == updatable.wasUpdated();\n+  }\n+\n+  @Override\n+  public void describeTo(final Description description) {\n+    description.appendText(updated ? \"was updated\" : \"not updated\");\n+  }\n+\n+  @Factory\n+  public static UpdatableUpdated wasUpdated() {\n+    return WAS_UPDATED;\n+  }\n+\n+  @Factory\n+  public static UpdatableUpdated wasNotUpdated() {\n+    return WAS_NOT_UPDATED;\n+  }\n+}"},{"sha":"392991d1424e0b1323dbb0312935bdfe16794617","filename":"agera/src/test/java/com/google/android/agera/test/mocks/MockUpdatable.java","status":"added","additions":68,"deletions":0,"changes":68,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/test/java/com/google/android/agera/test/mocks/MockUpdatable.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/agera/src/test/java/com/google/android/agera/test/mocks/MockUpdatable.java","contents_url":"https://api.github.com/repos/google/agera/contents/agera/src/test/java/com/google/android/agera/test/mocks/MockUpdatable.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera.test.mocks;\n+\n+import static org.robolectric.shadows.ShadowLooper.runUiThreadTasksIncludingDelayedTasks;\n+\n+import com.google.android.agera.Observable;\n+import com.google.android.agera.Updatable;\n+\n+import android.support.annotation.NonNull;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public final class MockUpdatable implements Updatable {\n+  private final List<Observable> observables = new ArrayList<>();\n+\n+  private boolean updated = false;\n+\n+  private MockUpdatable() {\n+  }\n+\n+  public static MockUpdatable mockUpdatable() {\n+    return new MockUpdatable();\n+  }\n+\n+  @Override\n+  public void update() {\n+    updated = true;\n+  }\n+\n+  public boolean wasUpdated() {\n+    runUiThreadTasksIncludingDelayedTasks();\n+    return updated;\n+  }\n+\n+  public void resetUpdated() {\n+    runUiThreadTasksIncludingDelayedTasks();\n+    updated = false;\n+  }\n+\n+  public void addToObservable(@NonNull final Observable observable) {\n+    observable.addUpdatable(this);\n+    observables.add(observable);\n+    runUiThreadTasksIncludingDelayedTasks();\n+  }\n+\n+  public void removeFromObservables() {\n+    for (final Observable observable : observables) {\n+      observable.removeUpdatable(this);\n+    }\n+    observables.clear();\n+    runUiThreadTasksIncludingDelayedTasks();\n+  }\n+}"},{"sha":"32050f0edc59f4d1b64dd71b09237f45eea4167d","filename":"build.gradle","status":"added","additions":16,"deletions":0,"changes":16,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/build.gradle","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/build.gradle","contents_url":"https://api.github.com/repos/google/agera/contents/build.gradle?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,16 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+defaultTasks 'lint', 'jacocoTestReport', ':testapp:assembleRelease', 'install'"},{"sha":"30ae76081c9e21621648b25496a5067fff729be3","filename":"doc/images/agera.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/doc/images/agera.png","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/doc/images/agera.png","contents_url":"https://api.github.com/repos/google/agera/contents/doc/images/agera.png?ref=c648301e6e219c3673ef2c4180a4e3d202710523"},{"sha":"b339ddebc0782542a32226f82803e70607d9c549","filename":"doc/images/downstream.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/doc/images/downstream.png","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/doc/images/downstream.png","contents_url":"https://api.github.com/repos/google/agera/contents/doc/images/downstream.png?ref=c648301e6e219c3673ef2c4180a4e3d202710523"},{"sha":"115fd1d030fef185c828421aea11f23382c15362","filename":"doc/images/observablelifecycle.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/doc/images/observablelifecycle.png","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/doc/images/observablelifecycle.png","contents_url":"https://api.github.com/repos/google/agera/contents/doc/images/observablelifecycle.png?ref=c648301e6e219c3673ef2c4180a4e3d202710523"},{"sha":"efde82bb022d5c2d1eac6f5271dfa80a1e937dfd","filename":"doc/images/operators.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/doc/images/operators.png","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/doc/images/operators.png","contents_url":"https://api.github.com/repos/google/agera/contents/doc/images/operators.png?ref=c648301e6e219c3673ef2c4180a4e3d202710523"},{"sha":"86f9a2a2f277802cf1c89d7b274a4631714e7a9e","filename":"doc/images/sideoperators.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/doc/images/sideoperators.png","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/doc/images/sideoperators.png","contents_url":"https://api.github.com/repos/google/agera/contents/doc/images/sideoperators.png?ref=c648301e6e219c3673ef2c4180a4e3d202710523"},{"sha":"edc4723bbb2f40a3e029ce8ff7a4e46e28b1908b","filename":"doc/images/uilifecycle.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/doc/images/uilifecycle.png","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/doc/images/uilifecycle.png","contents_url":"https://api.github.com/repos/google/agera/contents/doc/images/uilifecycle.png?ref=c648301e6e219c3673ef2c4180a4e3d202710523"},{"sha":"8419ff797eae2afaf3efdedeff724ae57a76ccdf","filename":"extensions/content/build.gradle","status":"added","additions":44,"deletions":0,"changes":44,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/extensions/content/build.gradle","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/extensions/content/build.gradle","contents_url":"https://api.github.com/repos/google/agera/contents/extensions/content/build.gradle?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+apply plugin: 'com.android.library'\n+apply plugin: 'com.github.dcendents.android-maven'\n+apply plugin: 'jacoco'\n+\n+dependencies {\n+    compile project(':agera')\n+}\n+\n+install {\n+    repositories.mavenInstaller {\n+        pom {\n+            project {\n+                packaging 'aar'\n+                name 'Agera Content'\n+                url gradle.url\n+                licenses {\n+                    license {\n+                        name gradle.licenseName\n+                        url gradle.licenseUrl\n+                    }\n+                }\n+                scm {\n+                    url gradle.url\n+                    connection gradle.gitUrl\n+                }\n+            }\n+        }\n+    }\n+}"},{"sha":"386ca89b90fda6009d1ca95a1f3fa8d619e570b9","filename":"extensions/content/src/main/AndroidManifest.xml","status":"added","additions":17,"deletions":0,"changes":17,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/extensions/content/src/main/AndroidManifest.xml","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/extensions/content/src/main/AndroidManifest.xml","contents_url":"https://api.github.com/repos/google/agera/contents/extensions/content/src/main/AndroidManifest.xml?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,17 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<!--\n+  ~ Copyright 2015 Google Inc. All Rights Reserved.\n+  ~\n+  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n+  ~ you may not use this file except in compliance with the License.\n+  ~ You may obtain a copy of the License at\n+  ~\n+  ~     http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+<manifest package=\"com.google.android.agera.content\"/>"},{"sha":"88073267e4de7f2efddc8b7ec13680f51a785197","filename":"extensions/content/src/main/java/com/google/android/agera/content/ContentObservables.java","status":"added","additions":164,"deletions":0,"changes":164,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/extensions/content/src/main/java/com/google/android/agera/content/ContentObservables.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/extensions/content/src/main/java/com/google/android/agera/content/ContentObservables.java","contents_url":"https://api.github.com/repos/google/agera/contents/extensions/content/src/main/java/com/google/android/agera/content/ContentObservables.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,164 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera.content;\n+\n+import static android.content.SharedPreferences.OnSharedPreferenceChangeListener;\n+import static com.google.android.agera.Observables.updateDispatcher;\n+import static com.google.android.agera.Preconditions.checkNotNull;\n+\n+import com.google.android.agera.Observable;\n+import com.google.android.agera.Updatable;\n+import com.google.android.agera.ActivationHandler;\n+import com.google.android.agera.UpdateDispatcher;\n+\n+import android.content.BroadcastReceiver;\n+import android.content.Context;\n+import android.content.Intent;\n+import android.content.IntentFilter;\n+import android.content.SharedPreferences;\n+import android.os.Looper;\n+import android.support.annotation.NonNull;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ * Utility methods for obtaining {@link Observable} instances.\n+ *\n+ * <p>Any {@link Observable} created by this class have to be created from a {@link Looper} thread\n+ * or they will throw an {@link IllegalStateException}\n+ */\n+public final class ContentObservables {\n+\n+  /**\n+   * Returns an {@link Observable} that notifies added {@link Updatable}s that the input\n+   * {@code actions} have been received through the Android broadcast mechanism.\n+   *\n+   * <p>Since {@link ActivationHandler#observableDeactivated(UpdateDispatcher)} is called\n+   * asynchronously, using an activity context here will cause {@link android.os.StrictMode} to\n+   * report leaked registration objects. This can be avoided using the application context instead.\n+   *\n+   * @param context context used to register the receiver\n+   */\n+  @NonNull\n+  public static Observable broadcastObservable(@NonNull final Context context,\n+      @NonNull final String... actions) {\n+    return new BroadcastObservable(context, actions);\n+  }\n+\n+  /**\n+   * Returns an {@link Observable} that notifies added {@link Updatable}s that\n+   * {@code keys} in {@link SharedPreferences} has been changed.\n+   */\n+  @NonNull\n+  public static Observable sharedPreferencesObservable(@NonNull final SharedPreferences preferences,\n+      @NonNull final String... keys) {\n+    return new SharedPreferencesObservable(preferences, keys);\n+  }\n+\n+  private static final class BroadcastObservable extends BroadcastReceiver\n+      implements ActivationHandler, Observable {\n+    @NonNull\n+    private final UpdateDispatcher updateDispatcher;\n+    @NonNull\n+    private final Context context;\n+    @NonNull\n+    private final IntentFilter filter;\n+\n+    BroadcastObservable(@NonNull final Context applicationContext,\n+        @NonNull final String... actions) {\n+      this.context = checkNotNull(applicationContext);\n+      this.updateDispatcher = updateDispatcher(this);\n+      this.filter = new IntentFilter();\n+      for (final String action : actions) {\n+        this.filter.addAction(action);\n+      }\n+    }\n+\n+    @Override\n+    public void observableActivated(@NonNull final UpdateDispatcher caller) {\n+      context.registerReceiver(this, filter);\n+    }\n+\n+    @Override\n+    public void observableDeactivated(@NonNull final UpdateDispatcher caller) {\n+      context.unregisterReceiver(this);\n+    }\n+\n+    @Override\n+    public void onReceive(final Context context, final Intent intent) {\n+      updateDispatcher.update();\n+    }\n+\n+    @Override\n+    public void addUpdatable(@NonNull final Updatable updatable) {\n+      updateDispatcher.addUpdatable(updatable);\n+    }\n+\n+    @Override\n+    public void removeUpdatable(@NonNull final Updatable updatable) {\n+      updateDispatcher.removeUpdatable(updatable);\n+    }\n+  }\n+\n+  private static final class SharedPreferencesObservable implements\n+      OnSharedPreferenceChangeListener, Observable, ActivationHandler {\n+    @NonNull\n+    private final UpdateDispatcher updateDispatcher;\n+    @NonNull\n+    private final SharedPreferences preferences;\n+    @NonNull\n+    private final Set<String> keys;\n+\n+    SharedPreferencesObservable(@NonNull final SharedPreferences preferences,\n+        @NonNull final String... keys) {\n+      this.keys = new HashSet<>(Arrays.asList(keys));\n+      this.preferences = checkNotNull(preferences);\n+      this.updateDispatcher = updateDispatcher(this);\n+    }\n+\n+    @Override\n+    public void observableActivated(@NonNull final UpdateDispatcher caller) {\n+      preferences.registerOnSharedPreferenceChangeListener(this);\n+    }\n+\n+    @Override\n+    public void observableDeactivated(@NonNull final UpdateDispatcher caller) {\n+      preferences.unregisterOnSharedPreferenceChangeListener(this);\n+    }\n+\n+    @Override\n+    public void addUpdatable(@NonNull final Updatable updatable) {\n+      updateDispatcher.addUpdatable(updatable);\n+    }\n+\n+    @Override\n+    public void removeUpdatable(@NonNull final Updatable updatable) {\n+      updateDispatcher.removeUpdatable(updatable);\n+    }\n+\n+    @Override\n+    public void onSharedPreferenceChanged(final SharedPreferences sharedPreferences,\n+        final String key) {\n+      if (keys.contains(key)) {\n+        updateDispatcher.update();\n+      }\n+    }\n+  }\n+\n+  private ContentObservables() {}\n+}"},{"sha":"7613c1653b83ea95b5c5d3649ca20fff06bfaff0","filename":"extensions/content/src/test/java/com/google/android/agera/content/BuildConfigTest.java","status":"added","additions":25,"deletions":0,"changes":25,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/extensions/content/src/test/java/com/google/android/agera/content/BuildConfigTest.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/extensions/content/src/test/java/com/google/android/agera/content/BuildConfigTest.java","contents_url":"https://api.github.com/repos/google/agera/contents/extensions/content/src/test/java/com/google/android/agera/content/BuildConfigTest.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,25 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera.content;\n+\n+import org.junit.Test;\n+\n+public final class BuildConfigTest {\n+  @Test\n+  public void shouldRemoveBuildConfigFromCoverageReport() {\n+    new BuildConfig();\n+  }\n+}"},{"sha":"e15b82e98c358e40e3eeebc993e82d729fdd9db5","filename":"extensions/content/src/test/java/com/google/android/agera/content/ContentObservablesTest.java","status":"added","additions":144,"deletions":0,"changes":144,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/extensions/content/src/test/java/com/google/android/agera/content/ContentObservablesTest.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/extensions/content/src/test/java/com/google/android/agera/content/ContentObservablesTest.java","contents_url":"https://api.github.com/repos/google/agera/contents/extensions/content/src/test/java/com/google/android/agera/content/ContentObservablesTest.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,144 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera.content;\n+\n+import static com.google.android.agera.content.ContentObservables.broadcastObservable;\n+import static com.google.android.agera.content.ContentObservables.sharedPreferencesObservable;\n+import static com.google.android.agera.content.test.matchers.HasPrivateConstructor.hasPrivateConstructor;\n+import static com.google.android.agera.content.test.matchers.UpdatableUpdated.wasUpdated;\n+import static com.google.android.agera.content.test.mocks.MockUpdatable.mockUpdatable;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.MockitoAnnotations.initMocks;\n+import static org.robolectric.annotation.Config.NONE;\n+\n+import com.google.android.agera.ActivationHandler;\n+import com.google.android.agera.content.test.matchers.UpdatableUpdated;\n+import com.google.android.agera.content.test.mocks.MockUpdatable;\n+\n+import android.app.Application;\n+import android.content.Intent;\n+import android.content.SharedPreferences;\n+import android.content.SharedPreferences.OnSharedPreferenceChangeListener;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Mock;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.RuntimeEnvironment;\n+import org.robolectric.annotation.Config;\n+\n+@Config(manifest = NONE)\n+@RunWith(RobolectricTestRunner.class)\n+public final class ContentObservablesTest {\n+  private static final String TEST_KEY = \"test key\";\n+  private static final String NOT_TEST_KEY = \"not test key\";\n+  private static final String TEST_ACTION = \"TEST_ACTION\";\n+  private static final String PRIMARY_ACTION = \"PRIMARY_ACTION\";\n+\n+  private MockUpdatable updatable;\n+  private MockUpdatable secondUpdatable;\n+  private ArgumentCaptor<OnSharedPreferenceChangeListener> sharedPreferenceListenerCaptor;\n+  @Mock\n+  private ActivationHandler mockActivationHandler;\n+  @Mock\n+  private SharedPreferences sharedPreferences;\n+\n+  @Before\n+  public void setUp() {\n+    initMocks(this);\n+    sharedPreferenceListenerCaptor =\n+        ArgumentCaptor.forClass(OnSharedPreferenceChangeListener.class);\n+    doNothing().when(sharedPreferences).registerOnSharedPreferenceChangeListener(\n+        sharedPreferenceListenerCaptor.capture());\n+    updatable = mockUpdatable();\n+    secondUpdatable = mockUpdatable();\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    updatable.removeFromObservables();\n+    secondUpdatable.removeFromObservables();\n+  }\n+\n+  @Test\n+  public void shouldUpdateSharedPreferencesWhenKeyChanges() {\n+    updatable.addToObservable(sharedPreferencesObservable(sharedPreferences, TEST_KEY));\n+\n+    sharedPreferenceListenerCaptor.getValue()\n+        .onSharedPreferenceChanged(sharedPreferences, TEST_KEY);\n+\n+    assertThat(updatable, wasUpdated());\n+  }\n+\n+  @Test\n+  public void shouldNotUpdateSharedPreferencesWhenOtherKeyChanges() {\n+    updatable.addToObservable(sharedPreferencesObservable(sharedPreferences, TEST_KEY));\n+\n+    sharedPreferenceListenerCaptor.getValue()\n+        .onSharedPreferenceChanged(sharedPreferences, NOT_TEST_KEY);\n+\n+    assertThat(updatable, UpdatableUpdated.wasNotUpdated());\n+  }\n+\n+  @Test\n+  public void shouldBeAbleToObserveBroadcasts() {\n+    updatable.addToObservable(broadcastObservable(getApplication(), TEST_ACTION));\n+  }\n+\n+  @Test\n+  public void shouldUpdateForBroadcast() {\n+    updatable.addToObservable(broadcastObservable(getApplication(), TEST_ACTION));\n+\n+    sendBroadcast(new Intent(TEST_ACTION));\n+\n+    assertThat(updatable, wasUpdated());\n+  }\n+\n+  @Test\n+  public void shouldUpdateForSecondaryBroadcast() {\n+    updatable.addToObservable(broadcastObservable(getApplication(), PRIMARY_ACTION, TEST_ACTION));\n+\n+    sendBroadcast(new Intent(TEST_ACTION));\n+\n+    assertThat(updatable, wasUpdated());\n+  }\n+\n+  @Test\n+  public void shouldNotGetUpdateFromBroadcastForEmptyFilter() {\n+    updatable.addToObservable(broadcastObservable(getApplication()));\n+\n+    sendBroadcast(new Intent(TEST_ACTION));\n+\n+    assertThat(updatable, UpdatableUpdated.wasNotUpdated());\n+  }\n+\n+  @Test\n+  public void shouldHavePrivateConstructor() {\n+    assertThat(ContentObservables.class, hasPrivateConstructor());\n+  }\n+\n+  private void sendBroadcast(final Intent intent) {\n+    getApplication().sendBroadcast(intent);\n+  }\n+\n+  private static Application getApplication() {\n+    return RuntimeEnvironment.application;\n+  }\n+}"},{"sha":"cedf11db6411bc8e5d645bc710e63245b98628d5","filename":"extensions/content/src/test/java/com/google/android/agera/content/test/matchers/HasPrivateConstructor.java","status":"added","additions":53,"deletions":0,"changes":53,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/extensions/content/src/test/java/com/google/android/agera/content/test/matchers/HasPrivateConstructor.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/extensions/content/src/test/java/com/google/android/agera/content/test/matchers/HasPrivateConstructor.java","contents_url":"https://api.github.com/repos/google/agera/contents/extensions/content/src/test/java/com/google/android/agera/content/test/matchers/HasPrivateConstructor.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,53 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera.content.test.matchers;\n+\n+import org.hamcrest.Description;\n+import org.hamcrest.Factory;\n+import org.hamcrest.Matcher;\n+import org.hamcrest.TypeSafeMatcher;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Modifier;\n+\n+public final class HasPrivateConstructor extends TypeSafeMatcher<Class<?>> {\n+  private static final HasPrivateConstructor INSTANCE = new HasPrivateConstructor();\n+\n+  private HasPrivateConstructor() {\n+  }\n+\n+  @Override\n+  protected boolean matchesSafely(final Class<?> clazz) {\n+    try {\n+      Constructor<?> constructor = clazz.getDeclaredConstructor();\n+      constructor.setAccessible(true);\n+      constructor.newInstance();\n+      return Modifier.isPrivate(constructor.getModifiers());\n+    } catch (final Exception ignored) {\n+    }\n+    return false;\n+  }\n+\n+  @Override\n+  public void describeTo(final Description description) {\n+    description.appendText(\"should have private constructor\");\n+  }\n+\n+  @Factory\n+  public static Matcher<Class<?>> hasPrivateConstructor() {\n+    return INSTANCE;\n+  }\n+}"},{"sha":"9e079c9c4854f2ab814e820308ca8ae5fbc4fe79","filename":"extensions/content/src/test/java/com/google/android/agera/content/test/matchers/UpdatableUpdated.java","status":"added","additions":55,"deletions":0,"changes":55,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/extensions/content/src/test/java/com/google/android/agera/content/test/matchers/UpdatableUpdated.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/extensions/content/src/test/java/com/google/android/agera/content/test/matchers/UpdatableUpdated.java","contents_url":"https://api.github.com/repos/google/agera/contents/extensions/content/src/test/java/com/google/android/agera/content/test/matchers/UpdatableUpdated.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,55 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera.content.test.matchers;\n+\n+import com.google.android.agera.content.test.mocks.MockUpdatable;\n+\n+import android.support.annotation.NonNull;\n+\n+import org.hamcrest.Description;\n+import org.hamcrest.Factory;\n+import org.hamcrest.TypeSafeMatcher;\n+\n+public final class UpdatableUpdated extends TypeSafeMatcher<MockUpdatable> {\n+  private static final UpdatableUpdated WAS_UPDATED = new UpdatableUpdated(true);\n+  private static final UpdatableUpdated WAS_NOT_UPDATED = new UpdatableUpdated(false);\n+\n+  private final boolean updated;\n+\n+  private UpdatableUpdated(final boolean updated) {\n+    this.updated = updated;\n+  }\n+\n+  @Override\n+  protected boolean matchesSafely(@NonNull final MockUpdatable updatable) {\n+    return updated == updatable.wasUpdated();\n+  }\n+\n+  @Override\n+  public void describeTo(final Description description) {\n+    description.appendText(updated ? \"was updated\" : \"not updated\");\n+  }\n+\n+  @Factory\n+  public static UpdatableUpdated wasUpdated() {\n+    return WAS_UPDATED;\n+  }\n+\n+  @Factory\n+  public static UpdatableUpdated wasNotUpdated() {\n+    return WAS_NOT_UPDATED;\n+  }\n+}"},{"sha":"e62e0ed2cb43c2eb43a72cdedf936adaea756184","filename":"extensions/content/src/test/java/com/google/android/agera/content/test/mocks/MockUpdatable.java","status":"added","additions":68,"deletions":0,"changes":68,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/extensions/content/src/test/java/com/google/android/agera/content/test/mocks/MockUpdatable.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/extensions/content/src/test/java/com/google/android/agera/content/test/mocks/MockUpdatable.java","contents_url":"https://api.github.com/repos/google/agera/contents/extensions/content/src/test/java/com/google/android/agera/content/test/mocks/MockUpdatable.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera.content.test.mocks;\n+\n+import static org.robolectric.shadows.ShadowLooper.runUiThreadTasksIncludingDelayedTasks;\n+\n+import com.google.android.agera.Observable;\n+import com.google.android.agera.Updatable;\n+\n+import android.support.annotation.NonNull;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public final class MockUpdatable implements Updatable {\n+  private final List<Observable> observables = new ArrayList<>();\n+\n+  private boolean updated = false;\n+\n+  private MockUpdatable() {\n+  }\n+\n+  public static MockUpdatable mockUpdatable() {\n+    return new MockUpdatable();\n+  }\n+\n+  @Override\n+  public void update() {\n+    updated = true;\n+  }\n+\n+  public boolean wasUpdated() {\n+    runUiThreadTasksIncludingDelayedTasks();\n+    return updated;\n+  }\n+\n+  public void resetUpdated() {\n+    runUiThreadTasksIncludingDelayedTasks();\n+    updated = false;\n+  }\n+\n+  public void addToObservable(@NonNull final Observable observable) {\n+    observable.addUpdatable(this);\n+    observables.add(observable);\n+    runUiThreadTasksIncludingDelayedTasks();\n+  }\n+\n+  public void removeFromObservables() {\n+    for (final Observable observable : observables) {\n+      observable.removeUpdatable(this);\n+    }\n+    observables.clear();\n+    runUiThreadTasksIncludingDelayedTasks();\n+  }\n+}"},{"sha":"79ca6a4dce73a70a93b8c9b3a34631b5333008b3","filename":"extensions/database/build.gradle","status":"added","additions":44,"deletions":0,"changes":44,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/extensions/database/build.gradle","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/extensions/database/build.gradle","contents_url":"https://api.github.com/repos/google/agera/contents/extensions/database/build.gradle?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+apply plugin: 'com.android.library'\n+apply plugin: 'com.github.dcendents.android-maven'\n+apply plugin: 'jacoco'\n+\n+dependencies {\n+    compile project(':agera')\n+}\n+\n+install {\n+    repositories.mavenInstaller {\n+        pom {\n+            project {\n+                packaging 'aar'\n+                name 'Agera Database'\n+                url gradle.url\n+                licenses {\n+                    license {\n+                        name gradle.licenseName\n+                        url gradle.licenseUrl\n+                    }\n+                }\n+                scm {\n+                    url gradle.url\n+                    connection gradle.gitUrl\n+                }\n+            }\n+        }\n+    }\n+}"},{"sha":"d161cc426adb61099775b58b6ad7c61820a46eb6","filename":"extensions/database/src/main/AndroidManifest.xml","status":"added","additions":17,"deletions":0,"changes":17,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/extensions/database/src/main/AndroidManifest.xml","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/extensions/database/src/main/AndroidManifest.xml","contents_url":"https://api.github.com/repos/google/agera/contents/extensions/database/src/main/AndroidManifest.xml?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,17 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<!--\n+  ~ Copyright 2015 Google Inc. All Rights Reserved.\n+  ~\n+  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n+  ~ you may not use this file except in compliance with the License.\n+  ~ You may obtain a copy of the License at\n+  ~\n+  ~     http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+<manifest package=\"com.google.android.agera.database\"/>"},{"sha":"9019458156d24dd549104fc27b9cecbb12d8f73b","filename":"extensions/database/src/main/java/com/google/android/agera/database/SqlDatabaseFunctions.java","status":"added","additions":179,"deletions":0,"changes":179,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/extensions/database/src/main/java/com/google/android/agera/database/SqlDatabaseFunctions.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/extensions/database/src/main/java/com/google/android/agera/database/SqlDatabaseFunctions.java","contents_url":"https://api.github.com/repos/google/agera/contents/extensions/database/src/main/java/com/google/android/agera/database/SqlDatabaseFunctions.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,179 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera.database;\n+\n+import static com.google.android.agera.Preconditions.checkNotNull;\n+import static com.google.android.agera.Result.failure;\n+import static com.google.android.agera.Result.success;\n+\n+import com.google.android.agera.Function;\n+import com.google.android.agera.Merger;\n+import com.google.android.agera.Result;\n+import com.google.android.agera.Supplier;\n+\n+import android.database.Cursor;\n+import android.database.SQLException;\n+import android.database.sqlite.SQLiteDatabase;\n+import android.support.annotation.NonNull;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * Utility methods for obtaining database querying {@link Function} instances.\n+ */\n+public final class SqlDatabaseFunctions {\n+\n+  /**\n+   * Creates a sql query {@link Function}.\n+   */\n+  @NonNull\n+  public static <T> Function<SqlRequest, Result<List<T>>> databaseQueryFunction(\n+      @NonNull final Supplier<Result<SQLiteDatabase>> database,\n+      @NonNull Function<Cursor, T> rowMap) {\n+    return new DatabaseFunction<>(database, new DatabaseQueryMerger<>(rowMap));\n+  }\n+\n+  /**\n+   * Creates a sql insert {@link Function}.\n+   */\n+  @NonNull\n+  public static Function<SqlInsertRequest, Result<Long>> databaseInsertFunction(\n+      @NonNull final Supplier<Result<SQLiteDatabase>> database) {\n+    return new DatabaseFunction<>(database, new DatabaseInsertMerger());\n+  }\n+\n+  /**\n+   * Creates a sql update {@link Function}.\n+   */\n+  @NonNull\n+  public static Function<SqlUpdateRequest, Result<Integer>> databaseUpdateFunction(\n+      @NonNull final Supplier<Result<SQLiteDatabase>> database) {\n+    return new DatabaseFunction<>(database, new DatabaseUpdateMerger());\n+  }\n+\n+  /**\n+   * Creates a sql delete {@link Function}.\n+   */\n+  @NonNull\n+  public static Function<SqlDeleteRequest, Result<Integer>> databaseDeleteFunction(\n+      @NonNull final Supplier<Result<SQLiteDatabase>> database) {\n+    return new DatabaseFunction<>(database, new DatabaseDeleteMerger());\n+  }\n+\n+  private static final class DatabaseInsertMerger\n+      implements Merger<SQLiteDatabase, SqlInsertRequest, Result<Long>> {\n+\n+    @NonNull\n+    @Override\n+    public Result<Long> merge(@NonNull final SQLiteDatabase database,\n+        @NonNull final SqlInsertRequest input) {\n+      try {\n+        return success(database.insertOrThrow(input.table, null, input.contentValues));\n+      } catch (final SQLException e) {\n+        return failure(e);\n+      }\n+    }\n+  }\n+\n+  private static final class DatabaseUpdateMerger\n+      implements Merger<SQLiteDatabase, SqlUpdateRequest, Result<Integer>> {\n+\n+    @NonNull\n+    @Override\n+    public Result<Integer> merge(@NonNull final SQLiteDatabase database,\n+        @NonNull final SqlUpdateRequest input) {\n+      try {\n+        return success(database.update(input.table, input.contentValues, input.where,\n+            input.arguments));\n+      } catch (final SQLException e) {\n+        return failure(e);\n+      }\n+    }\n+  }\n+\n+  private static final class DatabaseDeleteMerger\n+      implements Merger<SQLiteDatabase, SqlDeleteRequest, Result<Integer>> {\n+\n+    @NonNull\n+    @Override\n+    public Result<Integer> merge(@NonNull final SQLiteDatabase database,\n+        @NonNull final SqlDeleteRequest input) {\n+      try {\n+        return success(database.delete(input.table, input.where, input.arguments));\n+      } catch (final SQLException e) {\n+        return failure(e);\n+      }\n+    }\n+  }\n+\n+  private static final class DatabaseQueryMerger<T>\n+      implements Merger<SQLiteDatabase, SqlRequest, Result<List<T>>> {\n+    @NonNull\n+    private final Function<Cursor, T> cursorToItem;\n+\n+    private DatabaseQueryMerger(@NonNull final Function<Cursor, T> cursorToItem) {\n+      this.cursorToItem = checkNotNull(cursorToItem);\n+    }\n+\n+    @NonNull\n+    @Override\n+    public Result<List<T>> merge(@NonNull final SQLiteDatabase database,\n+        @NonNull final SqlRequest input) {\n+      try {\n+        final Cursor cursor = database.rawQuery(input.sql, input.arguments);\n+        try {\n+          final int count = cursor.getCount();\n+          if (count == 0) {\n+            return success(Collections.<T>emptyList());\n+          }\n+          final List<T> items = new ArrayList<>(count);\n+          while (cursor.moveToNext()) {\n+            items.add(cursorToItem.apply(cursor));\n+          }\n+          return success(items);\n+        } finally {\n+          cursor.close();\n+        }\n+      } catch (final SQLException e) {\n+        return failure(e);\n+      }\n+    }\n+  }\n+\n+  static final class DatabaseFunction<R, T> implements Function<R, Result<T>> {\n+    @NonNull\n+    private final Supplier<Result<SQLiteDatabase>> databaseSupplier;\n+    @NonNull\n+    private final Merger<SQLiteDatabase, R, Result<T>> databaseWithSqlArgument;\n+\n+    DatabaseFunction(@NonNull final Supplier<Result<SQLiteDatabase>> databaseSupplier,\n+        @NonNull final Merger<SQLiteDatabase, R, Result<T>>\n+            databaseWithSqlArgumentMerger) {\n+      this.databaseSupplier = checkNotNull(databaseSupplier);\n+      this.databaseWithSqlArgument = checkNotNull(databaseWithSqlArgumentMerger);\n+    }\n+\n+    @NonNull\n+    @Override\n+    public Result<T> apply(@NonNull final R sqlArguments) {\n+      return databaseSupplier.get().ifSucceededAttemptMerge(sqlArguments, databaseWithSqlArgument);\n+    }\n+  }\n+\n+  private SqlDatabaseFunctions() {}\n+}"},{"sha":"31dddea40556063e48cd1e672877d9ae10f1ff05","filename":"extensions/database/src/main/java/com/google/android/agera/database/SqlDatabaseSupplier.java","status":"added","additions":56,"deletions":0,"changes":56,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/extensions/database/src/main/java/com/google/android/agera/database/SqlDatabaseSupplier.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/extensions/database/src/main/java/com/google/android/agera/database/SqlDatabaseSupplier.java","contents_url":"https://api.github.com/repos/google/agera/contents/extensions/database/src/main/java/com/google/android/agera/database/SqlDatabaseSupplier.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera.database;\n+\n+import static com.google.android.agera.Result.absentIfNull;\n+import static com.google.android.agera.Result.failure;\n+import static com.google.android.agera.Result.success;\n+\n+import com.google.android.agera.Result;\n+import com.google.android.agera.Supplier;\n+\n+import android.content.Context;\n+import android.database.SQLException;\n+import android.database.sqlite.SQLiteDatabase;\n+import android.database.sqlite.SQLiteDatabase.CursorFactory;\n+import android.database.sqlite.SQLiteOpenHelper;\n+import android.support.annotation.NonNull;\n+\n+/**\n+ * Abstract extension of {@link SQLiteOpenHelper} implementing a sql database {@link Supplier} to be\n+ * used with the {@link SqlDatabaseFunctions}.\n+ */\n+public abstract class SqlDatabaseSupplier extends SQLiteOpenHelper\n+    implements Supplier<Result<SQLiteDatabase>> {\n+\n+  /**\n+   * Extending the base constructor, for overriding in concrete implementations.\n+   */\n+  public SqlDatabaseSupplier(@NonNull final Context context, @NonNull final String path,\n+      final CursorFactory factory, final int version) {\n+    super(context, path, factory, version);\n+  }\n+\n+  @NonNull\n+  @Override\n+  public final synchronized Result<SQLiteDatabase> get() {\n+    try {\n+      return absentIfNull(getWritableDatabase());\n+    } catch (final SQLException e) {\n+      return failure(e);\n+    }\n+  }\n+}"},{"sha":"a87a8d96062a4fc3945b0041072067ca790c7dbd","filename":"extensions/database/src/main/java/com/google/android/agera/database/SqlDeleteRequest.java","status":"added","additions":74,"deletions":0,"changes":74,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/extensions/database/src/main/java/com/google/android/agera/database/SqlDeleteRequest.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/extensions/database/src/main/java/com/google/android/agera/database/SqlDeleteRequest.java","contents_url":"https://api.github.com/repos/google/agera/contents/extensions/database/src/main/java/com/google/android/agera/database/SqlDeleteRequest.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera.database;\n+\n+import static com.google.android.agera.Preconditions.checkNotNull;\n+\n+import android.support.annotation.NonNull;\n+\n+import java.util.Arrays;\n+\n+/**\n+ * An immutable object representing a sql delete request.\n+ */\n+public final class SqlDeleteRequest {\n+  @NonNull\n+  final String[] arguments;\n+  @NonNull\n+  final String table;\n+  @NonNull\n+  final String where;\n+\n+  SqlDeleteRequest(@NonNull final String[] arguments, final @NonNull String table,\n+      final @NonNull String where) {\n+    this.table = checkNotNull(table);\n+    this.where = checkNotNull(where);\n+    this.arguments = checkNotNull(arguments);\n+  }\n+\n+  @Override\n+  public boolean equals(final Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (!(o instanceof SqlDeleteRequest)) {\n+      return false;\n+    }\n+\n+    final SqlDeleteRequest that = (SqlDeleteRequest) o;\n+\n+    return Arrays.equals(arguments, that.arguments)\n+        && table.equals(that.table)\n+        && where.equals(that.where);\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    int result = Arrays.hashCode(arguments);\n+    result = 31 * result + table.hashCode();\n+    result = 31 * result + where.hashCode();\n+    return result;\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return \"SqlDeleteRequest{\" +\n+        \"arguments=\" + Arrays.toString(arguments) +\n+        \", table='\" + table + '\\'' +\n+        \", where='\" + where + '\\'' +\n+        '}';\n+  }\n+}"},{"sha":"ae9eb1bbbac9e3e80b7d88b16f4b85ee560d1359","filename":"extensions/database/src/main/java/com/google/android/agera/database/SqlInsertRequest.java","status":"added","additions":66,"deletions":0,"changes":66,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/extensions/database/src/main/java/com/google/android/agera/database/SqlInsertRequest.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/extensions/database/src/main/java/com/google/android/agera/database/SqlInsertRequest.java","contents_url":"https://api.github.com/repos/google/agera/contents/extensions/database/src/main/java/com/google/android/agera/database/SqlInsertRequest.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,66 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera.database;\n+\n+import static com.google.android.agera.Preconditions.checkNotNull;\n+\n+import android.content.ContentValues;\n+import android.support.annotation.NonNull;\n+\n+/**\n+ * An immutable object representing a sql insert request.\n+ */\n+public final class SqlInsertRequest {\n+  @NonNull\n+  final ContentValues contentValues;\n+  @NonNull\n+  final String table;\n+\n+  SqlInsertRequest(@NonNull final ContentValues contentValues, final @NonNull String table) {\n+    this.table = checkNotNull(table);\n+    this.contentValues = checkNotNull(contentValues);\n+  }\n+\n+  @Override\n+  public boolean equals(final Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (!(o instanceof SqlInsertRequest)) {\n+      return false;\n+    }\n+\n+    final SqlInsertRequest that = (SqlInsertRequest) o;\n+\n+    return contentValues.equals(that.contentValues)\n+        && table.equals(that.table);\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    int result = contentValues.hashCode();\n+    result = 31 * result + table.hashCode();\n+    return result;\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return \"SqlInsertRequest{\" +\n+        \"contentValues=\" + contentValues +\n+        \", table='\" + table + '\\'' +\n+        '}';\n+  }\n+}"},{"sha":"574aaed9f0e4a40f99a89c31e81a5118fa4f4d93","filename":"extensions/database/src/main/java/com/google/android/agera/database/SqlRequest.java","status":"added","additions":67,"deletions":0,"changes":67,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/extensions/database/src/main/java/com/google/android/agera/database/SqlRequest.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/extensions/database/src/main/java/com/google/android/agera/database/SqlRequest.java","contents_url":"https://api.github.com/repos/google/agera/contents/extensions/database/src/main/java/com/google/android/agera/database/SqlRequest.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,67 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera.database;\n+\n+import static com.google.android.agera.Preconditions.checkNotNull;\n+\n+import android.support.annotation.NonNull;\n+\n+import java.util.Arrays;\n+\n+/**\n+ * An immutable object representing a sql request.\n+ */\n+public final class SqlRequest {\n+  @NonNull\n+  final String[] arguments;\n+  @NonNull\n+  final String sql;\n+\n+  SqlRequest(@NonNull final String[] arguments, final @NonNull String sql) {\n+    this.sql = checkNotNull(sql);\n+    this.arguments = checkNotNull(arguments);\n+  }\n+\n+  @Override\n+  public boolean equals(final Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (!(o instanceof SqlRequest)) {\n+      return false;\n+    }\n+\n+    final SqlRequest that = (SqlRequest) o;\n+\n+    return Arrays.equals(arguments, that.arguments)\n+        && sql.equals(that.sql);\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    int result = Arrays.hashCode(arguments);\n+    result = 31 * result + sql.hashCode();\n+    return result;\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return \"SqlRequest{\" +\n+        \"arguments=\" + Arrays.toString(arguments) +\n+        \", sql='\" + sql + '\\'' +\n+        '}';\n+  }\n+}"},{"sha":"f15a9c72bb9979820045adedde8a367a2574ae00","filename":"extensions/database/src/main/java/com/google/android/agera/database/SqlRequestCompiler.java","status":"added","additions":129,"deletions":0,"changes":129,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/extensions/database/src/main/java/com/google/android/agera/database/SqlRequestCompiler.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/extensions/database/src/main/java/com/google/android/agera/database/SqlRequestCompiler.java","contents_url":"https://api.github.com/repos/google/agera/contents/extensions/database/src/main/java/com/google/android/agera/database/SqlRequestCompiler.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,129 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera.database;\n+\n+import static com.google.android.agera.Preconditions.checkNotNull;\n+import static com.google.android.agera.Preconditions.checkState;\n+\n+import com.google.android.agera.database.SqlRequestCompilerStates.DBArgumentCompile;\n+import com.google.android.agera.database.SqlRequestCompilerStates.DBColumnCompile;\n+import com.google.android.agera.database.SqlRequestCompilerStates.DBColumnWhereCompile;\n+import com.google.android.agera.database.SqlRequestCompilerStates.DBSql;\n+import com.google.android.agera.database.SqlRequestCompilerStates.DBTable;\n+\n+import android.content.ContentValues;\n+import android.support.annotation.NonNull;\n+\n+final class SqlRequestCompiler\n+    implements DBTable, DBSql, DBArgumentCompile, DBColumnCompile, DBColumnWhereCompile {\n+  static final int SQL_REQUEST = 0;\n+  static final int SQL_DELETE_REQUEST = 1;\n+  static final int SQL_UPDATE_REQUEST = 2;\n+  static final int SQL_INSERT_REQUEST = 3;\n+  @NonNull\n+  private static final String[] NO_ARGUMENTS = new String[] {};\n+  @NonNull\n+  private static final String ERROR_MESSAGE = \"Sql compiler cannot be reused\";\n+\n+  private final int type;\n+  @NonNull\n+  private final ContentValues contentValues;\n+\n+  @NonNull\n+  private String[] arguments;\n+  @NonNull\n+  private String table;\n+  @NonNull\n+  private String query;\n+  @NonNull\n+  private String where;\n+  private boolean compiled;\n+\n+  SqlRequestCompiler(final int type) {\n+    this.type = type;\n+    this.where = \"\";\n+    this.contentValues = new ContentValues();\n+    this.arguments = NO_ARGUMENTS;\n+    this.compiled = false;\n+    this.table = \"\";\n+    this.query = \"\";\n+  }\n+\n+  @NonNull\n+  @Override\n+  public Object table(@NonNull final String table) {\n+    checkState(!compiled, ERROR_MESSAGE);\n+    this.table = table;\n+    return this;\n+  }\n+\n+  @NonNull\n+  @Override\n+  public SqlRequestCompiler sql(@NonNull final String query) {\n+    checkState(!compiled, ERROR_MESSAGE);\n+    this.query = query;\n+    return this;\n+  }\n+\n+  @NonNull\n+  @Override\n+  public Object column(@NonNull final String column, @NonNull final String value) {\n+    checkState(!compiled, ERROR_MESSAGE);\n+    contentValues.put(checkNotNull(column), checkNotNull(value));\n+    return this;\n+  }\n+\n+  @NonNull\n+  @Override\n+  public Object emptyColumn(@NonNull final String column) {\n+    checkState(!compiled, ERROR_MESSAGE);\n+    contentValues.putNull(checkNotNull(column));\n+    return this;\n+  }\n+\n+  @NonNull\n+  @Override\n+  public Object where(@NonNull final String where) {\n+    checkState(!compiled, ERROR_MESSAGE);\n+    this.where = where;\n+    return this;\n+  }\n+\n+  @NonNull\n+  @Override\n+  public Object arguments(@NonNull final String... arguments) {\n+    checkState(!compiled, ERROR_MESSAGE);\n+    this.arguments = arguments.clone();\n+    return this;\n+  }\n+\n+  @NonNull\n+  @Override\n+  public Object compile() {\n+    checkState(!compiled, ERROR_MESSAGE);\n+    this.compiled = true;\n+    switch (type) {\n+      case SQL_DELETE_REQUEST:\n+        return new SqlDeleteRequest(arguments, table, where);\n+      case SQL_INSERT_REQUEST:\n+        return new SqlInsertRequest(contentValues, table);\n+      case SQL_UPDATE_REQUEST:\n+        return new SqlUpdateRequest(contentValues, arguments, table, where);\n+      default:\n+        return new SqlRequest(arguments, query);\n+    }\n+  }\n+}"},{"sha":"8457a0420af1f33845513b39e57ae3df47566587","filename":"extensions/database/src/main/java/com/google/android/agera/database/SqlRequestCompilerStates.java","status":"added","additions":120,"deletions":0,"changes":120,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/extensions/database/src/main/java/com/google/android/agera/database/SqlRequestCompilerStates.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/extensions/database/src/main/java/com/google/android/agera/database/SqlRequestCompilerStates.java","contents_url":"https://api.github.com/repos/google/agera/contents/extensions/database/src/main/java/com/google/android/agera/database/SqlRequestCompilerStates.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,120 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera.database;\n+\n+import android.support.annotation.NonNull;\n+\n+/**\n+ * Container of the compiler state interfaces supporting the creation of sql requests.\n+ */\n+public interface SqlRequestCompilerStates {\n+\n+  /**\n+   * Compiler state allowing to specify what raw sql to execute/query.\n+   */\n+  interface DBSql<T> {\n+\n+    /**\n+     * Sets sql string.\n+     */\n+    @NonNull\n+    T sql(@NonNull String sql);\n+  }\n+\n+  /**\n+   * Compiler state allowing to specify what table to operate on.\n+   */\n+  interface DBTable<T> {\n+\n+    /**\n+     * Sets a table.\n+     */\n+    @NonNull\n+    T table(@NonNull String table);\n+  }\n+\n+  /**\n+   * Compiler state allowing to specify what items to update/delete.\n+   */\n+  interface DBWhere<T> {\n+\n+    /**\n+     * Sets a where clause for update/delete instructions.\n+     */\n+    @NonNull\n+    T where(@NonNull String where);\n+  }\n+\n+  /**\n+   * Compiler state allowing to add arguments.\n+   */\n+  interface DBArgument<T> {\n+    @NonNull\n+    T arguments(@NonNull String... arguments);\n+  }\n+\n+  /**\n+   * Compiler state allowing to add columns.\n+   */\n+  interface DBColumn<T> {\n+\n+    /**\n+     * Adds a {@code column} with a {@code value}.\n+     */\n+    @NonNull\n+    T column(@NonNull String column, @NonNull String value);\n+\n+    /**\n+     * Adds an empty {@code column}.\n+     */\n+    @NonNull\n+    T emptyColumn(@NonNull String column);\n+  }\n+\n+  /**\n+   * Compiler state to compile the sql request.\n+   */\n+  interface DBCompile<T> {\n+\n+    /**\n+     * Compiles a sql request that containing the previously specified data.\n+     */\n+    @NonNull\n+    T compile();\n+  }\n+\n+  /**\n+   * Compiler state allowing to specify sql arguments or compile.\n+   */\n+  interface DBArgumentCompile<T> extends DBArgument<DBCompile<T>>, DBCompile<T> {}\n+\n+  /**\n+   * Compiler state allowing to specify columns or compile.\n+   */\n+  interface DBColumnCompile<T, TSelf extends DBColumnCompile<T, TSelf>>\n+      extends DBColumn<TSelf>, DBCompile<T> {}\n+\n+  /**\n+   * Compiler state allowing to specify a where clause or compile.\n+   */\n+  interface DBWhereCompile<T> extends DBWhere<DBArgumentCompile<T>>, DBCompile<T> {}\n+\n+  /**\n+   * Compiler state allowing to specify a column, where clause or compile.\n+   */\n+  interface DBColumnWhereCompile<T, TSelf extends DBColumnWhereCompile<T, TSelf>>\n+      extends DBColumn<TSelf>, DBWhereCompile<T> {}\n+}"},{"sha":"4cabdde1164a740521fe850d9b91c5e6c8573a85","filename":"extensions/database/src/main/java/com/google/android/agera/database/SqlRequests.java","status":"added","additions":74,"deletions":0,"changes":74,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/extensions/database/src/main/java/com/google/android/agera/database/SqlRequests.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/extensions/database/src/main/java/com/google/android/agera/database/SqlRequests.java","contents_url":"https://api.github.com/repos/google/agera/contents/extensions/database/src/main/java/com/google/android/agera/database/SqlRequests.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera.database;\n+\n+import static com.google.android.agera.database.SqlRequestCompiler.SQL_DELETE_REQUEST;\n+import static com.google.android.agera.database.SqlRequestCompiler.SQL_INSERT_REQUEST;\n+import static com.google.android.agera.database.SqlRequestCompiler.SQL_REQUEST;\n+import static com.google.android.agera.database.SqlRequestCompiler.SQL_UPDATE_REQUEST;\n+\n+import com.google.android.agera.database.SqlRequestCompilerStates.DBArgumentCompile;\n+import com.google.android.agera.database.SqlRequestCompilerStates.DBColumn;\n+import com.google.android.agera.database.SqlRequestCompilerStates.DBColumnCompile;\n+import com.google.android.agera.database.SqlRequestCompilerStates.DBColumnWhereCompile;\n+import com.google.android.agera.database.SqlRequestCompilerStates.DBSql;\n+import com.google.android.agera.database.SqlRequestCompilerStates.DBTable;\n+import com.google.android.agera.database.SqlRequestCompilerStates.DBWhereCompile;\n+\n+import android.support.annotation.NonNull;\n+\n+/**\n+ * Creates sql requests.\n+ */\n+public final class SqlRequests {\n+  /**\n+   * Starts the creation of a {@link SqlRequest}.\n+   */\n+  @SuppressWarnings(\"unchecked\")\n+  @NonNull\n+  public static DBSql<DBArgumentCompile<SqlRequest>> sqlRequest() {\n+    return new SqlRequestCompiler(SQL_REQUEST);\n+  }\n+\n+  /**\n+   * Starts the creation of a {@link SqlDeleteRequest}.\n+   */\n+  @SuppressWarnings(\"unchecked\")\n+  @NonNull\n+  public static DBTable<DBWhereCompile<SqlDeleteRequest>> sqlDeleteRequest() {\n+    return new SqlRequestCompiler(SQL_DELETE_REQUEST);\n+  }\n+\n+  /**\n+   * Starts the creation of a {@link SqlDeleteRequest}.\n+   */\n+  @SuppressWarnings(\"unchecked\")\n+  @NonNull\n+  public static DBTable<DBColumn<DBColumnCompile<SqlInsertRequest, ?>>> sqlInsertRequest() {\n+    return new SqlRequestCompiler(SQL_INSERT_REQUEST);\n+  }\n+\n+  /**\n+   * Starts the creation of a {@link SqlUpdateRequest}.\n+   */\n+  @SuppressWarnings(\"unchecked\")\n+  @NonNull\n+  public static DBTable<DBColumn<DBColumnWhereCompile<SqlUpdateRequest, ?>>> sqlUpdateRequest() {\n+    return new SqlRequestCompiler(SQL_UPDATE_REQUEST);\n+  }\n+\n+  private SqlRequests() {}\n+}"},{"sha":"541da3ccc1b7ccde0218a17cf0840949cbd11a6e","filename":"extensions/database/src/main/java/com/google/android/agera/database/SqlUpdateRequest.java","status":"added","additions":81,"deletions":0,"changes":81,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/extensions/database/src/main/java/com/google/android/agera/database/SqlUpdateRequest.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/extensions/database/src/main/java/com/google/android/agera/database/SqlUpdateRequest.java","contents_url":"https://api.github.com/repos/google/agera/contents/extensions/database/src/main/java/com/google/android/agera/database/SqlUpdateRequest.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera.database;\n+\n+import static com.google.android.agera.Preconditions.checkNotNull;\n+\n+import android.content.ContentValues;\n+import android.support.annotation.NonNull;\n+\n+import java.util.Arrays;\n+\n+/**\n+ * An immutable object representing a sql update request.\n+ */\n+public final class SqlUpdateRequest {\n+  @NonNull\n+  final ContentValues contentValues;\n+  @NonNull\n+  final String[] arguments;\n+  @NonNull\n+  final String table;\n+  @NonNull\n+  final String where;\n+\n+  SqlUpdateRequest(@NonNull final ContentValues contentValues, @NonNull final String[] arguments,\n+      final @NonNull String table, final @NonNull String where) {\n+    this.table = checkNotNull(table);\n+    this.where = checkNotNull(where);\n+    this.contentValues = checkNotNull(contentValues);\n+    this.arguments = checkNotNull(arguments);\n+  }\n+\n+  @Override\n+  public boolean equals(final Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (!(o instanceof SqlUpdateRequest)) {\n+      return false;\n+    }\n+\n+    final SqlUpdateRequest that = (SqlUpdateRequest) o;\n+\n+    return contentValues.equals(that.contentValues)\n+        && Arrays.equals(arguments, that.arguments)\n+        && table.equals(that.table)\n+        && where.equals(that.where);\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    int result = contentValues.hashCode();\n+    result = 31 * result + Arrays.hashCode(arguments);\n+    result = 31 * result + table.hashCode();\n+    result = 31 * result + where.hashCode();\n+    return result;\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return \"SqlUpdateRequest{\" +\n+        \"contentValues=\" + contentValues +\n+        \", arguments=\" + Arrays.toString(arguments) +\n+        \", table='\" + table + '\\'' +\n+        \", where='\" + where + '\\'' +\n+        '}';\n+  }\n+}"},{"sha":"0a159f5af4d195b31928574390bf3bb8839cb0f8","filename":"extensions/database/src/test/java/com/google/android/agera/database/BuildConfigTest.java","status":"added","additions":25,"deletions":0,"changes":25,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/extensions/database/src/test/java/com/google/android/agera/database/BuildConfigTest.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/extensions/database/src/test/java/com/google/android/agera/database/BuildConfigTest.java","contents_url":"https://api.github.com/repos/google/agera/contents/extensions/database/src/test/java/com/google/android/agera/database/BuildConfigTest.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,25 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera.database;\n+\n+import org.junit.Test;\n+\n+public final class BuildConfigTest {\n+  @Test\n+  public void shouldRemoveBuildConfigFromCoverageReport() {\n+    new BuildConfig();\n+  }\n+}"},{"sha":"87c9314c48285a1dd4f78948c6346ba34acb4d66","filename":"extensions/database/src/test/java/com/google/android/agera/database/SqlDatabaseFunctionsTest.java","status":"added","additions":281,"deletions":0,"changes":281,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/extensions/database/src/test/java/com/google/android/agera/database/SqlDatabaseFunctionsTest.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/extensions/database/src/test/java/com/google/android/agera/database/SqlDatabaseFunctionsTest.java","contents_url":"https://api.github.com/repos/google/agera/contents/extensions/database/src/test/java/com/google/android/agera/database/SqlDatabaseFunctionsTest.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,281 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera.database;\n+\n+import static android.database.sqlite.SQLiteDatabase.create;\n+import static com.google.android.agera.Result.success;\n+import static com.google.android.agera.Suppliers.staticSupplier;\n+import static com.google.android.agera.database.SqlDatabaseFunctions.databaseDeleteFunction;\n+import static com.google.android.agera.database.SqlDatabaseFunctions.databaseInsertFunction;\n+import static com.google.android.agera.database.SqlDatabaseFunctions.databaseQueryFunction;\n+import static com.google.android.agera.database.SqlDatabaseFunctions.databaseUpdateFunction;\n+import static com.google.android.agera.database.SqlRequests.sqlDeleteRequest;\n+import static com.google.android.agera.database.SqlRequests.sqlInsertRequest;\n+import static com.google.android.agera.database.SqlRequests.sqlRequest;\n+import static com.google.android.agera.database.SqlRequests.sqlUpdateRequest;\n+import static com.google.android.agera.database.test.matchers.HasPrivateConstructor.hasPrivateConstructor;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.contains;\n+import static org.hamcrest.Matchers.empty;\n+import static org.hamcrest.Matchers.instanceOf;\n+import static org.hamcrest.core.Is.is;\n+import static org.robolectric.annotation.Config.NONE;\n+\n+import com.google.android.agera.Function;\n+import com.google.android.agera.Result;\n+import com.google.android.agera.Supplier;\n+\n+import android.database.Cursor;\n+import android.database.SQLException;\n+import android.database.sqlite.SQLiteDatabase;\n+import android.support.annotation.NonNull;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.Config;\n+\n+@RunWith(RobolectricTestRunner.class)\n+@Config(manifest = NONE)\n+public final class SqlDatabaseFunctionsTest {\n+  private static final String SELECT_TABLE = \"SELECT * FROM test\";\n+  private static final String HAS_VALUE = \"SELECT * FROM test WHERE column='value'\";\n+  private static final String TABLE = \"test\";\n+  private static final String INVALID_TABLE = \"test invalid$\";\n+  private static final String SQL_QUERY = \"SELECT * FROM test ORDER BY column\";\n+  private static final String INVALID_QUERY = \"invalid query\";\n+  private static final String SQL_QUERY_FOR_ARGUMENT = \"SELECT * FROM test WHERE column=?\";\n+  private static final String NON_MATCHING_SQL_QUERY =\n+      \"SELECT * FROM test WHERE column='a' ORDER BY column\";\n+  private static final Supplier<Result<SQLiteDatabase>> FAILURE =\n+      staticSupplier(Result.<SQLiteDatabase>failure(new Exception()));\n+  private static final CursorStringFunction CURSOR_STRING_FUNCTION = new CursorStringFunction();\n+\n+  private SQLiteDatabase database;\n+  private Supplier<Result<SQLiteDatabase>> databaseSupplier;\n+\n+  @Before\n+  public void setUp() {\n+    database = create(null);\n+    database.execSQL(\"CREATE TABLE test (column varchar(255))\");\n+    database.execSQL(\"INSERT INTO test (column) VALUES ('value1')\");\n+    database.execSQL(\"INSERT INTO test (column) VALUES ('value2')\");\n+    database.execSQL(\"INSERT INTO test (column) VALUES ('value3')\");\n+    databaseSupplier = staticSupplier(success(database));\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    database.close();\n+  }\n+\n+  @Test\n+  public void shouldGetValuesForDatabaseQuery() throws Throwable {\n+    assertThat(databaseQueryFunction(databaseSupplier, CURSOR_STRING_FUNCTION)\n+            .apply(sqlRequest()\n+                .sql(SQL_QUERY)\n+                .compile()).get(),\n+        contains(\"value1\", \"value2\", \"value3\"));\n+  }\n+\n+  @Test\n+  public void shouldNotGetValuesForDatabaseQueryWithNonMatchingWhere() throws Throwable {\n+    assertThat(databaseQueryFunction(databaseSupplier, CURSOR_STRING_FUNCTION)\n+            .apply(sqlRequest()\n+                .sql(NON_MATCHING_SQL_QUERY)\n+                .compile()).get(),\n+        empty());\n+  }\n+\n+  @Test\n+  public void shouldReturnFailureForInvalidQuery() {\n+    assertThat(databaseQueryFunction(databaseSupplier, CURSOR_STRING_FUNCTION)\n+            .apply(sqlRequest()\n+                .sql(INVALID_QUERY)\n+                .compile()).getFailure(),\n+        instanceOf(SQLException.class));\n+  }\n+\n+  @Test\n+  public void shouldPassArgumentsToDatabaseQuery() throws Throwable {\n+    assertThat(databaseQueryFunction(databaseSupplier, CURSOR_STRING_FUNCTION)\n+            .apply(sqlRequest()\n+                .sql(SQL_QUERY_FOR_ARGUMENT)\n+                .arguments(\"value2\").compile()).get(),\n+        contains(\"value2\"));\n+  }\n+\n+  @Test\n+  public void shouldReturnErrorForFailedDatabaseCreationInQuery() throws Throwable {\n+    assertThat(databaseQueryFunction(FAILURE, CURSOR_STRING_FUNCTION)\n+            .apply(sqlRequest()\n+                .sql(SQL_QUERY_FOR_ARGUMENT)\n+                .arguments(\"value2\")\n+                .compile()).failed(),\n+        is(true));\n+  }\n+\n+  @Test\n+  public void shouldClearTableForDeleteWithoutArguments() throws Throwable {\n+    assertThat(databaseDeleteFunction(databaseSupplier)\n+            .apply(sqlDeleteRequest()\n+                .table(TABLE)\n+                .compile()).get(),\n+        is(3));\n+    assertDatabaseEmpty();\n+  }\n+\n+  @Test\n+  public void shouldReturnFailureForInvalidDelete() {\n+    assertThat(databaseDeleteFunction(databaseSupplier)\n+            .apply(sqlDeleteRequest()\n+                .table(INVALID_TABLE)\n+                .compile()).getFailure(),\n+        instanceOf(SQLException.class));\n+  }\n+\n+  @Test\n+  public void shouldPassArgumentsToDatabaseDelete() throws Throwable {\n+    assertThat(databaseDeleteFunction(databaseSupplier)\n+            .apply(sqlDeleteRequest()\n+                .table(TABLE)\n+                .where(\"column=?\")\n+                .arguments(\"value2\")\n+                .compile()).get(),\n+        is(1));\n+  }\n+\n+  @Test\n+  public void shouldReturnErrorForFailedDatabaseCreationInDelete() throws Throwable {\n+    assertThat(databaseDeleteFunction(FAILURE)\n+            .apply(sqlDeleteRequest()\n+                .table(TABLE)\n+                .where(\"column=?\")\n+                .arguments(\"value2\")\n+                .compile()).failed(),\n+        is(true));\n+  }\n+\n+  @Test\n+  public void shouldUpdateTableForUpdateWithoutArguments() throws Throwable {\n+    assertThat(databaseUpdateFunction(databaseSupplier)\n+            .apply(sqlUpdateRequest()\n+                .table(TABLE)\n+                .column(\"column\", \"value4\")\n+                .compile()).get(),\n+        is(3));\n+  }\n+\n+  @Test\n+  public void shouldReturnFailureForInvalidUpdate() {\n+    assertThat(databaseUpdateFunction(databaseSupplier)\n+            .apply(sqlUpdateRequest()\n+                .table(INVALID_TABLE)\n+                .emptyColumn(\"column\")\n+                .compile()).getFailure(),\n+        instanceOf(SQLException.class));\n+  }\n+\n+  @Test\n+  public void shouldPassArgumentsToDatabaseUpdate() throws Throwable {\n+    assertThat(databaseUpdateFunction(databaseSupplier)\n+            .apply(sqlUpdateRequest()\n+                .table(TABLE)\n+                .column(\"column\", \"value4\")\n+                .where(\"column=?\")\n+                .arguments(\"value3\")\n+                .compile()).get(),\n+        is(1));\n+  }\n+\n+  @Test\n+  public void shouldReturnErrorForFailedDatabaseCreationInUpdate() throws Throwable {\n+    assertThat(databaseUpdateFunction(FAILURE)\n+            .apply(sqlUpdateRequest()\n+                .table(TABLE)\n+                .column(\"column\", \"value4\")\n+                .where(\"column=?\")\n+                .arguments(\"value3\")\n+                .compile()).failed(),\n+        is(true));\n+  }\n+\n+  @Test\n+  public void shouldReturnFailureForInvalidInsert() {\n+    assertThat(databaseInsertFunction(databaseSupplier)\n+            .apply(sqlInsertRequest()\n+                .table(INVALID_TABLE)\n+                .emptyColumn(\"column\")\n+                .compile()).getFailure(),\n+        instanceOf(SQLException.class));\n+  }\n+\n+  @Test\n+  public void shouldPassArgumentsToDatabaseInsert() throws Throwable {\n+    assertThat(databaseInsertFunction(databaseSupplier)\n+            .apply(sqlInsertRequest()\n+                .table(TABLE)\n+                .column(\"column\", \"value\")\n+                .compile()).succeeded(),\n+        is(true));\n+    assertDatabaseContainsValue();\n+  }\n+\n+  @Test\n+  public void shouldReturnErrorForFailedDatabaseCreationInInsert() throws Throwable {\n+    assertThat(databaseInsertFunction(FAILURE)\n+            .apply(sqlInsertRequest()\n+                .table(TABLE)\n+                .column(\"column\", \"value\")\n+                .compile()).failed(),\n+        is(true));\n+  }\n+\n+\n+  @Test\n+  public void shouldHavePrivateConstructor() {\n+    assertThat(SqlDatabaseFunctions.class, hasPrivateConstructor());\n+  }\n+\n+  private static class CursorStringFunction implements Function<Cursor, String> {\n+    @NonNull\n+    @Override\n+    public String apply(@NonNull final Cursor input) {\n+      return input.getString(input.getColumnIndex(\"column\"));\n+    }\n+  }\n+\n+\n+  private void assertDatabaseEmpty() {\n+    final Cursor cursor = database.rawQuery(SELECT_TABLE, null);\n+    try {\n+      assertThat(cursor.getCount(), is(0));\n+    } finally {\n+      cursor.close();\n+    }\n+  }\n+\n+  private void assertDatabaseContainsValue() {\n+    final Cursor cursor = database.rawQuery(HAS_VALUE, null);\n+    try {\n+      assertThat(cursor.getCount(), is(1));\n+    } finally {\n+      cursor.close();\n+    }\n+  }\n+}"},{"sha":"90a2a7495b6ebd232a6e448b58366628bbcc4744","filename":"extensions/database/src/test/java/com/google/android/agera/database/SqlDatabaseSupplierTest.java","status":"added","additions":66,"deletions":0,"changes":66,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/extensions/database/src/test/java/com/google/android/agera/database/SqlDatabaseSupplierTest.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/extensions/database/src/test/java/com/google/android/agera/database/SqlDatabaseSupplierTest.java","contents_url":"https://api.github.com/repos/google/agera/contents/extensions/database/src/test/java/com/google/android/agera/database/SqlDatabaseSupplierTest.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,66 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera.database;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.instanceOf;\n+import static org.hamcrest.core.Is.is;\n+import static org.robolectric.RuntimeEnvironment.application;\n+import static org.robolectric.annotation.Config.NONE;\n+\n+import android.database.SQLException;\n+import android.database.sqlite.SQLiteDatabase;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.Config;\n+\n+@RunWith(RobolectricTestRunner.class)\n+@Config(manifest = NONE)\n+public final class SqlDatabaseSupplierTest {\n+  private static final String DATABASE_NAME = \"database\";\n+\n+  @Test\n+  public void shouldSupplyDatabase() throws Throwable {\n+    final SqlDatabaseSupplier sqlDatabaseSupplier = new SqlDatabaseSupplier(\n+        application.getApplicationContext(), DATABASE_NAME, null, 1) {\n+      @Override\n+      public void onCreate(final SQLiteDatabase sqLiteDatabase) {}\n+\n+      @Override\n+      public void onUpgrade(final SQLiteDatabase sqLiteDatabase, final int i, final int i1) {}\n+    };\n+\n+    assertThat(sqlDatabaseSupplier.get().get(), instanceOf(SQLiteDatabase.class));\n+  }\n+\n+  @Test\n+  public void shouldSupplyFailureIfFailingOnCreate() throws Throwable {\n+    final SqlDatabaseSupplier sqlDatabaseSupplier = new SqlDatabaseSupplier(\n+        application.getApplicationContext(), DATABASE_NAME, null, 1) {\n+      @Override\n+      public void onCreate(final SQLiteDatabase sqLiteDatabase) {\n+        throw new SQLException();\n+      }\n+\n+      @Override\n+      public void onUpgrade(final SQLiteDatabase sqLiteDatabase, final int i, final int i1) {}\n+    };\n+\n+    assertThat(sqlDatabaseSupplier.get().failed(), is(true));\n+  }\n+}"},{"sha":"3a4fb2f373bbb83b23fd7f327b86b78fc0d28063","filename":"extensions/database/src/test/java/com/google/android/agera/database/SqlRequestsTest.java","status":"added","additions":213,"deletions":0,"changes":213,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/extensions/database/src/test/java/com/google/android/agera/database/SqlRequestsTest.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/extensions/database/src/test/java/com/google/android/agera/database/SqlRequestsTest.java","contents_url":"https://api.github.com/repos/google/agera/contents/extensions/database/src/test/java/com/google/android/agera/database/SqlRequestsTest.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,213 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera.database;\n+\n+import static com.google.android.agera.database.SqlRequests.sqlDeleteRequest;\n+import static com.google.android.agera.database.SqlRequests.sqlInsertRequest;\n+import static com.google.android.agera.database.SqlRequests.sqlRequest;\n+import static com.google.android.agera.database.SqlRequests.sqlUpdateRequest;\n+import static com.google.android.agera.database.test.matchers.HasHashCodeOf.hasHashCodeOf;\n+import static com.google.android.agera.database.test.matchers.HasPrivateConstructor.hasPrivateConstructor;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasToString;\n+import static org.hamcrest.Matchers.isEmptyOrNullString;\n+import static org.hamcrest.Matchers.not;\n+import static org.robolectric.annotation.Config.NONE;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.Config;\n+\n+@RunWith(RobolectricTestRunner.class)\n+@Config(manifest = NONE)\n+public final class SqlRequestsTest {\n+  private static final String SQL_QUERY = \"SELECT * FROM test ORDER BY column\";\n+  private static final String SQL_QUERY_2 = \"SELECT * FROM test2 ORDER BY column\";\n+  private static final String TABLE = \"test\";\n+  private static final String TABLE_2 = \"test2\";\n+  private SqlRequest sqlRequest;\n+  private SqlDeleteRequest sqlDeleteRequest;\n+  private SqlUpdateRequest sqlUpdateRequest;\n+  private SqlInsertRequest sqlInsertRequest;\n+  private SqlRequest sqlRequest2;\n+  private SqlDeleteRequest sqlDeleteRequest2;\n+  private SqlInsertRequest sqlInsertRequest2;\n+  private SqlUpdateRequest sqlUpdateRequest2;\n+\n+  @Before\n+  public void setUp() {\n+    sqlRequest = sqlRequest()\n+        .sql(SQL_QUERY)\n+        .compile();\n+    sqlRequest2 = sqlRequest()\n+        .sql(SQL_QUERY_2)\n+        .compile();\n+    sqlDeleteRequest = sqlDeleteRequest()\n+        .table(TABLE)\n+        .compile();\n+    sqlDeleteRequest2 = sqlDeleteRequest()\n+        .table(TABLE_2)\n+        .compile();\n+    sqlUpdateRequest = sqlUpdateRequest()\n+        .table(TABLE)\n+        .column(\"column\", \"value4\")\n+        .compile();\n+    sqlUpdateRequest2 = sqlUpdateRequest()\n+        .table(TABLE_2)\n+        .column(\"column\", \"value4\")\n+        .compile();\n+    sqlInsertRequest = sqlInsertRequest()\n+        .table(TABLE)\n+        .column(\"column\", \"value\")\n+        .compile();\n+    sqlInsertRequest2 = sqlInsertRequest()\n+        .table(TABLE_2)\n+        .column(\"column\", \"value\")\n+        .compile();\n+  }\n+\n+  @Test\n+  public void shouldCreateStringRepresentationForRequest() {\n+    assertThat(sqlRequest, hasToString(not(isEmptyOrNullString())));\n+  }\n+\n+  @Test\n+  public void shouldCreateStringRepresentationForDelete() {\n+    assertThat(sqlDeleteRequest, hasToString(not(isEmptyOrNullString())));\n+  }\n+\n+  @Test\n+  public void shouldCreateStringRepresentationForInsert() {\n+    assertThat(sqlInsertRequest, hasToString(not(isEmptyOrNullString())));\n+  }\n+\n+  @Test\n+  public void shouldCreateStringRepresentationForUpdate() {\n+    assertThat(sqlUpdateRequest, hasToString(not(isEmptyOrNullString())));\n+  }\n+\n+  @Test\n+  public void shouldNotBeEqualForDifferentArguments() {\n+    assertThat(sqlRequest, not(equalTo(sqlRequest2)));\n+  }\n+\n+  @Test\n+  public void shouldBeEqualForSameInstance() {\n+    assertThat(sqlRequest, equalTo(sqlRequest));\n+  }\n+\n+  @Test\n+  public void shouldNotBeEqualForOtherType() {\n+    assertThat(sqlRequest, not(equalTo(new Object())));\n+  }\n+\n+  @Test\n+  public void shouldBeEqualForSameArgumentsButDifferentInstance() {\n+    assertThat(sqlRequest, equalTo(sqlRequest().sql(SQL_QUERY).compile()));\n+  }\n+\n+  @Test\n+  public void shouldHaveSameHashcodeForSameQueryStringButDifferentInstance() {\n+    assertThat(sqlRequest, hasHashCodeOf(sqlRequest().sql(SQL_QUERY).compile()));\n+  }\n+\n+  @Test\n+  public void shouldNotBeEqualForDifferentArgumentsForDelete() {\n+    assertThat(sqlDeleteRequest, not(equalTo(sqlDeleteRequest2)));\n+  }\n+\n+  @Test\n+  public void shouldBeEqualForSameInstanceForDelete() {\n+    assertThat(sqlDeleteRequest, equalTo(sqlDeleteRequest));\n+  }\n+\n+  @Test\n+  public void shouldNotBeEqualForOtherTypeForDelete() {\n+    assertThat(sqlDeleteRequest, not(equalTo(new Object())));\n+  }\n+\n+  @Test\n+  public void shouldBeEqualForSameArgumentsButDifferentInstanceForDelete() {\n+    assertThat(sqlDeleteRequest, equalTo(sqlDeleteRequest().table(TABLE).compile()));\n+  }\n+\n+  @Test\n+  public void shouldHaveSameHashcodeForSameQueryStringButDifferentInstanceForDelete() {\n+    assertThat(sqlDeleteRequest, hasHashCodeOf(sqlDeleteRequest().table(TABLE).compile()));\n+  }\n+\n+  @Test\n+  public void shouldNotBeEqualForDifferentArgumentsForUpdate() {\n+    assertThat(sqlUpdateRequest, not(equalTo(sqlUpdateRequest2)));\n+  }\n+\n+  @Test\n+  public void shouldBeEqualForSameInstanceForUpdate() {\n+    assertThat(sqlUpdateRequest, equalTo(sqlUpdateRequest));\n+  }\n+\n+  @Test\n+  public void shouldNotBeEqualForOtherTypeForUpdate() {\n+    assertThat(sqlUpdateRequest, not(equalTo(new Object())));\n+  }\n+\n+  @Test\n+  public void shouldBeEqualForSameArgumentsButDifferentInstanceForUpdate() {\n+    assertThat(sqlUpdateRequest,\n+        equalTo(sqlUpdateRequest().table(TABLE).column(\"column\", \"value4\").compile()));\n+  }\n+\n+  @Test\n+  public void shouldHaveSameHashcodeForSameQueryStringButDifferentInstanceForUpdate() {\n+    assertThat(sqlUpdateRequest,\n+        hasHashCodeOf(sqlUpdateRequest().table(TABLE).column(\"column\", \"value4\").compile()));\n+  }\n+\n+  @Test\n+  public void shouldNotBeEqualForDifferentArgumentsForInsert() {\n+    assertThat(sqlInsertRequest, not(equalTo(sqlInsertRequest2)));\n+  }\n+\n+  @Test\n+  public void shouldBeEqualForSameInstanceForInsert() {\n+    assertThat(sqlInsertRequest, equalTo(sqlInsertRequest));\n+  }\n+\n+  @Test\n+  public void shouldNotBeEqualForOtherTypeForInsert() {\n+    assertThat(sqlInsertRequest, not(equalTo(new Object())));\n+  }\n+\n+  @Test\n+  public void shouldBeEqualForSameArgumentsButDifferentInstanceForInsert() {\n+    assertThat(sqlInsertRequest,\n+        equalTo(sqlInsertRequest().table(TABLE).column(\"column\", \"value\").compile()));\n+  }\n+\n+  @Test\n+  public void shouldHaveSameHashcodeForSameQueryStringButDifferentInstanceForInsert() {\n+    assertThat(sqlInsertRequest,\n+        hasHashCodeOf(sqlInsertRequest().table(TABLE).column(\"column\", \"value\").compile()));\n+  }\n+\n+  @Test\n+  public void shouldHavePrivateConstructor() {\n+    assertThat(SqlRequests.class, hasPrivateConstructor());\n+  }\n+}"},{"sha":"45014181a9d6135983f1672fe6dd529ea8b19b76","filename":"extensions/database/src/test/java/com/google/android/agera/database/test/matchers/HasHashCodeOf.java","status":"added","additions":45,"deletions":0,"changes":45,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/extensions/database/src/test/java/com/google/android/agera/database/test/matchers/HasHashCodeOf.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/extensions/database/src/test/java/com/google/android/agera/database/test/matchers/HasHashCodeOf.java","contents_url":"https://api.github.com/repos/google/agera/contents/extensions/database/src/test/java/com/google/android/agera/database/test/matchers/HasHashCodeOf.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,45 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera.database.test.matchers;\n+\n+import org.hamcrest.Description;\n+import org.hamcrest.Factory;\n+import org.hamcrest.Matcher;\n+import org.hamcrest.TypeSafeMatcher;\n+\n+public final class HasHashCodeOf extends TypeSafeMatcher<Object> {\n+  private final Object object;\n+\n+  private HasHashCodeOf(final Object object) {\n+    this.object = object;\n+  }\n+\n+  @Override\n+  protected boolean matchesSafely(final Object item) {\n+    return item.hashCode() == object.hashCode();\n+  }\n+\n+  @Override\n+  public void describeTo(final Description description) {\n+    description.appendText(\"same hashcode as \");\n+    description.appendValue(object);\n+  }\n+\n+  @Factory\n+  public static Matcher<Object> hasHashCodeOf(final Object object) {\n+    return new HasHashCodeOf(object);\n+  }\n+}"},{"sha":"bcb84553e721b668d5de095be36b31b4234532c9","filename":"extensions/database/src/test/java/com/google/android/agera/database/test/matchers/HasPrivateConstructor.java","status":"added","additions":53,"deletions":0,"changes":53,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/extensions/database/src/test/java/com/google/android/agera/database/test/matchers/HasPrivateConstructor.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/extensions/database/src/test/java/com/google/android/agera/database/test/matchers/HasPrivateConstructor.java","contents_url":"https://api.github.com/repos/google/agera/contents/extensions/database/src/test/java/com/google/android/agera/database/test/matchers/HasPrivateConstructor.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,53 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera.database.test.matchers;\n+\n+import org.hamcrest.Description;\n+import org.hamcrest.Factory;\n+import org.hamcrest.Matcher;\n+import org.hamcrest.TypeSafeMatcher;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Modifier;\n+\n+public final class HasPrivateConstructor extends TypeSafeMatcher<Class<?>> {\n+  private static final HasPrivateConstructor INSTANCE = new HasPrivateConstructor();\n+\n+  private HasPrivateConstructor() {\n+  }\n+\n+  @Override\n+  protected boolean matchesSafely(final Class<?> clazz) {\n+    try {\n+      Constructor<?> constructor = clazz.getDeclaredConstructor();\n+      constructor.setAccessible(true);\n+      constructor.newInstance();\n+      return Modifier.isPrivate(constructor.getModifiers());\n+    } catch (final Exception ignored) {\n+    }\n+    return false;\n+  }\n+\n+  @Override\n+  public void describeTo(final Description description) {\n+    description.appendText(\"should have private constructor\");\n+  }\n+\n+  @Factory\n+  public static Matcher<Class<?>> hasPrivateConstructor() {\n+    return INSTANCE;\n+  }\n+}"},{"sha":"c2e2cb582369317e2555f2a188ea78bf2d11b4f8","filename":"extensions/net/build.gradle","status":"added","additions":44,"deletions":0,"changes":44,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/extensions/net/build.gradle","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/extensions/net/build.gradle","contents_url":"https://api.github.com/repos/google/agera/contents/extensions/net/build.gradle?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+apply plugin: 'com.android.library'\n+apply plugin: 'com.github.dcendents.android-maven'\n+apply plugin: 'jacoco'\n+\n+dependencies {\n+    compile project(':agera')\n+}\n+\n+install {\n+    repositories.mavenInstaller {\n+        pom {\n+            project {\n+                packaging 'aar'\n+                name 'Agera Net'\n+                url gradle.url\n+                licenses {\n+                    license {\n+                        name gradle.licenseName\n+                        url gradle.licenseUrl\n+                    }\n+                }\n+                scm {\n+                    url gradle.url\n+                    connection gradle.gitUrl\n+                }\n+            }\n+        }\n+    }\n+}"},{"sha":"2a0b1336498010969e3040525243ea9eed9a7131","filename":"extensions/net/src/main/AndroidManifest.xml","status":"added","additions":17,"deletions":0,"changes":17,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/extensions/net/src/main/AndroidManifest.xml","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/extensions/net/src/main/AndroidManifest.xml","contents_url":"https://api.github.com/repos/google/agera/contents/extensions/net/src/main/AndroidManifest.xml?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,17 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<!--\n+  ~ Copyright 2015 Google Inc. All Rights Reserved.\n+  ~\n+  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n+  ~ you may not use this file except in compliance with the License.\n+  ~ You may obtain a copy of the License at\n+  ~\n+  ~     http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+<manifest package=\"com.google.android.agera.net\"/>"},{"sha":"374ea991c004d860e1a7f514c9e11c32bc668b0b","filename":"extensions/net/src/main/java/com/google/android/agera/net/HttpFunctions.java","status":"added","additions":44,"deletions":0,"changes":44,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/extensions/net/src/main/java/com/google/android/agera/net/HttpFunctions.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/extensions/net/src/main/java/com/google/android/agera/net/HttpFunctions.java","contents_url":"https://api.github.com/repos/google/agera/contents/extensions/net/src/main/java/com/google/android/agera/net/HttpFunctions.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera.net;\n+\n+import com.google.android.agera.Function;\n+import com.google.android.agera.Result;\n+\n+import android.support.annotation.NonNull;\n+\n+/**\n+ * Utility methods for obtaining http requesting {@link Function} instances.\n+ *\n+ * <p>A failing call to these functions will result in a {@link Result#failure()}. If the http\n+ * request returns a response code, it will be contained in a {@link HttpResponse} in a\n+ * {@link Result#success(Object)}. This also applies to failing response codes.\n+ * {@link HttpResponse} can be used to check for failing responses.\n+ */\n+public final class HttpFunctions {\n+  private static final UrlConnectionHttpFunction HTTP_FUNCTION = new UrlConnectionHttpFunction();\n+\n+  /**\n+   * Creates a default http {@link Function} that returns a {@link Result} with a\n+   * {@link HttpResponse} from a {@link HttpRequest}.\n+   */\n+  @NonNull\n+  public static Function<HttpRequest, Result<HttpResponse>> httpFunction() {\n+    return HTTP_FUNCTION;\n+  }\n+\n+  private HttpFunctions() {}\n+}"},{"sha":"194ef8fcd56d2a89624e1fc799b6b1ba737152f2","filename":"extensions/net/src/main/java/com/google/android/agera/net/HttpRequest.java","status":"added","additions":89,"deletions":0,"changes":89,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/extensions/net/src/main/java/com/google/android/agera/net/HttpRequest.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/extensions/net/src/main/java/com/google/android/agera/net/HttpRequest.java","contents_url":"https://api.github.com/repos/google/agera/contents/extensions/net/src/main/java/com/google/android/agera/net/HttpRequest.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera.net;\n+\n+import android.support.annotation.NonNull;\n+\n+import java.util.Arrays;\n+import java.util.Map;\n+\n+/**\n+ * An object representing a request to the http functions.\n+ */\n+public final class HttpRequest {\n+  @NonNull\n+  final String method;\n+  @NonNull\n+  final String url;\n+  @NonNull\n+  final byte[] body;\n+  @NonNull\n+  final Map<String, String> header;\n+  final boolean useCaches;\n+  final boolean followRedirects;\n+  final int connectTimeoutMs;\n+  final int readTimeoutMs;\n+\n+  HttpRequest(@NonNull final String method, @NonNull final String url,\n+      @NonNull final byte[] body, @NonNull final Map<String, String> header,\n+      final boolean useCaches, final boolean followRedirects, final int connectTimeoutMs,\n+      final int readTimeoutMs) {\n+    this.method = method;\n+    this.url = url;\n+    this.body = body;\n+    this.header = header;\n+    this.useCaches = useCaches;\n+    this.followRedirects = followRedirects;\n+    this.connectTimeoutMs = connectTimeoutMs;\n+    this.readTimeoutMs = readTimeoutMs;\n+  }\n+\n+  @Override\n+  public boolean equals(final Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (!(o instanceof HttpRequest)) {\n+      return false;\n+    }\n+\n+    final HttpRequest that = (HttpRequest) o;\n+\n+    return method.equals(that.method)\n+        && url.equals(that.url)\n+        && Arrays.equals(body, that.body)\n+        && header.equals(that.header);\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    int result = method.hashCode();\n+    result = 31 * result + url.hashCode();\n+    result = 31 * result + Arrays.hashCode(body);\n+    result = 31 * result + header.hashCode();\n+    return result;\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return \"HttpRequest{\" +\n+        \"method='\" + method + '\\'' +\n+        \", url='\" + url + '\\'' +\n+        \", body=\" + Arrays.toString(body) +\n+        \", header=\" + header +\n+        '}';\n+  }\n+}"},{"sha":"517803e63d94556a297ccd92e90d94372d712fb1","filename":"extensions/net/src/main/java/com/google/android/agera/net/HttpRequestCompiler.java","status":"added","additions":127,"deletions":0,"changes":127,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/extensions/net/src/main/java/com/google/android/agera/net/HttpRequestCompiler.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/extensions/net/src/main/java/com/google/android/agera/net/HttpRequestCompiler.java","contents_url":"https://api.github.com/repos/google/agera/contents/extensions/net/src/main/java/com/google/android/agera/net/HttpRequestCompiler.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,127 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera.net;\n+\n+import static com.google.android.agera.Preconditions.checkNotNull;\n+import static com.google.android.agera.Preconditions.checkState;\n+\n+import com.google.android.agera.net.HttpRequestCompilerStates.HTBodyHeaderFieldRedirectsCachesConnectionTimeoutReadTimeoutCompile;\n+import com.google.android.agera.net.HttpRequestCompilerStates.HTCachesConnectionTimeoutReadTimeoutCompile;\n+import com.google.android.agera.net.HttpRequestCompilerStates.HTCompile;\n+import com.google.android.agera.net.HttpRequestCompilerStates.HTConnectionTimeoutReadTimeoutCompile;\n+import com.google.android.agera.net.HttpRequestCompilerStates.HTHeaderFieldRedirectsCachesConnectionTimeoutReadTimeoutCompile;\n+import com.google.android.agera.net.HttpRequestCompilerStates.HTReadTimeoutCompile;\n+\n+import android.support.annotation.NonNull;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+final class HttpRequestCompiler\n+    implements HTBodyHeaderFieldRedirectsCachesConnectionTimeoutReadTimeoutCompile {\n+  static final int CONNECT_TIMEOUT_MS = 2500;\n+  static final int READ_TIMEOUT_MS = 2500;\n+  @NonNull\n+  private static final String ERROR_MESSAGE = \"Http request compiler cannot be reused\";\n+  @NonNull\n+  private static final byte[] EMPTY_BODY = new byte[0];\n+\n+  @NonNull\n+  private final String method;\n+  @NonNull\n+  private final Map<String, String> header;\n+  @NonNull\n+  private final String url;\n+\n+  @NonNull\n+  private byte[] body;\n+  private boolean compiled;\n+  private boolean useCaches;\n+  private boolean followRedirects;\n+  private int connectTimeoutMs;\n+  private int readTimeoutMs;\n+\n+  HttpRequestCompiler(@NonNull final String method, @NonNull final String url) {\n+    this.compiled = false;\n+    this.followRedirects = true;\n+    this.useCaches = true;\n+    this.connectTimeoutMs = CONNECT_TIMEOUT_MS;\n+    this.readTimeoutMs = READ_TIMEOUT_MS;\n+    this.url = url;\n+    this.method = checkNotNull(method);\n+    this.header = new HashMap<>();\n+    this.body = EMPTY_BODY;\n+  }\n+\n+  @NonNull\n+  @Override\n+  public HTHeaderFieldRedirectsCachesConnectionTimeoutReadTimeoutCompile body(\n+      @NonNull final byte[] body) {\n+    checkState(!compiled, ERROR_MESSAGE);\n+    this.body = checkNotNull(body);\n+    return this;\n+  }\n+\n+  @NonNull\n+  @Override\n+  public HTHeaderFieldRedirectsCachesConnectionTimeoutReadTimeoutCompile headerField(\n+      @NonNull final String name, @NonNull final String value) {\n+    checkState(!compiled, ERROR_MESSAGE);\n+    header.put(name, value);\n+    return this;\n+  }\n+\n+  @NonNull\n+  @Override\n+  public HTConnectionTimeoutReadTimeoutCompile noCaches() {\n+    checkState(!compiled, ERROR_MESSAGE);\n+    useCaches = false;\n+    return this;\n+  }\n+\n+  @NonNull\n+  @Override\n+  public HTReadTimeoutCompile connectTimeoutMs(final int connectTimeoutMs) {\n+    checkState(!compiled, ERROR_MESSAGE);\n+    this.connectTimeoutMs = connectTimeoutMs;\n+    return this;\n+  }\n+\n+  @NonNull\n+  @Override\n+  public HTCompile readTimeoutMs(final int readTimeoutMs) {\n+    checkState(!compiled, ERROR_MESSAGE);\n+    this.readTimeoutMs = readTimeoutMs;\n+    return this;\n+  }\n+\n+  @NonNull\n+  @Override\n+  public HTCachesConnectionTimeoutReadTimeoutCompile noRedirects() {\n+    checkState(!compiled, ERROR_MESSAGE);\n+    followRedirects = false;\n+    return this;\n+  }\n+\n+  @NonNull\n+  @Override\n+  public HttpRequest compile() {\n+    checkState(!compiled, ERROR_MESSAGE);\n+    compiled = true;\n+    return new HttpRequest(method, url, body, header, useCaches, followRedirects, connectTimeoutMs,\n+        readTimeoutMs);\n+  }\n+}"},{"sha":"2349a0c9c709e013625e6bf3e4d5d99cdcfb72fe","filename":"extensions/net/src/main/java/com/google/android/agera/net/HttpRequestCompilerStates.java","status":"added","additions":114,"deletions":0,"changes":114,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/extensions/net/src/main/java/com/google/android/agera/net/HttpRequestCompilerStates.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/extensions/net/src/main/java/com/google/android/agera/net/HttpRequestCompilerStates.java","contents_url":"https://api.github.com/repos/google/agera/contents/extensions/net/src/main/java/com/google/android/agera/net/HttpRequestCompilerStates.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,114 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera.net;\n+\n+import android.support.annotation.NonNull;\n+\n+/**\n+ * Container of the compiler state interfaces supporting the creation of a {@link HttpRequest}.\n+ */\n+public interface HttpRequestCompilerStates {\n+\n+  /**\n+   * Compiler state to specify what body to use for a post/put request.\n+   */\n+  interface HTBody {\n+\n+    /**\n+     * Adds a body to the {@link HttpRequest}.\n+     */\n+    @NonNull\n+    HTHeaderFieldRedirectsCachesConnectionTimeoutReadTimeoutCompile body(\n+        @NonNull byte[] body);\n+  }\n+\n+  /**\n+   * Compiler state to compile the {@link HttpRequest}.\n+   */\n+  interface HTCompile {\n+\n+    /**\n+     * Compiles a {@link HttpRequest} that containing the previously specified data.\n+     */\n+    @NonNull\n+    HttpRequest compile();\n+  }\n+\n+  /**\n+   * Compiler state allowing to specify header fields or compile.\n+   */\n+  interface HTHeaderFieldRedirectsCachesConnectionTimeoutReadTimeoutCompile\n+      extends HTCachesConnectionTimeoutReadTimeoutCompile {\n+\n+    /**\n+     * Adds a header field to the {@link HttpRequest}.\n+     */\n+    @NonNull\n+    HTHeaderFieldRedirectsCachesConnectionTimeoutReadTimeoutCompile headerField(\n+        @NonNull String name, @NonNull String value);\n+\n+\n+    /**\n+     * Turns off follow redirects.\n+     */\n+    @NonNull\n+    HTCachesConnectionTimeoutReadTimeoutCompile noRedirects();\n+  }\n+\n+  /**\n+   * Compiler state allowing to specify read timeout or compile.\n+   */\n+  interface HTReadTimeoutCompile extends HTCompile {\n+\n+    /**\n+     * Sets a read timeout in milliseconds.\n+     */\n+    @NonNull\n+    HTCompile readTimeoutMs(int readTimeoutMs);\n+  }\n+\n+  /**\n+   * Compiler state allowing to specify connection timeout, read timeout or compile.\n+   */\n+  interface HTConnectionTimeoutReadTimeoutCompile extends HTReadTimeoutCompile {\n+\n+    /**\n+     * Sets a connection timeout in milliseconds.\n+     */\n+    @NonNull\n+    HTReadTimeoutCompile connectTimeoutMs(int connectionTimeoutMs);\n+  }\n+\n+  /**\n+   * Compiler state allowing to specify not to use caches, connection timeouts, read timeout or\n+   * compile.\n+   */\n+  interface HTCachesConnectionTimeoutReadTimeoutCompile\n+      extends HTConnectionTimeoutReadTimeoutCompile {\n+\n+    /**\n+     * Turns off http caches.\n+     */\n+    @NonNull\n+    HTConnectionTimeoutReadTimeoutCompile noCaches();\n+  }\n+\n+  /**\n+   * Compiler state allowing to specify body, header fields or compile.\n+   */\n+  interface HTBodyHeaderFieldRedirectsCachesConnectionTimeoutReadTimeoutCompile\n+      extends HTBody, HTHeaderFieldRedirectsCachesConnectionTimeoutReadTimeoutCompile {}\n+}"},{"sha":"378bc85b4465e2ab38a9f9b1de40d7541cd97550","filename":"extensions/net/src/main/java/com/google/android/agera/net/HttpRequests.java","status":"added","additions":69,"deletions":0,"changes":69,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/extensions/net/src/main/java/com/google/android/agera/net/HttpRequests.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/extensions/net/src/main/java/com/google/android/agera/net/HttpRequests.java","contents_url":"https://api.github.com/repos/google/agera/contents/extensions/net/src/main/java/com/google/android/agera/net/HttpRequests.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera.net;\n+\n+import com.google.android.agera.net.HttpRequestCompilerStates.HTBodyHeaderFieldRedirectsCachesConnectionTimeoutReadTimeoutCompile;\n+import com.google.android.agera.net.HttpRequestCompilerStates.HTHeaderFieldRedirectsCachesConnectionTimeoutReadTimeoutCompile;\n+\n+import android.support.annotation.NonNull;\n+\n+/**\n+ * Creates instances of {@link HttpRequest}.\n+ */\n+public final class HttpRequests {\n+\n+  /**\n+   * Starts the creation of a GET {@link HttpRequest}.\n+   */\n+  @NonNull\n+  @SuppressWarnings(\"unchecked\")\n+  public static HTHeaderFieldRedirectsCachesConnectionTimeoutReadTimeoutCompile\n+  httpGetRequest(@NonNull final String url) {\n+    return new HttpRequestCompiler(\"GET\", url);\n+  }\n+\n+  /**\n+   * Starts the creation of a PUT {@link HttpRequest}.\n+   */\n+  @NonNull\n+  @SuppressWarnings(\"unchecked\")\n+  public static HTBodyHeaderFieldRedirectsCachesConnectionTimeoutReadTimeoutCompile\n+  httpPutRequest(@NonNull final String url) {\n+    return new HttpRequestCompiler(\"PUT\", url);\n+  }\n+\n+  /**\n+   * Starts the creation of a POST {@link HttpRequest}.\n+   */\n+  @NonNull\n+  @SuppressWarnings(\"unchecked\")\n+  public static HTBodyHeaderFieldRedirectsCachesConnectionTimeoutReadTimeoutCompile\n+  httpPostRequest(@NonNull final String url) {\n+    return new HttpRequestCompiler(\"POST\", url);\n+  }\n+\n+  /**\n+   * Starts the creation of a DELETE {@link HttpRequest}.\n+   */\n+  @NonNull\n+  @SuppressWarnings(\"unchecked\")\n+  public static HTHeaderFieldRedirectsCachesConnectionTimeoutReadTimeoutCompile\n+  httpDeleteRequest(@NonNull final String url) {\n+    return new HttpRequestCompiler(\"DELETE\", url);\n+  }\n+\n+  private HttpRequests() {}\n+}"},{"sha":"62bf05ac50bbd026e13f214f9f2c01ff1e0d7c81","filename":"extensions/net/src/main/java/com/google/android/agera/net/HttpResponse.java","status":"added","additions":176,"deletions":0,"changes":176,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/extensions/net/src/main/java/com/google/android/agera/net/HttpResponse.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/extensions/net/src/main/java/com/google/android/agera/net/HttpResponse.java","contents_url":"https://api.github.com/repos/google/agera/contents/extensions/net/src/main/java/com/google/android/agera/net/HttpResponse.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,176 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera.net;\n+\n+import static com.google.android.agera.Preconditions.checkNotNull;\n+import static com.google.android.agera.Result.absent;\n+import static com.google.android.agera.Result.absentIfNull;\n+import static com.google.android.agera.Result.failure;\n+import static com.google.android.agera.Result.present;\n+import static com.google.android.agera.Result.success;\n+import static java.util.Locale.US;\n+\n+import com.google.android.agera.Function;\n+import com.google.android.agera.Result;\n+\n+import android.support.annotation.NonNull;\n+\n+import java.io.UnsupportedEncodingException;\n+import java.util.Arrays;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+/**\n+ * An object representing a response from the http functions.\n+ */\n+public final class HttpResponse {\n+  @NonNull\n+  private static final ExtractCharsetFromContentType\n+      CHARSET_FROM_CONTENT_TYPE = new ExtractCharsetFromContentType();\n+  @NonNull\n+  private static final String CONTENT_TYPE = \"Content-Type\";\n+  @NonNull\n+  private static final String DEFAULT_CHARSET = \"ISO-8859-1\";\n+\n+  private final int responseCode;\n+  @NonNull\n+  private final String responseMessage;\n+  @NonNull\n+  private final byte[] body;\n+  @NonNull\n+  final Map<String, String> header;\n+\n+  private HttpResponse(final int responseCode, @NonNull final String responseMessage,\n+      @NonNull final Map<String, String> header, @NonNull final byte[] body) {\n+    this.responseCode = responseCode;\n+    this.responseMessage = checkNotNull(responseMessage);\n+    this.header = checkNotNull(header);\n+    this.body = checkNotNull(body);\n+  }\n+\n+  /**\n+   * Returns a new {@code HttpResponse}. Clients should only use this method for testing purposes.\n+   * It is normally only called by the http {@link Function}. When created it is assume that header\n+   * field keys in {@code header} is first changed to lower case {@link Locale#US}.\n+   */\n+  @NonNull\n+  public static HttpResponse httpResponse(final int responseCode,\n+      @NonNull final String responseMessage,\n+      @NonNull final Map<String, String> header, @NonNull final byte[] body) {\n+    return new HttpResponse(responseCode, responseMessage, header, body);\n+  }\n+\n+  /**\n+   * Returns the response body.\n+   */\n+  @NonNull\n+  public byte[] getBody() {\n+    return body;\n+  }\n+\n+  /**\n+   * Returns a {@link Result} of the body as a {@link String} based on the content type and\n+   * character encoding in the response. If the content could not be decoded into a string this\n+   * will return a {@link Result#failure()}.\n+   */\n+  @NonNull\n+  public Result<String> getBodyString() {\n+    try {\n+      return success(new String(body, getHeaderFieldValue(CONTENT_TYPE)\n+          .ifSucceededAttemptMap(CHARSET_FROM_CONTENT_TYPE)\n+          .orElse(DEFAULT_CHARSET)));\n+    } catch (final UnsupportedEncodingException e) {\n+      return failure(e);\n+    }\n+  }\n+\n+  /**\n+   * Returns the response code.\n+   */\n+  public int getResponseCode() {\n+    return responseCode;\n+  }\n+\n+  /**\n+   * Returns the response message.\n+   */\n+  @NonNull\n+  public String getResponseMessage() {\n+    return responseMessage;\n+  }\n+\n+  /**\n+   * Returns a {@link Result} of a header field value for the given {@code field}. If the response\n+   * doesn't contain the field a {@link Result#absent()} is returned.\n+   */\n+  @NonNull\n+  public Result<String> getHeaderFieldValue(@NonNull final String field) {\n+    return absentIfNull(header.get(field.toLowerCase(US)));\n+  }\n+\n+  @Override\n+  public boolean equals(final Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (!(o instanceof HttpResponse)) {\n+      return false;\n+    }\n+\n+    final HttpResponse that = (HttpResponse) o;\n+\n+    return responseCode == that.responseCode\n+        && responseMessage.equals(that.responseMessage)\n+        && Arrays.equals(body, that.body)\n+        && header.equals(that.header);\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    int result = responseCode;\n+    result = 31 * result + responseMessage.hashCode();\n+    result = 31 * result + Arrays.hashCode(body);\n+    result = 31 * result + header.hashCode();\n+    return result;\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return \"HttpResponse{\" +\n+        \"responseCode=\" + responseCode +\n+        \", responseMessage='\" + responseMessage + '\\'' +\n+        \", body=\" + Arrays.toString(body) +\n+        \", header=\" + header +\n+        '}';\n+  }\n+\n+  static final class ExtractCharsetFromContentType implements Function<String, Result<String>> {\n+    private static final String CHARSET = \"charset=\";\n+\n+    @NonNull\n+    @Override\n+    public Result<String> apply(@NonNull final String contentType) {\n+      final String[] parameters = contentType.split(\";\");\n+      for (final String parameter : parameters) {\n+        final String trimmedLowerCaseParameter = parameter.trim().toLowerCase(US);\n+        if (trimmedLowerCaseParameter.startsWith(CHARSET)) {\n+          return present(trimmedLowerCaseParameter.substring(CHARSET.length()));\n+        }\n+      }\n+      return absent();\n+    }\n+  }\n+}"},{"sha":"08af70a8bc58ae714ff87ac7d51428e52f163561","filename":"extensions/net/src/main/java/com/google/android/agera/net/UrlConnectionHttpFunction.java","status":"added","additions":131,"deletions":0,"changes":131,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/extensions/net/src/main/java/com/google/android/agera/net/UrlConnectionHttpFunction.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/extensions/net/src/main/java/com/google/android/agera/net/UrlConnectionHttpFunction.java","contents_url":"https://api.github.com/repos/google/agera/contents/extensions/net/src/main/java/com/google/android/agera/net/UrlConnectionHttpFunction.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera.net;\n+\n+import static com.google.android.agera.Result.failure;\n+import static com.google.android.agera.Result.success;\n+import static com.google.android.agera.net.HttpResponse.httpResponse;\n+import static java.util.Locale.US;\n+\n+import com.google.android.agera.Function;\n+import com.google.android.agera.Result;\n+\n+import android.support.annotation.NonNull;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+final class UrlConnectionHttpFunction implements Function<HttpRequest, Result<HttpResponse>> {\n+  private static final int CONTENT_BUFFER_SIZE = 1024;\n+  private static final byte[] EMPTY_BODY = new byte[0];\n+\n+  @Override\n+  @NonNull\n+  public Result<HttpResponse> apply(@NonNull final HttpRequest request) {\n+    try {\n+      final HttpURLConnection connection =\n+          (HttpURLConnection) new URL(request.url).openConnection();\n+      try {\n+        return success(getHttpResponseResult(request, connection));\n+      } finally {\n+        connection.disconnect();\n+      }\n+    } catch (final IOException exception) {\n+      return failure(exception);\n+    }\n+  }\n+\n+  @NonNull\n+  private HttpResponse getHttpResponseResult(final @NonNull HttpRequest request,\n+      @NonNull final HttpURLConnection connection) throws IOException {\n+    connection.setConnectTimeout(request.connectTimeoutMs);\n+    connection.setReadTimeout(request.readTimeoutMs);\n+    connection.setInstanceFollowRedirects(request.followRedirects);\n+    connection.setUseCaches(request.useCaches);\n+    connection.setDoInput(true);\n+    connection.setRequestMethod(request.method);\n+    for (final Entry<String, String> headerField : request.header.entrySet()) {\n+      connection.addRequestProperty(headerField.getKey(), headerField.getValue());\n+    }\n+    final byte[] body = request.body;\n+    if (body.length > 0) {\n+      connection.setDoOutput(true);\n+      final OutputStream out = connection.getOutputStream();\n+      try {\n+        out.write(body);\n+      } finally {\n+        out.close();\n+      }\n+    }\n+    final String responseMessage = connection.getResponseMessage();\n+    return httpResponse(connection.getResponseCode(),\n+        responseMessage != null ? responseMessage : \"\",\n+        getHeader(connection), getByteArray(connection));\n+  }\n+\n+  @NonNull\n+  private static Map<String, String> getHeader(@NonNull final HttpURLConnection connection) {\n+    final Map<String, String> headers = new HashMap<>();\n+    for (final Entry<String, List<String>> header : connection.getHeaderFields().entrySet()) {\n+      final String key = header.getKey();\n+      if (key != null) {\n+        headers.put(key.toLowerCase(US), header.getValue().get(0));\n+      }\n+    }\n+    return headers;\n+  }\n+\n+  @NonNull\n+  private byte[] getByteArray(@NonNull final HttpURLConnection connection) throws IOException {\n+    final int contentLength = connection.getContentLength();\n+    if (contentLength == 0) {\n+      return EMPTY_BODY;\n+    }\n+    final InputStream inputStream = getInputStream(connection);\n+    try {\n+      final int capacity = contentLength < 0 ? CONTENT_BUFFER_SIZE : contentLength;\n+      final ByteArrayOutputStream out = new ByteArrayOutputStream();\n+      final byte[] buffer = new byte[capacity];\n+      while (true) {\n+        int r = inputStream.read(buffer);\n+        if (r == -1) {\n+          break;\n+        }\n+        out.write(buffer, 0, r);\n+      }\n+      return out.toByteArray();\n+    } finally {\n+      inputStream.close();\n+    }\n+  }\n+\n+  @NonNull\n+  private static InputStream getInputStream(@NonNull final HttpURLConnection connection) {\n+    try {\n+      return connection.getInputStream();\n+    } catch (final IOException e) {\n+      return connection.getErrorStream();\n+    }\n+  }\n+}"},{"sha":"ff239db409a3364fc5311844df72198301ab2464","filename":"extensions/net/src/test/java/com/google/android/agera/net/BuildConfigTest.java","status":"added","additions":25,"deletions":0,"changes":25,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/extensions/net/src/test/java/com/google/android/agera/net/BuildConfigTest.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/extensions/net/src/test/java/com/google/android/agera/net/BuildConfigTest.java","contents_url":"https://api.github.com/repos/google/agera/contents/extensions/net/src/test/java/com/google/android/agera/net/BuildConfigTest.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,25 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera.net;\n+\n+import org.junit.Test;\n+\n+public final class BuildConfigTest {\n+  @Test\n+  public void shouldRemoveBuildConfigFromCoverageReport() {\n+    new BuildConfig();\n+  }\n+}"},{"sha":"f2492dc76218a3e4fe5ed7cb48f05d49d23c41af","filename":"extensions/net/src/test/java/com/google/android/agera/net/HttpFunctionsTest.java","status":"added","additions":276,"deletions":0,"changes":276,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/extensions/net/src/test/java/com/google/android/agera/net/HttpFunctionsTest.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/extensions/net/src/test/java/com/google/android/agera/net/HttpFunctionsTest.java","contents_url":"https://api.github.com/repos/google/agera/contents/extensions/net/src/test/java/com/google/android/agera/net/HttpFunctionsTest.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,276 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera.net;\n+\n+\n+import static com.google.android.agera.net.HttpFunctions.httpFunction;\n+import static com.google.android.agera.net.HttpRequests.httpDeleteRequest;\n+import static com.google.android.agera.net.HttpRequests.httpGetRequest;\n+import static com.google.android.agera.net.HttpRequests.httpPostRequest;\n+import static com.google.android.agera.net.HttpRequests.httpPutRequest;\n+import static com.google.android.agera.net.test.matchers.HasPrivateConstructor.hasPrivateConstructor;\n+import static java.util.Collections.singletonList;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.hasEntry;\n+import static org.hamcrest.Matchers.instanceOf;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.notNullValue;\n+import static org.mockito.Matchers.anyString;\n+import static org.mockito.Mockito.doThrow;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.reset;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyZeroInteractions;\n+import static org.mockito.Mockito.when;\n+import static org.robolectric.annotation.Config.NONE;\n+\n+import org.junit.After;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.Config;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.HttpURLConnection;\n+import java.net.ProtocolException;\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.net.URLStreamHandler;\n+import java.net.URLStreamHandlerFactory;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+@Config(manifest = NONE)\n+@RunWith(RobolectricTestRunner.class)\n+public final class HttpFunctionsTest {\n+  private static final String TEST_PROTOCOL = \"httptest\";\n+  private static final String TEST_URI = TEST_PROTOCOL + \"://path\";\n+  private static final HttpRequest HTTP_GET_REQUEST = httpGetRequest(TEST_URI).compile();\n+  private static final HttpRequest HTTP_POST_REQUEST = httpPostRequest(TEST_URI).compile();\n+  private static final HttpRequest HTTP_PUT_REQUEST = httpPutRequest(TEST_URI).compile();\n+  private static final HttpRequest HTTP_DELETE_REQUEST =\n+      httpDeleteRequest(TEST_URI).compile();\n+  private static final byte[] RESPONSE_BODY = new byte[] {2, 3, 4};\n+  private static final byte[] REQUEST_BODY = new byte[] {1, 2, 3};\n+  private static final HttpRequest HTTP_GET_REQUEST_WITH_HEADERS = httpGetRequest(TEST_URI)\n+      .headerField(\"name\", \"value\").headerField(\"name2\", \"value2\").compile();\n+  private static final HttpRequest HTTP_POST_WITH_BODY_REQUEST =\n+      httpPostRequest(TEST_URI).body(REQUEST_BODY).compile();\n+  private static final HttpRequest HTTP_PUT_WITH_BODY_REQUEST =\n+      httpPutRequest(TEST_URI).body(REQUEST_BODY).compile();\n+  private static final String GET_METHOD = \"GET\";\n+  private static final String POST_METHOD = \"POST\";\n+  private static final String PUT_METHOD = \"PUT\";\n+  private static final String DELETE_METHOD = \"DELETE\";\n+  private static final byte[] EMPTY_BODY = new byte[0];\n+\n+  private static HttpURLConnection mockHttpURLConnection;\n+\n+  @BeforeClass\n+  public static void onlyOnce() throws Throwable {\n+    mockHttpURLConnection = mock(HttpURLConnection.class);\n+    URL.setURLStreamHandlerFactory(new URLStreamHandlerFactory() {\n+      @Override\n+      public URLStreamHandler createURLStreamHandler(final String s) {\n+        return s.equals(TEST_PROTOCOL) ? new URLStreamHandler() {\n+          @Override\n+          protected URLConnection openConnection(final URL url) throws IOException {\n+            return mockHttpURLConnection;\n+          }\n+        } : null;\n+      }\n+    });\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    reset(mockHttpURLConnection);\n+  }\n+\n+  @Test\n+  public void shouldPassOnGetMethod() throws Throwable {\n+    assertThat(httpFunction()\n+            .apply(HTTP_GET_REQUEST),\n+        is(notNullValue()));\n+    verify(mockHttpURLConnection).setRequestMethod(GET_METHOD);\n+    verify(mockHttpURLConnection).disconnect();\n+  }\n+\n+  @Test\n+  public void shouldPassOnPostMethod() throws Throwable {\n+    assertThat(httpFunction()\n+            .apply(HTTP_POST_REQUEST),\n+        is(notNullValue()));\n+    verify(mockHttpURLConnection).setRequestMethod(POST_METHOD);\n+    verify(mockHttpURLConnection).disconnect();\n+  }\n+\n+  @Test\n+  public void shouldPassOnPutMethod() throws Throwable {\n+    assertThat(httpFunction()\n+            .apply(HTTP_PUT_REQUEST),\n+        is(notNullValue()));\n+    verify(mockHttpURLConnection).setRequestMethod(PUT_METHOD);\n+    verify(mockHttpURLConnection).disconnect();\n+  }\n+\n+  @Test\n+  public void shouldPassOnDeleteMethod() throws Throwable {\n+    assertThat(httpFunction()\n+            .apply(HTTP_DELETE_REQUEST),\n+        is(notNullValue()));\n+    verify(mockHttpURLConnection).setRequestMethod(DELETE_METHOD);\n+    verify(mockHttpURLConnection).disconnect();\n+  }\n+\n+  @Test\n+  public void shouldGracefullyHandleProtocolExceptionForInvalidMethod() throws Throwable {\n+    doThrow(ProtocolException.class).when(mockHttpURLConnection).setRequestMethod(anyString());\n+\n+    assertThat(httpFunction().apply(HTTP_DELETE_REQUEST).getFailure(),\n+        instanceOf(ProtocolException.class));\n+    verify(mockHttpURLConnection).disconnect();\n+  }\n+\n+  @Test\n+  public void shouldPassOnRequestHeaders() throws Throwable {\n+    assertThat(httpFunction().apply(HTTP_GET_REQUEST_WITH_HEADERS), is(notNullValue()));\n+\n+    verify(mockHttpURLConnection).addRequestProperty(\"name\", \"value\");\n+    verify(mockHttpURLConnection).addRequestProperty(\"name2\", \"value2\");\n+    verify(mockHttpURLConnection).disconnect();\n+  }\n+\n+  @Test\n+  public void shouldPassOnResponseHeadersAsLowerCase() throws Throwable {\n+    final ByteArrayInputStream inputStream = new ByteArrayInputStream(RESPONSE_BODY);\n+    when(mockHttpURLConnection.getInputStream()).thenReturn(inputStream);\n+    when(mockHttpURLConnection.getContentLength()).thenReturn(RESPONSE_BODY.length);\n+    final Map<String, List<String>> headerFields = new HashMap<>();\n+    headerFields.put(\"NAmE\", singletonList(\"value\"));\n+    headerFields.put(\"naMe2\", singletonList(\"value2\"));\n+    when(mockHttpURLConnection.getHeaderFields()).thenReturn(headerFields);\n+\n+    final HttpResponse httpResponse = httpFunction().apply(HTTP_GET_REQUEST).get();\n+\n+    assertThat(httpResponse.header.size(), is(2));\n+    assertThat(httpResponse.header, hasEntry(\"name\", \"value\"));\n+    assertThat(httpResponse.header, hasEntry(\"name2\", \"value2\"));\n+    verify(mockHttpURLConnection).disconnect();\n+  }\n+\n+  @Test\n+  public void shouldGetOutputStreamForPutWithBody() throws Throwable {\n+    final ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n+    final ByteArrayInputStream inputStream = new ByteArrayInputStream(RESPONSE_BODY);\n+    when(mockHttpURLConnection.getOutputStream()).thenReturn(outputStream);\n+    when(mockHttpURLConnection.getInputStream()).thenReturn(inputStream);\n+\n+    assertThat(httpFunction().apply(HTTP_PUT_WITH_BODY_REQUEST), is(notNullValue()));\n+    verify(mockHttpURLConnection).setDoInput(true);\n+    verify(mockHttpURLConnection).disconnect();\n+    assertThat(outputStream.toByteArray(), is(REQUEST_BODY));\n+  }\n+\n+  @Test\n+  public void shouldGetOutputStreamForPostWithBody() throws Throwable {\n+    final ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n+    final ByteArrayInputStream inputStream = new ByteArrayInputStream(RESPONSE_BODY);\n+    when(mockHttpURLConnection.getOutputStream()).thenReturn(outputStream);\n+    when(mockHttpURLConnection.getInputStream()).thenReturn(inputStream);\n+\n+    assertThat(httpFunction().apply(HTTP_POST_WITH_BODY_REQUEST), is(notNullValue()));\n+    verify(mockHttpURLConnection).setDoInput(true);\n+    verify(mockHttpURLConnection).disconnect();\n+    assertThat(outputStream.toByteArray(), is(REQUEST_BODY));\n+  }\n+\n+  @Test\n+  public void shouldGetByteArrayFromGetResponse() throws Throwable {\n+    final ByteArrayInputStream inputStream = new ByteArrayInputStream(RESPONSE_BODY);\n+    when(mockHttpURLConnection.getInputStream()).thenReturn(inputStream);\n+    when(mockHttpURLConnection.getContentLength()).thenReturn(RESPONSE_BODY.length);\n+\n+    assertThat(httpFunction().apply(HTTP_GET_REQUEST).get().getBody(), is(RESPONSE_BODY));\n+    verify(mockHttpURLConnection).disconnect();\n+  }\n+\n+  @Test\n+  public void shouldGetByteArrayFromGetResponseOfUnknownLength() throws Throwable {\n+    final ByteArrayInputStream inputStream = new ByteArrayInputStream(RESPONSE_BODY);\n+    when(mockHttpURLConnection.getInputStream()).thenReturn(inputStream);\n+    when(mockHttpURLConnection.getContentLength()).thenReturn(-1);\n+\n+    assertThat(httpFunction().apply(HTTP_GET_REQUEST).get().getBody(), is(RESPONSE_BODY));\n+    verify(mockHttpURLConnection).disconnect();\n+  }\n+\n+  @Test\n+  public void shouldGetEmptyBodyFromGetResponseOfZeroLength() throws Throwable {\n+    final InputStream inputStream = mock(InputStream.class);\n+    when(mockHttpURLConnection.getInputStream()).thenReturn(inputStream);\n+    when(mockHttpURLConnection.getContentLength()).thenReturn(0);\n+\n+    assertThat(httpFunction().apply(HTTP_GET_REQUEST).get().getBody(), is(EMPTY_BODY));\n+    verify(mockHttpURLConnection).disconnect();\n+    verifyZeroInteractions(inputStream);\n+  }\n+\n+  @Test\n+  public void shouldReturnErrorStreamForFailingInputStream() throws Throwable {\n+    final ByteArrayInputStream inputStream = new ByteArrayInputStream(RESPONSE_BODY);\n+    when(mockHttpURLConnection.getContentLength()).thenReturn(-1);\n+    //noinspection unchecked\n+    when(mockHttpURLConnection.getInputStream()).thenThrow(IOException.class);\n+    when(mockHttpURLConnection.getErrorStream()).thenReturn(inputStream);\n+\n+    assertThat(httpFunction().apply(HTTP_GET_REQUEST).get().getBody(), is(RESPONSE_BODY));\n+    verify(mockHttpURLConnection).disconnect();\n+  }\n+\n+  @Test\n+  public void shouldReturnResponseCodeAndMessage() throws Throwable {\n+    when(mockHttpURLConnection.getResponseCode()).thenReturn(200);\n+    when(mockHttpURLConnection.getResponseMessage()).thenReturn(\"message\");\n+\n+    final HttpResponse httpResponse = httpFunction().apply(HTTP_GET_REQUEST).get();\n+\n+    assertThat(httpResponse.getResponseCode(), is(200));\n+    assertThat(httpResponse.getResponseMessage(), is(\"message\"));\n+    verify(mockHttpURLConnection).disconnect();\n+  }\n+\n+  @Test\n+  public void shouldReturnEmptyStringForNullResponseMessage() throws Throwable {\n+    when(mockHttpURLConnection.getResponseMessage()).thenReturn(null);\n+\n+    final HttpResponse httpResponse = httpFunction().apply(HTTP_GET_REQUEST).get();\n+\n+    assertThat(httpResponse.getResponseMessage(), is(\"\"));\n+    verify(mockHttpURLConnection).disconnect();\n+  }\n+\n+\n+  @Test\n+  public void shouldHavePrivateConstructor() {\n+    assertThat(HttpFunctions.class, hasPrivateConstructor());\n+  }\n+}"},{"sha":"a8db5fe193d76db9e3a4da901827e64408b5e165","filename":"extensions/net/src/test/java/com/google/android/agera/net/HttpRequestTest.java","status":"added","additions":159,"deletions":0,"changes":159,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/extensions/net/src/test/java/com/google/android/agera/net/HttpRequestTest.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/extensions/net/src/test/java/com/google/android/agera/net/HttpRequestTest.java","contents_url":"https://api.github.com/repos/google/agera/contents/extensions/net/src/test/java/com/google/android/agera/net/HttpRequestTest.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,159 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera.net;\n+\n+import static com.google.android.agera.net.HttpRequestCompiler.CONNECT_TIMEOUT_MS;\n+import static com.google.android.agera.net.HttpRequestCompiler.READ_TIMEOUT_MS;\n+import static com.google.android.agera.net.HttpRequests.httpDeleteRequest;\n+import static com.google.android.agera.net.HttpRequests.httpGetRequest;\n+import static com.google.android.agera.net.HttpRequests.httpPostRequest;\n+import static com.google.android.agera.net.HttpRequests.httpPutRequest;\n+import static com.google.android.agera.net.test.matchers.HasHashCodeOf.hasHashCodeOf;\n+import static com.google.android.agera.net.test.matchers.HasPrivateConstructor.hasPrivateConstructor;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.hasEntry;\n+import static org.hamcrest.Matchers.hasToString;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.isEmptyOrNullString;\n+import static org.hamcrest.Matchers.not;\n+import static org.robolectric.annotation.Config.NONE;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.Config;\n+\n+import java.util.Map;\n+\n+@Config(manifest = NONE)\n+@RunWith(RobolectricTestRunner.class)\n+public final class HttpRequestTest {\n+  private static final String URL = \"http://agera\";\n+  private static final byte[] DATA = \"Body data\".getBytes();\n+\n+  @Test\n+  public void shouldCreateHttpGetRequest() {\n+    final HttpRequest httpRequest = httpGetRequest(URL).compile();\n+\n+    assertThat(httpRequest.method, is(\"GET\"));\n+    assertThat(httpRequest.url, is(URL));\n+  }\n+\n+  @Test\n+  public void shouldCreateHttpPostRequest() {\n+    final HttpRequest httpRequest = httpPostRequest(URL).compile();\n+\n+    assertThat(httpRequest.method, is(\"POST\"));\n+    assertThat(httpRequest.url, is(URL));\n+  }\n+\n+  @Test\n+  public void shouldCreateHttpPostRequestWithData() {\n+    final HttpRequest httpRequest = httpPostRequest(URL).body(DATA).compile();\n+\n+    assertThat(httpRequest.method, is(\"POST\"));\n+    assertThat(httpRequest.url, is(URL));\n+    assertThat(httpRequest.body, is(DATA));\n+  }\n+\n+  @Test\n+  public void shouldCreateHttpPutRequest() {\n+    final HttpRequest httpRequest = httpPutRequest(URL).compile();\n+\n+    assertThat(httpRequest.method, is(\"PUT\"));\n+    assertThat(httpRequest.url, is(URL));\n+  }\n+\n+  @Test\n+  public void shouldCreateHttpPutRequestWithBody() {\n+    final HttpRequest httpRequest = httpPutRequest(URL).body(DATA).compile();\n+\n+    assertThat(httpRequest.method, is(\"PUT\"));\n+    assertThat(httpRequest.url, is(URL));\n+    assertThat(httpRequest.body, is(DATA));\n+  }\n+\n+  @Test\n+  public void shouldCreateHttpDeleteRequest() {\n+    final HttpRequest httpRequest = httpDeleteRequest(URL).compile();\n+\n+    assertThat(httpRequest.method, is(\"DELETE\"));\n+    assertThat(httpRequest.url, is(URL));\n+  }\n+\n+  @Test\n+  public void shouldCreateSetHeaderFields() {\n+    final HttpRequest httpRequest = httpGetRequest(URL)\n+        .headerField(\"HEADER1\", \"VALUE1\")\n+        .headerField(\"HEADER2\", \"VALUE2\")\n+        .compile();\n+\n+    final Map<String, String> header = httpRequest.header;\n+    assertThat(header, hasEntry(\"HEADER1\", \"VALUE1\"));\n+    assertThat(header, hasEntry(\"HEADER2\", \"VALUE2\"));\n+  }\n+\n+  @Test\n+  public void shouldHaveDefaultValuesForRedirectCachesAndTimeouts() {\n+    final HttpRequest httpRequest = httpDeleteRequest(URL).compile();\n+\n+    assertThat(httpRequest.connectTimeoutMs, is(CONNECT_TIMEOUT_MS));\n+    assertThat(httpRequest.readTimeoutMs, is(READ_TIMEOUT_MS));\n+    assertThat(httpRequest.followRedirects, is(true));\n+    assertThat(httpRequest.useCaches, is(true));\n+  }\n+\n+  @Test\n+  public void shouldDisableCaches() {\n+    assertThat(httpDeleteRequest(URL).noCaches().compile().useCaches, is(false));\n+  }\n+\n+  @Test\n+  public void shouldDisableFollowRedirects() {\n+    assertThat(httpDeleteRequest(URL).noRedirects().compile().followRedirects, is(false));\n+  }\n+\n+  @Test\n+  public void shouldSetReadTimeout() {\n+    assertThat(httpDeleteRequest(URL).readTimeoutMs(2).compile().readTimeoutMs, is(2));\n+  }\n+\n+  @Test\n+  public void shouldSetConnectTimeout() {\n+    assertThat(httpDeleteRequest(URL).connectTimeoutMs(3).compile().connectTimeoutMs, is(3));\n+  }\n+\n+  @Test\n+  public void shouldBeEqualForSameData() {\n+    assertThat(httpGetRequest(URL).compile(), is(httpGetRequest(URL).compile()));\n+  }\n+\n+  @Test\n+  public void shouldHaveToString() {\n+    assertThat(httpGetRequest(URL).compile(), hasToString(not(isEmptyOrNullString())));\n+  }\n+\n+  @Test\n+  public void shouldHaveSameHashcodeForSameData() {\n+    assertThat(httpGetRequest(URL).compile(),\n+        hasHashCodeOf(httpGetRequest(URL).compile()));\n+  }\n+\n+  @Test\n+  public void shouldHavePrivateConstructor() {\n+    assertThat(HttpRequests.class, hasPrivateConstructor());\n+  }\n+}\n\\ No newline at end of file"},{"sha":"3eb23afabfa69b92b161eb4e9823930c26772e2d","filename":"extensions/net/src/test/java/com/google/android/agera/net/HttpResponseTest.java","status":"added","additions":177,"deletions":0,"changes":177,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/extensions/net/src/test/java/com/google/android/agera/net/HttpResponseTest.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/extensions/net/src/test/java/com/google/android/agera/net/HttpResponseTest.java","contents_url":"https://api.github.com/repos/google/agera/contents/extensions/net/src/test/java/com/google/android/agera/net/HttpResponseTest.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,177 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera.net;\n+\n+import static com.google.android.agera.Result.success;\n+import static com.google.android.agera.net.HttpResponse.httpResponse;\n+import static com.google.android.agera.net.test.matchers.HasHashCodeOf.hasHashCodeOf;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasToString;\n+import static org.hamcrest.Matchers.instanceOf;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.isEmptyOrNullString;\n+import static org.hamcrest.Matchers.not;\n+import static org.robolectric.annotation.Config.NONE;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.Config;\n+\n+import java.io.UnsupportedEncodingException;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+@Config(manifest = NONE)\n+@RunWith(RobolectricTestRunner.class)\n+public final class HttpResponseTest {\n+  private static final String DEFAULT_CHARSET = \"ISO-8859-1\";\n+  private static final String UTF16_CHARSET = \"UTF-16\";\n+  private static final String BODY_STRING = \"body stringÿ\";\n+  private static final String CONTENT_TYPE = \"content-type\";\n+  private static final int FAILED_RESPONSE_CODE = 404;\n+  private static final String FAILED_RESPONSE_MESSAGE = \"failure\";\n+  private static final int SUCCESSFUL_RESPONSE_CODE = 202;\n+  private static final String SUCCESSFUL_RESPONSE_MESSAGE = \"success\";\n+  private static final HashMap<String, String> HEADERS = new HashMap<>();\n+  private static final String TEXT_PLAIN_CHARSET_INVALID = \"text/plain; charset=invalid\";\n+  private HttpResponse failedResponse;\n+  private HttpResponse successfulHttpResponse;\n+  private byte[] defaultCharsetBody;\n+  private byte[] utf16CharsetBody;\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    defaultCharsetBody = BODY_STRING.getBytes(DEFAULT_CHARSET);\n+    utf16CharsetBody = BODY_STRING.getBytes(UTF16_CHARSET);\n+    failedResponse = httpResponse(FAILED_RESPONSE_CODE, FAILED_RESPONSE_MESSAGE,\n+        HEADERS, defaultCharsetBody);\n+    successfulHttpResponse = httpResponse(SUCCESSFUL_RESPONSE_CODE, SUCCESSFUL_RESPONSE_MESSAGE,\n+        HEADERS, defaultCharsetBody);\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    HEADERS.clear();\n+  }\n+\n+  @Test\n+  public void shouldHaveResponseCodeForFailure() {\n+    assertThat(failedResponse.getResponseCode(), is(FAILED_RESPONSE_CODE));\n+  }\n+\n+  @Test\n+  public void shouldHaveResponseCodeForSuccess() {\n+    assertThat(successfulHttpResponse.getResponseCode(), is(SUCCESSFUL_RESPONSE_CODE));\n+  }\n+\n+  @Test\n+  public void shouldHaveResponseMessageForFailure() {\n+    assertThat(failedResponse.getResponseMessage(), is(FAILED_RESPONSE_MESSAGE));\n+  }\n+\n+  @Test\n+  public void shouldHaveResponseMessageForSuccess() {\n+    assertThat(successfulHttpResponse.getResponseMessage(), is(SUCCESSFUL_RESPONSE_MESSAGE));\n+  }\n+\n+  @Test\n+  public void shouldGetSuccessBodyStringForSuccess() throws Throwable {\n+    assertThat(successfulHttpResponse.getBodyString().get(), is(BODY_STRING));\n+  }\n+\n+  @Test\n+  public void shouldGetBodyStringForDefaultCharsetWithContentTypeHeader() throws Throwable {\n+    final HashMap<String, String> headers = new HashMap<>();\n+    headers.put(CONTENT_TYPE, \"text/plain\");\n+    final HttpResponse httpResponse = httpResponse(SUCCESSFUL_RESPONSE_CODE,\n+        SUCCESSFUL_RESPONSE_MESSAGE, headers, defaultCharsetBody);\n+\n+    assertThat(httpResponse.getBodyString().get(), is(BODY_STRING));\n+  }\n+\n+  @Test\n+  public void shouldGetBodyStringForCustomCharsetWithContentTypeHeader() throws Throwable {\n+    final HashMap<String, String> headers = new HashMap<>();\n+    headers.put(CONTENT_TYPE, \"text/plain; charset=\" + UTF16_CHARSET);\n+    final HttpResponse httpResponse = httpResponse(SUCCESSFUL_RESPONSE_CODE,\n+        SUCCESSFUL_RESPONSE_MESSAGE, headers, utf16CharsetBody);\n+\n+    assertThat(httpResponse.getBodyString(), is(success(BODY_STRING)));\n+  }\n+\n+  @Test\n+  public void shouldGetFailureForInvalidCharset() {\n+    final HashMap<String, String> headers = new HashMap<>();\n+    headers.put(CONTENT_TYPE, TEXT_PLAIN_CHARSET_INVALID);\n+    final HttpResponse httpResponse = httpResponse(SUCCESSFUL_RESPONSE_CODE,\n+        SUCCESSFUL_RESPONSE_MESSAGE, headers, defaultCharsetBody);\n+\n+    assertThat(httpResponse.getBodyString().getFailure(),\n+        instanceOf(UnsupportedEncodingException.class));\n+  }\n+\n+  @Test\n+  public void shouldGetAbsentForAbsentHeaderField() {\n+    assertThat(successfulHttpResponse.getHeaderFieldValue(\"absentfield\").isAbsent(), is(true));\n+  }\n+\n+  @Test\n+  public void shouldGetCaseInsensitiveHeaders() {\n+    final Map<String, String> headers = new HashMap<>();\n+    final String headerContent = \"headercontent\";\n+    headers.put(\"header\", headerContent);\n+    final HttpResponse httpResponse = httpResponse(SUCCESSFUL_RESPONSE_CODE,\n+        SUCCESSFUL_RESPONSE_MESSAGE, headers, defaultCharsetBody);\n+\n+    assertThat(httpResponse.getHeaderFieldValue(\"hEaDeR\").get(), is(headerContent));\n+  }\n+\n+  @Test\n+  public void shouldNotBeEqualForDifferentArguments() {\n+    assertThat(successfulHttpResponse, not(equalTo(failedResponse)));\n+  }\n+\n+  @Test\n+  public void shouldBeEqualForSameInstance() {\n+    assertThat(successfulHttpResponse, equalTo(successfulHttpResponse));\n+  }\n+\n+  @Test\n+  public void shouldNotBeEqualForOtherType() {\n+    assertThat(successfulHttpResponse, not(equalTo(new Object())));\n+  }\n+\n+  @Test\n+  public void shouldBeEqualForSameParametersButDifferentInstance() {\n+    assertThat(successfulHttpResponse, equalTo(httpResponse(SUCCESSFUL_RESPONSE_CODE,\n+        SUCCESSFUL_RESPONSE_MESSAGE, HEADERS, defaultCharsetBody)));\n+  }\n+\n+  @Test\n+  public void shouldHaveSameHashcodeForSameParametersButDifferentInstance() {\n+    assertThat(successfulHttpResponse, hasHashCodeOf(httpResponse(SUCCESSFUL_RESPONSE_CODE,\n+        SUCCESSFUL_RESPONSE_MESSAGE, HEADERS, defaultCharsetBody)));\n+  }\n+\n+  @Test\n+  public void shouldCreateStringRepresentation() {\n+    assertThat(successfulHttpResponse, hasToString(not(isEmptyOrNullString())));\n+  }\n+}\n\\ No newline at end of file"},{"sha":"0209e19dacf69aa7106cd68b31ba9b1276aa4518","filename":"extensions/net/src/test/java/com/google/android/agera/net/test/matchers/HasHashCodeOf.java","status":"added","additions":45,"deletions":0,"changes":45,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/extensions/net/src/test/java/com/google/android/agera/net/test/matchers/HasHashCodeOf.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/extensions/net/src/test/java/com/google/android/agera/net/test/matchers/HasHashCodeOf.java","contents_url":"https://api.github.com/repos/google/agera/contents/extensions/net/src/test/java/com/google/android/agera/net/test/matchers/HasHashCodeOf.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,45 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera.net.test.matchers;\n+\n+import org.hamcrest.Description;\n+import org.hamcrest.Factory;\n+import org.hamcrest.Matcher;\n+import org.hamcrest.TypeSafeMatcher;\n+\n+public final class HasHashCodeOf extends TypeSafeMatcher<Object> {\n+  private final Object object;\n+\n+  private HasHashCodeOf(final Object object) {\n+    this.object = object;\n+  }\n+\n+  @Override\n+  protected boolean matchesSafely(final Object item) {\n+    return item.hashCode() == object.hashCode();\n+  }\n+\n+  @Override\n+  public void describeTo(final Description description) {\n+    description.appendText(\"same hashcode as \");\n+    description.appendValue(object);\n+  }\n+\n+  @Factory\n+  public static Matcher<Object> hasHashCodeOf(final Object object) {\n+    return new HasHashCodeOf(object);\n+  }\n+}"},{"sha":"6638f2ddbb03de08ab21d12e1d5b7f32f1a242fb","filename":"extensions/net/src/test/java/com/google/android/agera/net/test/matchers/HasPrivateConstructor.java","status":"added","additions":53,"deletions":0,"changes":53,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/extensions/net/src/test/java/com/google/android/agera/net/test/matchers/HasPrivateConstructor.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/extensions/net/src/test/java/com/google/android/agera/net/test/matchers/HasPrivateConstructor.java","contents_url":"https://api.github.com/repos/google/agera/contents/extensions/net/src/test/java/com/google/android/agera/net/test/matchers/HasPrivateConstructor.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,53 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera.net.test.matchers;\n+\n+import org.hamcrest.Description;\n+import org.hamcrest.Factory;\n+import org.hamcrest.Matcher;\n+import org.hamcrest.TypeSafeMatcher;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Modifier;\n+\n+public final class HasPrivateConstructor extends TypeSafeMatcher<Class<?>> {\n+  private static final HasPrivateConstructor INSTANCE = new HasPrivateConstructor();\n+\n+  private HasPrivateConstructor() {\n+  }\n+\n+  @Override\n+  protected boolean matchesSafely(final Class<?> clazz) {\n+    try {\n+      Constructor<?> constructor = clazz.getDeclaredConstructor();\n+      constructor.setAccessible(true);\n+      constructor.newInstance();\n+      return Modifier.isPrivate(constructor.getModifiers());\n+    } catch (final Exception ignored) {\n+    }\n+    return false;\n+  }\n+\n+  @Override\n+  public void describeTo(final Description description) {\n+    description.appendText(\"should have private constructor\");\n+  }\n+\n+  @Factory\n+  public static Matcher<Class<?>> hasPrivateConstructor() {\n+    return INSTANCE;\n+  }\n+}"},{"sha":"a507a737cf5f8cbf7e6852053def73885b9e7138","filename":"extensions/rvadapter/build.gradle","status":"added","additions":45,"deletions":0,"changes":45,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/extensions/rvadapter/build.gradle","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/extensions/rvadapter/build.gradle","contents_url":"https://api.github.com/repos/google/agera/contents/extensions/rvadapter/build.gradle?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,45 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+apply plugin: 'com.android.library'\n+apply plugin: 'com.github.dcendents.android-maven'\n+apply plugin: 'jacoco'\n+\n+dependencies {\n+    compile project(':agera')\n+    compile \"com.android.support:recyclerview-v7:$gradle.supportLibraryVersion\"\n+}\n+\n+install {\n+    repositories.mavenInstaller {\n+        pom {\n+            project {\n+                packaging 'aar'\n+                name 'Agera RecyclerView Adapter'\n+                url gradle.url\n+                licenses {\n+                    license {\n+                        name gradle.licenseName\n+                        url gradle.licenseUrl\n+                    }\n+                }\n+                scm {\n+                    url gradle.url\n+                    connection gradle.gitUrl\n+                }\n+            }\n+        }\n+    }\n+}"},{"sha":"55d27e4fd5cc2c36976435500cb9c054af6cf968","filename":"extensions/rvadapter/src/main/AndroidManifest.xml","status":"added","additions":17,"deletions":0,"changes":17,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/extensions/rvadapter/src/main/AndroidManifest.xml","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/extensions/rvadapter/src/main/AndroidManifest.xml","contents_url":"https://api.github.com/repos/google/agera/contents/extensions/rvadapter/src/main/AndroidManifest.xml?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,17 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<!--\n+  ~ Copyright 2015 Google Inc. All Rights Reserved.\n+  ~\n+  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n+  ~ you may not use this file except in compliance with the License.\n+  ~ You may obtain a copy of the License at\n+  ~\n+  ~     http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+<manifest package=\"com.google.android.agera.rvadapter\"/>"},{"sha":"d09e73a88259644552cdf5ac865a0491892bb502","filename":"extensions/rvadapter/src/main/java/com/google/android/agera/rvadapter/RepositoryAdapter.java","status":"added","additions":277,"deletions":0,"changes":277,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/extensions/rvadapter/src/main/java/com/google/android/agera/rvadapter/RepositoryAdapter.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/extensions/rvadapter/src/main/java/com/google/android/agera/rvadapter/RepositoryAdapter.java","contents_url":"https://api.github.com/repos/google/agera/contents/extensions/rvadapter/src/main/java/com/google/android/agera/rvadapter/RepositoryAdapter.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,277 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera.rvadapter;\n+\n+import static com.google.android.agera.Observables.compositeObservable;\n+import static com.google.android.agera.Preconditions.checkArgument;\n+import static com.google.android.agera.Preconditions.checkNotNull;\n+\n+import com.google.android.agera.Observable;\n+import com.google.android.agera.Repository;\n+import com.google.android.agera.Updatable;\n+\n+import android.app.Activity;\n+import android.support.annotation.NonNull;\n+import android.support.v7.widget.RecyclerView;\n+import android.view.LayoutInflater;\n+import android.view.ViewGroup;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+/**\n+ * A specialized {@link RecyclerView.Adapter} that presents the data from a sequence of\n+ * {@link Repository Repositories}. The sequence is static but each repository can be presented in\n+ * zero or more item views as specified by their associated {@link RepositoryPresenter}s.\n+ *\n+ * <p>This adapter is also an {@link Updatable}. It will observe the repositories as well as any\n+ * additional {@link Observable}s given at creation, and pass on the {@link #update}s as\n+ * {@linkplain #notifyDataSetChanged data set changes}. The adapter will only be observing the\n+ * {@link Observable}s between the calls to {@link #startObserving()} and {@link #stopObserving()}.\n+ * Typically {@link #startObserving()} is called in {@link Activity#onStart} and\n+ * {@link #stopObserving} in {@link Activity#onStop}. Calls to {@link #startObserving()} and\n+ * {@link #stopObserving} has to be paired. If {@link #stopObserving()} is not called the\n+ * {@code RepositoryAdapter} will stay active and will potentially leak memory or be unnecessarily\n+ * wasteful with system resources.\n+ *\n+ * <p>This adapter can be subclassed to handle special requirements, such as creating custom view\n+ * holders, handling item view lifecycle events, and implementing additional interfaces.\n+ */\n+public class RepositoryAdapter extends RecyclerView.Adapter<RecyclerView.ViewHolder>\n+    implements Updatable {\n+\n+  /**\n+   * Builds a {@link RepositoryAdapter}.\n+   */\n+  public static Builder repositoryAdapter() {\n+    return new Builder();\n+  }\n+\n+  /**\n+   * Builds a {@link RepositoryAdapter}.\n+   */\n+  public static final class Builder {\n+    @NonNull\n+    final List<Repository<Object>> repositories = new ArrayList<>();\n+    @NonNull\n+    final List<RepositoryPresenter<Object>> presenters = new ArrayList<>();\n+    @NonNull\n+    final List<Observable> observables = new ArrayList<>();\n+\n+    /**\n+     * Specifies that the {@link RepositoryAdapter} being built should present the given\n+     * {@code repository} next (after all previously added repositories), using the given\n+     * {@code presenter} for any presentation logic.\n+     *\n+     * @param repository The repository to be presented. This can be the same as a previously added\n+     *     repository; this makes the resulting {@link RepositoryAdapter} present the same data in\n+     *     different positions and/or different ways.\n+     * @param presenter The repository presenter associated with the {@code repository} at this\n+     *     position.\n+     * @return This instance, for chaining.\n+     */\n+    public <T> Builder add(@NonNull final  Repository<T> repository,\n+        @NonNull final RepositoryPresenter<T> presenter) {\n+      @SuppressWarnings(\"unchecked\")\n+      Repository<Object> untypedRepository = (Repository<Object>) checkNotNull(repository);\n+      repositories.add(untypedRepository);\n+      @SuppressWarnings(\"unchecked\")\n+      RepositoryPresenter<Object> untypedPresenter =\n+          (RepositoryPresenter<Object>) checkNotNull(presenter);\n+      presenters.add(untypedPresenter);\n+      observables.add(untypedRepository);\n+      return this;\n+    }\n+\n+    /**\n+     * Specifies that the {@link RepositoryAdapter} being built should also observe the given\n+     * {@code observable} during its active time (when it {@link #hasObservers()}), in addition to\n+     * the repositories added via {@link #add}. Events from this observable will also trigger a data\n+     * set change. Use this when events that could happen without affecting any repository data may\n+     * affect how the presenters work.\n+     *\n+     * @param observable The observable to be observed. This should not be any repository added via\n+     *     {@link #add}; they will be observed automatically.\n+     * @return This instance, for chaining.\n+     */\n+    public Builder addAdditionalObservable(@NonNull final Observable observable) {\n+      observables.add(checkNotNull(observable));\n+      return this;\n+    }\n+\n+    /**\n+     * Builds the {@link RepositoryAdapter} that presents the provided repositories in order and\n+     * observes the repositories as well as any additional observables. If a subclass of\n+     * {@link RepositoryAdapter} is needed to cover special requirements, client code should create\n+     * a new instance of the subclass, passing this builder to the base constructor\n+     * {@link RepositoryAdapter#RepositoryAdapter(Builder)}.\n+     */\n+    public RepositoryAdapter build() {\n+      return new RepositoryAdapter(this);\n+    }\n+\n+    private Builder() {}\n+  }\n+\n+  private final int repositoryCount;\n+  @NonNull\n+  private final Repository<Object>[] repositories;\n+  @NonNull\n+  private final Object[] data;\n+  @NonNull\n+  private final RepositoryPresenter<Object>[] presenters;\n+  @NonNull\n+  private final Observable observable;\n+  @NonNull\n+  private final int[] endPositions;\n+\n+  private boolean dataInvalid;\n+  private int resolvedRepositoryIndex;\n+  private int resolvedItemIndex;\n+\n+  public RepositoryAdapter(@NonNull final Builder builder) {\n+    int count = builder.repositories.size();\n+    checkArgument(count > 0, \"Must add at least one repository\");\n+    checkArgument(builder.presenters.size() == count,\n+        \"Unexpected repository and presenter count mismatch\");\n+\n+    @SuppressWarnings(\"unchecked\")\n+    Repository<Object>[] repositories = builder.repositories.toArray(\n+        (Repository<Object>[]) new Repository[count]);\n+\n+    @SuppressWarnings(\"unchecked\")\n+    RepositoryPresenter<Object>[] presenters = builder.presenters.toArray(\n+        (RepositoryPresenter<Object>[]) new RepositoryPresenter[count]);\n+\n+    final Observable[] observables =\n+        builder.observables.toArray(new Observable[builder.observables.size()]);\n+    this.data = new Object[count];\n+    this.repositoryCount = count;\n+    this.repositories = repositories;\n+    this.presenters = presenters;\n+    this.observable = compositeObservable(observables);\n+    this.endPositions = new int[count];\n+    this.dataInvalid = true;\n+  }\n+\n+  /**\n+   * Starts observing any {@link Repository} added. Calls to this method must be paired with calls\n+   * to {@link #stopObserving()}.\n+   */\n+  public final void startObserving() {\n+    observable.addUpdatable(this);\n+    update();\n+  }\n+\n+  /**\n+   * Stops observing any {@link Repository} added. Calls to this method must be paired with calls to\n+   * {@link #startObserving()}.\n+   */\n+  public final void stopObserving() {\n+    observable.removeUpdatable(this);\n+  }\n+\n+  /**\n+   * Invalidates the data set so {@link RecyclerView} will schedule a rebind of all data.\n+   */\n+  @Override\n+  public final void update() {\n+    dataInvalid = true;\n+    notifyDataSetChanged();\n+  }\n+\n+  @Override\n+  public final int getItemCount() {\n+    if (dataInvalid) {\n+      int lastEndPosition = 0;\n+      for (int i = 0; i < repositoryCount; i++) {\n+        data[i] = repositories[i].get();\n+        lastEndPosition += presenters[i].getItemCount(data[i]);\n+        endPositions[i] = lastEndPosition;\n+      }\n+      dataInvalid = false;\n+    }\n+    return endPositions[repositoryCount - 1];\n+  }\n+\n+  @Override\n+  public final int getItemViewType(int position) {\n+    resolveIndices(position);\n+    int resolvedRepositoryIndex = this.resolvedRepositoryIndex;\n+    int resolvedItemIndex = this.resolvedItemIndex;\n+    return presenters[resolvedRepositoryIndex].getLayoutResId(\n+        data[resolvedRepositoryIndex], resolvedItemIndex);\n+  }\n+\n+  @Override\n+  public final long getItemId(int position) {\n+    resolveIndices(position);\n+    int resolvedRepositoryIndex = this.resolvedRepositoryIndex;\n+    int resolvedItemIndex = this.resolvedItemIndex;\n+    return presenters[resolvedRepositoryIndex].getItemId(\n+        data[resolvedRepositoryIndex], resolvedItemIndex);\n+  }\n+\n+  /**\n+   * Creates a new view holder holding the view inflated from the provided {@code layoutResourceId}.\n+   * This implementation inflates the view using the {@code parent}'s context and creates a holder\n+   * that adds no value to the base class {@link RecyclerView.ViewHolder}. Override this method for\n+   * any special requirements.\n+   */\n+  @Override\n+  public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent, int layoutResourceId) {\n+    return new RecyclerView.ViewHolder(\n+        LayoutInflater.from(parent.getContext()).inflate(layoutResourceId, parent, false)) {};\n+  }\n+\n+  @Override\n+  public final void onBindViewHolder(RecyclerView.ViewHolder holder, int position) {\n+    resolveIndices(position);\n+    int resolvedRepositoryIndex = this.resolvedRepositoryIndex;\n+    int resolvedItemIndex = this.resolvedItemIndex;\n+    presenters[resolvedRepositoryIndex].bind(\n+        data[resolvedRepositoryIndex], resolvedItemIndex, holder);\n+  }\n+\n+  /**\n+   * Converts the given overall adapter {@code position} into {@link #resolvedRepositoryIndex}\n+   * and {@link #resolvedItemIndex}.\n+   */\n+  private void resolveIndices(int position) {\n+    int itemCount = getItemCount(); // This conveniently rebuilds endPositions if necessary.\n+    if (position < 0 || position >= itemCount) {\n+      throw new IndexOutOfBoundsException(\n+          \"Asked for position \" + position + \" while count is \" + itemCount);\n+    }\n+\n+    int arrayIndex = Arrays.binarySearch(endPositions, position);\n+    if (arrayIndex >= 0) {\n+      // position is the end position of repositories[arrayIndex], so it falls in the range\n+      // of the next repository that advances past it (there may be some empty repositories).\n+      do {\n+        arrayIndex++;\n+      } while (endPositions[arrayIndex] == position); // will not OOB after the initial bound check.\n+    } else {\n+      // position is before the end position of repositories[~arrayIndex], so it falls in the\n+      // range of the repository at ~arrayIndex.\n+      arrayIndex = ~arrayIndex;\n+    }\n+\n+    resolvedRepositoryIndex = arrayIndex;\n+    resolvedItemIndex = arrayIndex == 0 ? position : position - endPositions[arrayIndex - 1];\n+  }\n+}"},{"sha":"59b37c6492ac0f247a218abb20f9714c8281679d","filename":"extensions/rvadapter/src/main/java/com/google/android/agera/rvadapter/RepositoryPresenter.java","status":"added","additions":69,"deletions":0,"changes":69,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/extensions/rvadapter/src/main/java/com/google/android/agera/rvadapter/RepositoryPresenter.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/extensions/rvadapter/src/main/java/com/google/android/agera/rvadapter/RepositoryPresenter.java","contents_url":"https://api.github.com/repos/google/agera/contents/extensions/rvadapter/src/main/java/com/google/android/agera/rvadapter/RepositoryPresenter.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera.rvadapter;\n+\n+import com.google.android.agera.Repository;\n+\n+import android.support.annotation.LayoutRes;\n+import android.support.annotation.NonNull;\n+import android.support.v7.widget.RecyclerView;\n+\n+/**\n+ * Contains logic to present the content of a {@link Repository}.\n+ */\n+public abstract class RepositoryPresenter<T> {\n+  /**\n+   * Returns the number of adapter items needed to present the data. This method may be called very\n+   * frequently; implementation should be very lightweight.\n+   */\n+  public abstract int getItemCount(@NonNull T data);\n+\n+  /**\n+   * Returns the stable ID for the {@code index}-th item to present the data. Called only if stable\n+   * IDs are enabled with {@link RepositoryAdapter#setHasStableIds\n+   * RepositoryAdapter.setHasStableIds(true)}, and therefore this method is optional with a default\n+   * implementation of returning {@link RecyclerView#NO_ID}. If stable IDs are enabled, this ID and\n+   * the item's {@linkplain #getLayoutResId layout resource ID} should together uniquely identify\n+   * this item in the whole {@link RecyclerView} throughout all changes.\n+   *\n+   * @param index The item index between 0 (incl.) and {@link #getItemCount} (excl.).\n+   */\n+  public long getItemId(@NonNull final T data, final int index) {\n+    return RecyclerView.NO_ID;\n+  }\n+\n+  /**\n+   * Returns the layout resource ID to inflate the view for the {@code index}-th item to present the\n+   * data.\n+   *\n+   * @param index The item index between 0 (incl.) and {@link #getItemCount} (excl.).\n+   */\n+  public abstract @LayoutRes int getLayoutResId(@NonNull T data, int index);\n+\n+  /**\n+   * Binds the {@code index}-th item to present the data into the item view held in the given\n+   * {@code holder}. The view is inflated from the layout resource specified by\n+   * {@link #getLayoutResId}, but may have been previously bound to a different index, different\n+   * data, and/or with a different presenter. Therefore, implementation should take care of\n+   * resetting the view state.\n+   *\n+   * @param index The item index between 0 (incl.) and {@link #getItemCount} (excl.).\n+   * @param holder The view holder that holds the view. If a subclass of {@link RepositoryAdapter}\n+   *     is used, which returns a custom view holder for this item's layout resource ID, then this\n+   *     object will be of that custom type.\n+   */\n+  public abstract void bind(@NonNull T data, int index, @NonNull RecyclerView.ViewHolder holder);\n+}"},{"sha":"68253f4f3beac6c7e9fbdb28b1dc128bf01a7c73","filename":"samples/BasicSample/app/build.gradle","status":"added","additions":68,"deletions":0,"changes":68,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/samples/BasicSample/app/build.gradle","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/samples/BasicSample/app/build.gradle","contents_url":"https://api.github.com/repos/google/agera/contents/samples/BasicSample/app/build.gradle?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2016 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+apply plugin: 'com.android.application'\n+\n+android {\n+    compileSdkVersion 23\n+    buildToolsVersion \"23.0.2\"\n+\n+    defaultConfig {\n+        applicationId \"com.example.android.agera.basicsample\"\n+        minSdkVersion 15\n+        targetSdkVersion 23\n+        versionCode 1\n+        versionName \"1.0\"\n+\n+        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'\n+    }\n+    buildTypes {\n+        release {\n+            minifyEnabled false\n+            proguardFiles getDefaultProguardFile('proguard-android.txt')\n+        }\n+    }\n+\n+    // Always show the result of every unit test, even if it passes.\n+    testOptions.unitTests.all {\n+        testLogging {\n+            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'\n+        }\n+    }\n+}\n+\n+dependencies {\n+    compile \"com.android.support:appcompat-v7:$rootProject.supportLibraryVersion\"\n+    compile 'com.google.android.agera:agera:1.0.0-RC1'\n+    compile \"com.android.support.test.espresso:espresso-idling-resource:$rootProject.ext.espressoVersion\"\n+\n+    // Dependencies for local unit tests\n+    testCompile \"junit:junit:$rootProject.ext.junitVersion\"\n+    testCompile \"org.mockito:mockito-all:$rootProject.ext.mockitoVersion\"\n+    testCompile \"org.hamcrest:hamcrest-all:$rootProject.ext.hamcrestVersion\"\n+\n+    // Dependencies for Android unit tests\n+    androidTestCompile \"junit:junit:$rootProject.ext.junitVersion\"\n+    androidTestCompile \"org.mockito:mockito-core:$rootProject.ext.mockitoVersion\"\n+    androidTestCompile 'com.google.dexmaker:dexmaker:1.2'\n+    androidTestCompile 'com.google.dexmaker:dexmaker-mockito:1.2'\n+\n+    // Espresso UI Testing\n+    androidTestCompile \"com.android.support.test.espresso:espresso-core:$rootProject.ext.espressoVersion\"\n+}\n+\n+configurations.all {\n+    resolutionStrategy.force \"com.android.support:support-annotations:$rootProject.ext.supportLibraryVersion\"\n+}"},{"sha":"807b9aebeb89eb6a1e3b6a6758c117ea47de36e5","filename":"samples/BasicSample/app/src/androidTest/java/com/example/android/agera/basicsample/MainActivityTest.java","status":"added","additions":154,"deletions":0,"changes":154,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/samples/BasicSample/app/src/androidTest/java/com/example/android/agera/basicsample/MainActivityTest.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/samples/BasicSample/app/src/androidTest/java/com/example/android/agera/basicsample/MainActivityTest.java","contents_url":"https://api.github.com/repos/google/agera/contents/samples/BasicSample/app/src/androidTest/java/com/example/android/agera/basicsample/MainActivityTest.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,154 @@\n+/*\n+ * Copyright 2016 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.example.android.agera.basicsample;\n+\n+import static android.support.test.espresso.Espresso.onView;\n+import static android.support.test.espresso.assertion.ViewAssertions.matches;\n+import static android.support.test.espresso.matcher.RootMatchers.withDecorView;\n+import static android.support.test.espresso.matcher.ViewMatchers.isDisplayed;\n+import static android.support.test.espresso.matcher.ViewMatchers.withId;\n+import static android.support.test.espresso.matcher.ViewMatchers.withText;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.Matchers.not;\n+\n+import android.support.test.espresso.ViewAction;\n+import android.support.test.espresso.action.GeneralLocation;\n+import android.support.test.espresso.action.GeneralSwipeAction;\n+import android.support.test.espresso.action.Press;\n+import android.support.test.espresso.action.Swipe;\n+import android.support.test.rule.ActivityTestRule;\n+import android.support.test.runner.AndroidJUnit4;\n+import android.test.suitebuilder.annotation.LargeTest;\n+import android.view.View;\n+import android.widget.ListView;\n+import android.widget.TextView;\n+\n+import org.hamcrest.Description;\n+import org.hamcrest.Matcher;\n+import org.hamcrest.TypeSafeMatcher;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+/**\n+ * Tests for the main screen, which shows a list of usernames or an error message if the list\n+ * data couldn't be obtained.\n+ */\n+@RunWith(AndroidJUnit4.class)\n+@LargeTest\n+public class MainActivityTest {\n+\n+  /**\n+   * {@link ActivityTestRule} is a JUnit {@link Rule @Rule} to launch your activity under test.\n+   * <p>\n+   * Rules are interceptors which are executed for each test method and are important building\n+   * blocks of Junit tests.\n+   */\n+  @Rule\n+  public ActivityTestRule<MainActivity> activityTestRule =\n+      new ActivityTestRule<>(MainActivity.class);\n+\n+  /**\n+   * A custom {@link Matcher} which matches a {@link ListView} by its size.\n+   * <p>\n+   * View constraints:\n+   * <ul>\n+   * <li>View must be a {@link ListView}\n+   * <ul>\n+   *\n+   * @param size the expected size of the list\n+   * @return Matcher that matches size of the given {@link ListView}\n+   */\n+  private static Matcher<View> withListSize(final int size) {\n+    return new TypeSafeMatcher<View>() {\n+      @Override\n+      public boolean matchesSafely(final View view) {\n+        return ((ListView) view).getChildCount() == size;\n+      }\n+\n+      @Override\n+      public void describeTo(final Description description) {\n+        description.appendText(\"ListView should have \" + size + \" items\");\n+      }\n+    };\n+  }\n+\n+  @Before\n+  public void setUp() {\n+    // Username fetcher in a state of returning 4 usernames\n+    UsernamesFetcher.NUMBER_OF_USERS = 4;\n+  }\n+\n+  @After\n+  public void cleanUp() {\n+    // Username fetcher in a state of returning 4 usernames\n+    UsernamesFetcher.NUMBER_OF_USERS = 4;\n+  }\n+\n+  @Test\n+  public void firstLoad_showsList() {\n+    // Then the correct number of usernames is displayed\n+    onView(withId(R.id.list)).check(matches(withListSize(UsernamesFetcher.NUMBER_OF_USERS)));\n+  }\n+\n+  @Test\n+  public void refreshError_showsErrorAndPreviousList() {\n+    // Given a list of usernames loaded\n+    String firstUsername =\n+        ((TextView) ((ListView) activityTestRule.getActivity()\n+            .findViewById(R.id.list)).getChildAt(0)).getText().toString();\n+\n+    // Given a username fetcher in a state of error\n+    UsernamesFetcher.NUMBER_OF_USERS = -1;\n+\n+    // When pulled down to refresh is triggered\n+    onView(withId(R.id.fragment)).perform(swipeDown());\n+\n+    // Then the error toast is shown\n+    onView(withText(R.string.error))\n+        // Required because of the way toasts are displayed\n+        .inRoot(withDecorView(not(is(\n+            activityTestRule.getActivity().getWindow().getDecorView()))))\n+        // Check if it is visible\n+        .check(matches(isDisplayed()));\n+    // And the list is still shown\n+    onView(withText(firstUsername)).check(matches(isDisplayed()));\n+  }\n+\n+  @Test\n+  public void refresh_showsUpdatedList() {\n+    // Given a list of usernames loaded\n+    String firstUsername =\n+        ((TextView) ((ListView) activityTestRule.getActivity()\n+            .findViewById(R.id.list)).getChildAt(0)).getText().toString();\n+\n+    // Given a username fetcher in a state of returning 5 usernames\n+    UsernamesFetcher.NUMBER_OF_USERS = 5;\n+\n+    // When pulled down to refresh is triggered\n+    onView(withId(R.id.fragment)).perform(swipeDown());\n+\n+    // Then the correct number of usernames is displayed\n+    onView(withId(R.id.list)).check(matches(withListSize(UsernamesFetcher.NUMBER_OF_USERS)));\n+  }\n+\n+  private static ViewAction swipeDown() {\n+    return new GeneralSwipeAction(Swipe.FAST, GeneralLocation.TOP_CENTER,\n+        GeneralLocation.BOTTOM_CENTER, Press.FINGER);\n+  }\n+}"},{"sha":"27e2e0d79dc8cd50189d26bf3a5639854a5ddbe5","filename":"samples/BasicSample/app/src/androidTest/java/com/example/android/agera/basicsample/UsernamesRepositoryTest.java","status":"added","additions":96,"deletions":0,"changes":96,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/samples/BasicSample/app/src/androidTest/java/com/example/android/agera/basicsample/UsernamesRepositoryTest.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/samples/BasicSample/app/src/androidTest/java/com/example/android/agera/basicsample/UsernamesRepositoryTest.java","contents_url":"https://api.github.com/repos/google/agera/contents/samples/BasicSample/app/src/androidTest/java/com/example/android/agera/basicsample/UsernamesRepositoryTest.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,96 @@\n+/*\n+ * Copyright 2016 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.example.android.agera.basicsample;\n+\n+import static android.support.test.InstrumentationRegistry.getInstrumentation;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+\n+import android.support.test.runner.AndroidJUnit4;\n+import android.test.suitebuilder.annotation.LargeTest;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentCaptor;\n+\n+/**\n+ * Tests for the implementation of {@link UsernamesRepository}.\n+ */\n+@RunWith(AndroidJUnit4.class)\n+@LargeTest\n+public class UsernamesRepositoryTest {\n+\n+  private UsernamesFetcher mockUsernamesFetcher;\n+\n+  private UsernamesRepository usernamesRepository;\n+\n+  /**\n+   * {@link ArgumentCaptor} is a powerful Mockito API to capture argument values and use them to\n+   * perform further actions or assertions on them.\n+   */\n+  private ArgumentCaptor<UsernamesFetcher.UsernamesCallback> fetcherCallbackCaptor;\n+\n+  @Before\n+  public void setupUsernamesRepository() {\n+    // Mockito has a very convenient way to inject mocks by using the @Mock annotation. To\n+    // inject the mocks in the test the initMocks method needs to be called.\n+    mockUsernamesFetcher = mock(UsernamesFetcher.class);\n+    fetcherCallbackCaptor = ArgumentCaptor.forClass(UsernamesFetcher.UsernamesCallback.class);\n+\n+    // Get a reference to the class under test\n+    getInstrumentation().runOnMainSync(new Runnable() {\n+      @Override\n+      public void run() {\n+        usernamesRepository = new UsernamesRepository(mockUsernamesFetcher);\n+      }\n+    });\n+  }\n+\n+  @Test\n+  public void updateWithErrorFromUsernamesFetcher_ErrorStatus() {\n+    // When the repository is updated\n+    usernamesRepository.update();\n+\n+    // And the username fetcher returns an error\n+    verify(mockUsernamesFetcher).getUsernames(fetcherCallbackCaptor.capture());\n+    fetcherCallbackCaptor.getValue().setError();\n+\n+    // Then the repository has an error status and no usernames available\n+    assertTrue(usernamesRepository.isError());\n+    assertNull(usernamesRepository.get());\n+  }\n+\n+  @Test\n+  public void updateWithSuccessFromUsernamesFetcher_UsernamesAvailable() {\n+    // Given fake usernames\n+    String[] usernames = new String[] {\"one\", \"two\"};\n+\n+    // When the repository is updated\n+    usernamesRepository.update();\n+\n+    // And the username fetcher returns an error\n+    verify(mockUsernamesFetcher).getUsernames(fetcherCallbackCaptor.capture());\n+    fetcherCallbackCaptor.getValue().setUsernames(usernames);\n+\n+    // Then the repository has a success status and usernames are available\n+    assertFalse(usernamesRepository.isError());\n+    assertTrue(usernamesRepository.get().length == usernames.length);\n+  }\n+}"},{"sha":"0b9cb4ea6fef204e89cdd1d37ea70cb0d743c85c","filename":"samples/BasicSample/app/src/main/AndroidManifest.xml","status":"added","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/samples/BasicSample/app/src/main/AndroidManifest.xml","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/samples/BasicSample/app/src/main/AndroidManifest.xml","contents_url":"https://api.github.com/repos/google/agera/contents/samples/BasicSample/app/src/main/AndroidManifest.xml?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,34 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<!--\n+  ~ Copyright 2015 Google Inc. All Rights Reserved.\n+  ~\n+  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n+  ~ you may not use this file except in compliance with the License.\n+  ~ You may obtain a copy of the License at\n+  ~\n+  ~     http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n+    package=\"com.example.android.agera.basicsample\">\n+  <application\n+      android:icon=\"@mipmap/ic_launcher\"\n+      android:label=\"@string/app_name\"\n+      android:supportsRtl=\"true\"\n+      android:theme=\"@style/AppTheme\">\n+    <activity\n+        android:name=\".MainActivity\"\n+        android:label=\"@string/app_name\"\n+        android:theme=\"@style/AppTheme.NoActionBar\">\n+      <intent-filter>\n+        <action android:name=\"android.intent.action.MAIN\"/>\n+        <category android:name=\"android.intent.category.LAUNCHER\"/>\n+      </intent-filter>\n+    </activity>\n+  </application>\n+</manifest>"},{"sha":"bc0fe454223e3cc5989180627c7d43f5a0e3e789","filename":"samples/BasicSample/app/src/main/java/com/example/android/agera/basicsample/MainActivity.java","status":"added","additions":31,"deletions":0,"changes":31,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/samples/BasicSample/app/src/main/java/com/example/android/agera/basicsample/MainActivity.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/samples/BasicSample/app/src/main/java/com/example/android/agera/basicsample/MainActivity.java","contents_url":"https://api.github.com/repos/google/agera/contents/samples/BasicSample/app/src/main/java/com/example/android/agera/basicsample/MainActivity.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,31 @@\n+/*\n+ * Copyright 2016 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.example.android.agera.basicsample;\n+\n+import android.os.Bundle;\n+import android.support.v7.app.AppCompatActivity;\n+import android.support.v7.widget.Toolbar;\n+\n+public class MainActivity extends AppCompatActivity {\n+\n+  @Override\n+  protected void onCreate(Bundle savedInstanceState) {\n+    super.onCreate(savedInstanceState);\n+    setContentView(R.layout.main_act);\n+    Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);\n+    setSupportActionBar(toolbar);\n+  }\n+}"},{"sha":"8fa98f39f17a6eec7d0b510261aededf5053ff5a","filename":"samples/BasicSample/app/src/main/java/com/example/android/agera/basicsample/MainFragment.java","status":"added","additions":150,"deletions":0,"changes":150,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/samples/BasicSample/app/src/main/java/com/example/android/agera/basicsample/MainFragment.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/samples/BasicSample/app/src/main/java/com/example/android/agera/basicsample/MainFragment.java","contents_url":"https://api.github.com/repos/google/agera/contents/samples/BasicSample/app/src/main/java/com/example/android/agera/basicsample/MainFragment.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,150 @@\n+/*\n+ * Copyright 2016 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.example.android.agera.basicsample;\n+\n+import com.google.android.agera.Observable;\n+import com.google.android.agera.Updatable;\n+import com.google.android.agera.UpdateDispatcher;\n+\n+import android.os.Bundle;\n+import android.support.v4.app.Fragment;\n+import android.support.v4.content.ContextCompat;\n+import android.support.v4.widget.SwipeRefreshLayout;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.widget.ArrayAdapter;\n+import android.widget.ListAdapter;\n+import android.widget.ListView;\n+import android.widget.Toast;\n+\n+/**\n+ * The MainFragment contains a {@link ListView} that displays a list of usernames. The usernames\n+ * are loaded in {@link Fragment#onResume()} and there is a {@link SwipeRefreshLayout} allowing the\n+ * user to manually refresh the list of usernames.\n+ * <P >\n+ * This is set up as an {@link Updatable} as changes in the {@link UsernamesRepository} should\n+ * trigger the MainFragment to redraw itself.\n+ */\n+public class MainFragment extends Fragment implements Updatable {\n+\n+  /**\n+   * The {@link SwipeRefreshLayout.OnRefreshListener} is also an {@link Observable}. It is\n+   * observed by the {@link UsernamesRepository}, an update is triggered whenever\n+   * {@link SwipeRefreshLayout.OnRefreshListener#onRefresh()} is fired.\n+   */\n+  private OnRefreshObservable refreshObservable;\n+\n+  /**\n+   * The {@link UsernamesRepository} takes care of providing the data to this fragment. It is an\n+   * {@link Updatable} because changes in the {@link OnRefreshObservable} require that it updates\n+   * its list of usernames. It is also an {@link Observable} and is observed by this MainFragment.\n+   */\n+  private UsernamesRepository usernamesRepository;\n+\n+  private ListAdapter listAdapter;\n+\n+  private ListView listView;\n+\n+  private SwipeRefreshLayout swipeRefreshLayout;\n+\n+  @Override\n+  public View onCreateView(LayoutInflater inflater, ViewGroup container,\n+      Bundle savedInstanceState) {\n+    View root = inflater.inflate(R.layout.main_frag, container, false);\n+\n+    listView = (ListView) root.findViewById(R.id.list);\n+\n+    // Set pull to refresh as an observable and attach it to the view\n+    refreshObservable = new OnRefreshObservable();\n+    swipeRefreshLayout = (SwipeRefreshLayout) root.findViewById(R.id.refresh_layout);\n+    swipeRefreshLayout.setColorSchemeColors(\n+        ContextCompat.getColor(getActivity(), R.color.colorPrimary),\n+        ContextCompat.getColor(getActivity(), R.color.colorAccent),\n+        ContextCompat.getColor(getActivity(), R.color.colorPrimaryDark));\n+    swipeRefreshLayout.setOnRefreshListener(refreshObservable);\n+\n+    // Initialise the repository\n+    usernamesRepository = new UsernamesRepository(new UsernamesFetcher());\n+\n+    return root;\n+  }\n+\n+  @Override\n+  public void onResume() {\n+    super.onResume();\n+\n+    // We make sure the repository observes the refresh listener\n+    refreshObservable.addUpdatable(usernamesRepository);\n+\n+    /**\n+     * We make sure the main fragment observes the repository. This will also trigger the\n+     * repository to update itself, via\n+     * {@link UsernamesRepository#firstUpdatableAdded(UpdateDispatcher)}.\n+     */\n+    usernamesRepository.addUpdatable(this);\n+\n+    /**\n+     * We update the UI to show the data is being updated. We need to wait for the\n+     * {@link swipeRefreshLayout} to be ready before asking it to show itself as refreshing.\n+     */\n+    swipeRefreshLayout.post(new Runnable() {\n+      @Override\n+      public void run() {\n+        swipeRefreshLayout.setRefreshing(true);\n+      }\n+    });\n+  }\n+\n+  @Override\n+  public void onPause() {\n+    super.onPause();\n+    // We remove the observations to avoid triggering updates when they aren't needed\n+    refreshObservable.removeUpdatable(usernamesRepository);\n+    usernamesRepository.removeUpdatable(this);\n+  }\n+\n+  /**\n+   * As this MainFragment is observing the {@link UsernamesRepository}, this is triggered\n+   * whenever the {@link UsernamesRepository} updates itself.\n+   */\n+  @Override\n+  public void update() {\n+    /**\n+     * We update the UI to show the data has been updated. We need to wait for the\n+     * {@link swipeRefreshLayout} to be ready before asking it to show itself as not refreshing.\n+     */\n+    swipeRefreshLayout.post(new Runnable() {\n+      @Override\n+      public void run() {\n+        swipeRefreshLayout.setRefreshing(false);\n+      }\n+    });\n+\n+    // Check error status\n+    if (usernamesRepository.isError()) {\n+      // Show error message, do not update list as we still want to show the last known list of\n+      // usernames\n+      Toast.makeText(getContext(), getResources().getString(R.string.error),\n+          Toast.LENGTH_LONG).show();\n+    } else {\n+      // Update the list of usernames\n+      listAdapter = new ArrayAdapter<String>(getContext(),\n+          android.R.layout.simple_list_item_1, usernamesRepository.get());\n+      listView.setAdapter(listAdapter);\n+    }\n+  }\n+}"},{"sha":"0413898e6f4fbd9b091a7ba596c78d7bf9859d97","filename":"samples/BasicSample/app/src/main/java/com/example/android/agera/basicsample/OnRefreshObservable.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/samples/BasicSample/app/src/main/java/com/example/android/agera/basicsample/OnRefreshObservable.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/samples/BasicSample/app/src/main/java/com/example/android/agera/basicsample/OnRefreshObservable.java","contents_url":"https://api.github.com/repos/google/agera/contents/samples/BasicSample/app/src/main/java/com/example/android/agera/basicsample/OnRefreshObservable.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,41 @@\n+/*\n+ * Copyright 2016 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.example.android.agera.basicsample;\n+\n+import com.google.android.agera.BaseObservable;\n+import com.google.android.agera.Updatable;\n+import com.google.android.agera.UpdateDispatcher;\n+\n+import android.support.v4.widget.SwipeRefreshLayout;\n+\n+/**\n+ * This implements {@link SwipeRefreshLayout.OnRefreshListener} so it can be attached to a\n+ * {@link SwipeRefreshLayout}. It also extends {@link BaseObservable} so changes in here can be\n+ * passed on to its observer (ie an {@link Updatable}, using an {@link UpdateDispatcher}.\n+ */\n+public class OnRefreshObservable extends BaseObservable\n+    implements SwipeRefreshLayout.OnRefreshListener {\n+\n+  /**\n+   * Triggered when the associated {@link SwipeRefreshLayout} is refreshed by the user. The event\n+   * is passed on to the observers, using the {@link UpdateDispatcher} provided by {@link\n+   * BaseObservable}.\n+   */\n+  @Override\n+  public void onRefresh() {\n+    dispatchUpdate();\n+  }\n+}\n\\ No newline at end of file"},{"sha":"068fee427bddaeb4ada12f13e55e8e25d32a6808","filename":"samples/BasicSample/app/src/main/java/com/example/android/agera/basicsample/UsernamesFetcher.java","status":"added","additions":77,"deletions":0,"changes":77,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/samples/BasicSample/app/src/main/java/com/example/android/agera/basicsample/UsernamesFetcher.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/samples/BasicSample/app/src/main/java/com/example/android/agera/basicsample/UsernamesFetcher.java","contents_url":"https://api.github.com/repos/google/agera/contents/samples/BasicSample/app/src/main/java/com/example/android/agera/basicsample/UsernamesFetcher.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,77 @@\n+/*\n+ * Copyright 2016 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.example.android.agera.basicsample;\n+\n+import android.os.Handler;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Random;\n+\n+/**\n+ * This implements getting a list of usernames. A fake latency is added. The number of returned\n+ * usernames is controlled by a public static field, to allow us to write deterministic tests.\n+ *\n+ */\n+public class UsernamesFetcher {\n+\n+  /**\n+   * Config constant that determines the number of users to return.\n+   * {@link #getUsernames(UsernamesCallback)} fires an error if this is negative.\n+   */\n+  public static int NUMBER_OF_USERS = 4;\n+\n+  /**\n+   * This method fakes getting a list of usernames from a server. It fires\n+   * {@link UsernamesCallback#setError} if {@link #NUMBER_OF_USERS} is negative. It simulates\n+   * server latency to return usernames.\n+   */\n+  public void getUsernames(final UsernamesCallback callback) {\n+    if (NUMBER_OF_USERS < 0) {\n+      callback.setError();\n+      return;\n+    }\n+\n+    Handler h = new Handler();\n+    Runnable r = new Runnable() {\n+      @Override\n+      public void run() {\n+        // Create a fake list of usernames\n+        String name1 = \"Joe\";\n+        String name2 = \"Amanda\";\n+        final List<String> usernames = new ArrayList<String>();\n+        Random random = new Random();\n+        for (int i = 0; i < NUMBER_OF_USERS; i++) {\n+          int number = random.nextInt(50);\n+          if (System.currentTimeMillis() % 2 == 0) {\n+            usernames.add(name1 + number);\n+          } else {\n+            usernames.add(name2 + number);\n+          }\n+        }\n+        callback.setUsernames(usernames.toArray(new String[usernames.size()]));\n+      }\n+    };\n+\n+    // Simulate network latency\n+    h.postDelayed(r, 2000);\n+  }\n+\n+  public interface UsernamesCallback {\n+    void setError();\n+    void setUsernames(String[] usernames);\n+  }\n+}"},{"sha":"f92609c26c2313eabea0ab0ee98cfb9361f34b4f","filename":"samples/BasicSample/app/src/main/java/com/example/android/agera/basicsample/UsernamesRepository.java","status":"added","additions":112,"deletions":0,"changes":112,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/samples/BasicSample/app/src/main/java/com/example/android/agera/basicsample/UsernamesRepository.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/samples/BasicSample/app/src/main/java/com/example/android/agera/basicsample/UsernamesRepository.java","contents_url":"https://api.github.com/repos/google/agera/contents/samples/BasicSample/app/src/main/java/com/example/android/agera/basicsample/UsernamesRepository.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,112 @@\n+/*\n+ * Copyright 2016 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.example.android.agera.basicsample;\n+\n+import com.google.android.agera.BaseObservable;\n+import com.google.android.agera.Observable;\n+import com.google.android.agera.Supplier;\n+import com.google.android.agera.Updatable;\n+\n+import android.support.annotation.NonNull;\n+\n+/**\n+ * The UsernamesRepository is an {@link Observable}, implemented by extending {@link\n+ * BaseObservable} and a {@link Supplier<String>} of usernames. it is observed by the\n+ * {@link MainFragment}. It is also an {@link Updatable} as it observes the {@link\n+ * OnRefreshObservable} so it can fetch a new list of usernames whenever the user requests a\n+ * refresh. It uses the {@link UsernamesFetcher} to request a list of usernames and therefore\n+ * implements the {@link UsernamesFetcher.UsernamesCallback}.\n+ * <P />\n+ * We override {@link BaseObservable#observableActivated()} to trigger an update so the\n+ * UsernamesRepository contains the most up to date usernames. This mechanism enables the\n+ * UsernamesRepository to be updated as soon as {@link MainFragment} observes it (in {@link\n+ * MainFragment#onResume()}.\n+ */\n+public class UsernamesRepository extends BaseObservable\n+    implements Supplier<String[]>, Updatable, UsernamesFetcher.UsernamesCallback {\n+\n+  /**\n+   * The usernames list. This list is the most up to date known usernames.\n+   */\n+  private String[] usernames;\n+\n+  /**\n+   * Whether the last update resulted in an error to retrieve a new list of usernames.\n+   */\n+  private boolean lastRefreshError;\n+\n+  /**\n+   * This is responsible for getting the list of usernames. It simulates a server call, and uses\n+   * a {@link UsernamesFetcher.UsernamesCallback}.\n+   */\n+  private final UsernamesFetcher usernamesFetcher;\n+\n+  public UsernamesRepository(UsernamesFetcher usernamesFetcher) {\n+    super();\n+    this.usernamesFetcher = usernamesFetcher;\n+  }\n+\n+  /**\n+   * @return the most up to date known list of usernames\n+   */\n+  @NonNull\n+  @Override\n+  public String[] get() {\n+    return usernames;\n+  }\n+\n+  /**\n+   * @return true if the last update resulted in an error in retrieving a new list of usernames\n+   */\n+  public boolean isError() {\n+    return lastRefreshError;\n+  }\n+\n+  /**\n+   * As this {@link UsernamesRepository} is set up to observe the {@link OnRefreshObservable},\n+   * this is triggered whenever a request has been requested.\n+   */\n+  @Override\n+  public void update() {\n+    usernamesFetcher.getUsernames(this);\n+  }\n+\n+  /**\n+   * The {@link #usernamesFetcher} couldn't fetch a new list of usernames.\n+   */\n+  @Override\n+  public void setError() {\n+    lastRefreshError = true;\n+    dispatchUpdate();\n+  }\n+\n+  /**\n+   * @param usernames The new list of usernames fetched by the {@link #usernamesFetcher}\n+   */\n+  @Override\n+  public void setUsernames(String[] usernames) {\n+    this.usernames = usernames;\n+    lastRefreshError = false;\n+    dispatchUpdate();\n+  }\n+\n+  @Override\n+  protected void observableActivated() {\n+    // Now that this is activated, we trigger an update to ensure the repository contains up to\n+    // date data.\n+    update();\n+  }\n+}"},{"sha":"6a76a33479f1766869a584a28004ac2edd5e91c4","filename":"samples/BasicSample/app/src/main/res/layout/main_act.xml","status":"added","additions":43,"deletions":0,"changes":43,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/samples/BasicSample/app/src/main/res/layout/main_act.xml","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/samples/BasicSample/app/src/main/res/layout/main_act.xml","contents_url":"https://api.github.com/repos/google/agera/contents/samples/BasicSample/app/src/main/res/layout/main_act.xml?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,43 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<!--\n+  ~ Copyright 2016 Google Inc. All Rights Reserved.\n+  ~\n+  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n+  ~ you may not use this file except in compliance with the License.\n+  ~ You may obtain a copy of the License at\n+  ~\n+  ~     http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+<android.support.v4.widget.DrawerLayout\n+    android:id=\"@+id/drawer_layout\"\n+    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n+    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n+    xmlns:tools=\"http://schemas.android.com/tools\"\n+    android:layout_width=\"match_parent\"\n+    android:layout_height=\"match_parent\"\n+    tools:context=\".TasksActivity\"\n+    tools:openDrawer=\"start\">\n+  <LinearLayout\n+      android:layout_width=\"match_parent\"\n+      android:layout_height=\"match_parent\"\n+      android:orientation=\"vertical\">\n+    <android.support.v7.widget.Toolbar\n+        android:id=\"@+id/toolbar\"\n+        android:layout_width=\"match_parent\"\n+        android:layout_height=\"wrap_content\"\n+        android:background=\"?attr/colorPrimary\"\n+        android:minHeight=\"?attr/actionBarSize\"\n+        app:theme=\"@style/Toolbar\"\n+        app:popupTheme=\"@style/ThemeOverlay.AppCompat.Light\"/>\n+    <fragment android:name=\"com.example.android.agera.basicsample.MainFragment\"\n+        android:id=\"@+id/fragment\"\n+        android:layout_width=\"match_parent\"\n+        android:layout_height=\"match_parent\"/>\n+  </LinearLayout>\n+</android.support.v4.widget.DrawerLayout>"},{"sha":"9ea2154b284d3de4e23c67515ad9b48f23327cae","filename":"samples/BasicSample/app/src/main/res/layout/main_frag.xml","status":"added","additions":30,"deletions":0,"changes":30,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/samples/BasicSample/app/src/main/res/layout/main_frag.xml","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/samples/BasicSample/app/src/main/res/layout/main_frag.xml","contents_url":"https://api.github.com/repos/google/agera/contents/samples/BasicSample/app/src/main/res/layout/main_frag.xml?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,30 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<!--\n+  ~ Copyright 2016 Google Inc. All Rights Reserved.\n+  ~\n+  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n+  ~ you may not use this file except in compliance with the License.\n+  ~ You may obtain a copy of the License at\n+  ~\n+  ~     http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+<android.support.v4.widget.SwipeRefreshLayout\n+    android:id=\"@+id/refresh_layout\"\n+    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n+    android:layout_width=\"match_parent\"\n+    android:layout_height=\"match_parent\">\n+  <ListView\n+      android:id=\"@+id/list\"\n+      android:layout_width=\"match_parent\"\n+      android:layout_height=\"wrap_content\"\n+      android:paddingBottom=\"@dimen/activity_vertical_margin\"\n+      android:paddingLeft=\"@dimen/activity_horizontal_margin\"\n+      android:paddingRight=\"@dimen/activity_horizontal_margin\"\n+      android:paddingTop=\"@dimen/activity_vertical_margin\"/>\n+</android.support.v4.widget.SwipeRefreshLayout>"},{"sha":"cde69bcccec65160d92116f20ffce4fce0b5245c","filename":"samples/BasicSample/app/src/main/res/mipmap-hdpi/ic_launcher.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/samples/BasicSample/app/src/main/res/mipmap-hdpi/ic_launcher.png","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/samples/BasicSample/app/src/main/res/mipmap-hdpi/ic_launcher.png","contents_url":"https://api.github.com/repos/google/agera/contents/samples/BasicSample/app/src/main/res/mipmap-hdpi/ic_launcher.png?ref=c648301e6e219c3673ef2c4180a4e3d202710523"},{"sha":"c133a0cbd379f5af6dbf1a899a0293ca5eccfad0","filename":"samples/BasicSample/app/src/main/res/mipmap-mdpi/ic_launcher.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/samples/BasicSample/app/src/main/res/mipmap-mdpi/ic_launcher.png","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/samples/BasicSample/app/src/main/res/mipmap-mdpi/ic_launcher.png","contents_url":"https://api.github.com/repos/google/agera/contents/samples/BasicSample/app/src/main/res/mipmap-mdpi/ic_launcher.png?ref=c648301e6e219c3673ef2c4180a4e3d202710523"},{"sha":"bfa42f0e7b91d006d22352c9ff2f134e504e3c1d","filename":"samples/BasicSample/app/src/main/res/mipmap-xhdpi/ic_launcher.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/samples/BasicSample/app/src/main/res/mipmap-xhdpi/ic_launcher.png","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/samples/BasicSample/app/src/main/res/mipmap-xhdpi/ic_launcher.png","contents_url":"https://api.github.com/repos/google/agera/contents/samples/BasicSample/app/src/main/res/mipmap-xhdpi/ic_launcher.png?ref=c648301e6e219c3673ef2c4180a4e3d202710523"},{"sha":"324e72cdd7480cb983fa1bcc7ce686e51ef87fe7","filename":"samples/BasicSample/app/src/main/res/mipmap-xxhdpi/ic_launcher.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/samples/BasicSample/app/src/main/res/mipmap-xxhdpi/ic_launcher.png","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/samples/BasicSample/app/src/main/res/mipmap-xxhdpi/ic_launcher.png","contents_url":"https://api.github.com/repos/google/agera/contents/samples/BasicSample/app/src/main/res/mipmap-xxhdpi/ic_launcher.png?ref=c648301e6e219c3673ef2c4180a4e3d202710523"},{"sha":"aee44e138434630332d88b1680f33c4b24c70ab3","filename":"samples/BasicSample/app/src/main/res/mipmap-xxxhdpi/ic_launcher.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/samples/BasicSample/app/src/main/res/mipmap-xxxhdpi/ic_launcher.png","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/samples/BasicSample/app/src/main/res/mipmap-xxxhdpi/ic_launcher.png","contents_url":"https://api.github.com/repos/google/agera/contents/samples/BasicSample/app/src/main/res/mipmap-xxxhdpi/ic_launcher.png?ref=c648301e6e219c3673ef2c4180a4e3d202710523"},{"sha":"e7739fa35c0805377d3dc41bd11808364796cad4","filename":"samples/BasicSample/app/src/main/res/values-v21/styles.xml","status":"added","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/samples/BasicSample/app/src/main/res/values-v21/styles.xml","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/samples/BasicSample/app/src/main/res/values-v21/styles.xml","contents_url":"https://api.github.com/repos/google/agera/contents/samples/BasicSample/app/src/main/res/values-v21/styles.xml?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,23 @@\n+<!--\n+  ~ Copyright 2016 Google Inc. All Rights Reserved.\n+  ~\n+  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n+  ~ you may not use this file except in compliance with the License.\n+  ~ You may obtain a copy of the License at\n+  ~\n+  ~     http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+<resources>>\n+  <style name=\"AppTheme.NoActionBar\">\n+    <item name=\"windowActionBar\">false</item>\n+    <item name=\"windowNoTitle\">true</item>\n+    <item name=\"android:windowDrawsSystemBarBackgrounds\">true</item>\n+    <item name=\"android:statusBarColor\">@android:color/transparent</item>\n+  </style>\n+</resources>"},{"sha":"f16287e52f51fe0e8a2e077ac3bed164c7c996ab","filename":"samples/BasicSample/app/src/main/res/values-w820dp/dimens.xml","status":"added","additions":21,"deletions":0,"changes":21,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/samples/BasicSample/app/src/main/res/values-w820dp/dimens.xml","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/samples/BasicSample/app/src/main/res/values-w820dp/dimens.xml","contents_url":"https://api.github.com/repos/google/agera/contents/samples/BasicSample/app/src/main/res/values-w820dp/dimens.xml?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,21 @@\n+<!--\n+  ~ Copyright 2016 Google Inc. All Rights Reserved.\n+  ~\n+  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n+  ~ you may not use this file except in compliance with the License.\n+  ~ You may obtain a copy of the License at\n+  ~\n+  ~     http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+<resources>\n+  <!-- Example customization of dimensions originally defined in res/values/dimens.xml\n+       (such as screen margins) for screens with more than 820dp of available width. This\n+       would include 7\" and 10\" devices in landscape (~960dp and ~1280dp respectively). -->\n+  <dimen name=\"activity_horizontal_margin\">64dp</dimen>\n+</resources>"},{"sha":"ab79be5894349a03812e5fc3b497b22286f2091f","filename":"samples/BasicSample/app/src/main/res/values/colors.xml","status":"added","additions":21,"deletions":0,"changes":21,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/samples/BasicSample/app/src/main/res/values/colors.xml","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/samples/BasicSample/app/src/main/res/values/colors.xml","contents_url":"https://api.github.com/repos/google/agera/contents/samples/BasicSample/app/src/main/res/values/colors.xml?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,21 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<!--\n+  ~ Copyright 2015 Google Inc. All Rights Reserved.\n+  ~\n+  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n+  ~ you may not use this file except in compliance with the License.\n+  ~ You may obtain a copy of the License at\n+  ~\n+  ~     http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+<resources>\n+  <color name=\"colorPrimary\">#3F51B5</color>\n+  <color name=\"colorPrimaryDark\">#303F9F</color>\n+  <color name=\"colorAccent\">#FF4081</color>\n+</resources>"},{"sha":"bc6656db0e401411d81a6964e3b879877f3ead46","filename":"samples/BasicSample/app/src/main/res/values/dimens.xml","status":"added","additions":20,"deletions":0,"changes":20,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/samples/BasicSample/app/src/main/res/values/dimens.xml","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/samples/BasicSample/app/src/main/res/values/dimens.xml","contents_url":"https://api.github.com/repos/google/agera/contents/samples/BasicSample/app/src/main/res/values/dimens.xml?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,20 @@\n+<!--\n+  ~ Copyright 2016 Google Inc. All Rights Reserved.\n+  ~\n+  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n+  ~ you may not use this file except in compliance with the License.\n+  ~ You may obtain a copy of the License at\n+  ~\n+  ~     http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+<resources>\n+  <!-- Default screen margins, per the Android Design guidelines. -->\n+  <dimen name=\"activity_horizontal_margin\">16dp</dimen>\n+  <dimen name=\"activity_vertical_margin\">16dp</dimen>\n+</resources>"},{"sha":"1e956b01c90b8d1fcb5378c967d182d8ae86ff0c","filename":"samples/BasicSample/app/src/main/res/values/strings.xml","status":"added","additions":19,"deletions":0,"changes":19,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/samples/BasicSample/app/src/main/res/values/strings.xml","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/samples/BasicSample/app/src/main/res/values/strings.xml","contents_url":"https://api.github.com/repos/google/agera/contents/samples/BasicSample/app/src/main/res/values/strings.xml?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,19 @@\n+<!--\n+  ~ Copyright 2016 Google Inc. All Rights Reserved.\n+  ~\n+  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n+  ~ you may not use this file except in compliance with the License.\n+  ~ You may obtain a copy of the License at\n+  ~\n+  ~     http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+<resources>\n+  <string name=\"app_name\">BasicSample</string>\n+  <string name=\"error\">Error refreshing usernames</string>\n+</resources>"},{"sha":"bbeda12193cff95d16a5269ad69d557afb3a3c1e","filename":"samples/BasicSample/app/src/main/res/values/styles.xml","status":"added","additions":35,"deletions":0,"changes":35,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/samples/BasicSample/app/src/main/res/values/styles.xml","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/samples/BasicSample/app/src/main/res/values/styles.xml","contents_url":"https://api.github.com/repos/google/agera/contents/samples/BasicSample/app/src/main/res/values/styles.xml?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,35 @@\n+<!--\n+  ~ Copyright 2016 Google Inc. All Rights Reserved.\n+  ~\n+  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n+  ~ you may not use this file except in compliance with the License.\n+  ~ You may obtain a copy of the License at\n+  ~\n+  ~     http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+<resources>\n+\n+  <!-- Base application theme. -->\n+  <style name=\"AppTheme\" parent=\"Theme.AppCompat.Light.DarkActionBar\">\n+    <!-- Customize your theme here. -->\n+    <item name=\"colorPrimary\">@color/colorPrimary</item>\n+    <item name=\"colorPrimaryDark\">@color/colorPrimaryDark</item>\n+    <item name=\"colorAccent\">@color/colorAccent</item>\n+  </style>\n+  <style name=\"AppTheme.NoActionBar\">\n+    <item name=\"windowActionBar\">false</item>\n+    <item name=\"windowNoTitle\">true</item>\n+  </style>\n+  <style name=\"AppTheme.AppBarOverlay\" parent=\"ThemeOverlay.AppCompat.Dark.ActionBar\"/>\n+  <style name=\"AppTheme.PopupOverlay\" parent=\"ThemeOverlay.AppCompat.Light\"/>\n+\n+  <style name=\"Toolbar\" parent=\"ThemeOverlay.AppCompat.ActionBar\">\n+    <item name=\"android:textColorPrimary\">@android:color/white</item>\n+  </style>\n+</resources>"},{"sha":"884f4002b51251ef9ecb2f93b134850a7badca47","filename":"samples/BasicSample/build.gradle","status":"added","additions":49,"deletions":0,"changes":49,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/samples/BasicSample/build.gradle","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/samples/BasicSample/build.gradle","contents_url":"https://api.github.com/repos/google/agera/contents/samples/BasicSample/build.gradle?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,49 @@\n+/*\n+ * Copyright 2016 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+// Top-level build file where you can add configuration options common to all sub-projects/modules.\n+\n+defaultTasks 'assembleRelease'\n+\n+buildscript {\n+    repositories {\n+        jcenter()\n+    }\n+    dependencies {\n+        classpath 'com.android.tools.build:gradle:1.5.0'\n+    }\n+}\n+\n+allprojects {\n+    repositories {\n+        jcenter()\n+        mavenLocal()\n+    }\n+}\n+\n+task clean(type: Delete) {\n+    delete rootProject.buildDir\n+}\n+\n+ext {\n+    supportLibraryVersion = '23.2.1'\n+    junitVersion = '4.12'\n+    mockitoVersion = '1.10.19'\n+    powerMockito = '1.6.2'\n+    hamcrestVersion = '1.3'\n+    runnerVersion = '0.5'\n+    rulesVersion = '0.5'\n+    espressoVersion = '2.2.2'\n+}"},{"sha":"244015b80744947a3c692bc6130ebd5ecd17a0c0","filename":"samples/BasicSample/settings.gradle","status":"added","additions":16,"deletions":0,"changes":16,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/samples/BasicSample/settings.gradle","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/samples/BasicSample/settings.gradle","contents_url":"https://api.github.com/repos/google/agera/contents/samples/BasicSample/settings.gradle?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,16 @@\n+/*\n+ * Copyright 2016 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+include ':app'"},{"sha":"ac6259dab084af604a7a7414e151b551deac1b12","filename":"samples/BasicSampleWithoutCallbacks/app/build.gradle","status":"added","additions":68,"deletions":0,"changes":68,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/samples/BasicSampleWithoutCallbacks/app/build.gradle","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/samples/BasicSampleWithoutCallbacks/app/build.gradle","contents_url":"https://api.github.com/repos/google/agera/contents/samples/BasicSampleWithoutCallbacks/app/build.gradle?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2016 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+apply plugin: 'com.android.application'\n+\n+android {\n+    compileSdkVersion 23\n+    buildToolsVersion \"23.0.2\"\n+\n+    defaultConfig {\n+        applicationId \"com.example.android.agera.basicsamplewithoutcallbacks\"\n+        minSdkVersion 15\n+        targetSdkVersion 23\n+        versionCode 1\n+        versionName \"1.0\"\n+\n+        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'\n+    }\n+    buildTypes {\n+        release {\n+            minifyEnabled false\n+            proguardFiles getDefaultProguardFile('proguard-android.txt')\n+        }\n+    }\n+\n+    // Always show the result of every unit test, even if it passes.\n+    testOptions.unitTests.all {\n+        testLogging {\n+            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'\n+        }\n+    }\n+}\n+\n+dependencies {\n+    compile \"com.android.support:appcompat-v7:$rootProject.supportLibraryVersion\"\n+    compile 'com.google.android.agera:agera:1.0.0-RC1'\n+    compile \"com.android.support.test.espresso:espresso-idling-resource:$rootProject.ext.espressoVersion\"\n+\n+    // Dependencies for local unit tests\n+    testCompile \"junit:junit:$rootProject.ext.junitVersion\"\n+    testCompile \"org.mockito:mockito-all:$rootProject.ext.mockitoVersion\"\n+    testCompile \"org.hamcrest:hamcrest-all:$rootProject.ext.hamcrestVersion\"\n+\n+    // Dependencies for Android unit tests\n+    androidTestCompile \"junit:junit:$rootProject.ext.junitVersion\"\n+    androidTestCompile \"org.mockito:mockito-core:$rootProject.ext.mockitoVersion\"\n+    androidTestCompile 'com.google.dexmaker:dexmaker:1.2'\n+    androidTestCompile 'com.google.dexmaker:dexmaker-mockito:1.2'\n+\n+    // Espresso UI Testing\n+    androidTestCompile \"com.android.support.test.espresso:espresso-core:$rootProject.ext.espressoVersion\"\n+}\n+\n+configurations.all {\n+    resolutionStrategy.force \"com.android.support:support-annotations:$rootProject.ext.supportLibraryVersion\"\n+}"},{"sha":"2a671f6559e291872e541061c010989b02583126","filename":"samples/BasicSampleWithoutCallbacks/app/src/androidTest/java/com/example/android/agera/basicsamplewithoutcallbacks/MainActivityTest.java","status":"added","additions":154,"deletions":0,"changes":154,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/samples/BasicSampleWithoutCallbacks/app/src/androidTest/java/com/example/android/agera/basicsamplewithoutcallbacks/MainActivityTest.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/samples/BasicSampleWithoutCallbacks/app/src/androidTest/java/com/example/android/agera/basicsamplewithoutcallbacks/MainActivityTest.java","contents_url":"https://api.github.com/repos/google/agera/contents/samples/BasicSampleWithoutCallbacks/app/src/androidTest/java/com/example/android/agera/basicsamplewithoutcallbacks/MainActivityTest.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,154 @@\n+/*\n+ * Copyright 2016 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.example.android.agera.basicsamplewithoutcallbacks;\n+\n+import static android.support.test.espresso.Espresso.onView;\n+import static android.support.test.espresso.assertion.ViewAssertions.matches;\n+import static android.support.test.espresso.matcher.RootMatchers.withDecorView;\n+import static android.support.test.espresso.matcher.ViewMatchers.isDisplayed;\n+import static android.support.test.espresso.matcher.ViewMatchers.withId;\n+import static android.support.test.espresso.matcher.ViewMatchers.withText;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.Matchers.not;\n+\n+import android.support.test.espresso.ViewAction;\n+import android.support.test.espresso.action.GeneralLocation;\n+import android.support.test.espresso.action.GeneralSwipeAction;\n+import android.support.test.espresso.action.Press;\n+import android.support.test.espresso.action.Swipe;\n+import android.support.test.rule.ActivityTestRule;\n+import android.support.test.runner.AndroidJUnit4;\n+import android.test.suitebuilder.annotation.LargeTest;\n+import android.view.View;\n+import android.widget.ListView;\n+import android.widget.TextView;\n+\n+import org.hamcrest.Description;\n+import org.hamcrest.Matcher;\n+import org.hamcrest.TypeSafeMatcher;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+/**\n+ * Tests for the main screen, which shows a list of usernames or an error message if the list\n+ * data couldn't be obtained.\n+ */\n+@RunWith(AndroidJUnit4.class)\n+@LargeTest\n+public class MainActivityTest {\n+\n+  /**\n+   * {@link ActivityTestRule} is a JUnit {@link Rule @Rule} to launch your activity under test.\n+   * <p>\n+   * Rules are interceptors which are executed for each test method and are important building\n+   * blocks of Junit tests.\n+   */\n+  @Rule\n+  public ActivityTestRule<MainActivity> activityTestRule =\n+      new ActivityTestRule<>(MainActivity.class);\n+\n+  /**\n+   * A custom {@link Matcher} which matches a {@link ListView} by its size.\n+   * <p>\n+   * View constraints:\n+   * <ul>\n+   * <li>View must be a {@link ListView}\n+   * <ul>\n+   *\n+   * @param size the expected size of the list\n+   * @return Matcher that matches size of the given {@link ListView}\n+   */\n+  private static Matcher<View> withListSize(final int size) {\n+    return new TypeSafeMatcher<View>() {\n+      @Override\n+      public boolean matchesSafely(final View view) {\n+        return ((ListView) view).getChildCount() == size;\n+      }\n+\n+      @Override\n+      public void describeTo(final Description description) {\n+        description.appendText(\"ListView should have \" + size + \" items\");\n+      }\n+    };\n+  }\n+\n+  @Before\n+  public void setUp() {\n+    // Username fetcher in a state of returning 4 usernames\n+    UsernamesSupplier.NUMBER_OF_USERS = 4;\n+  }\n+\n+  @After\n+  public void cleanUp() {\n+    // Username fetcher in a state of returning 4 usernames\n+    UsernamesSupplier.NUMBER_OF_USERS = 4;\n+  }\n+\n+  @Test\n+  public void firstLoad_showsList() {\n+    // Then the correct number of usernames is displayed\n+    onView(withId(R.id.list)).check(matches(withListSize(UsernamesSupplier.NUMBER_OF_USERS)));\n+  }\n+\n+  @Test\n+  public void refreshError_showsErrorAndPreviousList() {\n+    // Given a list of usernames loaded\n+    String firstUsername =\n+        ((TextView) ((ListView) activityTestRule.getActivity()\n+            .findViewById(R.id.list)).getChildAt(0)).getText().toString();\n+\n+    // Given a username fetcher in a state of error\n+    UsernamesSupplier.NUMBER_OF_USERS = -1;\n+\n+    // When pulled down to refresh is triggered\n+    onView(withId(R.id.fragment)).perform(swipeDown());\n+\n+    // Then the error toast is shown\n+    onView(withText(R.string.error))\n+        // Required because of the way toasts are displayed\n+        .inRoot(withDecorView(not(is(\n+            activityTestRule.getActivity().getWindow().getDecorView()))))\n+        // Check if it is visible\n+        .check(matches(isDisplayed()));\n+    // And the list is still shown\n+    onView(withText(firstUsername)).check(matches(isDisplayed()));\n+  }\n+\n+  @Test\n+  public void refresh_showsUpdatedList() {\n+    // Given a list of usernames loaded\n+    String firstUsername =\n+        ((TextView) ((ListView) activityTestRule.getActivity()\n+            .findViewById(R.id.list)).getChildAt(0)).getText().toString();\n+\n+    // Given a username fetcher in a state of returning 5 usernames\n+    UsernamesSupplier.NUMBER_OF_USERS = 5;\n+\n+    // When pulled down to refresh is triggered\n+    onView(withId(R.id.fragment)).perform(swipeDown());\n+\n+    // Then the correct number of usernames is displayed\n+    onView(withId(R.id.list)).check(matches(withListSize(UsernamesSupplier.NUMBER_OF_USERS)));\n+  }\n+\n+  private static ViewAction swipeDown() {\n+    return new GeneralSwipeAction(Swipe.FAST, GeneralLocation.TOP_CENTER,\n+        GeneralLocation.BOTTOM_CENTER, Press.FINGER);\n+  }\n+}"},{"sha":"80293d0d2eaf8e19bafe90b8ce3373d37ef3ff3b","filename":"samples/BasicSampleWithoutCallbacks/app/src/main/AndroidManifest.xml","status":"added","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/samples/BasicSampleWithoutCallbacks/app/src/main/AndroidManifest.xml","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/samples/BasicSampleWithoutCallbacks/app/src/main/AndroidManifest.xml","contents_url":"https://api.github.com/repos/google/agera/contents/samples/BasicSampleWithoutCallbacks/app/src/main/AndroidManifest.xml?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,34 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<!--\n+  ~ Copyright 2016 Google Inc. All Rights Reserved.\n+  ~\n+  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n+  ~ you may not use this file except in compliance with the License.\n+  ~ You may obtain a copy of the License at\n+  ~\n+  ~     http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n+    package=\"com.example.android.agera.basicsamplewithoutcallbacks\">\n+  <application\n+      android:icon=\"@mipmap/ic_launcher\"\n+      android:label=\"@string/app_name\"\n+      android:supportsRtl=\"true\"\n+      android:theme=\"@style/AppTheme\">\n+    <activity\n+        android:name=\"com.example.android.agera.basicsamplewithoutcallbacks.MainActivity\"\n+        android:label=\"@string/app_name\"\n+        android:theme=\"@style/AppTheme.NoActionBar\">\n+      <intent-filter>\n+        <action android:name=\"android.intent.action.MAIN\"/>\n+        <category android:name=\"android.intent.category.LAUNCHER\"/>\n+      </intent-filter>\n+    </activity>\n+  </application>\n+</manifest>"},{"sha":"b2935c1aabed1bcaa4f2f8ece59ff62dc8c683d1","filename":"samples/BasicSampleWithoutCallbacks/app/src/main/java/com/example/android/agera/basicsamplewithoutcallbacks/MainActivity.java","status":"added","additions":31,"deletions":0,"changes":31,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/samples/BasicSampleWithoutCallbacks/app/src/main/java/com/example/android/agera/basicsamplewithoutcallbacks/MainActivity.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/samples/BasicSampleWithoutCallbacks/app/src/main/java/com/example/android/agera/basicsamplewithoutcallbacks/MainActivity.java","contents_url":"https://api.github.com/repos/google/agera/contents/samples/BasicSampleWithoutCallbacks/app/src/main/java/com/example/android/agera/basicsamplewithoutcallbacks/MainActivity.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,31 @@\n+/*\n+ * Copyright 2016 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.example.android.agera.basicsamplewithoutcallbacks;\n+\n+import android.os.Bundle;\n+import android.support.v7.app.AppCompatActivity;\n+import android.support.v7.widget.Toolbar;\n+\n+public class MainActivity extends AppCompatActivity {\n+\n+  @Override\n+  protected void onCreate(Bundle savedInstanceState) {\n+    super.onCreate(savedInstanceState);\n+    setContentView(R.layout.main_act);\n+    Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);\n+    setSupportActionBar(toolbar);\n+  }\n+}"},{"sha":"46611b7eab02fffe9b1cb8aa57cde408c18d22f2","filename":"samples/BasicSampleWithoutCallbacks/app/src/main/java/com/example/android/agera/basicsamplewithoutcallbacks/MainFragment.java","status":"added","additions":160,"deletions":0,"changes":160,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/samples/BasicSampleWithoutCallbacks/app/src/main/java/com/example/android/agera/basicsamplewithoutcallbacks/MainFragment.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/samples/BasicSampleWithoutCallbacks/app/src/main/java/com/example/android/agera/basicsamplewithoutcallbacks/MainFragment.java","contents_url":"https://api.github.com/repos/google/agera/contents/samples/BasicSampleWithoutCallbacks/app/src/main/java/com/example/android/agera/basicsamplewithoutcallbacks/MainFragment.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,160 @@\n+/*\n+ * Copyright 2016 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.example.android.agera.basicsamplewithoutcallbacks;\n+\n+import static java.util.concurrent.Executors.newSingleThreadExecutor;\n+\n+import com.google.android.agera.Observable;\n+import com.google.android.agera.Repositories;\n+import com.google.android.agera.Repository;\n+import com.google.android.agera.Result;\n+import com.google.android.agera.Updatable;\n+\n+import android.os.Bundle;\n+import android.support.v4.app.Fragment;\n+import android.support.v4.content.ContextCompat;\n+import android.support.v4.widget.SwipeRefreshLayout;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.widget.ArrayAdapter;\n+import android.widget.ListAdapter;\n+import android.widget.ListView;\n+import android.widget.Toast;\n+\n+import java.util.List;\n+import java.util.concurrent.ExecutorService;\n+\n+/**\n+ * The MainFragment contains a {@link ListView} that displays a list of usernames. The usernames\n+ * are loaded in {@link Fragment#onResume()} and there is a {@link SwipeRefreshLayout} allowing the\n+ * user to manually refresh the list of usernames.\n+ * <P >\n+ * This is set up as an {@link Updatable} as changes in the {@link #usernamesRepository} should\n+ * trigger the MainFragment to redraw itself.\n+ */\n+public class MainFragment extends Fragment implements Updatable {\n+\n+  /**\n+   * The {@link SwipeRefreshLayout.OnRefreshListener} is also an {@link Observable}. It is\n+   * observed by the {@link #usernamesRepository}, an update is triggered whenever\n+   * {@link SwipeRefreshLayout.OnRefreshListener#onRefresh()} is fired.\n+   */\n+  private OnRefreshObservable refreshObservable;\n+\n+  /**\n+   * The usernames repository takes care of providing the data to this fragment. It is created\n+   * using Agera's repository compiler.\n+   *\n+   * @see #setUpRepository()\n+   */\n+  private Repository<Result<List<String>>> usernamesRepository;\n+\n+  private ListAdapter listAdapter;\n+\n+  private ListView listView;\n+\n+  private SwipeRefreshLayout swipeRefreshLayout;\n+\n+  private ExecutorService networkExecutor;\n+\n+  @Override\n+  public View onCreateView(LayoutInflater inflater, ViewGroup container,\n+      Bundle savedInstanceState) {\n+    View root = inflater.inflate(R.layout.main_frag, container, false);\n+\n+    listView = (ListView) root.findViewById(R.id.list);\n+\n+    // Set pull to refresh as an observable and attach it to the view\n+    refreshObservable = new OnRefreshObservable();\n+    swipeRefreshLayout = (SwipeRefreshLayout) root.findViewById(R.id.refresh_layout);\n+    swipeRefreshLayout.setColorSchemeColors(\n+        ContextCompat.getColor(getActivity(), R.color.colorPrimary),\n+        ContextCompat.getColor(getActivity(), R.color.colorAccent),\n+        ContextCompat.getColor(getActivity(), R.color.colorPrimaryDark));\n+    swipeRefreshLayout.setOnRefreshListener(refreshObservable);\n+\n+    setUpRepository();\n+\n+    return root;\n+  }\n+\n+  private void setUpRepository() {\n+    // Set up background executor\n+    networkExecutor = newSingleThreadExecutor();\n+\n+    // Set up usernames repository\n+    usernamesRepository = Repositories\n+        .repositoryWithInitialValue(Result.<List<String>>absent())\n+        .observe(refreshObservable)\n+        .onUpdatesPerLoop()\n+        .goTo(networkExecutor)\n+        .thenGetFrom(new UsernamesSupplier())\n+        .compile();\n+  }\n+\n+  @Override\n+  public void onResume() {\n+    super.onResume();\n+\n+    // We make sure the main fragment observes the repository. This will also trigger the\n+    // repository to update itself.\n+    usernamesRepository.addUpdatable(this);\n+\n+    // We update the UI to show the data is being updated. We need to wait for the\n+    // SwipeRefreshLayout to be ready before asking it to show itself as refreshing.\n+    swipeRefreshLayout.post(new Runnable() {\n+      @Override\n+      public void run() {\n+        update();\n+      }\n+    });\n+  }\n+\n+  @Override\n+  public void onPause() {\n+    super.onPause();\n+\n+    // We remove the observations to avoid triggering updates when they aren't needed\n+    usernamesRepository.removeUpdatable(this);\n+  }\n+\n+  /**\n+   * As this MainFragment is observing the {@link #usernamesRepository}, this is triggered\n+   * whenever the {@link #usernamesRepository} updates itself.\n+   */\n+  @Override\n+  public void update() {\n+     // Result has methods to differentiate between success and failure.\n+     // Process Result.isAbsent() first because Result.failed() is true if Result.isAbsent() is\n+     // true.\n+    if (usernamesRepository.get().isAbsent()) {\n+      swipeRefreshLayout.setRefreshing(true);\n+    } else if (usernamesRepository.get().failed()) {\n+      // Show error message, do not update list as we still want to show the last known list\n+      // of usernames\n+      Toast.makeText(getContext(), getResources().getString(R.string.error),\n+          Toast.LENGTH_LONG).show();\n+      swipeRefreshLayout.setRefreshing(false);\n+    } else { // Success\n+      // Update the list of usernames\n+      listAdapter = new ArrayAdapter<String>(getContext(),\n+          android.R.layout.simple_list_item_1, usernamesRepository.get().get());\n+      listView.setAdapter(listAdapter);\n+      swipeRefreshLayout.setRefreshing(false);\n+    }\n+  }\n+}"},{"sha":"12c900d924954e6769a5b1bde97552a3e097629a","filename":"samples/BasicSampleWithoutCallbacks/app/src/main/java/com/example/android/agera/basicsamplewithoutcallbacks/OnRefreshObservable.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/samples/BasicSampleWithoutCallbacks/app/src/main/java/com/example/android/agera/basicsamplewithoutcallbacks/OnRefreshObservable.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/samples/BasicSampleWithoutCallbacks/app/src/main/java/com/example/android/agera/basicsamplewithoutcallbacks/OnRefreshObservable.java","contents_url":"https://api.github.com/repos/google/agera/contents/samples/BasicSampleWithoutCallbacks/app/src/main/java/com/example/android/agera/basicsamplewithoutcallbacks/OnRefreshObservable.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,41 @@\n+/*\n+ * Copyright 2016 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.example.android.agera.basicsamplewithoutcallbacks;\n+\n+import com.google.android.agera.BaseObservable;\n+import com.google.android.agera.Updatable;\n+import com.google.android.agera.UpdateDispatcher;\n+\n+import android.support.v4.widget.SwipeRefreshLayout;\n+\n+/**\n+ * This implements {@link SwipeRefreshLayout.OnRefreshListener} so it can be attached to a\n+ * {@link SwipeRefreshLayout}. It also extends {@link BaseObservable} so changes in here can be\n+ * passed on to its observer (ie an {@link Updatable}, using an {@link UpdateDispatcher}.\n+ */\n+public class OnRefreshObservable extends BaseObservable\n+    implements SwipeRefreshLayout.OnRefreshListener {\n+\n+  /**\n+   * Triggered when the associated {@link SwipeRefreshLayout} is refreshed by the user. The event\n+   * is passed on to the observers, using the {@link UpdateDispatcher} provided by {@link\n+   * BaseObservable}.\n+   */\n+  @Override\n+  public void onRefresh() {\n+    dispatchUpdate();\n+  }\n+}"},{"sha":"ca02dd3e98c00ff8c869b9e516bd47645a59f2bd","filename":"samples/BasicSampleWithoutCallbacks/app/src/main/java/com/example/android/agera/basicsamplewithoutcallbacks/UsernamesSupplier.java","status":"added","additions":92,"deletions":0,"changes":92,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/samples/BasicSampleWithoutCallbacks/app/src/main/java/com/example/android/agera/basicsamplewithoutcallbacks/UsernamesSupplier.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/samples/BasicSampleWithoutCallbacks/app/src/main/java/com/example/android/agera/basicsamplewithoutcallbacks/UsernamesSupplier.java","contents_url":"https://api.github.com/repos/google/agera/contents/samples/BasicSampleWithoutCallbacks/app/src/main/java/com/example/android/agera/basicsamplewithoutcallbacks/UsernamesSupplier.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,92 @@\n+/*\n+ * Copyright 2016 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.example.android.agera.basicsamplewithoutcallbacks;\n+\n+import com.google.android.agera.Result;\n+import com.google.android.agera.Supplier;\n+\n+import android.support.annotation.NonNull;\n+import android.util.Log;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Random;\n+\n+/**\n+ * This implements getting a list of usernames. A fake latency is added. The number of returned\n+ * usernames is controlled by a public static field, to allow us to write deterministic tests. This\n+ * gets the usernames on the thread it is called from.\n+ * <p/>\n+ * Typically, this would directly implement {@link Supplier<Result<List<String>>>} and {@link\n+ * Supplier#get()} would be a wrapper around {@link #getUsernames()}. Of course this is possible\n+ * only if this\n+ * class is controlled by the same team.\n+ */\n+public class UsernamesSupplier implements Supplier<Result<List<String>>> {\n+\n+  /**\n+   * Config constant that determines the number of users to return. {@link #getUsernames()}\n+   * returns null if this is negative.\n+   */\n+  public static int NUMBER_OF_USERS = 4;\n+\n+  private static final String TAG = UsernamesSupplier.class.getSimpleName();\n+\n+  /**\n+   * This method fakes getting a list of usernames from a server. It returns null if {@link\n+   * #NUMBER_OF_USERS} is negative. It simulates server latency to return usernames. It is a\n+   * blocking call.\n+   */\n+  private List<String> getUsernames() {\n+    // Simulate network latency\n+    try {\n+      Thread.sleep(2000);\n+    } catch (InterruptedException e) {\n+      Log.e(TAG, e.toString());\n+      return null;\n+    }\n+\n+    if (NUMBER_OF_USERS < 0) {\n+      return null;\n+    }\n+\n+    String name1 = \"Joe\";\n+    String name2 = \"Amanda\";\n+    final List<String> usernames = new ArrayList<String>();\n+    Random random = new Random();\n+    for (int i = 0; i < NUMBER_OF_USERS; i++) {\n+      int number = random.nextInt(50);\n+      if (System.currentTimeMillis() % 2 == 0) {\n+        usernames.add(name1 + number);\n+      } else {\n+        usernames.add(name2 + number);\n+      }\n+    }\n+\n+    return usernames;\n+  }\n+\n+  @NonNull\n+  @Override\n+  public Result<List<String>> get() {\n+    List<String> usernames = getUsernames();\n+    if (usernames == null) {\n+      return Result.failure();\n+    } else {\n+      return Result.success(getUsernames());\n+    }\n+  }\n+}"},{"sha":"6ea921c30eb2bc7aa3e0f273e72b661d8ec5d9db","filename":"samples/BasicSampleWithoutCallbacks/app/src/main/res/layout/main_act.xml","status":"added","additions":47,"deletions":0,"changes":47,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/samples/BasicSampleWithoutCallbacks/app/src/main/res/layout/main_act.xml","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/samples/BasicSampleWithoutCallbacks/app/src/main/res/layout/main_act.xml","contents_url":"https://api.github.com/repos/google/agera/contents/samples/BasicSampleWithoutCallbacks/app/src/main/res/layout/main_act.xml?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,47 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<!--\n+  ~ Copyright 2016 Google Inc. All Rights Reserved.\n+  ~\n+  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n+  ~ you may not use this file except in compliance with the License.\n+  ~ You may obtain a copy of the License at\n+  ~\n+  ~     http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+<android.support.v4.widget.DrawerLayout\n+    android:id=\"@+id/drawer_layout\"\n+    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n+    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n+    xmlns:tools=\"http://schemas.android.com/tools\"\n+    android:layout_width=\"match_parent\"\n+    android:layout_height=\"match_parent\"\n+    tools:context=\".TasksActivity\"\n+    tools:openDrawer=\"start\">\n+\n+    <LinearLayout\n+        android:layout_width=\"match_parent\"\n+        android:layout_height=\"match_parent\"\n+        android:orientation=\"vertical\">\n+\n+        <android.support.v7.widget.Toolbar\n+            android:id=\"@+id/toolbar\"\n+            android:layout_width=\"match_parent\"\n+            android:layout_height=\"wrap_content\"\n+            android:background=\"?attr/colorPrimary\"\n+            android:minHeight=\"?attr/actionBarSize\"\n+            app:theme=\"@style/Toolbar\"\n+            app:popupTheme=\"@style/ThemeOverlay.AppCompat.Light\" />\n+\n+        <fragment android:name=\"com.example.android.agera.basicsamplewithoutcallbacks.MainFragment\"\n+            android:id=\"@+id/fragment\"\n+            android:layout_width=\"match_parent\"\n+            android:layout_height=\"match_parent\" />\n+\n+    </LinearLayout>\n+</android.support.v4.widget.DrawerLayout>"},{"sha":"80dcd80b9f00d604ab03a73c91186a4855f053c7","filename":"samples/BasicSampleWithoutCallbacks/app/src/main/res/layout/main_frag.xml","status":"added","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/samples/BasicSampleWithoutCallbacks/app/src/main/res/layout/main_frag.xml","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/samples/BasicSampleWithoutCallbacks/app/src/main/res/layout/main_frag.xml","contents_url":"https://api.github.com/repos/google/agera/contents/samples/BasicSampleWithoutCallbacks/app/src/main/res/layout/main_frag.xml?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,32 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<!--\n+  ~ Copyright 2016 Google Inc. All Rights Reserved.\n+  ~\n+  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n+  ~ you may not use this file except in compliance with the License.\n+  ~ You may obtain a copy of the License at\n+  ~\n+  ~     http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+<android.support.v4.widget.SwipeRefreshLayout\n+    android:id=\"@+id/refresh_layout\"\n+    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n+    android:layout_width=\"match_parent\"\n+    android:layout_height=\"match_parent\">\n+\n+  <ListView\n+      android:id=\"@+id/list\"\n+      android:layout_width=\"match_parent\"\n+      android:layout_height=\"wrap_content\"\n+      android:paddingBottom=\"@dimen/activity_vertical_margin\"\n+      android:paddingLeft=\"@dimen/activity_horizontal_margin\"\n+      android:paddingRight=\"@dimen/activity_horizontal_margin\"\n+      android:paddingTop=\"@dimen/activity_vertical_margin\"/>\n+\n+</android.support.v4.widget.SwipeRefreshLayout>"},{"sha":"cde69bcccec65160d92116f20ffce4fce0b5245c","filename":"samples/BasicSampleWithoutCallbacks/app/src/main/res/mipmap-hdpi/ic_launcher.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/samples/BasicSampleWithoutCallbacks/app/src/main/res/mipmap-hdpi/ic_launcher.png","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/samples/BasicSampleWithoutCallbacks/app/src/main/res/mipmap-hdpi/ic_launcher.png","contents_url":"https://api.github.com/repos/google/agera/contents/samples/BasicSampleWithoutCallbacks/app/src/main/res/mipmap-hdpi/ic_launcher.png?ref=c648301e6e219c3673ef2c4180a4e3d202710523"},{"sha":"c133a0cbd379f5af6dbf1a899a0293ca5eccfad0","filename":"samples/BasicSampleWithoutCallbacks/app/src/main/res/mipmap-mdpi/ic_launcher.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/samples/BasicSampleWithoutCallbacks/app/src/main/res/mipmap-mdpi/ic_launcher.png","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/samples/BasicSampleWithoutCallbacks/app/src/main/res/mipmap-mdpi/ic_launcher.png","contents_url":"https://api.github.com/repos/google/agera/contents/samples/BasicSampleWithoutCallbacks/app/src/main/res/mipmap-mdpi/ic_launcher.png?ref=c648301e6e219c3673ef2c4180a4e3d202710523"},{"sha":"bfa42f0e7b91d006d22352c9ff2f134e504e3c1d","filename":"samples/BasicSampleWithoutCallbacks/app/src/main/res/mipmap-xhdpi/ic_launcher.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/samples/BasicSampleWithoutCallbacks/app/src/main/res/mipmap-xhdpi/ic_launcher.png","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/samples/BasicSampleWithoutCallbacks/app/src/main/res/mipmap-xhdpi/ic_launcher.png","contents_url":"https://api.github.com/repos/google/agera/contents/samples/BasicSampleWithoutCallbacks/app/src/main/res/mipmap-xhdpi/ic_launcher.png?ref=c648301e6e219c3673ef2c4180a4e3d202710523"},{"sha":"324e72cdd7480cb983fa1bcc7ce686e51ef87fe7","filename":"samples/BasicSampleWithoutCallbacks/app/src/main/res/mipmap-xxhdpi/ic_launcher.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/samples/BasicSampleWithoutCallbacks/app/src/main/res/mipmap-xxhdpi/ic_launcher.png","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/samples/BasicSampleWithoutCallbacks/app/src/main/res/mipmap-xxhdpi/ic_launcher.png","contents_url":"https://api.github.com/repos/google/agera/contents/samples/BasicSampleWithoutCallbacks/app/src/main/res/mipmap-xxhdpi/ic_launcher.png?ref=c648301e6e219c3673ef2c4180a4e3d202710523"},{"sha":"aee44e138434630332d88b1680f33c4b24c70ab3","filename":"samples/BasicSampleWithoutCallbacks/app/src/main/res/mipmap-xxxhdpi/ic_launcher.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/samples/BasicSampleWithoutCallbacks/app/src/main/res/mipmap-xxxhdpi/ic_launcher.png","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/samples/BasicSampleWithoutCallbacks/app/src/main/res/mipmap-xxxhdpi/ic_launcher.png","contents_url":"https://api.github.com/repos/google/agera/contents/samples/BasicSampleWithoutCallbacks/app/src/main/res/mipmap-xxxhdpi/ic_launcher.png?ref=c648301e6e219c3673ef2c4180a4e3d202710523"},{"sha":"e7739fa35c0805377d3dc41bd11808364796cad4","filename":"samples/BasicSampleWithoutCallbacks/app/src/main/res/values-v21/styles.xml","status":"added","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/samples/BasicSampleWithoutCallbacks/app/src/main/res/values-v21/styles.xml","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/samples/BasicSampleWithoutCallbacks/app/src/main/res/values-v21/styles.xml","contents_url":"https://api.github.com/repos/google/agera/contents/samples/BasicSampleWithoutCallbacks/app/src/main/res/values-v21/styles.xml?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,23 @@\n+<!--\n+  ~ Copyright 2016 Google Inc. All Rights Reserved.\n+  ~\n+  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n+  ~ you may not use this file except in compliance with the License.\n+  ~ You may obtain a copy of the License at\n+  ~\n+  ~     http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+<resources>>\n+  <style name=\"AppTheme.NoActionBar\">\n+    <item name=\"windowActionBar\">false</item>\n+    <item name=\"windowNoTitle\">true</item>\n+    <item name=\"android:windowDrawsSystemBarBackgrounds\">true</item>\n+    <item name=\"android:statusBarColor\">@android:color/transparent</item>\n+  </style>\n+</resources>"},{"sha":"f16287e52f51fe0e8a2e077ac3bed164c7c996ab","filename":"samples/BasicSampleWithoutCallbacks/app/src/main/res/values-w820dp/dimens.xml","status":"added","additions":21,"deletions":0,"changes":21,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/samples/BasicSampleWithoutCallbacks/app/src/main/res/values-w820dp/dimens.xml","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/samples/BasicSampleWithoutCallbacks/app/src/main/res/values-w820dp/dimens.xml","contents_url":"https://api.github.com/repos/google/agera/contents/samples/BasicSampleWithoutCallbacks/app/src/main/res/values-w820dp/dimens.xml?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,21 @@\n+<!--\n+  ~ Copyright 2016 Google Inc. All Rights Reserved.\n+  ~\n+  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n+  ~ you may not use this file except in compliance with the License.\n+  ~ You may obtain a copy of the License at\n+  ~\n+  ~     http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+<resources>\n+  <!-- Example customization of dimensions originally defined in res/values/dimens.xml\n+       (such as screen margins) for screens with more than 820dp of available width. This\n+       would include 7\" and 10\" devices in landscape (~960dp and ~1280dp respectively). -->\n+  <dimen name=\"activity_horizontal_margin\">64dp</dimen>\n+</resources>"},{"sha":"5364e5306fb8d0929d240cd53ef4680f84f728e4","filename":"samples/BasicSampleWithoutCallbacks/app/src/main/res/values/colors.xml","status":"added","additions":21,"deletions":0,"changes":21,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/samples/BasicSampleWithoutCallbacks/app/src/main/res/values/colors.xml","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/samples/BasicSampleWithoutCallbacks/app/src/main/res/values/colors.xml","contents_url":"https://api.github.com/repos/google/agera/contents/samples/BasicSampleWithoutCallbacks/app/src/main/res/values/colors.xml?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,21 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<!--\n+  ~ Copyright 2016 Google Inc. All Rights Reserved.\n+  ~\n+  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n+  ~ you may not use this file except in compliance with the License.\n+  ~ You may obtain a copy of the License at\n+  ~\n+  ~     http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+<resources>\n+  <color name=\"colorPrimary\">#3F51B5</color>\n+  <color name=\"colorPrimaryDark\">#303F9F</color>\n+  <color name=\"colorAccent\">#FF4081</color>\n+</resources>"},{"sha":"bc6656db0e401411d81a6964e3b879877f3ead46","filename":"samples/BasicSampleWithoutCallbacks/app/src/main/res/values/dimens.xml","status":"added","additions":20,"deletions":0,"changes":20,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/samples/BasicSampleWithoutCallbacks/app/src/main/res/values/dimens.xml","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/samples/BasicSampleWithoutCallbacks/app/src/main/res/values/dimens.xml","contents_url":"https://api.github.com/repos/google/agera/contents/samples/BasicSampleWithoutCallbacks/app/src/main/res/values/dimens.xml?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,20 @@\n+<!--\n+  ~ Copyright 2016 Google Inc. All Rights Reserved.\n+  ~\n+  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n+  ~ you may not use this file except in compliance with the License.\n+  ~ You may obtain a copy of the License at\n+  ~\n+  ~     http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+<resources>\n+  <!-- Default screen margins, per the Android Design guidelines. -->\n+  <dimen name=\"activity_horizontal_margin\">16dp</dimen>\n+  <dimen name=\"activity_vertical_margin\">16dp</dimen>\n+</resources>"},{"sha":"7c93db601195365401fd0a8c8cb6fdcdb50e96d4","filename":"samples/BasicSampleWithoutCallbacks/app/src/main/res/values/strings.xml","status":"added","additions":19,"deletions":0,"changes":19,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/samples/BasicSampleWithoutCallbacks/app/src/main/res/values/strings.xml","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/samples/BasicSampleWithoutCallbacks/app/src/main/res/values/strings.xml","contents_url":"https://api.github.com/repos/google/agera/contents/samples/BasicSampleWithoutCallbacks/app/src/main/res/values/strings.xml?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,19 @@\n+<!--\n+  ~ Copyright 2016 Google Inc. All Rights Reserved.\n+  ~\n+  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n+  ~ you may not use this file except in compliance with the License.\n+  ~ You may obtain a copy of the License at\n+  ~\n+  ~     http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+<resources>\n+  <string name=\"app_name\">BasicSample Without Callbacks</string>\n+  <string name=\"error\">Error refreshing usernames</string>\n+</resources>"},{"sha":"1c0c89a7e0a5c977b0cf3d31658acfcab46ec2f3","filename":"samples/BasicSampleWithoutCallbacks/app/src/main/res/values/styles.xml","status":"added","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/samples/BasicSampleWithoutCallbacks/app/src/main/res/values/styles.xml","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/samples/BasicSampleWithoutCallbacks/app/src/main/res/values/styles.xml","contents_url":"https://api.github.com/repos/google/agera/contents/samples/BasicSampleWithoutCallbacks/app/src/main/res/values/styles.xml?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,34 @@\n+<!--\n+  ~ Copyright 2016 Google Inc. All Rights Reserved.\n+  ~\n+  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n+  ~ you may not use this file except in compliance with the License.\n+  ~ You may obtain a copy of the License at\n+  ~\n+  ~     http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+<resources>\n+  <!-- Base application theme. -->\n+  <style name=\"AppTheme\" parent=\"Theme.AppCompat.Light.DarkActionBar\">\n+    <!-- Customize your theme here. -->\n+    <item name=\"colorPrimary\">@color/colorPrimary</item>\n+    <item name=\"colorPrimaryDark\">@color/colorPrimaryDark</item>\n+    <item name=\"colorAccent\">@color/colorAccent</item>\n+  </style>\n+  <style name=\"AppTheme.NoActionBar\">\n+    <item name=\"windowActionBar\">false</item>\n+    <item name=\"windowNoTitle\">true</item>\n+  </style>\n+  <style name=\"AppTheme.AppBarOverlay\" parent=\"ThemeOverlay.AppCompat.Dark.ActionBar\"/>\n+  <style name=\"AppTheme.PopupOverlay\" parent=\"ThemeOverlay.AppCompat.Light\"/>\n+\n+  <style name=\"Toolbar\" parent=\"ThemeOverlay.AppCompat.ActionBar\">\n+    <item name=\"android:textColorPrimary\">@android:color/white</item>\n+  </style>\n+</resources>"},{"sha":"7a80035cf14e7a482709135aed76442c7c3c4ead","filename":"samples/BasicSampleWithoutCallbacks/build.gradle","status":"added","additions":49,"deletions":0,"changes":49,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/samples/BasicSampleWithoutCallbacks/build.gradle","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/samples/BasicSampleWithoutCallbacks/build.gradle","contents_url":"https://api.github.com/repos/google/agera/contents/samples/BasicSampleWithoutCallbacks/build.gradle?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,49 @@\n+/*\n+ * Copyright 2016 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+// Top-level build file where you can add configuration options common to all sub-projects/modules.\n+\n+defaultTasks 'assembleRelease'\n+\n+buildscript {\n+    repositories {\n+        jcenter()\n+    }\n+    dependencies {\n+        classpath 'com.android.tools.build:gradle:1.5.0'\n+    }\n+}\n+\n+allprojects {\n+    repositories {\n+        jcenter()\n+        mavenLocal()\n+    }\n+}\n+\n+task clean(type: Delete) {\n+    delete rootProject.buildDir\n+}\n+\n+ext {\n+    supportLibraryVersion = '23.0.1'\n+    junitVersion = '4.12'\n+    mockitoVersion = '1.10.19'\n+    powerMockito = '1.6.2'\n+    hamcrestVersion = '1.3'\n+    runnerVersion = '0.4.1'\n+    rulesVersion = '0.4.1'\n+    espressoVersion = '2.2.1'\n+}"},{"sha":"244015b80744947a3c692bc6130ebd5ecd17a0c0","filename":"samples/BasicSampleWithoutCallbacks/settings.gradle","status":"added","additions":16,"deletions":0,"changes":16,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/samples/BasicSampleWithoutCallbacks/settings.gradle","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/samples/BasicSampleWithoutCallbacks/settings.gradle","contents_url":"https://api.github.com/repos/google/agera/contents/samples/BasicSampleWithoutCallbacks/settings.gradle?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,16 @@\n+/*\n+ * Copyright 2016 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+include ':app'"},{"sha":"5d1729dd9d94f4187cba6658dd4f5ff5856a6166","filename":"settings.gradle","status":"added","additions":157,"deletions":0,"changes":157,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/settings.gradle","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/settings.gradle","contents_url":"https://api.github.com/repos/google/agera/contents/settings.gradle?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,157 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+include ':agera'\n+include ':extensions:content'\n+include ':extensions:rvadapter'\n+include ':extensions:database'\n+include ':extensions:net'\n+include ':testapp'\n+\n+gradle.ext.versionCode = 10000\n+gradle.ext.versionName = '1.0.0-RC1'\n+\n+gradle.ext.group = 'com.google.android.agera'\n+gradle.ext.url = 'https://github.com/google/agera'\n+gradle.ext.gitUrl = 'https://github.com/google/agera.git'\n+gradle.ext.licenseName = 'The Apache Software License, Version 2.0'\n+gradle.ext.licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'\n+\n+gradle.ext.minSdkVersion = 9\n+gradle.ext.compileSdkVersion = 23\n+gradle.ext.buildToolsVersion = '23.0.2'\n+gradle.ext.supportLibraryVersion = '23.2.1'\n+\n+gradle.allprojects {\n+    buildscript {\n+        repositories {\n+            jcenter()\n+        }\n+        dependencies {\n+            classpath 'com.android.tools.build:gradle:1.5.0'\n+            classpath 'com.github.dcendents:android-maven-gradle-plugin:1.3'\n+            classpath 'com.getkeepsafe.dexcount:dexcount-gradle-plugin:0.3.1'\n+        }\n+    }\n+    repositories {\n+        jcenter()\n+    }\n+    tasks.withType(JavaForkOptions) {\n+        jvmArgs '-Djava.awt.headless=true'\n+    }\n+    tasks.withType(Test) {\n+        testLogging {\n+            exceptionFormat \"full\"\n+            events \"passed\", \"failed\", \"skipped\"\n+            showCauses true\n+            showExceptions true\n+            showStackTraces true\n+            showStandardStreams true\n+        }\n+    }\n+    afterEvaluate { project ->\n+        if (project.hasProperty(\"android\")) {\n+            android {\n+                defaultConfig {\n+                    minSdkVersion gradle.minSdkVersion\n+                    compileSdkVersion gradle.compileSdkVersion\n+                    buildToolsVersion gradle.buildToolsVersion\n+                    versionCode gradle.versionCode\n+                    versionName gradle.versionName\n+                }\n+                compileOptions {\n+                    sourceCompatibility JavaVersion.VERSION_1_7\n+                    targetCompatibility JavaVersion.VERSION_1_7\n+                }\n+            }\n+            if (android.hasProperty('libraryVariants')) {\n+                version = gradle.versionName\n+                group = gradle.group\n+                android {\n+                    lintOptions {\n+                        textReport true\n+                        textOutput 'stdout'\n+                        checkAllWarnings true\n+                    }\n+                    buildTypes {\n+                        debug {\n+                            testCoverageEnabled true\n+                        }\n+                    }\n+                }\n+                dependencies {\n+                    compile 'com.android.support:support-annotations:' +\n+                            gradle.supportLibraryVersion\n+                    testCompile \"org.hamcrest:hamcrest-library:1.3\"\n+                    testCompile 'junit:junit:4.12'\n+                    testCompile 'org.robolectric:robolectric:3.0'\n+                    testCompile \"org.mockito:mockito-core:1.10.19\"\n+                }\n+                task sourcesJar(type: Jar) {\n+                    from android.sourceSets.main.java.srcDirs\n+                    classifier = 'sources'\n+                }\n+                task jacocoTestReport(type:JacocoReport, dependsOn: \"testDebugUnitTest\") {\n+                    group = \"Reporting\"\n+                    description = \"Generate Jacoco coverage reports\"\n+                    def fileFilter = ['**/R.class', '**/R$*.class',\n+                                      '**/BuildConfig.*', '**/Manifest*.*',\n+                                      'android/**/*.*']\n+                    def debugTree = fileTree(dir:\n+                            \"${project.buildDir}/intermediates/classes/debug\",\n+                            excludes: fileFilter)\n+                    def mainSrc = \"${project.projectDir}/src/main/java\"\n+\n+                    sourceDirectories = files([mainSrc])\n+                    classDirectories = files([debugTree])\n+                    additionalSourceDirs = files([\n+                            \"${buildDir}/generated/source/buildConfig/debug\",\n+                            \"${buildDir}/generated/source/r/debug\"\n+                    ])\n+                    executionData = fileTree(dir: project.projectDir, includes:\n+                            ['**/*.exec', '**/*.ec'])\n+\n+                    reports {\n+                        xml.enabled = true\n+                        xml.destination = \"${buildDir}/jacocoTestReport.xml\"\n+                        csv.enabled = false\n+                        html.enabled = true\n+                        html.destination = \"${buildDir}/reports/jacoco\"\n+                    }\n+                }\n+                android.libraryVariants.all { variant ->\n+                    task(\"${variant.name}Javadoc\", type: Javadoc) {\n+                        description \"Generates Javadoc for $variant.name.\"\n+                        source = variant.javaCompile.source\n+                        classpath = files(variant.javaCompile.classpath.files,\n+                                project.android.getBootClasspath())\n+                        exclude '**/BuildConfig.java'\n+                        exclude '**/R.java'\n+                    }\n+                }\n+                task javadocJar(type: Jar, dependsOn: 'releaseJavadoc') {\n+                    classifier = 'javadoc'\n+                    from {\n+                        releaseJavadoc.destinationDir\n+                    }\n+                }\n+                artifacts {\n+                    archives javadocJar\n+                    archives sourcesJar\n+                }\n+            }\n+        }\n+    }\n+}"},{"sha":"e5ac5449702eca8933a6c0d8e4e4707ae75e03b9","filename":"testapp/build.gradle","status":"added","additions":56,"deletions":0,"changes":56,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/testapp/build.gradle","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/testapp/build.gradle","contents_url":"https://api.github.com/repos/google/agera/contents/testapp/build.gradle?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+apply plugin: 'com.android.application'\n+apply plugin: 'com.getkeepsafe.dexcount'\n+\n+android {\n+    defaultConfig {\n+        applicationId \"com.google.android.agera.testapp\"\n+        testInstrumentationRunner \"android.support.test.runner.AndroidJUnitRunner\"\n+    }\n+    lintOptions {\n+        abortOnError false\n+        textReport true\n+        textOutput 'stdout'\n+        checkAllWarnings true\n+        warningsAsErrors false\n+    }\n+}\n+dexcount {\n+    includeClasses = false\n+    includeFieldCount = true\n+    includeTotalMethodCount = true\n+    printAsTree = true\n+    orderByMethodCount = false\n+}\n+dependencies {\n+    compile project(':agera')\n+    compile project(':extensions:content')\n+    compile project(':extensions:database')\n+    compile project(':extensions:net')\n+    compile project(':extensions:rvadapter')\n+    compile \"com.android.support:recyclerview-v7:$gradle.supportLibraryVersion\"\n+    testCompile \"org.hamcrest:hamcrest-library:1.3\"\n+    testCompile 'junit:junit:4.12'\n+    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.1'\n+    androidTestCompile 'com.android.support.test:runner:0.4.1'\n+    androidTestCompile 'com.android.support.test:rules:0.4.1'\n+    androidTestCompile 'com.android.support:support-annotations:' + gradle.supportLibraryVersion\n+}\n+\n+configurations.all {\n+    resolutionStrategy.force \"com.android.support:support-annotations:$gradle.supportLibraryVersion\"\n+}"},{"sha":"1fb82bc33add0d1e722c476267bb8eea73fe105a","filename":"testapp/src/androidTest/java/com/google/android/agera/testapp/NotesActivityTest.java","status":"added","additions":58,"deletions":0,"changes":58,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/testapp/src/androidTest/java/com/google/android/agera/testapp/NotesActivityTest.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/testapp/src/androidTest/java/com/google/android/agera/testapp/NotesActivityTest.java","contents_url":"https://api.github.com/repos/google/agera/contents/testapp/src/androidTest/java/com/google/android/agera/testapp/NotesActivityTest.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,58 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera.testapp;\n+\n+import static android.support.test.espresso.Espresso.onView;\n+import static android.support.test.espresso.action.ViewActions.clearText;\n+import static android.support.test.espresso.action.ViewActions.click;\n+import static android.support.test.espresso.action.ViewActions.longClick;\n+import static android.support.test.espresso.action.ViewActions.typeText;\n+import static android.support.test.espresso.matcher.RootMatchers.isDialog;\n+import static android.support.test.espresso.matcher.ViewMatchers.withId;\n+import static android.support.test.espresso.matcher.ViewMatchers.withText;\n+\n+import android.support.test.rule.ActivityTestRule;\n+import android.support.test.runner.AndroidJUnit4;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+@RunWith(AndroidJUnit4.class)\n+public class NotesActivityTest {\n+  @Rule\n+  public ActivityTestRule<NotesActivity> activityRule = new ActivityTestRule<>(NotesActivity.class);\n+  public static final String FIRST_TEXT = \"First Text\";\n+  public static final String SECOND_TEXT = \"Second Text\";\n+  public static final String THIRD_TEXT = \"Third Text\";\n+\n+  @Test\n+  public void sanityTest() {\n+    onView(withId(R.id.clear)).perform(click());\n+    onView(withId(R.id.add)).perform(click());\n+    onView(withId(R.id.edit)).perform(clearText(), typeText(FIRST_TEXT));\n+    onView(withText(R.string.add)).inRoot(isDialog()).perform(click());\n+    onView(withId(R.id.add)).perform(click());\n+    onView(withId(R.id.edit)).perform(clearText(), typeText(SECOND_TEXT));\n+    onView(withText(R.string.add)).inRoot(isDialog()).perform(click());\n+    onView(withText(FIRST_TEXT)).perform(click());\n+    onView(withId(R.id.edit)).perform(clearText(), typeText(THIRD_TEXT));\n+    onView(withText(R.string.edit)).inRoot(isDialog()).perform(click());\n+    onView(withText(SECOND_TEXT)).perform(longClick());\n+    onView(withText(THIRD_TEXT)).perform(longClick());\n+    onView(withId(R.id.clear)).perform(click());\n+  }\n+}\n\\ No newline at end of file"},{"sha":"61e29085d51d7a6d7055348e92f12440c46b2cc3","filename":"testapp/src/main/AndroidManifest.xml","status":"added","additions":30,"deletions":0,"changes":30,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/testapp/src/main/AndroidManifest.xml","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/testapp/src/main/AndroidManifest.xml","contents_url":"https://api.github.com/repos/google/agera/contents/testapp/src/main/AndroidManifest.xml?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,30 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<!--\n+  ~ Copyright 2015 Google Inc. All Rights Reserved.\n+  ~\n+  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n+  ~ you may not use this file except in compliance with the License.\n+  ~ You may obtain a copy of the License at\n+  ~\n+  ~     http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n+    package=\"com.google.android.agera.testapp\">\n+  <uses-permission android:name=\"android.permission.INTERNET\" />\n+  <application>\n+    <activity android:name=\"com.google.android.agera.testapp.NotesActivity\"\n+        android:label=\"@string/agera\"\n+        android:theme=\"@android:style/Theme.Material.Light\">\n+      <intent-filter>\n+        <action android:name=\"android.intent.action.MAIN\"/>\n+        <category android:name=\"android.intent.category.LAUNCHER\"/>\n+      </intent-filter>\n+    </activity>\n+  </application>\n+</manifest>"},{"sha":"044a79ac1dbd86fd069e9a89fbf76251528745dd","filename":"testapp/src/main/java/com/google/android/agera/testapp/Note.java","status":"added","additions":56,"deletions":0,"changes":56,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/testapp/src/main/java/com/google/android/agera/testapp/Note.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/testapp/src/main/java/com/google/android/agera/testapp/Note.java","contents_url":"https://api.github.com/repos/google/agera/contents/testapp/src/main/java/com/google/android/agera/testapp/Note.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera.testapp;\n+\n+import android.support.annotation.NonNull;\n+\n+final class Note {\n+  private final int id;\n+  @NonNull\n+  private final String note;\n+\n+  private Note(final int id, @NonNull final String note) {\n+    this.id = id;\n+    this.note = note;\n+  }\n+\n+  @NonNull\n+  public static Note note(final int id, @NonNull final String note) {\n+    return new Note(id, note);\n+  }\n+\n+  public int getId() {\n+    return id;\n+  }\n+\n+  @NonNull\n+  public String getNote() {\n+    return note;\n+  }\n+\n+  @Override\n+  public boolean equals(final Object o) {\n+    if (this == o) return true;\n+    if (o == null || getClass() != o.getClass()) return false;\n+    final Note note1 = (Note) o;\n+    return id == note1.id && note.equals(note1.note);\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return 31 * id + note.hashCode();\n+  }\n+}"},{"sha":"4d34843b5d6a5832f25d07f4ead3a75082d03142","filename":"testapp/src/main/java/com/google/android/agera/testapp/NotesActivity.java","status":"added","additions":271,"deletions":0,"changes":271,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/testapp/src/main/java/com/google/android/agera/testapp/NotesActivity.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/testapp/src/main/java/com/google/android/agera/testapp/NotesActivity.java","contents_url":"https://api.github.com/repos/google/agera/contents/testapp/src/main/java/com/google/android/agera/testapp/NotesActivity.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,271 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera.testapp;\n+\n+import static android.graphics.BitmapFactory.decodeByteArray;\n+import static android.os.StrictMode.ThreadPolicy;\n+import static android.os.StrictMode.VmPolicy;\n+import static android.os.StrictMode.setThreadPolicy;\n+import static android.os.StrictMode.setVmPolicy;\n+import static com.google.android.agera.Repositories.repositoryWithInitialValue;\n+import static com.google.android.agera.RepositoryConfig.SEND_INTERRUPT;\n+import static com.google.android.agera.Result.absentIfNull;\n+import static com.google.android.agera.Suppliers.staticSupplier;\n+import static com.google.android.agera.net.HttpFunctions.httpFunction;\n+import static com.google.android.agera.net.HttpRequests.httpGetRequest;\n+import static com.google.android.agera.rvadapter.RepositoryAdapter.repositoryAdapter;\n+import static com.google.android.agera.testapp.NotesStore.notesStore;\n+import static java.util.concurrent.Executors.newSingleThreadExecutor;\n+\n+import com.google.android.agera.Function;\n+import com.google.android.agera.Merger;\n+import com.google.android.agera.Receiver;\n+import com.google.android.agera.Repository;\n+import com.google.android.agera.Result;\n+import com.google.android.agera.Supplier;\n+import com.google.android.agera.Updatable;\n+import com.google.android.agera.net.HttpRequest;\n+import com.google.android.agera.net.HttpResponse;\n+import com.google.android.agera.rvadapter.RepositoryAdapter;\n+import com.google.android.agera.rvadapter.RepositoryPresenter;\n+\n+import android.app.Activity;\n+import android.app.AlertDialog;\n+import android.app.AlertDialog.Builder;\n+import android.content.DialogInterface;\n+import android.content.DialogInterface.OnClickListener;\n+import android.graphics.Bitmap;\n+import android.os.Bundle;\n+import android.support.annotation.NonNull;\n+import android.support.v7.widget.LinearLayoutManager;\n+import android.support.v7.widget.RecyclerView;\n+import android.util.DisplayMetrics;\n+import android.view.View;\n+import android.view.View.OnLongClickListener;\n+import android.widget.EditText;\n+import android.widget.ImageView;\n+import android.widget.TextView;\n+\n+import java.util.List;\n+import java.util.concurrent.ExecutorService;\n+\n+public final class NotesActivity extends Activity implements Updatable {\n+  public static final UrlToHttpRequest URL_TO_HTTP_REQUEST = new UrlToHttpRequest();\n+  public static final HttpResponseToBitmap HTTP_RESPONSE_TO_BITMAP = new HttpResponseToBitmap();\n+  private static final String BACKGROUND_URL =\n+      \"http://www.gravatar.com/avatar/4df6f4fe5976df17deeea19443d4429d\";\n+  private RepositoryAdapter adapter;\n+  private NotesStore notesStore;\n+  private Repository<Result<Bitmap>> backgroundRepository;\n+  private ExecutorService networkExecutor;\n+  private ExecutorService calculationExecutor;\n+  private Receiver<Bitmap> setBackgroundReceiver;\n+\n+  @Override\n+  protected void onCreate(final Bundle savedInstanceState) {\n+    super.onCreate(savedInstanceState);\n+    setContentView(R.layout.notes_activity);\n+\n+    // Setup strict mode, no violations using Agera\n+    setThreadPolicy(new ThreadPolicy.Builder().detectAll().penaltyLog().penaltyDeath().build());\n+    setVmPolicy(new VmPolicy.Builder().detectAll().penaltyLog().penaltyDeath().build());\n+\n+    // Create the notes store, containing all async IO\n+    notesStore = notesStore(getApplicationContext());\n+\n+    // Find the clear button and wire the click listener to call the clear notes updatable\n+    findViewById(R.id.clear).setOnClickListener(new View.OnClickListener() {\n+      @Override\n+      public void onClick(final View view) {\n+        notesStore.clearNotes();\n+      }\n+    });\n+\n+    // Find the add button and wire the click listener to show a dialog that in turn calls the add\n+    // note from text from the notes store when adding notes\n+    findViewById(R.id.add).setOnClickListener(new View.OnClickListener() {\n+      @Override\n+      public void onClick(@NonNull final View view) {\n+        final EditText editText = new EditText(view.getContext());\n+        editText.setId(R.id.edit);\n+        new AlertDialog.Builder(view.getContext())\n+            .setTitle(R.string.add_note)\n+            .setView(editText)\n+            .setPositiveButton(R.string.add, new OnClickListener() {\n+              @Override\n+              public void onClick(@NonNull final DialogInterface dialogInterface, final int i) {\n+                notesStore.insertNoteFromText(editText.getText().toString());\n+              }\n+            })\n+            .create().show();\n+      }\n+    });\n+\n+    // Create a repository adapter, wiring up the notes repository from the store with a presenter\n+    adapter = repositoryAdapter()\n+        .add(notesStore.getNotesRepository(), new NotePresenter())\n+        .build();\n+\n+    // Setup the recycler view using the repository adapter\n+    final RecyclerView recyclerView = (RecyclerView) findViewById(R.id.result);\n+    recyclerView.setAdapter(adapter);\n+    recyclerView.setLayoutManager(new LinearLayoutManager(this));\n+\n+    networkExecutor = newSingleThreadExecutor();\n+    calculationExecutor = newSingleThreadExecutor();\n+\n+    setBackgroundReceiver = new ImageViewBitmapReceiver((ImageView) findViewById(R.id.background));\n+\n+    final Supplier<Integer> sizeSupplier = new Supplier<Integer>() {\n+      @NonNull\n+      @Override\n+      public Integer get() {\n+        final DisplayMetrics displayMetrics = getResources().getDisplayMetrics();\n+        return Math.max(displayMetrics.heightPixels, displayMetrics.widthPixels);\n+      }\n+    };\n+\n+    final Merger<Integer, String, String> sizedUrlMerger = new Merger<Integer, String, String>() {\n+      @NonNull\n+      @Override\n+      public String merge(@NonNull final Integer integer, @NonNull final String s) {\n+        return s + \"?s=\" + integer;\n+      }\n+    };\n+\n+    final Supplier<String> backgroundUrlSupplier = staticSupplier(BACKGROUND_URL);\n+\n+    backgroundRepository = repositoryWithInitialValue(Result.<Bitmap>absent())\n+        .observe()\n+        .onUpdatesPerLoop()\n+        .getFrom(sizeSupplier)\n+        .goTo(networkExecutor)\n+        .mergeIn(backgroundUrlSupplier, sizedUrlMerger)\n+        .transform(URL_TO_HTTP_REQUEST)\n+        .attemptTransform(httpFunction()).orSkip()\n+        .goTo(calculationExecutor)\n+        .thenTransform(HTTP_RESPONSE_TO_BITMAP)\n+        .onDeactivation(SEND_INTERRUPT)\n+        .compile();\n+  }\n+\n+  @Override\n+  protected void onResume() {\n+    super.onResume();\n+    // The adapter is dormant before start observing is called\n+    adapter.startObserving();\n+    backgroundRepository.addUpdatable(this);\n+  }\n+\n+  @Override\n+  protected void onPause() {\n+    super.onPause();\n+    // Start observing needs to be paired with stop observing\n+    adapter.stopObserving();\n+    backgroundRepository.removeUpdatable(this);\n+  }\n+\n+  @Override\n+  protected void onDestroy() {\n+    super.onDestroy();\n+    // Close the notes store and the associated database\n+    networkExecutor.shutdown();\n+    calculationExecutor.shutdown();\n+  }\n+\n+  @Override\n+  public void update() {\n+    backgroundRepository.get().ifSucceededSendTo(setBackgroundReceiver);\n+  }\n+\n+  private static final class UrlToHttpRequest implements Function<String, HttpRequest> {\n+    @NonNull\n+    @Override\n+    public HttpRequest apply(@NonNull final String input) {\n+      return httpGetRequest(input).compile();\n+    }\n+  }\n+\n+  private static final class HttpResponseToBitmap\n+      implements Function<HttpResponse, Result<Bitmap>> {\n+    @NonNull\n+    @Override\n+    public Result<Bitmap> apply(@NonNull final HttpResponse input) {\n+      final byte[] body = input.getBody();\n+      return absentIfNull(decodeByteArray(body, 0, body.length));\n+    }\n+  }\n+\n+  private static class ImageViewBitmapReceiver implements Receiver<Bitmap> {\n+    @NonNull\n+    private final ImageView imageView;\n+\n+    public ImageViewBitmapReceiver(@NonNull final ImageView imageView) {\n+      this.imageView = imageView;\n+    }\n+\n+    @Override\n+    public void accept(@NonNull final Bitmap value) {\n+      imageView.setImageBitmap(value);\n+    }\n+  }\n+\n+  // Presents each note in the repository as a text view in the recycler view\n+  private final class NotePresenter extends RepositoryPresenter<List<Note>> {\n+    @Override\n+    public int getItemCount(@NonNull final List<Note> notes) {\n+      return notes.size();\n+    }\n+\n+    @Override\n+    public int getLayoutResId(@NonNull final List<Note> notes, final int index) {\n+      return R.layout.text_layout;\n+    }\n+\n+    @Override\n+    public void bind(@NonNull final List<Note> notes, final int index,\n+        @NonNull final RecyclerView.ViewHolder holder) {\n+      final Note note = notes.get(index);\n+      TextView view = (TextView) holder.itemView;\n+      view.setText(note.getNote());\n+      view.setOnClickListener(new View.OnClickListener() {\n+        @Override\n+        public void onClick(final View view) {\n+          final EditText editText = new EditText(view.getContext());\n+          editText.setId(R.id.edit);\n+          editText.setText(note.getNote());\n+          new Builder(view.getContext())\n+              .setTitle(R.string.edit_note)\n+              .setView(editText)\n+              .setPositiveButton(R.string.edit, new OnClickListener() {\n+                @Override\n+                public void onClick(@NonNull final DialogInterface dialogInterface, final int i) {\n+                  notesStore.updateNote(note, editText.getText().toString());\n+                }\n+              })\n+              .create().show();\n+        }\n+      });\n+      view.setOnLongClickListener(new OnLongClickListener() {\n+        @Override\n+        public boolean onLongClick(final View view) {\n+          notesStore.deleteNote(note);\n+          return true;\n+        }\n+      });\n+    }\n+  }\n+}\n\\ No newline at end of file"},{"sha":"d7510acbde85f0bc56c375611a0ff99b3e8ac215","filename":"testapp/src/main/java/com/google/android/agera/testapp/NotesSqlDatabaseSupplier.java","status":"added","additions":50,"deletions":0,"changes":50,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/testapp/src/main/java/com/google/android/agera/testapp/NotesSqlDatabaseSupplier.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/testapp/src/main/java/com/google/android/agera/testapp/NotesSqlDatabaseSupplier.java","contents_url":"https://api.github.com/repos/google/agera/contents/testapp/src/main/java/com/google/android/agera/testapp/NotesSqlDatabaseSupplier.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera.testapp;\n+\n+import com.google.android.agera.database.SqlDatabaseSupplier;\n+\n+import android.content.Context;\n+import android.database.sqlite.SQLiteDatabase;\n+import android.support.annotation.NonNull;\n+\n+final class NotesSqlDatabaseSupplier extends SqlDatabaseSupplier {\n+  static final String NOTES_NOTE_COLUMN = \"note\";\n+  static final String NOTES_NOTE_ID_COLUMN = \"id\";\n+  static final String NOTES_TABLE = \"notes\";\n+  private static final String CREATE_TABLE = \"CREATE TABLE IF NOT EXISTS \" + NOTES_TABLE\n+      + \" (\" + NOTES_NOTE_ID_COLUMN + \" INTEGER PRIMARY KEY AUTOINCREMENT, \"\n+      + NOTES_NOTE_COLUMN + \" VARCHAR(255));\";\n+  private static final String DATABASE_NAME = \"NotesDatabase\";\n+  private static final int VERSION = 1;\n+\n+  private NotesSqlDatabaseSupplier(@NonNull final Context context) {\n+    super(context, DATABASE_NAME, null, VERSION);\n+  }\n+\n+  @NonNull\n+  public static NotesSqlDatabaseSupplier databaseSupplier(@NonNull final Context context) {\n+    return new NotesSqlDatabaseSupplier(context);\n+  }\n+\n+  @Override\n+  public void onCreate(@NonNull final SQLiteDatabase sqLiteDatabase) {\n+    sqLiteDatabase.execSQL(CREATE_TABLE);\n+  }\n+\n+  @Override\n+  public void onUpgrade(@NonNull final SQLiteDatabase sqLiteDatabase, final int i, final int i1) {}\n+}"},{"sha":"9dcb49bcb9f718a755e74bb9d64c220fe82b535f","filename":"testapp/src/main/java/com/google/android/agera/testapp/NotesStore.java","status":"added","additions":219,"deletions":0,"changes":219,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/testapp/src/main/java/com/google/android/agera/testapp/NotesStore.java","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/testapp/src/main/java/com/google/android/agera/testapp/NotesStore.java","contents_url":"https://api.github.com/repos/google/agera/contents/testapp/src/main/java/com/google/android/agera/testapp/NotesStore.java?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,219 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera.testapp;\n+\n+import static com.google.android.agera.Functions.staticFunction;\n+import static com.google.android.agera.Mergers.staticMerger;\n+import static com.google.android.agera.Repositories.repositoryWithInitialValue;\n+import static com.google.android.agera.RepositoryConfig.SEND_INTERRUPT;\n+import static com.google.android.agera.Reservoirs.reservoir;\n+import static com.google.android.agera.Result.failure;\n+import static com.google.android.agera.Suppliers.staticSupplier;\n+import static com.google.android.agera.database.SqlDatabaseFunctions.databaseDeleteFunction;\n+import static com.google.android.agera.database.SqlDatabaseFunctions.databaseInsertFunction;\n+import static com.google.android.agera.database.SqlDatabaseFunctions.databaseQueryFunction;\n+import static com.google.android.agera.database.SqlDatabaseFunctions.databaseUpdateFunction;\n+import static com.google.android.agera.database.SqlRequests.sqlDeleteRequest;\n+import static com.google.android.agera.database.SqlRequests.sqlInsertRequest;\n+import static com.google.android.agera.database.SqlRequests.sqlRequest;\n+import static com.google.android.agera.database.SqlRequests.sqlUpdateRequest;\n+import static com.google.android.agera.testapp.Note.note;\n+import static com.google.android.agera.testapp.NotesSqlDatabaseSupplier.NOTES_NOTE_COLUMN;\n+import static com.google.android.agera.testapp.NotesSqlDatabaseSupplier.NOTES_NOTE_ID_COLUMN;\n+import static com.google.android.agera.testapp.NotesSqlDatabaseSupplier.NOTES_TABLE;\n+import static com.google.android.agera.testapp.NotesSqlDatabaseSupplier.databaseSupplier;\n+import static java.util.Collections.emptyList;\n+import static java.util.concurrent.Executors.newSingleThreadExecutor;\n+\n+import com.google.android.agera.Function;\n+import com.google.android.agera.Merger;\n+import com.google.android.agera.Observable;\n+import com.google.android.agera.Receiver;\n+import com.google.android.agera.Repository;\n+import com.google.android.agera.Reservoir;\n+import com.google.android.agera.Result;\n+import com.google.android.agera.Supplier;\n+import com.google.android.agera.Updatable;\n+import com.google.android.agera.database.SqlDeleteRequest;\n+import com.google.android.agera.database.SqlInsertRequest;\n+import com.google.android.agera.database.SqlRequest;\n+import com.google.android.agera.database.SqlUpdateRequest;\n+\n+import android.content.Context;\n+import android.database.Cursor;\n+import android.support.annotation.NonNull;\n+\n+import java.util.List;\n+import java.util.concurrent.Executor;\n+\n+/**\n+ * Encapsulates all database interactions for {@link Note}s. Getting a list of all notes is\n+ * implemented with a {@link #getNotesRepository()} Repository} that can be activated by and\n+ * observed from the Activity. Write operations are implemented using a {@link Reservoir} and a\n+ * reacting repository.\n+ */\n+final class NotesStore {\n+  private static final String MODIFY_NOTE_WHERE = NOTES_NOTE_ID_COLUMN + \"=?\";\n+  private static final String GET_NOTES_FROM_TABLE =\n+      \"SELECT \" + NOTES_NOTE_ID_COLUMN + \", \" + NOTES_NOTE_COLUMN + \" FROM \" + NOTES_TABLE\n+          + \" ORDER BY \" + NOTES_NOTE_ID_COLUMN;\n+  private static final int ID_COLUMN_INDEX = 0;\n+  private static final int NOTE_COLUMN_INDEX = 1;\n+  private static final List<Note> INITIAL_VALUE = emptyList();\n+\n+  private static NotesStore notesStore;\n+\n+  @NonNull\n+  private final Receiver<Object> writeRequestReceiver;\n+  @NonNull\n+  private final Repository<List<Note>> notesRepository;\n+\n+  private NotesStore(@NonNull final Repository<List<Note>> notesRepository,\n+      @NonNull final Receiver<Object> writeRequestReceiver) {\n+    this.writeRequestReceiver = writeRequestReceiver;\n+    this.notesRepository = notesRepository;\n+  }\n+\n+  @NonNull\n+  public synchronized static NotesStore notesStore(@NonNull final Context applicationContext) {\n+    if (notesStore != null) {\n+      return notesStore;\n+    }\n+    // Create a thread executor to execute all database operations on.\n+    final Executor executor = newSingleThreadExecutor();\n+\n+    // Create a database supplier that initializes the database. This is also used to supply the\n+    // database in all database operations.\n+    final NotesSqlDatabaseSupplier databaseSupplier = databaseSupplier(applicationContext);\n+\n+    // Create a function that processes database write operations.\n+    final Function<SqlInsertRequest, Result<Long>> insertNoteFunction =\n+        databaseInsertFunction(databaseSupplier);\n+    final Function<SqlUpdateRequest, Result<Integer>> updateNoteFunction =\n+        databaseUpdateFunction(databaseSupplier);\n+    final Function<SqlDeleteRequest, Result<Integer>> deleteNoteFunction =\n+        databaseDeleteFunction(databaseSupplier);\n+    final Function<Object, Result<? extends Number>> writeOperation =\n+        new Function<Object, Result<? extends Number>>() {\n+          @NonNull\n+          @Override\n+          public Result<? extends Number> apply(@NonNull Object input) {\n+            if (input instanceof SqlInsertRequest) {\n+              return insertNoteFunction.apply((SqlInsertRequest) input);\n+            }\n+            if (input instanceof SqlUpdateRequest) {\n+              return updateNoteFunction.apply((SqlUpdateRequest) input);\n+            }\n+            if (input instanceof SqlDeleteRequest) {\n+              return deleteNoteFunction.apply((SqlDeleteRequest) input);\n+            }\n+            return failure();\n+          }\n+        };\n+\n+    // Create a reservoir of database write requests. This will be used as the receiver of write\n+    // requests submitted to the NotesStore, and the event/data source of the reacting repository.\n+    final Reservoir<Object> writeRequestReservoir = reservoir();\n+\n+    // Create a reacting repository that processes all write requests. The value of the repository\n+    // is unimportant, but it must be able to notify the notes repository on completing each write\n+    // operation. The database thread executor is single-threaded to optimize for disk I/O, but if\n+    // the executor can be multi-threaded, then this is the ideal place to multiply the reacting\n+    // repository to achieve parallelism. The notes repository should observe all these instances.\n+    final Number unimportantValue = 0;\n+    final Merger<Number, Number, Boolean> alwaysNotify = staticMerger(true);\n+    final Observable writeReaction = repositoryWithInitialValue(unimportantValue)\n+        .observe(writeRequestReservoir)\n+        .onUpdatesPerLoop()\n+        .goTo(executor)\n+        .attemptGetFrom(writeRequestReservoir).orSkip()\n+        .thenAttemptTransform(writeOperation).orSkip()\n+        .notifyIf(alwaysNotify)\n+        .compile();\n+\n+    // Keep the reacting repository in this lazy singleton activated for the full app life cycle.\n+    // This is optional -- it allows the write requests submitted when the notes repository is not\n+    // active to still be processed asap.\n+    final Updatable dummyUpdatable = new Updatable() {\n+      @Override\n+      public void update() {}\n+    };\n+    writeReaction.addUpdatable(dummyUpdatable);\n+\n+    // Create a function to map each data row to a Note.\n+    final Function<Cursor, Note> cursorToNote = new Function<Cursor, Note>() {\n+      @NonNull\n+      @Override\n+      public Note apply(@NonNull final Cursor cursor) {\n+        return note(cursor.getInt(ID_COLUMN_INDEX), cursor.getString(NOTE_COLUMN_INDEX));\n+      }\n+    };\n+\n+    // Create the repository of notes, wire it up to update on each database write, set it to fetch\n+    // notes from the database on the database thread executor.\n+    final Supplier<SqlRequest> getNotesQuerySupplier =\n+        staticSupplier(sqlRequest().sql(GET_NOTES_FROM_TABLE).compile());\n+    final Repository<List<Note>> notesRepository = repositoryWithInitialValue(INITIAL_VALUE)\n+        .observe(writeReaction)\n+        .onUpdatesPerLoop()\n+        .goTo(executor)\n+        .getFrom(getNotesQuerySupplier)\n+        .thenAttemptTransform(databaseQueryFunction(databaseSupplier, cursorToNote))\n+        .orEnd(staticFunction(INITIAL_VALUE))\n+        .onConcurrentUpdate(SEND_INTERRUPT)\n+        .onDeactivation(SEND_INTERRUPT)\n+        .compile();\n+\n+    // Create the wired up notes store\n+    notesStore = new NotesStore(notesRepository, writeRequestReservoir);\n+    return notesStore;\n+  }\n+\n+  @NonNull\n+  public Repository<List<Note>> getNotesRepository() {\n+    return notesRepository;\n+  }\n+\n+  public void insertNoteFromText(@NonNull final String noteText) {\n+    writeRequestReceiver.accept(sqlInsertRequest()\n+        .table(NOTES_TABLE)\n+        .column(NOTES_NOTE_COLUMN, noteText)\n+        .compile());\n+  }\n+\n+  public void deleteNote(@NonNull final Note note) {\n+    writeRequestReceiver.accept(sqlDeleteRequest()\n+        .table(NOTES_TABLE)\n+        .where(MODIFY_NOTE_WHERE)\n+        .arguments(String.valueOf(note.getId()))\n+        .compile());\n+  }\n+\n+  public void updateNote(@NonNull final Note note, @NonNull final String noteText) {\n+    writeRequestReceiver.accept(sqlUpdateRequest()\n+        .table(NOTES_TABLE)\n+        .column(NOTES_NOTE_COLUMN, noteText)\n+        .where(MODIFY_NOTE_WHERE)\n+        .arguments(String.valueOf(note.getId()))\n+        .compile());\n+  }\n+\n+  public void clearNotes() {\n+    writeRequestReceiver.accept(sqlDeleteRequest()\n+        .table(NOTES_TABLE)\n+        .compile());\n+  }\n+}"},{"sha":"c98607fdff2ee215816ad89405aaf76d9ca593bd","filename":"testapp/src/main/res/layout/notes_activity.xml","status":"added","additions":48,"deletions":0,"changes":48,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/testapp/src/main/res/layout/notes_activity.xml","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/testapp/src/main/res/layout/notes_activity.xml","contents_url":"https://api.github.com/repos/google/agera/contents/testapp/src/main/res/layout/notes_activity.xml?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,48 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<!--\n+  ~ Copyright 2015 Google Inc. All Rights Reserved.\n+  ~\n+  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n+  ~ you may not use this file except in compliance with the License.\n+  ~ You may obtain a copy of the License at\n+  ~\n+  ~     http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+<FrameLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n+    android:layout_width=\"match_parent\"\n+    android:layout_height=\"match_parent\">\n+  <ImageView\n+      android:id=\"@+id/background\"\n+      android:layout_width=\"match_parent\"\n+      android:layout_height=\"match_parent\"\n+      android:background=\"@android:color/white\"/>\n+  <android.support.v7.widget.RecyclerView\n+      android:id=\"@+id/result\"\n+      android:layout_width=\"match_parent\"\n+      android:layout_height=\"match_parent\"/>\n+  <LinearLayout\n+      android:layout_width=\"match_parent\"\n+      android:layout_height=\"wrap_content\"\n+      android:layout_gravity=\"bottom\"\n+      android:weightSum=\"4\"\n+      android:orientation=\"horizontal\">\n+    <Button\n+        android:id=\"@+id/add\"\n+        android:layout_width=\"0dp\"\n+        android:layout_height=\"wrap_content\"\n+        android:layout_weight=\"1\"\n+        android:text=\"@string/add\"/>\n+    <Button\n+        android:id=\"@+id/clear\"\n+        android:layout_width=\"0dp\"\n+        android:layout_height=\"wrap_content\"\n+        android:layout_weight=\"1\"\n+        android:text=\"@string/clear\"/>\n+  </LinearLayout>\n+</FrameLayout>\n\\ No newline at end of file"},{"sha":"35a09bca0518ce886d6fa200227e01b5db9aad5c","filename":"testapp/src/main/res/layout/text_layout.xml","status":"added","additions":26,"deletions":0,"changes":26,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/testapp/src/main/res/layout/text_layout.xml","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/testapp/src/main/res/layout/text_layout.xml","contents_url":"https://api.github.com/repos/google/agera/contents/testapp/src/main/res/layout/text_layout.xml?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,26 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<!--\n+  ~ Copyright 2015 Google Inc. All Rights Reserved.\n+  ~\n+  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n+  ~ you may not use this file except in compliance with the License.\n+  ~ You may obtain a copy of the License at\n+  ~\n+  ~     http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+<TextView xmlns:android=\"http://schemas.android.com/apk/res/android\"\n+    android:layout_width=\"match_parent\"\n+    android:layout_height=\"wrap_content\"\n+    android:layout_marginLeft=\"10dp\"\n+    android:layout_marginRight=\"10dp\"\n+    android:layout_marginTop=\"10dp\"\n+    android:padding=\"8dp\"\n+    android:background=\"#F7E4EE\"\n+    android:elevation=\"2dp\"\n+    android:textSize=\"20sp\"/>"},{"sha":"8ddf710a003536ffa8da7f946d02f91f4164cbaf","filename":"testapp/src/main/res/values/strings.xml","status":"added","additions":24,"deletions":0,"changes":24,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/testapp/src/main/res/values/strings.xml","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/testapp/src/main/res/values/strings.xml","contents_url":"https://api.github.com/repos/google/agera/contents/testapp/src/main/res/values/strings.xml?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,24 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<!--\n+  ~ Copyright 2015 Google Inc. All Rights Reserved.\n+  ~\n+  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n+  ~ you may not use this file except in compliance with the License.\n+  ~ You may obtain a copy of the License at\n+  ~\n+  ~     http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+<resources>\n+  <string name=\"agera\">Agera Notes</string>\n+  <string name=\"add_note\">Add Note</string>\n+  <string name=\"add\">Add</string>\n+  <string name=\"clear\">Clear</string>\n+  <string name=\"edit\">Edit</string>\n+  <string name=\"edit_note\">Edit Note</string>\n+</resources>\n\\ No newline at end of file"},{"sha":"0c9a59cf3aa5e7bc8281adb27b7cd91ea53a3e4d","filename":"testapp/src/main/res/values/values.xml","status":"added","additions":19,"deletions":0,"changes":19,"blob_url":"https://github.com/google/agera/blob/c648301e6e219c3673ef2c4180a4e3d202710523/testapp/src/main/res/values/values.xml","raw_url":"https://github.com/google/agera/raw/c648301e6e219c3673ef2c4180a4e3d202710523/testapp/src/main/res/values/values.xml","contents_url":"https://api.github.com/repos/google/agera/contents/testapp/src/main/res/values/values.xml?ref=c648301e6e219c3673ef2c4180a4e3d202710523","patch":"@@ -0,0 +1,19 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<!--\n+  ~ Copyright 2015 Google Inc. All Rights Reserved.\n+  ~\n+  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n+  ~ you may not use this file except in compliance with the License.\n+  ~ You may obtain a copy of the License at\n+  ~\n+  ~     http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+<resources>\n+    <item name=\"edit\" type=\"id\"/>\n+</resources>\n\\ No newline at end of file"}]}