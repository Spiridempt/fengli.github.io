{"sha":"42c7440a3851c594d19316f45f45b3c21a2d0ece","commit":{"author":{"name":"Magnus Ernstsson","email":"magnus@ernstsson.net","date":"2016-05-15T10:31:42Z"},"committer":{"name":"Magnus Ernstsson","email":"magnus@ernstsson.net","date":"2016-05-15T10:31:42Z"},"message":"Added a few more corner case tests to core","tree":{"sha":"ac88a1f1735fb232ce74e99b1c53154e4e5533d7","url":"https://api.github.com/repos/google/agera/git/trees/ac88a1f1735fb232ce74e99b1c53154e4e5533d7"},"url":"https://api.github.com/repos/google/agera/git/commits/42c7440a3851c594d19316f45f45b3c21a2d0ece","comment_count":0},"url":"https://api.github.com/repos/google/agera/commits/42c7440a3851c594d19316f45f45b3c21a2d0ece","html_url":"https://github.com/google/agera/commit/42c7440a3851c594d19316f45f45b3c21a2d0ece","comments_url":"https://api.github.com/repos/google/agera/commits/42c7440a3851c594d19316f45f45b3c21a2d0ece/comments","author":{"login":"ernstsson","id":378389,"avatar_url":"https://avatars2.githubusercontent.com/u/378389?v=3","gravatar_id":"","url":"https://api.github.com/users/ernstsson","html_url":"https://github.com/ernstsson","followers_url":"https://api.github.com/users/ernstsson/followers","following_url":"https://api.github.com/users/ernstsson/following{/other_user}","gists_url":"https://api.github.com/users/ernstsson/gists{/gist_id}","starred_url":"https://api.github.com/users/ernstsson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ernstsson/subscriptions","organizations_url":"https://api.github.com/users/ernstsson/orgs","repos_url":"https://api.github.com/users/ernstsson/repos","events_url":"https://api.github.com/users/ernstsson/events{/privacy}","received_events_url":"https://api.github.com/users/ernstsson/received_events","type":"User","site_admin":false},"committer":{"login":"ernstsson","id":378389,"avatar_url":"https://avatars2.githubusercontent.com/u/378389?v=3","gravatar_id":"","url":"https://api.github.com/users/ernstsson","html_url":"https://github.com/ernstsson","followers_url":"https://api.github.com/users/ernstsson/followers","following_url":"https://api.github.com/users/ernstsson/following{/other_user}","gists_url":"https://api.github.com/users/ernstsson/gists{/gist_id}","starred_url":"https://api.github.com/users/ernstsson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ernstsson/subscriptions","organizations_url":"https://api.github.com/users/ernstsson/orgs","repos_url":"https://api.github.com/users/ernstsson/repos","events_url":"https://api.github.com/users/ernstsson/events{/privacy}","received_events_url":"https://api.github.com/users/ernstsson/received_events","type":"User","site_admin":false},"parents":[{"sha":"46bba7a8c0d8aaff88941030386ede1f66c49290","url":"https://api.github.com/repos/google/agera/commits/46bba7a8c0d8aaff88941030386ede1f66c49290","html_url":"https://github.com/google/agera/commit/46bba7a8c0d8aaff88941030386ede1f66c49290"}],"stats":{"total":133,"additions":132,"deletions":1},"files":[{"sha":"ced6d2cbc0cfded483391546d70c5f31a39b2947","filename":"agera/src/main/java/com/google/android/agera/Predicates.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/google/agera/blob/42c7440a3851c594d19316f45f45b3c21a2d0ece/agera/src/main/java/com/google/android/agera/Predicates.java","raw_url":"https://github.com/google/agera/raw/42c7440a3851c594d19316f45f45b3c21a2d0ece/agera/src/main/java/com/google/android/agera/Predicates.java","contents_url":"https://api.github.com/repos/google/agera/contents/agera/src/main/java/com/google/android/agera/Predicates.java?ref=42c7440a3851c594d19316f45f45b3c21a2d0ece","patch":"@@ -178,7 +178,7 @@ public boolean apply(@NonNull final T value) {\n \n     @Override\n     public boolean apply(@NonNull final CharSequence input) {\n-      return input == null || input.length() == 0;\n+      return input.length() == 0;\n     }\n   }\n "},{"sha":"dfea149728f5caf507443b40ddbaae40c087635c","filename":"agera/src/test/java/com/google/android/agera/ObservablesTest.java","status":"modified","additions":22,"deletions":0,"changes":22,"blob_url":"https://github.com/google/agera/blob/42c7440a3851c594d19316f45f45b3c21a2d0ece/agera/src/test/java/com/google/android/agera/ObservablesTest.java","raw_url":"https://github.com/google/agera/raw/42c7440a3851c594d19316f45f45b3c21a2d0ece/agera/src/test/java/com/google/android/agera/ObservablesTest.java","contents_url":"https://api.github.com/repos/google/agera/contents/agera/src/test/java/com/google/android/agera/ObservablesTest.java?ref=42c7440a3851c594d19316f45f45b3c21a2d0ece","patch":"@@ -42,6 +42,7 @@\n import static org.robolectric.internal.ShadowExtractor.extract;\n import static org.robolectric.shadows.ShadowLooper.getShadowMainLooper;\n import static org.robolectric.shadows.ShadowLooper.idleMainLooper;\n+import static org.robolectric.shadows.ShadowLooper.runUiThreadTasksIncludingDelayedTasks;\n \n import com.google.android.agera.test.mocks.MockUpdatable;\n \n@@ -69,6 +70,7 @@\n   private Observable compositeObservableOfMany;\n   private Observable chainedCompositeObservableOfOne;\n   private Observable chainedCompositeObservable;\n+  private Observable chainedDupeCompositeObservable;\n   private UpdateDispatcher firstUpdateDispatcher;\n   private UpdateDispatcher secondUpdateDispatcher;\n   private UpdateDispatcher thirdUpdateDispatcher;\n@@ -101,6 +103,9 @@ public void setUp() {\n         compositeObservable(firstUpdateDispatcher));\n     chainedCompositeObservable = compositeObservable(compositeObservable(firstUpdateDispatcher,\n         secondUpdateDispatcher), thirdUpdateDispatcher);\n+    chainedDupeCompositeObservable = compositeObservable(firstUpdateDispatcher,\n+        compositeObservable(firstUpdateDispatcher, secondUpdateDispatcher),\n+        secondUpdateDispatcher, thirdUpdateDispatcher);\n     updatable = mockUpdatable();\n     secondUpdatable = mockUpdatable();\n     looper = getShadowMainLooper();\n@@ -158,6 +163,18 @@ public void shouldUpdateFromSecondChainInChainedComposite() {\n   }\n \n   @Test\n+  public void shouldUpdateOnlyOnceFromDupeInChainedComposite() {\n+    final Updatable updatable = mock(Updatable.class);\n+    chainedDupeCompositeObservable.addUpdatable(updatable);\n+    runUiThreadTasksIncludingDelayedTasks();\n+\n+    thirdUpdateDispatcher.update();\n+    runUiThreadTasksIncludingDelayedTasks();\n+\n+    verify(updatable).update();\n+  }\n+\n+  @Test\n   public void shouldNotUpdateConditionalObservableForFalseCondition() {\n     updatable.addToObservable(trueConditionalObservable);\n \n@@ -324,6 +341,11 @@ public void shouldCallMessageObjUpdateForMsgCallUpdatableMessage() {\n   }\n \n   @Test\n+  public void shouldIgnoreUnknownMessage() {\n+    workerHandler().obtainMessage(-1).sendToTarget();\n+  }\n+\n+  @Test\n   public void shouldNotAllowAddingUpdatablesOnNonLooperThreadInBaseObservable() {\n     final Observable observable = new BaseObservable() {};\n "},{"sha":"75875c79dfb9c0e42fb54e9abeff1029dd12e42d","filename":"agera/src/test/java/com/google/android/agera/RepositoriesTest.java","status":"modified","additions":109,"deletions":0,"changes":109,"blob_url":"https://github.com/google/agera/blob/42c7440a3851c594d19316f45f45b3c21a2d0ece/agera/src/test/java/com/google/android/agera/RepositoriesTest.java","raw_url":"https://github.com/google/agera/raw/42c7440a3851c594d19316f45f45b3c21a2d0ece/agera/src/test/java/com/google/android/agera/RepositoriesTest.java","contents_url":"https://api.github.com/repos/google/agera/contents/agera/src/test/java/com/google/android/agera/RepositoriesTest.java?ref=42c7440a3851c594d19316f45f45b3c21a2d0ece","patch":"@@ -20,6 +20,7 @@\n import static com.google.android.agera.Repositories.mutableRepository;\n import static com.google.android.agera.Repositories.repository;\n import static com.google.android.agera.Repositories.repositoryWithInitialValue;\n+import static com.google.android.agera.Result.success;\n import static com.google.android.agera.test.matchers.HasPrivateConstructor.hasPrivateConstructor;\n import static com.google.android.agera.test.matchers.SupplierGives.has;\n import static com.google.android.agera.test.matchers.UpdatableUpdated.wasNotUpdated;\n@@ -28,6 +29,7 @@\n import static java.util.Arrays.asList;\n import static java.util.Collections.singletonList;\n import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.mockito.Matchers.anyString;\n import static org.mockito.Mockito.times;\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.verifyZeroInteractions;\n@@ -56,7 +58,9 @@\n public final class RepositoriesTest {\n   private static final int INITIAL_INT_VALUE = 0;\n   private static final int INT_VALUE = 2;\n+  private static final String INITIAL_STRING_VALUE = \"init\";\n   private static final String STRING_VALUE = \"string\";\n+  private static final Result<String> RESULT_STRING_VALUE = success(STRING_VALUE);\n   private static final List<Integer> INITIAL_VALUE = singletonList(1);\n   private static final List<Integer> LIST = asList(1, 2, 3);\n   private static final List<Integer> OTHER_LIST = asList(4, 5);\n@@ -78,15 +82,36 @@\n   @Mock\n   private Supplier<String> mockStringSupplier;\n   @Mock\n+  private Supplier<Result<String>> mockResultStringSupplier;\n+  @Mock\n+  private Supplier<Result<String>> mockFailedResultStringSupplier;\n+  @Mock\n+  private Function<String, Result<String>> mockResultStringFunction;\n+  @Mock\n+  private Function<String, Result<String>> mockFailedResultStringFunction;\n+  @Mock\n   private Predicate<List<Integer>> mockIntegerListPredicate;\n   @Mock\n   private Function<List<Integer>, Integer> mockIntegerListToIntValueFunction;\n+  @Mock\n+  private Merger<String, String, Result<String>> mockResultStringMerger;\n+  @Mock\n+  private Merger<String, String, Result<String>> mockFailedResultStringMerger;\n \n   @Before\n   public void setUp() {\n     initMocks(this);\n     when(mockIntegerListSupplier.get()).thenReturn(LIST);\n     when(mockStringSupplier.get()).thenReturn(STRING_VALUE);\n+    when(mockResultStringSupplier.get()).thenReturn(RESULT_STRING_VALUE);\n+    when(mockFailedResultStringSupplier.get()).thenReturn(Result.<String>failure());\n+    when(mockResultStringFunction.apply(INITIAL_STRING_VALUE)).thenReturn(RESULT_STRING_VALUE);\n+    when(mockFailedResultStringFunction.apply(INITIAL_STRING_VALUE))\n+        .thenReturn(Result.<String>failure());\n+    when(mockResultStringMerger.merge(INITIAL_STRING_VALUE, STRING_VALUE))\n+        .thenReturn(RESULT_STRING_VALUE);\n+    when(mockFailedResultStringMerger.merge(INITIAL_STRING_VALUE, STRING_VALUE))\n+        .thenReturn(Result.<String>failure());\n     when(mockIntegerListToIntValueFunction.apply(Matchers.<List<Integer>>any()))\n         .thenReturn(INT_VALUE);\n     updateDispatcher = updateDispatcher();\n@@ -349,6 +374,90 @@ public void shouldBindWith() throws Exception {\n   }\n \n   @Test\n+  public void shouldGetSuccessfulValueFromThenAttemptGetFrom() {\n+    final Repository<String> repository = repositoryWithInitialValue(INITIAL_STRING_VALUE)\n+        .observe()\n+        .onUpdatesPerLoop()\n+        .thenAttemptGetFrom(mockResultStringSupplier).orSkip()\n+        .compile();\n+\n+    updatable.addToObservable(repository);\n+\n+    assertThat(updatable, wasUpdated());\n+    assertThat(repository, has(STRING_VALUE));\n+  }\n+\n+  @Test\n+  public void shouldNotUpdateForSkippedFailedValueFromThenAttemptGetFrom() {\n+    final Repository<String> repository = repositoryWithInitialValue(INITIAL_STRING_VALUE)\n+        .observe()\n+        .onUpdatesPerLoop()\n+        .thenAttemptGetFrom(mockFailedResultStringSupplier).orSkip()\n+        .compile();\n+\n+    updatable.addToObservable(repository);\n+\n+    assertThat(updatable, wasNotUpdated());\n+    assertThat(repository, has(INITIAL_STRING_VALUE));\n+  }\n+\n+  @Test\n+  public void shouldGetSuccessfulValueFromThenAttemptTransform() {\n+    final Repository<String> repository = repositoryWithInitialValue(INITIAL_STRING_VALUE)\n+        .observe()\n+        .onUpdatesPerLoop()\n+        .thenAttemptTransform(mockResultStringFunction).orSkip()\n+        .compile();\n+\n+    updatable.addToObservable(repository);\n+\n+    assertThat(updatable, wasUpdated());\n+    assertThat(repository, has(STRING_VALUE));\n+  }\n+\n+  @Test\n+  public void shouldNotUpdateForSkippedFailedValueFromThenAttemptTransform() {\n+    final Repository<String> repository = repositoryWithInitialValue(INITIAL_STRING_VALUE)\n+        .observe()\n+        .onUpdatesPerLoop()\n+        .thenAttemptTransform(mockFailedResultStringFunction).orSkip()\n+        .compile();\n+\n+    updatable.addToObservable(repository);\n+\n+    assertThat(updatable, wasNotUpdated());\n+    assertThat(repository, has(INITIAL_STRING_VALUE));\n+  }\n+\n+  @Test\n+  public void shouldGetSuccessfulValueFromThenAttemptMergeIn() {\n+    final Repository<String> repository = repositoryWithInitialValue(INITIAL_STRING_VALUE)\n+        .observe()\n+        .onUpdatesPerLoop()\n+        .thenAttemptMergeIn(mockStringSupplier, mockResultStringMerger).orSkip()\n+        .compile();\n+\n+    updatable.addToObservable(repository);\n+\n+    assertThat(updatable, wasUpdated());\n+    assertThat(repository, has(STRING_VALUE));\n+  }\n+\n+  @Test\n+  public void shouldNotUpdateForSkippedFailedValueFromThenAttemptMergeIn() {\n+    final Repository<String> repository = repositoryWithInitialValue(INITIAL_STRING_VALUE)\n+        .observe()\n+        .onUpdatesPerLoop()\n+        .thenAttemptMergeIn(mockStringSupplier, mockFailedResultStringMerger).orSkip()\n+        .compile();\n+\n+    updatable.addToObservable(repository);\n+\n+    assertThat(updatable, wasNotUpdated());\n+    assertThat(repository, has(INITIAL_STRING_VALUE));\n+  }\n+\n+  @Test\n   public void shouldHavePrivateConstructor() {\n     assertThat(Repositories.class, hasPrivateConstructor());\n   }"}]}