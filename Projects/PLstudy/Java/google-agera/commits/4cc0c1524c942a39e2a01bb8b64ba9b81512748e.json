{"sha":"4cc0c1524c942a39e2a01bb8b64ba9b81512748e","commit":{"author":{"name":"Magnus Ernstsson","email":"magnus@ernstsson.net","date":"2016-05-13T11:01:06Z"},"committer":{"name":"Magnus Ernstsson","email":"magnus@ernstsson.net","date":"2016-05-13T11:01:06Z"},"message":"Added .ifFailed(Non)AbsentSendTo to Result (#47)\n\nMost commonly absent is simply a value that hasn’t arrive yet. For\r\nerror handling it’s useful to easily be able to filter out these errors. Also, similarly absent can be filtered out.","tree":{"sha":"76b58ca0e1f8e5368ca1d2aad57cd317c054ef60","url":"https://api.github.com/repos/google/agera/git/trees/76b58ca0e1f8e5368ca1d2aad57cd317c054ef60"},"url":"https://api.github.com/repos/google/agera/git/commits/4cc0c1524c942a39e2a01bb8b64ba9b81512748e","comment_count":0},"url":"https://api.github.com/repos/google/agera/commits/4cc0c1524c942a39e2a01bb8b64ba9b81512748e","html_url":"https://github.com/google/agera/commit/4cc0c1524c942a39e2a01bb8b64ba9b81512748e","comments_url":"https://api.github.com/repos/google/agera/commits/4cc0c1524c942a39e2a01bb8b64ba9b81512748e/comments","author":{"login":"ernstsson","id":378389,"avatar_url":"https://avatars2.githubusercontent.com/u/378389?v=3","gravatar_id":"","url":"https://api.github.com/users/ernstsson","html_url":"https://github.com/ernstsson","followers_url":"https://api.github.com/users/ernstsson/followers","following_url":"https://api.github.com/users/ernstsson/following{/other_user}","gists_url":"https://api.github.com/users/ernstsson/gists{/gist_id}","starred_url":"https://api.github.com/users/ernstsson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ernstsson/subscriptions","organizations_url":"https://api.github.com/users/ernstsson/orgs","repos_url":"https://api.github.com/users/ernstsson/repos","events_url":"https://api.github.com/users/ernstsson/events{/privacy}","received_events_url":"https://api.github.com/users/ernstsson/received_events","type":"User","site_admin":false},"committer":{"login":"ernstsson","id":378389,"avatar_url":"https://avatars2.githubusercontent.com/u/378389?v=3","gravatar_id":"","url":"https://api.github.com/users/ernstsson","html_url":"https://github.com/ernstsson","followers_url":"https://api.github.com/users/ernstsson/followers","following_url":"https://api.github.com/users/ernstsson/following{/other_user}","gists_url":"https://api.github.com/users/ernstsson/gists{/gist_id}","starred_url":"https://api.github.com/users/ernstsson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ernstsson/subscriptions","organizations_url":"https://api.github.com/users/ernstsson/orgs","repos_url":"https://api.github.com/users/ernstsson/repos","events_url":"https://api.github.com/users/ernstsson/events{/privacy}","received_events_url":"https://api.github.com/users/ernstsson/received_events","type":"User","site_admin":false},"parents":[{"sha":"1f5fb99829206204117578cc5c0377d276fcaeea","url":"https://api.github.com/repos/google/agera/commits/1f5fb99829206204117578cc5c0377d276fcaeea","html_url":"https://github.com/google/agera/commit/1f5fb99829206204117578cc5c0377d276fcaeea"}],"stats":{"total":71,"additions":71,"deletions":0},"files":[{"sha":"6017df5ad37fa70059202cee2414c1c0dc7d3b2e","filename":"agera/src/main/java/com/google/android/agera/Result.java","status":"modified","additions":29,"deletions":0,"changes":29,"blob_url":"https://github.com/google/agera/blob/4cc0c1524c942a39e2a01bb8b64ba9b81512748e/agera/src/main/java/com/google/android/agera/Result.java","raw_url":"https://github.com/google/agera/raw/4cc0c1524c942a39e2a01bb8b64ba9b81512748e/agera/src/main/java/com/google/android/agera/Result.java","contents_url":"https://api.github.com/repos/google/agera/contents/agera/src/main/java/com/google/android/agera/Result.java?ref=4cc0c1524c942a39e2a01bb8b64ba9b81512748e","patch":"@@ -207,6 +207,35 @@ public Throwable failureOrNull() {\n     return this;\n   }\n \n+\n+  /**\n+   * Passes the encountered failure to the {@code receiver} if the failure is absent; otherwise\n+   * does nothing.\n+   *\n+   * @return This instance, for chaining.\n+   */\n+  @NonNull\n+  public Result<T> ifAbsentFailureSendTo(@NonNull final Receiver<? super Throwable> receiver) {\n+    if (failure != null && failure == ABSENT.failure) {\n+      receiver.accept(failure);\n+    }\n+    return this;\n+  }\n+\n+  /**\n+   * Passes the encountered failure to the {@code receiver} if the attempt has failed, except for\n+   * the failure absent; otherwise does nothing.\n+   *\n+   * @return This instance, for chaining.\n+   */\n+  @NonNull\n+  public Result<T> ifNonAbsentFailureSendTo(@NonNull final Receiver<? super Throwable> receiver) {\n+    if (failure != null && failure != ABSENT.failure) {\n+      receiver.accept(failure);\n+    }\n+    return this;\n+  }\n+\n   /**\n    * Binds the output value with {@code bindValue} using {@code binder} if the attempt has\n    * succeeded; otherwise does nothing."},{"sha":"748e809433786525b19cad4dc8a2d4f5de61cc0e","filename":"agera/src/test/java/com/google/android/agera/ResultTest.java","status":"modified","additions":42,"deletions":0,"changes":42,"blob_url":"https://github.com/google/agera/blob/4cc0c1524c942a39e2a01bb8b64ba9b81512748e/agera/src/test/java/com/google/android/agera/ResultTest.java","raw_url":"https://github.com/google/agera/raw/4cc0c1524c942a39e2a01bb8b64ba9b81512748e/agera/src/test/java/com/google/android/agera/ResultTest.java","contents_url":"https://api.github.com/repos/google/agera/contents/agera/src/test/java/com/google/android/agera/ResultTest.java?ref=4cc0c1524c942a39e2a01bb8b64ba9b81512748e","patch":"@@ -281,6 +281,48 @@ public void shouldApplySendIfFailed() {\n   }\n \n   @Test\n+  public void shouldApplySendIfFailedExceptAbsent() {\n+    failure(THROWABLE).ifNonAbsentFailureSendTo(mockThrowableReceiver);\n+\n+    verify(mockThrowableReceiver).accept(THROWABLE);\n+  }\n+\n+  @Test\n+  public void shouldNotApplySendIfFailedIfSucceeded() {\n+    SUCCESS_WITH_VALUE.ifFailedSendTo(mockThrowableReceiver);\n+\n+    verifyZeroInteractions(mockThrowableReceiver);\n+  }\n+\n+  @Test\n+  public void shouldNotApplySendIfFailedExceptAbsentIfSucceeded() {\n+    SUCCESS_WITH_VALUE.ifFailedSendTo(mockThrowableReceiver);\n+\n+    verifyZeroInteractions(mockThrowableReceiver);\n+  }\n+\n+  @Test\n+  public void shouldNotApplySendIfFailedExceptAbsentIfAbsent() {\n+    absent().ifNonAbsentFailureSendTo(mockThrowableReceiver);\n+\n+    verifyZeroInteractions(mockThrowableReceiver);\n+  }\n+\n+  @Test\n+  public void shouldApplySendIfFailedAbsent() {\n+    absent().ifAbsentFailureSendTo(mockThrowableReceiver);\n+\n+    verify(mockThrowableReceiver).accept(absent().getFailure());\n+  }\n+\n+  @Test\n+  public void shouldNotApplySendIfFailedAbsentIfAbsent() {\n+    failure(THROWABLE).ifAbsentFailureSendTo(mockThrowableReceiver);\n+\n+    verifyZeroInteractions(mockThrowableReceiver);\n+  }\n+\n+  @Test\n   public void shouldAllowForChainedCallsToSendIfFailed() {\n     assertThat(SUCCESS_WITH_VALUE.ifSucceededSendTo(mockReceiver),\n         sameInstance(SUCCESS_WITH_VALUE));"}]}