{"sha":"ba85a78053bede6055ebfc27456056bedb346d7d","commit":{"author":{"name":"Magnus Ernstsson","email":"magnus@ernstsson.net","date":"2017-03-10T21:56:57Z"},"committer":{"name":"GitHub","email":"noreply@github.com","date":"2017-03-10T21:56:57Z"},"message":"Added layout presenter (#149)","tree":{"sha":"61eb74914c400cc6b42df7a7624463be6ae1e847","url":"https://api.github.com/repos/google/agera/git/trees/61eb74914c400cc6b42df7a7624463be6ae1e847"},"url":"https://api.github.com/repos/google/agera/git/commits/ba85a78053bede6055ebfc27456056bedb346d7d","comment_count":0},"url":"https://api.github.com/repos/google/agera/commits/ba85a78053bede6055ebfc27456056bedb346d7d","html_url":"https://github.com/google/agera/commit/ba85a78053bede6055ebfc27456056bedb346d7d","comments_url":"https://api.github.com/repos/google/agera/commits/ba85a78053bede6055ebfc27456056bedb346d7d/comments","author":{"login":"ernstsson","id":378389,"avatar_url":"https://avatars2.githubusercontent.com/u/378389?v=3","gravatar_id":"","url":"https://api.github.com/users/ernstsson","html_url":"https://github.com/ernstsson","followers_url":"https://api.github.com/users/ernstsson/followers","following_url":"https://api.github.com/users/ernstsson/following{/other_user}","gists_url":"https://api.github.com/users/ernstsson/gists{/gist_id}","starred_url":"https://api.github.com/users/ernstsson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ernstsson/subscriptions","organizations_url":"https://api.github.com/users/ernstsson/orgs","repos_url":"https://api.github.com/users/ernstsson/repos","events_url":"https://api.github.com/users/ernstsson/events{/privacy}","received_events_url":"https://api.github.com/users/ernstsson/received_events","type":"User","site_admin":false},"committer":{"login":"web-flow","id":19864447,"avatar_url":"https://avatars0.githubusercontent.com/u/19864447?v=3","gravatar_id":"","url":"https://api.github.com/users/web-flow","html_url":"https://github.com/web-flow","followers_url":"https://api.github.com/users/web-flow/followers","following_url":"https://api.github.com/users/web-flow/following{/other_user}","gists_url":"https://api.github.com/users/web-flow/gists{/gist_id}","starred_url":"https://api.github.com/users/web-flow/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/web-flow/subscriptions","organizations_url":"https://api.github.com/users/web-flow/orgs","repos_url":"https://api.github.com/users/web-flow/repos","events_url":"https://api.github.com/users/web-flow/events{/privacy}","received_events_url":"https://api.github.com/users/web-flow/received_events","type":"User","site_admin":false},"parents":[{"sha":"f14356c3b0417ca8ae15c19a9112a4124861e5e5","url":"https://api.github.com/repos/google/agera/commits/f14356c3b0417ca8ae15c19a9112a4124861e5e5","html_url":"https://github.com/google/agera/commit/f14356c3b0417ca8ae15c19a9112a4124861e5e5"}],"stats":{"total":1117,"additions":1077,"deletions":40},"files":[{"sha":"b73cff544a5058a495a3832ea88a7009c4097949","filename":"extensions/rvadapter/src/main/java/com/google/android/agera/rvadapter/LayoutPresenter.java","status":"added","additions":47,"deletions":0,"changes":47,"blob_url":"https://github.com/google/agera/blob/ba85a78053bede6055ebfc27456056bedb346d7d/extensions/rvadapter/src/main/java/com/google/android/agera/rvadapter/LayoutPresenter.java","raw_url":"https://github.com/google/agera/raw/ba85a78053bede6055ebfc27456056bedb346d7d/extensions/rvadapter/src/main/java/com/google/android/agera/rvadapter/LayoutPresenter.java","contents_url":"https://api.github.com/repos/google/agera/contents/extensions/rvadapter/src/main/java/com/google/android/agera/rvadapter/LayoutPresenter.java?ref=ba85a78053bede6055ebfc27456056bedb346d7d","patch":"@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2016 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera.rvadapter;\n+\n+import android.support.annotation.LayoutRes;\n+import android.support.annotation.NonNull;\n+import android.view.View;\n+\n+/**\n+ * Contains logic to present a layout in a {@link RepositoryAdapter}.\n+ */\n+public abstract class LayoutPresenter {\n+  /**\n+   * Returns the layout resource ID to inflate.\n+   */\n+  @LayoutRes\n+  public abstract int getLayoutResId();\n+\n+  /**\n+   * Updates the view to present. The view is inflated from the layout resource specified by\n+   * {@link #getLayoutResId}, but may have been previously updated with a different presenter.\n+   * Therefore, implementation should take care of resetting the view state.\n+   *\n+   * @param view The view to present.\n+   */\n+  public abstract void bind(@NonNull final View view);\n+\n+  /**\n+   * Called when the given {@code view} is recycled.\n+   *\n+   * @param view The view to recycle.\n+   */\n+  public void recycle(@NonNull final View view) {}\n+}"},{"sha":"70e0cbf478640b0086f03337921f0d93b8b7062c","filename":"extensions/rvadapter/src/main/java/com/google/android/agera/rvadapter/LayoutPresenters.java","status":"added","additions":112,"deletions":0,"changes":112,"blob_url":"https://github.com/google/agera/blob/ba85a78053bede6055ebfc27456056bedb346d7d/extensions/rvadapter/src/main/java/com/google/android/agera/rvadapter/LayoutPresenters.java","raw_url":"https://github.com/google/agera/raw/ba85a78053bede6055ebfc27456056bedb346d7d/extensions/rvadapter/src/main/java/com/google/android/agera/rvadapter/LayoutPresenters.java","contents_url":"https://api.github.com/repos/google/agera/contents/extensions/rvadapter/src/main/java/com/google/android/agera/rvadapter/LayoutPresenters.java?ref=ba85a78053bede6055ebfc27456056bedb346d7d","patch":"@@ -0,0 +1,112 @@\n+/*\n+ * Copyright 2016 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera.rvadapter;\n+\n+import static com.google.android.agera.Receivers.nullReceiver;\n+\n+import android.support.annotation.LayoutRes;\n+import android.support.annotation.NonNull;\n+import android.view.View;\n+import com.google.android.agera.Receiver;\n+\n+/**\n+ * Contains a basic implementation of {@link LayoutPresenter}.\n+ */\n+public final class LayoutPresenters {\n+\n+  /**\n+   * Starts the creation of a {@link LayoutPresenter}.\n+   */\n+  @SuppressWarnings(\"unchecked\")\n+  @NonNull\n+  public static Builder layoutPresenterFor(@LayoutRes int layoutId) {\n+    return new Builder(layoutId);\n+  }\n+\n+  /**\n+   * Creates a simple {@link LayoutPresenter} for the {@code layoutId}.\n+   */\n+  @SuppressWarnings(\"unchecked\")\n+  @NonNull\n+  public static LayoutPresenter layout(@LayoutRes int layoutId) {\n+    return new Builder(layoutId).build();\n+  }\n+\n+  public static final class Builder {\n+    @NonNull\n+    private Receiver recycler = nullReceiver();\n+    @NonNull\n+    private Receiver<View> updater = nullReceiver();\n+    @LayoutRes\n+    private final int layoutId;\n+\n+    private Builder(@LayoutRes final int layoutId) {\n+      this.layoutId = layoutId;\n+    }\n+\n+    @NonNull\n+    public Builder bindWith(@NonNull final Receiver<View> binder) {\n+      this.updater = binder;\n+      return this;\n+    }\n+\n+    @NonNull\n+    public Builder recycleWith(@NonNull final Receiver<View> recycler) {\n+      this.recycler = recycler;\n+      return this;\n+    }\n+\n+    @NonNull\n+    public LayoutPresenter build() {\n+      return new CompiledLayoutPresenter(layoutId, recycler, updater);\n+    }\n+  }\n+\n+  private static final class CompiledLayoutPresenter extends LayoutPresenter {\n+    @LayoutRes\n+    private int layoutId;\n+    @NonNull\n+    private Receiver<View> recycler;\n+    @NonNull\n+    private Receiver<View> updater;\n+\n+    CompiledLayoutPresenter(\n+        @LayoutRes final int layoutId,\n+        @NonNull final Receiver<View> recycler,\n+        @NonNull final Receiver<View> updater) {\n+      this.layoutId = layoutId;\n+      this.recycler = recycler;\n+      this.updater = updater;\n+    }\n+\n+    @Override\n+    public int getLayoutResId() {\n+      return layoutId;\n+    }\n+\n+    @Override\n+    public void bind(@NonNull final View view) {\n+      updater.accept(view);\n+    }\n+\n+    @Override\n+    public void recycle(@NonNull final View view) {\n+      recycler.accept(view);\n+    }\n+  }\n+\n+  private LayoutPresenters() {}\n+}"},{"sha":"b2f9c571108960c8d94e4a5ddcb64d8a27ec15bd","filename":"extensions/rvadapter/src/main/java/com/google/android/agera/rvadapter/RepositoryAdapter.java","status":"modified","additions":115,"deletions":17,"changes":132,"blob_url":"https://github.com/google/agera/blob/ba85a78053bede6055ebfc27456056bedb346d7d/extensions/rvadapter/src/main/java/com/google/android/agera/rvadapter/RepositoryAdapter.java","raw_url":"https://github.com/google/agera/raw/ba85a78053bede6055ebfc27456056bedb346d7d/extensions/rvadapter/src/main/java/com/google/android/agera/rvadapter/RepositoryAdapter.java","contents_url":"https://api.github.com/repos/google/agera/contents/extensions/rvadapter/src/main/java/com/google/android/agera/rvadapter/RepositoryAdapter.java?ref=ba85a78053bede6055ebfc27456056bedb346d7d","patch":"@@ -18,19 +18,24 @@\n import static com.google.android.agera.Observables.compositeObservable;\n import static com.google.android.agera.Preconditions.checkArgument;\n import static com.google.android.agera.Preconditions.checkNotNull;\n+import static com.google.android.agera.Repositories.repository;\n+import static com.google.android.agera.Suppliers.staticSupplier;\n+import static java.lang.Boolean.TRUE;\n \n import android.annotation.TargetApi;\n import android.app.Activity;\n import android.app.Application.ActivityLifecycleCallbacks;\n import android.os.Bundle;\n import android.support.annotation.NonNull;\n+import android.support.v4.util.LongSparseArray;\n import android.support.v7.widget.RecyclerView;\n import android.support.v7.widget.RecyclerView.Adapter;\n import android.support.v7.widget.RecyclerView.ViewHolder;\n import android.view.LayoutInflater;\n import android.view.ViewGroup;\n import com.google.android.agera.Observable;\n import com.google.android.agera.Repository;\n+import com.google.android.agera.Supplier;\n import com.google.android.agera.Updatable;\n import java.util.ArrayList;\n import java.util.Arrays;\n@@ -72,16 +77,18 @@ public static Builder repositoryAdapter() {\n    */\n   public static final class Builder {\n     @NonNull\n-    final List<Repository<Object>> repositories = new ArrayList<>();\n+    final List<Supplier<Object>> suppliers = new ArrayList<>();\n     @NonNull\n     final List<RepositoryPresenter<Object>> presenters = new ArrayList<>();\n     @NonNull\n+    final LongSparseArray<Boolean> staticPresenters = new LongSparseArray<>();\n+    @NonNull\n     final List<Observable> observables = new ArrayList<>();\n \n     /**\n      * Specifies that the {@link RepositoryAdapter} being built should present the given\n-     * {@code repository} next (after all previously added repositories), using the given\n-     * {@code presenter} for any presentation logic.\n+     * {@code repository} next (after all previously added repositories, items and static layouts),\n+     * using the given {@code presenter} for any presentation logic.\n      *\n      * @param repository The repository to be presented. This can be the same as a previously added\n      *     repository; this makes the resulting {@link RepositoryAdapter} present the same data in\n@@ -95,7 +102,7 @@ public static Builder repositoryAdapter() {\n         @NonNull final RepositoryPresenter<T> presenter) {\n       @SuppressWarnings(\"unchecked\")\n       final Repository<Object> untypedRepository = (Repository<Object>) checkNotNull(repository);\n-      repositories.add(untypedRepository);\n+      suppliers.add(untypedRepository);\n       @SuppressWarnings(\"unchecked\")\n       final RepositoryPresenter<Object> untypedPresenter =\n           (RepositoryPresenter<Object>) checkNotNull(presenter);\n@@ -105,6 +112,54 @@ public static Builder repositoryAdapter() {\n     }\n \n     /**\n+     * Specifies that the {@link RepositoryAdapter} being built should present the given\n+     * {@code item} next (after all previously added repositories, items and static layouts),\n+     * using the given {@code presenter} for any presentation logic. Added items will be considered\n+     * static; any stable id added returned by the {@link RepositoryPresenter} will be ignored, and\n+     * the item will be kept stable by the {@link RepositoryAdapter}\n+     * <p>\n+     * NOTE: adding an item with this method (as with {@link #addLayout} below) will offset the\n+     * stable ID in other {@link RepositoryPresenter}s with the number of items and layouts added.\n+     *\n+     * @param item A static item. This can be the same as a previously added item; this makes the\n+     * resulting {@link RepositoryAdapter} present the same data in different positions and/or\n+     * different ways.\n+     * @param presenter The repository presenter associated with the {@code repository} at this\n+     *     position.\n+     * @return This instance, for chaining.\n+     */\n+    @NonNull\n+    public <T> Builder addItem(@NonNull final T item,\n+        @NonNull final RepositoryPresenter<T> presenter) {\n+      suppliers.add(staticSupplier((Object) item));\n+      @SuppressWarnings(\"unchecked\")\n+      final RepositoryPresenter<Object> untypedPresenter =\n+          (RepositoryPresenter<Object>) checkNotNull(presenter);\n+      staticPresenters.put(presenters.size(), TRUE);\n+      presenters.add(untypedPresenter);\n+      return this;\n+    }\n+\n+    /**\n+     * Specifies that the {@link RepositoryAdapter} being built should present the given\n+     * {@code presenter} next (after all previously added repositories, items and static layouts).\n+     * <p>\n+     * NOTE: adding an item with this method (as with {@link #addItem} above) will offset the\n+     * stable ID in other {@link RepositoryPresenter}s with the number of items and layouts added.\n+     *\n+     * @param presenter The layout presenter associated with the {@code repository} at this\n+     *     position.\n+     * @return This instance, for chaining.\n+     */\n+    @NonNull\n+    public Builder addLayout(@NonNull final LayoutPresenter presenter) {\n+      suppliers.add(repository((Object) RepositoryAdapter.class));\n+      staticPresenters.put(presenters.size(), TRUE);\n+      presenters.add(new LayoutRepositoryPresenter(presenter));\n+      return this;\n+    }\n+\n+    /**\n      * Specifies that the {@link RepositoryAdapter} being built should also observe the given\n      * {@code observable} during its active time (when it {@link #hasObservers()}), in addition to\n      * the repositories added via {@link #add}. Events from this observable will also trigger a data\n@@ -228,9 +283,9 @@ public void onActivityStarted(final Activity anyActivity) {\n \n       @Override\n       public void onActivityStopped(final Activity anyActivity) {\n-          if (anyActivity == activity) {\n-            repositoryAdapter.stopObserving();\n-          }\n+        if (anyActivity == activity) {\n+          repositoryAdapter.stopObserving();\n+        }\n       }\n     }\n \n@@ -264,12 +319,14 @@ public void onActivityPaused(final Activity anyActivity) {\n \n   private final int repositoryCount;\n   @NonNull\n-  private final Repository<Object>[] repositories;\n+  private final Supplier<Object>[] suppliers;\n   @NonNull\n   private final Object[] data;\n   @NonNull\n   private final RepositoryPresenter<Object>[] presenters;\n   @NonNull\n+  private final LongSparseArray<Boolean> staticPresenters;\n+  @NonNull\n   private final Map<ViewHolder, RepositoryPresenter<Object>> presenterForViewHolder;\n   @NonNull\n   private final Observable observable;\n@@ -281,14 +338,14 @@ public void onActivityPaused(final Activity anyActivity) {\n   private int resolvedItemIndex;\n \n   public RepositoryAdapter(@NonNull final Builder builder) {\n-    final int count = builder.repositories.size();\n+    final int count = builder.suppliers.size();\n     checkArgument(count > 0, \"Must add at least one repository\");\n     checkArgument(builder.presenters.size() == count,\n         \"Unexpected repository and presenter count mismatch\");\n \n     @SuppressWarnings(\"unchecked\")\n-    final Repository<Object>[] repositories = builder.repositories.toArray(\n-        (Repository<Object>[]) new Repository[count]);\n+    final Supplier<Object>[] suppliers = builder.suppliers.toArray(\n+        (Supplier<Object>[]) new Supplier[count]);\n \n     @SuppressWarnings(\"unchecked\")\n     final RepositoryPresenter<Object>[] presenters = builder.presenters.toArray(\n@@ -298,8 +355,9 @@ public RepositoryAdapter(@NonNull final Builder builder) {\n         builder.observables.toArray(new Observable[builder.observables.size()]);\n     this.data = new Object[count];\n     this.repositoryCount = count;\n-    this.repositories = repositories;\n+    this.suppliers = suppliers;\n     this.presenters = presenters;\n+    this.staticPresenters = builder.staticPresenters;\n     this.presenterForViewHolder = new IdentityHashMap<>();\n     this.observable = compositeObservable(observables);\n     this.endPositions = new int[count];\n@@ -337,7 +395,7 @@ public final int getItemCount() {\n     if (dataInvalid) {\n       int lastEndPosition = 0;\n       for (int i = 0; i < repositoryCount; i++) {\n-        data[i] = repositories[i].get();\n+        data[i] = suppliers[i].get();\n         lastEndPosition += presenters[i].getItemCount(data[i]);\n         endPositions[i] = lastEndPosition;\n       }\n@@ -358,10 +416,16 @@ public final int getItemViewType(final int position) {\n   @Override\n   public final long getItemId(final int position) {\n     resolveIndices(position);\n-    int resolvedRepositoryIndex = this.resolvedRepositoryIndex;\n-    int resolvedItemIndex = this.resolvedItemIndex;\n-    return presenters[resolvedRepositoryIndex].getItemId(\n-        data[resolvedRepositoryIndex], resolvedItemIndex);\n+    final int resolvedRepositoryIndex = this.resolvedRepositoryIndex;\n+    final RepositoryPresenter<Object> presenter = presenters[resolvedRepositoryIndex];\n+    final long itemId = presenter.getItemId(data[resolvedRepositoryIndex], this.resolvedItemIndex);\n+    if (staticPresenters.size() > 0) {\n+      if (staticPresenters.get(resolvedRepositoryIndex) == null) {\n+        return itemId + staticPresenters.size();\n+      }\n+      return staticPresenters.indexOfKey(resolvedRepositoryIndex);\n+    }\n+    return itemId;\n   }\n \n   /**\n@@ -432,4 +496,38 @@ private void resolveIndices(final int position) {\n     resolvedRepositoryIndex = arrayIndex;\n     resolvedItemIndex = arrayIndex == 0 ? position : position - endPositions[arrayIndex - 1];\n   }\n+\n+  private static final class LayoutRepositoryPresenter extends RepositoryPresenter<Object> {\n+    private final LayoutPresenter presenter;\n+\n+    LayoutRepositoryPresenter(@NonNull final LayoutPresenter presenter) {\n+      this.presenter = presenter;\n+    }\n+\n+    @Override\n+    public int getItemCount(@NonNull final Object data) {\n+      return 1;\n+    }\n+\n+    @Override\n+    public int getLayoutResId(@NonNull final Object data, final int index) {\n+      return presenter.getLayoutResId();\n+    }\n+\n+    @Override\n+    public void bind(@NonNull final Object data, final int index,\n+        @NonNull final ViewHolder holder) {\n+      presenter.bind(holder.itemView);\n+    }\n+\n+    @Override\n+    public void recycle(@NonNull final ViewHolder holder) {\n+      presenter.recycle(holder.itemView);\n+    }\n+\n+    @Override\n+    public long getItemId(@NonNull final Object data, final int index) {\n+      return 0;\n+    }\n+  }\n }"},{"sha":"24a3202bc43d4f610d89166c38cb12429daee2d2","filename":"extensions/rvadapter/src/test/java/com/google/android/agera/rvadapter/LayoutPresenterTest.java","status":"added","additions":55,"deletions":0,"changes":55,"blob_url":"https://github.com/google/agera/blob/ba85a78053bede6055ebfc27456056bedb346d7d/extensions/rvadapter/src/test/java/com/google/android/agera/rvadapter/LayoutPresenterTest.java","raw_url":"https://github.com/google/agera/raw/ba85a78053bede6055ebfc27456056bedb346d7d/extensions/rvadapter/src/test/java/com/google/android/agera/rvadapter/LayoutPresenterTest.java","contents_url":"https://api.github.com/repos/google/agera/contents/extensions/rvadapter/src/test/java/com/google/android/agera/rvadapter/LayoutPresenterTest.java?ref=ba85a78053bede6055ebfc27456056bedb346d7d","patch":"@@ -0,0 +1,55 @@\n+/*\n+ * Copyright 2016 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera.rvadapter;\n+\n+import static org.mockito.MockitoAnnotations.initMocks;\n+\n+import android.support.annotation.NonNull;\n+import android.view.View;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.Config;\n+\n+@RunWith(RobolectricTestRunner.class)\n+@Config(manifest = Config.NONE)\n+public final class LayoutPresenterTest {\n+\n+  @Mock\n+  private View view;\n+\n+  @Before\n+  public void setUp() {\n+    initMocks(this);\n+  }\n+\n+  @Test\n+  public void shouldDoNothingOnRecycleByDefault() {\n+    new TestLayoutPresenter().recycle(view);\n+  }\n+\n+  private static final class TestLayoutPresenter extends LayoutPresenter {\n+    @Override\n+    public int getLayoutResId() {\n+      return 0;\n+    }\n+\n+    @Override\n+    public void bind(@NonNull final View view) {}\n+  }\n+}"},{"sha":"d6a8006eb9b549bb7a7a246190226c1f5b1402fc","filename":"extensions/rvadapter/src/test/java/com/google/android/agera/rvadapter/LayoutPresentersTest.java","status":"added","additions":131,"deletions":0,"changes":131,"blob_url":"https://github.com/google/agera/blob/ba85a78053bede6055ebfc27456056bedb346d7d/extensions/rvadapter/src/test/java/com/google/android/agera/rvadapter/LayoutPresentersTest.java","raw_url":"https://github.com/google/agera/raw/ba85a78053bede6055ebfc27456056bedb346d7d/extensions/rvadapter/src/test/java/com/google/android/agera/rvadapter/LayoutPresentersTest.java","contents_url":"https://api.github.com/repos/google/agera/contents/extensions/rvadapter/src/test/java/com/google/android/agera/rvadapter/LayoutPresentersTest.java?ref=ba85a78053bede6055ebfc27456056bedb346d7d","patch":"@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2016 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera.rvadapter;\n+\n+import static com.google.android.agera.rvadapter.LayoutPresenters.layout;\n+import static com.google.android.agera.rvadapter.LayoutPresenters.layoutPresenterFor;\n+import static com.google.android.agera.rvadapter.test.matchers.HasPrivateConstructor.hasPrivateConstructor;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.MockitoAnnotations.initMocks;\n+\n+import android.support.annotation.LayoutRes;\n+import android.view.View;\n+import com.google.android.agera.Receiver;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.Config;\n+\n+@RunWith(RobolectricTestRunner.class)\n+@Config(manifest = Config.NONE)\n+public class LayoutPresentersTest {\n+  @LayoutRes\n+  private static final int LAYOUT_ID = 0;\n+  @Mock\n+  private Receiver<View> binder;\n+  @Mock\n+  private Receiver<View> recycler;\n+  @Mock\n+  private View view;\n+\n+  @Before\n+  public void setUp() {\n+    initMocks(this);\n+  }\n+\n+  @Test\n+  public void shouldReturnLayoutIdForCompiledLayout() {\n+    final LayoutPresenter layoutPresenter =\n+        layoutPresenterFor(LAYOUT_ID)\n+            .build();\n+\n+    assertThat(layoutPresenter.getLayoutResId(), is(LAYOUT_ID));\n+  }\n+\n+  @Test\n+  public void shouldReturnLayoutIdForLayout() {\n+    final LayoutPresenter layoutPresenter = layout(LAYOUT_ID);\n+\n+    assertThat(layoutPresenter.getLayoutResId(), is(LAYOUT_ID));\n+  }\n+\n+  @Test\n+  public void shouldBindCompiledLayout() {\n+    final LayoutPresenter layoutPresenter =\n+        layoutPresenterFor(LAYOUT_ID)\n+            .bindWith(binder)\n+            .build();\n+\n+    layoutPresenter.bind(view);\n+\n+    verify(binder).accept(view);\n+  }\n+\n+  @Test\n+  public void shouldBindCompiledLayoutWithoutBinder() {\n+    final LayoutPresenter layoutPresenter =\n+        layoutPresenterFor(LAYOUT_ID)\n+            .build();\n+\n+    layoutPresenter.bind(view);\n+  }\n+\n+  @Test\n+  public void shouldBindLayoutWithoutBinder() {\n+    final LayoutPresenter layoutPresenter = layout(LAYOUT_ID);\n+\n+    layoutPresenter.bind(view);\n+  }\n+\n+  @Test\n+  public void shouldRecycleViewInCompiledLayout() {\n+    final LayoutPresenter layoutPresenter =\n+        layoutPresenterFor(LAYOUT_ID)\n+            .bindWith(binder)\n+            .recycleWith(recycler)\n+            .build();\n+\n+    layoutPresenter.recycle(view);\n+\n+    verify(recycler).accept(view);\n+  }\n+\n+  @Test\n+  public void shouldHandleRecycleWithoutRecyclerInCompiledLayout() {\n+    final LayoutPresenter layoutPresenter =\n+        layoutPresenterFor(LAYOUT_ID)\n+            .bindWith(binder)\n+            .build();\n+\n+    layoutPresenter.recycle(view);\n+  }\n+\n+  @Test\n+  public void shouldHandleRecycleWithoutRecyclerInLayout() {\n+    final LayoutPresenter layoutPresenter = layout(LAYOUT_ID);\n+\n+    layoutPresenter.recycle(view);\n+  }\n+\n+  @Test\n+  public void shouldHavePrivateConstructor() {\n+    assertThat(LayoutPresenters.class, hasPrivateConstructor());\n+  }\n+}"},{"sha":"098534d213ab6596faff6d0593cd951f5624e941","filename":"extensions/rvadapter/src/test/java/com/google/android/agera/rvadapter/RepositoryAdapterTest.java","status":"modified","additions":261,"deletions":22,"changes":283,"blob_url":"https://github.com/google/agera/blob/ba85a78053bede6055ebfc27456056bedb346d7d/extensions/rvadapter/src/test/java/com/google/android/agera/rvadapter/RepositoryAdapterTest.java","raw_url":"https://github.com/google/agera/raw/ba85a78053bede6055ebfc27456056bedb346d7d/extensions/rvadapter/src/test/java/com/google/android/agera/rvadapter/RepositoryAdapterTest.java","contents_url":"https://api.github.com/repos/google/agera/contents/extensions/rvadapter/src/test/java/com/google/android/agera/rvadapter/RepositoryAdapterTest.java?ref=ba85a78053bede6055ebfc27456056bedb346d7d","patch":"@@ -15,6 +15,7 @@\n  */\n package com.google.android.agera.rvadapter;\n \n+import static android.os.Build.VERSION_CODES.ICE_CREAM_SANDWICH;\n import static com.google.android.agera.Observables.updateDispatcher;\n import static com.google.android.agera.Repositories.mutableRepository;\n import static com.google.android.agera.Repositories.repository;\n@@ -23,7 +24,7 @@\n import static org.hamcrest.MatcherAssert.assertThat;\n import static org.hamcrest.Matchers.is;\n import static org.mockito.ArgumentCaptor.forClass;\n-import static org.mockito.Matchers.any;\n+import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.Matchers.anyInt;\n import static org.mockito.Mockito.never;\n import static org.mockito.Mockito.times;\n@@ -33,14 +34,15 @@\n import static org.robolectric.annotation.Config.NONE;\n import static org.robolectric.shadows.ShadowLooper.runUiThreadTasksIncludingDelayedTasks;\n \n+import android.annotation.TargetApi;\n import android.app.Activity;\n import android.app.Application;\n import android.app.Application.ActivityLifecycleCallbacks;\n import android.content.Context;\n import android.support.annotation.LayoutRes;\n-import android.support.v7.widget.RecyclerView;\n import android.support.v7.widget.RecyclerView.Adapter;\n import android.support.v7.widget.RecyclerView.AdapterDataObserver;\n+import android.support.v7.widget.RecyclerView.ViewHolder;\n import android.view.LayoutInflater;\n import android.view.View;\n import android.view.ViewGroup;\n@@ -59,17 +61,23 @@\n @RunWith(RobolectricTestRunner.class)\n @Config(manifest = NONE)\n public final class RepositoryAdapterTest {\n+  private static final int NBR_OF_STATIC = 2;\n   private static final List<String> REPOSITORY_LIST = asList(\"a\", \"b\", \"c\");\n   private static final String REPOSITORY_ITEM = \"d\";\n   private static final String ALTERNATIVE_REPOSITORY_ITEM = \"e\";\n+  private static final String ITEM = \"f\";\n   @LayoutRes\n-  public static final int LAYOUT_ID = 3;\n+  private static final int LAYOUT_ID = 3;\n   @Mock\n   private RepositoryPresenter repositoryPresenter;\n   @Mock\n   private RepositoryPresenter secondRepositoryPresenter;\n   @Mock\n-  private RecyclerView.ViewHolder viewHolder;\n+  private RepositoryPresenter itemRepositoryPresenter;\n+  @Mock\n+  private LayoutPresenter layoutPresenter;\n+  @Mock\n+  private ViewHolder viewHolder;\n   @Mock\n   private ViewGroup viewGroup;\n   @Mock\n@@ -104,41 +112,61 @@ public void setUp() {\n     when(layoutInflater.inflate(LAYOUT_ID, viewGroup, false)).thenReturn(view);\n     when(repositoryPresenter.getItemCount(REPOSITORY_ITEM)).thenReturn(1);\n     when(secondRepositoryPresenter.getItemCount(REPOSITORY_LIST)).thenReturn(3);\n+    when(itemRepositoryPresenter.getItemCount(ITEM)).thenReturn(1);\n \n     repositoryAdapter = repositoryAdapter()\n         .add(repository, repositoryPresenter)\n         .add(secondRepository, secondRepositoryPresenter)\n+        .addLayout(layoutPresenter)\n+        .addItem(ITEM, itemRepositoryPresenter)\n         .addAdditionalObservable(updateDispatcher)\n         .build();\n   }\n \n   @Test\n   public void shouldReturnItemCountFromPresenters() {\n-    assertThat(repositoryAdapter.getItemCount(), is(4));\n+    assertThat(repositoryAdapter.getItemCount(), is(6));\n   }\n \n   @Test\n   public void shouldReturnItemIdFromFirstPresenter() {\n-    when(repositoryPresenter.getItemId(REPOSITORY_ITEM, 0)).thenReturn(1L);\n-    assertThat(repositoryAdapter.getItemId(0), is(1L));\n+    when(repositoryPresenter.getItemId(REPOSITORY_ITEM, 0)).thenReturn(10L);\n+    assertThat(repositoryAdapter.getItemId(0), is(10L + NBR_OF_STATIC));\n \n     verify(secondRepositoryPresenter, never()).getItemId(any(), anyInt());\n+    verify(itemRepositoryPresenter, never()).getItemId(any(), anyInt());\n   }\n \n   @Test\n   public void shouldReturnItemIdFromSecondPresenter() {\n-    when(secondRepositoryPresenter.getItemId(REPOSITORY_LIST, 0)).thenReturn(2L);\n-    assertThat(repositoryAdapter.getItemId(1), is(2L));\n+    when(secondRepositoryPresenter.getItemId(REPOSITORY_LIST, 0)).thenReturn(11L);\n+    assertThat(repositoryAdapter.getItemId(1), is(11L + NBR_OF_STATIC));\n \n     verify(repositoryPresenter, never()).getItemId(any(), anyInt());\n+    verify(itemRepositoryPresenter, never()).getItemId(any(), anyInt());\n+  }\n+\n+  @Test\n+  public void shouldReturnItemIdFromLayoutPresenter() {\n+    assertThat(repositoryAdapter.getItemId(4), is(0L));\n+\n+    verify(secondRepositoryPresenter, never()).getItemId(any(), anyInt());\n+    verify(itemRepositoryPresenter, never()).getItemId(any(), anyInt());\n+  }\n+\n+  @Test\n+  public void shouldReturnItemIdFromItemPresenter() {\n+    assertThat(repositoryAdapter.getItemId(5), is(1L));\n+\n+    verify(repositoryPresenter, never()).getItemId(any(), anyInt());\n+    verify(secondRepositoryPresenter, never()).getItemId(any(), anyInt());\n   }\n \n   @Test(expected = IndexOutOfBoundsException.class)\n   public void shouldThrowExceptionForOutOfBoundsIndex() {\n-    repositoryAdapter.getItemId(4);\n+    repositoryAdapter.getItemId(6);\n   }\n \n-\n   @Test(expected = IndexOutOfBoundsException.class)\n   public void shouldThrowExceptionForNegativeIndex() {\n     repositoryAdapter.getItemId(-1);\n@@ -168,6 +196,17 @@ public void shouldReturnItemViewTypeFromSecondPresenter() {\n   }\n \n   @Test\n+  public void shouldReturnItemViewTypeFromLayoutPresenter() {\n+    when(layoutPresenter.getLayoutResId()).thenReturn(34);\n+    assertThat(repositoryAdapter.getItemViewType(4), is(34));\n+\n+    verify(repositoryPresenter, never()).getItemId(any(), anyInt());\n+    verify(secondRepositoryPresenter, never()).getItemId(any(), anyInt());\n+    verify(itemRepositoryPresenter, never()).getItemId(any(), anyInt());\n+  }\n+\n+\n+  @Test\n   public void shouldCreateViewHolder() {\n     assertThat(repositoryAdapter.onCreateViewHolder(viewGroup, LAYOUT_ID).itemView, is(view));\n   }\n@@ -216,6 +255,7 @@ public void shouldCallRecycleForOnFailedToRecycleView() {\n     verify(repositoryPresenter).recycle(viewHolder);\n   }\n \n+  @Test\n   public void shouldCallRecycleForOnViewRecycledForSecondPresenter() {\n     when(repositoryPresenter.getItemCount(ALTERNATIVE_REPOSITORY_ITEM)).thenReturn(1);\n     repositoryAdapter.getItemCount(); //Trigger a refresh\n@@ -247,6 +287,54 @@ public void shouldCallRecycleForOnFailedToRecycleViewForSecondPresenter() {\n     verify(secondRepositoryPresenter).recycle(viewHolder);\n   }\n \n+\n+  @Test\n+  public void shouldCallRecycleForOnViewRecycledForLayoutPresenter() {\n+    repositoryAdapter.getItemCount(); //Trigger a refresh\n+\n+    repositoryAdapter.startObserving();\n+    updateDispatcher.update();\n+    runUiThreadTasksIncludingDelayedTasks();\n+    repositoryAdapter.stopObserving();\n+    final ViewHolder viewHolder = new ViewHolder(view) {};\n+    repositoryAdapter.onBindViewHolder(viewHolder, 4);\n+\n+    repositoryAdapter.onViewRecycled(viewHolder);\n+\n+    verify(layoutPresenter).recycle(view);\n+  }\n+\n+  @Test\n+  public void shouldCallRecycleForOnFailedToRecycleViewForLayoutPresenter() {\n+    repositoryAdapter.getItemCount(); //Trigger a refresh\n+\n+    repositoryAdapter.startObserving();\n+    updateDispatcher.update();\n+    runUiThreadTasksIncludingDelayedTasks();\n+    repositoryAdapter.stopObserving();\n+    final ViewHolder viewHolder = new ViewHolder(view) {};\n+    repositoryAdapter.onBindViewHolder(viewHolder, 4);\n+\n+    repositoryAdapter.onFailedToRecycleView(viewHolder);\n+\n+    verify(layoutPresenter).recycle(view);\n+  }\n+\n+  @Test\n+  public void shouldBindLayoutPresenter() {\n+    repositoryAdapter.getItemCount(); //Trigger a refresh\n+\n+    repositoryAdapter.startObserving();\n+    updateDispatcher.update();\n+    runUiThreadTasksIncludingDelayedTasks();\n+    repositoryAdapter.stopObserving();\n+\n+    final ViewHolder viewHolder = new ViewHolder(view) {};\n+    repositoryAdapter.onBindViewHolder(viewHolder, 4);\n+\n+    verify(layoutPresenter).bind(view);\n+  }\n+\n   @Test\n   public void shouldUpdateOnChangingRepositoryWhenObserving() {\n     when(repositoryPresenter.getItemCount(ALTERNATIVE_REPOSITORY_ITEM)).thenReturn(1);\n@@ -284,10 +372,10 @@ public void shouldUpdateOnChangingRepositoryWhenStarted() {\n     when(repositoryPresenter.getItemCount(ALTERNATIVE_REPOSITORY_ITEM)).thenReturn(1);\n     repositoryAdapterWhileStarted.getItemCount(); //Trigger a refresh\n \n-    setActivityToVisible();\n+    setActivityToStarted();\n     repository.accept(ALTERNATIVE_REPOSITORY_ITEM);\n     runUiThreadTasksIncludingDelayedTasks();\n-    setActivityToInvisible();\n+    setActivityToStopped();\n \n     repositoryAdapterWhileStarted.onBindViewHolder(viewHolder, 0);\n \n@@ -321,10 +409,10 @@ public void shouldUpdateOnChangingRepositoryWhenResumed() {\n     when(repositoryPresenter.getItemCount(ALTERNATIVE_REPOSITORY_ITEM)).thenReturn(1);\n     repositoryAdapterWhileResumed.getItemCount(); //Trigger a refresh\n \n-    setActivityToActive();\n+    setActivityToResumed();\n     repository.accept(ALTERNATIVE_REPOSITORY_ITEM);\n     runUiThreadTasksIncludingDelayedTasks();\n-    setActivityToInactive();\n+    setActivityToPaused();\n \n     repositoryAdapterWhileResumed.onBindViewHolder(viewHolder, 0);\n \n@@ -348,18 +436,155 @@ public void shouldNotUpdateOnChangingRepositoryWhenNotResumed() {\n     verify(repositoryPresenter).bind(REPOSITORY_ITEM, 0, viewHolder);\n   }\n \n-    private void setActivityToActive() {\n-      final ArgumentCaptor<ActivityLifecycleCallbacks> captor =\n-          forClass(ActivityLifecycleCallbacks.class);\n+  @Test\n+  public void shouldDoNothingOnActivityCreatedForWhileResumed() {\n+    repositoryAdapterWhileResumed = repositoryAdapter()\n+        .add(repository, repositoryPresenter)\n+        .add(secondRepository, secondRepositoryPresenter)\n+        .addAdditionalObservable(updateDispatcher)\n+        .whileResumed(activity);\n+    runUiThreadTasksIncludingDelayedTasks();\n+    setActivityToCreated();\n+  }\n \n-     verify(application).registerActivityLifecycleCallbacks(captor.capture());\n+  @Test\n+  public void shouldDoNothingOnActivityDestroyedForWhileResumed() {\n+    repositoryAdapterWhileResumed = repositoryAdapter()\n+        .add(repository, repositoryPresenter)\n+        .add(secondRepository, secondRepositoryPresenter)\n+        .addAdditionalObservable(updateDispatcher)\n+        .whileResumed(activity);\n+    runUiThreadTasksIncludingDelayedTasks();\n+    setActivityToDestroyed();\n+  }\n+\n+  @Test\n+  public void shouldDoNothingOnActivityCreatedForWhileStarted() {\n+    repositoryAdapterWhileResumed = repositoryAdapter()\n+        .add(repository, repositoryPresenter)\n+        .add(secondRepository, secondRepositoryPresenter)\n+        .addAdditionalObservable(updateDispatcher)\n+        .whileStarted(activity);\n+    runUiThreadTasksIncludingDelayedTasks();\n+    setActivityToCreated();\n+  }\n+\n+  @Test\n+  public void shouldDoNothingOnActivityDestroyedForWhileStarted() {\n+    repositoryAdapterWhileResumed = repositoryAdapter()\n+        .add(repository, repositoryPresenter)\n+        .add(secondRepository, secondRepositoryPresenter)\n+        .addAdditionalObservable(updateDispatcher)\n+        .whileStarted(activity);\n+    runUiThreadTasksIncludingDelayedTasks();\n+    setActivityToDestroyed();\n+  }\n+\n+  @Test\n+  public void shouldDoNothingOnActivityStoppedForWhileResumed() {\n+    repositoryAdapterWhileResumed = repositoryAdapter()\n+        .add(repository, repositoryPresenter)\n+        .add(secondRepository, secondRepositoryPresenter)\n+        .addAdditionalObservable(updateDispatcher)\n+        .whileResumed(activity);\n+    runUiThreadTasksIncludingDelayedTasks();\n+    setActivityToStopped();\n+  }\n+\n+  @Test\n+  public void shouldDoNothingOnActivityStartedForWhileResumed() {\n+    repositoryAdapterWhileResumed = repositoryAdapter()\n+        .add(repository, repositoryPresenter)\n+        .add(secondRepository, secondRepositoryPresenter)\n+        .addAdditionalObservable(updateDispatcher)\n+        .whileResumed(activity);\n+    runUiThreadTasksIncludingDelayedTasks();\n+    setActivityToStarted();\n+  }\n+\n+  @Test\n+  public void shouldDoNothingOnActivityResumedForWhileStarted() {\n+    repositoryAdapterWhileResumed = repositoryAdapter()\n+        .add(repository, repositoryPresenter)\n+        .add(secondRepository, secondRepositoryPresenter)\n+        .addAdditionalObservable(updateDispatcher)\n+        .whileStarted(activity);\n+    runUiThreadTasksIncludingDelayedTasks();\n+    setActivityToResumed();\n+  }\n+\n+  @Test\n+  public void shouldDoNothingOnActivityPausedForWhileStarted() {\n+    repositoryAdapterWhileResumed = repositoryAdapter()\n+        .add(repository, repositoryPresenter)\n+        .add(secondRepository, secondRepositoryPresenter)\n+        .addAdditionalObservable(updateDispatcher)\n+        .whileStarted(activity);\n+    runUiThreadTasksIncludingDelayedTasks();\n+    setActivityToPaused();\n+  }\n+\n+\n+  @Test\n+  public void shouldDoNothingOnSaveInstanceStateForWhileResumed() {\n+    repositoryAdapterWhileResumed = repositoryAdapter()\n+        .add(repository, repositoryPresenter)\n+        .add(secondRepository, secondRepositoryPresenter)\n+        .addAdditionalObservable(updateDispatcher)\n+        .whileResumed(activity);\n+    runUiThreadTasksIncludingDelayedTasks();\n+    saveActivityInstanceState();\n+  }\n+\n+  @Test\n+  public void shouldDoNothingOnSaveInstanceStateForWhileStarted() {\n+    repositoryAdapterWhileResumed = repositoryAdapter()\n+        .add(repository, repositoryPresenter)\n+        .add(secondRepository, secondRepositoryPresenter)\n+        .addAdditionalObservable(updateDispatcher)\n+        .whileStarted(activity);\n+    runUiThreadTasksIncludingDelayedTasks();\n+    saveActivityInstanceState();\n+  }\n+\n+  @TargetApi(ICE_CREAM_SANDWICH)\n+  private void setActivityToCreated() {\n+    final ArgumentCaptor<ActivityLifecycleCallbacks> captor =\n+        forClass(ActivityLifecycleCallbacks.class);\n+\n+    verify(application).registerActivityLifecycleCallbacks(captor.capture());\n+\n+    final ActivityLifecycleCallbacks callbacks = captor.getValue();\n+\n+    callbacks.onActivityCreated(activity, null);\n+  }\n+\n+  @TargetApi(ICE_CREAM_SANDWICH)\n+  private void setActivityToDestroyed() {\n+    final ArgumentCaptor<ActivityLifecycleCallbacks> captor =\n+        forClass(ActivityLifecycleCallbacks.class);\n+\n+    verify(application).registerActivityLifecycleCallbacks(captor.capture());\n+\n+    final ActivityLifecycleCallbacks callbacks = captor.getValue();\n+\n+    callbacks.onActivityDestroyed(activity);\n+  }\n+\n+  @TargetApi(ICE_CREAM_SANDWICH)\n+  private void setActivityToResumed() {\n+    final ArgumentCaptor<ActivityLifecycleCallbacks> captor =\n+        forClass(ActivityLifecycleCallbacks.class);\n+\n+    verify(application).registerActivityLifecycleCallbacks(captor.capture());\n \n     final ActivityLifecycleCallbacks callbacks = captor.getValue();\n \n     callbacks.onActivityResumed(activity);\n   }\n \n-  private void setActivityToInactive() {\n+  @TargetApi(ICE_CREAM_SANDWICH)\n+  private void setActivityToPaused() {\n     final ArgumentCaptor<ActivityLifecycleCallbacks> captor =\n         forClass(ActivityLifecycleCallbacks.class);\n \n@@ -370,7 +595,8 @@ private void setActivityToInactive() {\n     callbacks.onActivityPaused(activity);\n   }\n \n-  private void setActivityToVisible() {\n+  @TargetApi(ICE_CREAM_SANDWICH)\n+  private void setActivityToStarted() {\n     final ArgumentCaptor<ActivityLifecycleCallbacks> captor =\n         forClass(ActivityLifecycleCallbacks.class);\n \n@@ -381,7 +607,8 @@ private void setActivityToVisible() {\n     callbacks.onActivityStarted(activity);\n   }\n \n-  private void setActivityToInvisible() {\n+  @TargetApi(ICE_CREAM_SANDWICH)\n+  private void setActivityToStopped() {\n     final ArgumentCaptor<ActivityLifecycleCallbacks> captor =\n         forClass(ActivityLifecycleCallbacks.class);\n \n@@ -391,4 +618,16 @@ private void setActivityToInvisible() {\n \n     callbacks.onActivityStopped(activity);\n   }\n+\n+  @TargetApi(ICE_CREAM_SANDWICH)\n+  private void saveActivityInstanceState() {\n+    final ArgumentCaptor<ActivityLifecycleCallbacks> captor =\n+        forClass(ActivityLifecycleCallbacks.class);\n+\n+    verify(application).registerActivityLifecycleCallbacks(captor.capture());\n+\n+    final ActivityLifecycleCallbacks callbacks = captor.getValue();\n+\n+    callbacks.onActivitySaveInstanceState(activity, null);\n+  }\n }"},{"sha":"f1d1eecc0703e5c69a5642e44b7ad4f508d33c29","filename":"extensions/rvadapter/src/test/java/com/google/android/agera/rvadapter/RepositoryPresentersTest.java","status":"modified","additions":15,"deletions":0,"changes":15,"blob_url":"https://github.com/google/agera/blob/ba85a78053bede6055ebfc27456056bedb346d7d/extensions/rvadapter/src/test/java/com/google/android/agera/rvadapter/RepositoryPresentersTest.java","raw_url":"https://github.com/google/agera/raw/ba85a78053bede6055ebfc27456056bedb346d7d/extensions/rvadapter/src/test/java/com/google/android/agera/rvadapter/RepositoryPresentersTest.java","contents_url":"https://api.github.com/repos/google/agera/contents/extensions/rvadapter/src/test/java/com/google/android/agera/rvadapter/RepositoryPresentersTest.java?ref=ba85a78053bede6055ebfc27456056bedb346d7d","patch":"@@ -1,3 +1,18 @@\n+/*\n+ * Copyright 2016 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n package com.google.android.agera.rvadapter;\n \n import static com.google.android.agera.Result.present;"},{"sha":"6b3ed49637888d6e976a7ecf3c1dd7d65670f749","filename":"extensions/rvdatabinding/src/main/java/com/google/android/agera/rvdatabinding/DataBindingLayoutPresenters.java","status":"added","additions":125,"deletions":0,"changes":125,"blob_url":"https://github.com/google/agera/blob/ba85a78053bede6055ebfc27456056bedb346d7d/extensions/rvdatabinding/src/main/java/com/google/android/agera/rvdatabinding/DataBindingLayoutPresenters.java","raw_url":"https://github.com/google/agera/raw/ba85a78053bede6055ebfc27456056bedb346d7d/extensions/rvdatabinding/src/main/java/com/google/android/agera/rvdatabinding/DataBindingLayoutPresenters.java","contents_url":"https://api.github.com/repos/google/agera/contents/extensions/rvdatabinding/src/main/java/com/google/android/agera/rvdatabinding/DataBindingLayoutPresenters.java?ref=ba85a78053bede6055ebfc27456056bedb346d7d","patch":"@@ -0,0 +1,125 @@\n+/*\n+ * Copyright 2016 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera.rvdatabinding;\n+\n+import static com.google.android.agera.rvdatabinding.RecycleConfig.CLEAR_HANDLERS;\n+import static com.google.android.agera.rvdatabinding.RecycleConfig.DO_NOTHING;\n+\n+import android.databinding.DataBindingUtil;\n+import android.databinding.ViewDataBinding;\n+import android.support.annotation.LayoutRes;\n+import android.support.annotation.NonNull;\n+import android.support.v7.widget.RecyclerView;\n+import android.util.SparseArray;\n+import android.view.View;\n+import com.google.android.agera.rvadapter.LayoutPresenter;\n+import com.google.android.agera.rvadapter.RepositoryAdapter;\n+\n+/**\n+ * Contains concrete implementations of {@link LayoutPresenter} to present a layout in a\n+ * {@link RepositoryAdapter} {@link RecyclerView} using the Android data binding library.\n+ * <p>\n+ * The Android data binding library allows for binding a view model to a view in layout xml. The\n+ * implementation below takes a {@code layoutId} referring to the layout xml resource and a set of\n+ * handlers associated with handler ids.\n+ * <p>\n+ * See the data binding library documentation for details.\n+ */\n+public final class DataBindingLayoutPresenters {\n+\n+  /**\n+   * Starts the creation of a {@link LayoutPresenter} using the Android data binding library.\n+   */\n+  @SuppressWarnings(\"unchecked\")\n+  @NonNull\n+  public static Builder dataBindingLayoutPresenterFor(@LayoutRes final int layoutId) {\n+    return new Builder(layoutId);\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  public static final class Builder {\n+    @NonNull\n+    private final SparseArray<Object> handlers;\n+    @LayoutRes\n+    private final int layoutId;\n+    @RecycleConfig\n+    private int recycleConfig = DO_NOTHING;\n+\n+    private Builder(final int layoutId) {\n+      this.layoutId = layoutId;\n+      this.handlers = new SparseArray<>();\n+    }\n+\n+    @NonNull\n+    public Builder handler(final int handlerId, @NonNull final Object handler) {\n+      handlers.put(handlerId, handler);\n+      return this;\n+    }\n+\n+    @NonNull\n+    public Builder onRecycle(@RecycleConfig final int recycleConfig) {\n+      this.recycleConfig = recycleConfig;\n+      return this;\n+    }\n+\n+    @NonNull\n+    public LayoutPresenter build() {\n+      return new DataBindingLayoutPresenter(handlers, layoutId, recycleConfig);\n+    }\n+\n+    private static class DataBindingLayoutPresenter extends LayoutPresenter {\n+      @NonNull\n+      private final SparseArray<Object> handlers;\n+      private final int layoutId;\n+      private final int recycleConfig;\n+\n+      DataBindingLayoutPresenter(@NonNull final SparseArray<Object> handlers,\n+          final int layoutId, final int recycleConfig) {\n+        this.handlers = handlers;\n+        this.layoutId = layoutId;\n+        this.recycleConfig = recycleConfig;\n+      }\n+\n+      @Override\n+      public int getLayoutResId() {\n+        return layoutId;\n+      }\n+\n+      @Override\n+      public void bind(@NonNull final View view) {\n+        final ViewDataBinding viewDataBinding = DataBindingUtil.bind(view);\n+        for (int i = 0; i < handlers.size(); i++) {\n+          final int variableId = handlers.keyAt(i);\n+          viewDataBinding.setVariable(variableId, handlers.get(variableId));\n+        }\n+        viewDataBinding.executePendingBindings();\n+      }\n+\n+      @Override\n+      public void recycle(@NonNull final View view) {\n+        if ((recycleConfig & CLEAR_HANDLERS) != 0) {\n+          final ViewDataBinding viewDataBinding = DataBindingUtil.bind(view);\n+          for (int i = 0; i < handlers.size(); i++) {\n+            viewDataBinding.setVariable(handlers.keyAt(i), null);\n+          }\n+          viewDataBinding.executePendingBindings();\n+        }\n+      }\n+    }\n+  }\n+\n+  private DataBindingLayoutPresenters() {}\n+}"},{"sha":"ecba30df5149ca0d353269269a6116aef1091952","filename":"extensions/rvdatabinding/src/test/java/com/google/android/agera/rvdatabinding/DataBindingLayoutPresentersTest.java","status":"added","additions":134,"deletions":0,"changes":134,"blob_url":"https://github.com/google/agera/blob/ba85a78053bede6055ebfc27456056bedb346d7d/extensions/rvdatabinding/src/test/java/com/google/android/agera/rvdatabinding/DataBindingLayoutPresentersTest.java","raw_url":"https://github.com/google/agera/raw/ba85a78053bede6055ebfc27456056bedb346d7d/extensions/rvdatabinding/src/test/java/com/google/android/agera/rvdatabinding/DataBindingLayoutPresentersTest.java","contents_url":"https://api.github.com/repos/google/agera/contents/extensions/rvdatabinding/src/test/java/com/google/android/agera/rvdatabinding/DataBindingLayoutPresentersTest.java?ref=ba85a78053bede6055ebfc27456056bedb346d7d","patch":"@@ -0,0 +1,134 @@\n+/*\n+ * Copyright 2016 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera.rvdatabinding;\n+\n+import static android.databinding.DataBinderMapper.setDataBinding;\n+import static com.google.android.agera.rvadapter.test.matchers.HasPrivateConstructor.hasPrivateConstructor;\n+import static com.google.android.agera.rvdatabinding.DataBindingLayoutPresenters.dataBindingLayoutPresenterFor;\n+import static com.google.android.agera.rvdatabinding.RecycleConfig.CLEAR_ALL;\n+import static com.google.android.agera.rvdatabinding.RecycleConfig.CLEAR_HANDLERS;\n+import static com.google.android.agera.rvdatabinding.RecycleConfig.CLEAR_ITEM;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoMoreInteractions;\n+import static org.mockito.Mockito.verifyZeroInteractions;\n+import static org.mockito.Mockito.when;\n+import static org.mockito.MockitoAnnotations.initMocks;\n+\n+import android.databinding.ViewDataBinding;\n+import android.support.annotation.LayoutRes;\n+import android.view.View;\n+import com.google.android.agera.Binder;\n+import com.google.android.agera.rvadapter.LayoutPresenter;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.Config;\n+\n+@RunWith(RobolectricTestRunner.class)\n+@Config(manifest = Config.NONE)\n+public class DataBindingLayoutPresentersTest {\n+  private static final Object HANDLER = new Object();\n+  private static final Object SECOND_HANDLER = new Object();\n+  @LayoutRes\n+  private static final int LAYOUT_ID = 1;\n+  private static final int HANDLER_ID = 4;\n+  private static final int SECOND_HANDLER_ID = 5;\n+  @Mock\n+  private Binder<String, View> binder;\n+  @Mock\n+  private ViewDataBinding viewDataBinding;\n+  @Mock\n+  private View view;\n+\n+  @Before\n+  public void setUp() {\n+    initMocks(this);\n+    setDataBinding(viewDataBinding, LAYOUT_ID);\n+    when(view.getTag()).thenReturn(\"string\");\n+  }\n+\n+  @Test\n+  public void shouldDoNothingWithLayoutPresenterOnRecycleItemOnlyRecycling() {\n+    final LayoutPresenter layoutPresenter =\n+        dataBindingLayoutPresenterFor(LAYOUT_ID)\n+            .handler(HANDLER_ID, HANDLER)\n+            .handler(SECOND_HANDLER_ID, SECOND_HANDLER)\n+            .onRecycle(CLEAR_ITEM)\n+            .build();\n+\n+    layoutPresenter.recycle(view);\n+\n+    verifyZeroInteractions(viewDataBinding);\n+  }\n+\n+  @Test\n+  public void shouldRecycleLayoutPresenterWithAllRecycling() {\n+    final LayoutPresenter layoutPresenter =\n+        dataBindingLayoutPresenterFor(LAYOUT_ID)\n+            .handler(HANDLER_ID, HANDLER)\n+            .handler(SECOND_HANDLER_ID, SECOND_HANDLER)\n+            .onRecycle(CLEAR_ALL)\n+            .build();\n+\n+    layoutPresenter.recycle(view);\n+\n+    verify(viewDataBinding).setVariable(HANDLER_ID, null);\n+    verify(viewDataBinding).setVariable(SECOND_HANDLER_ID, null);\n+    verify(viewDataBinding).executePendingBindings();\n+    verifyNoMoreInteractions(viewDataBinding);\n+  }\n+\n+  @Test\n+  public void shouldRecycleLayoutPresenterWithHandlerRecycling() {\n+    final LayoutPresenter layoutPresenter =\n+        dataBindingLayoutPresenterFor(LAYOUT_ID)\n+            .handler(HANDLER_ID, HANDLER)\n+            .handler(SECOND_HANDLER_ID, SECOND_HANDLER)\n+            .onRecycle(CLEAR_HANDLERS)\n+            .build();\n+\n+    layoutPresenter.recycle(view);\n+\n+    verify(viewDataBinding).setVariable(HANDLER_ID, null);\n+    verify(viewDataBinding).setVariable(SECOND_HANDLER_ID, null);\n+    verify(viewDataBinding).executePendingBindings();\n+    verifyNoMoreInteractions(viewDataBinding);\n+  }\n+\n+  @Test\n+  public void shouldBindLayoutPresenter() {\n+    final LayoutPresenter layoutPresenter =\n+        dataBindingLayoutPresenterFor(LAYOUT_ID)\n+            .handler(HANDLER_ID, HANDLER)\n+            .handler(SECOND_HANDLER_ID, SECOND_HANDLER)\n+            .build();\n+\n+    layoutPresenter.bind(view);\n+\n+    verify(viewDataBinding).setVariable(HANDLER_ID, HANDLER);\n+    verify(viewDataBinding).setVariable(SECOND_HANDLER_ID, SECOND_HANDLER);\n+    verify(viewDataBinding).executePendingBindings();\n+    verifyNoMoreInteractions(viewDataBinding);\n+  }\n+\n+  @Test\n+  public void shouldHavePrivateConstructor() {\n+    assertThat(DataBindingLayoutPresenters.class, hasPrivateConstructor());\n+  }\n+}\n\\ No newline at end of file"},{"sha":"cc24de435575bbc5a7748be5be2cad6a7045c5fa","filename":"extensions/rvdatabinding/src/test/java/com/google/android/agera/rvdatabinding/DataBindingRepositoryPresentersTest.java","status":"modified","additions":15,"deletions":1,"changes":16,"blob_url":"https://github.com/google/agera/blob/ba85a78053bede6055ebfc27456056bedb346d7d/extensions/rvdatabinding/src/test/java/com/google/android/agera/rvdatabinding/DataBindingRepositoryPresentersTest.java","raw_url":"https://github.com/google/agera/raw/ba85a78053bede6055ebfc27456056bedb346d7d/extensions/rvdatabinding/src/test/java/com/google/android/agera/rvdatabinding/DataBindingRepositoryPresentersTest.java","contents_url":"https://api.github.com/repos/google/agera/contents/extensions/rvdatabinding/src/test/java/com/google/android/agera/rvdatabinding/DataBindingRepositoryPresentersTest.java?ref=ba85a78053bede6055ebfc27456056bedb346d7d","patch":"@@ -1,3 +1,18 @@\n+/*\n+ * Copyright 2016 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n package com.google.android.agera.rvdatabinding;\n \n import static android.databinding.DataBinderMapper.setDataBinding;\n@@ -434,7 +449,6 @@ public void shouldRecycleRepositoryPresenterOfListWithHandlerRecycling() {\n     verifyNoMoreInteractions(viewDataBinding);\n   }\n \n-\n   @Test\n   public void shouldReturnZeroForCountOfRepositoryPresenterOfFailedResult() {\n     final RepositoryPresenter<Result<String>> resultRepositoryPresenter ="},{"sha":"7c71475a843b0791f1ac9b77d66c6bddd9686f92","filename":"testapp/src/main/java/com/google/android/agera/testapp/NotesFragment.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/google/agera/blob/ba85a78053bede6055ebfc27456056bedb346d7d/testapp/src/main/java/com/google/android/agera/testapp/NotesFragment.java","raw_url":"https://github.com/google/agera/raw/ba85a78053bede6055ebfc27456056bedb346d7d/testapp/src/main/java/com/google/android/agera/testapp/NotesFragment.java","contents_url":"https://api.github.com/repos/google/agera/contents/testapp/src/main/java/com/google/android/agera/testapp/NotesFragment.java?ref=ba85a78053bede6055ebfc27456056bedb346d7d","patch":"@@ -22,11 +22,13 @@\n import static com.google.android.agera.Result.absentIfNull;\n import static com.google.android.agera.net.HttpFunctions.httpFunction;\n import static com.google.android.agera.net.HttpRequests.httpGetRequest;\n+import static com.google.android.agera.rvadapter.LayoutPresenters.layout;\n import static com.google.android.agera.rvadapter.RepositoryAdapter.repositoryAdapter;\n import static com.google.android.agera.rvadapter.RepositoryPresenters.repositoryPresenterOf;\n import static com.google.android.agera.rvdatabinding.DataBindingRepositoryPresenters.dataBindingRepositoryPresenterOf;\n import static com.google.android.agera.testapp.NotesStore.notesStore;\n import static com.google.android.agera.testapp.RowHandler.rowBinder;\n+import static java.text.DateFormat.getInstance;\n import static java.util.concurrent.Executors.newSingleThreadExecutor;\n \n import android.app.AlertDialog;\n@@ -48,6 +50,7 @@\n import com.google.android.agera.Result;\n import com.google.android.agera.Updatable;\n import com.google.android.agera.rvadapter.RepositoryAdapter;\n+import java.util.Date;\n import java.util.List;\n import java.util.concurrent.Executor;\n \n@@ -92,12 +95,17 @@ public void onCreate(@Nullable final Bundle savedInstanceState) {\n                 .forList());\n \n     adapter = repositoryAdapter()\n+        .addLayout(layout(R.layout.header))\n         .add(notesStore.getNotesRepository(), repositoryPresenterOf(NoteGroup.class)\n             .layout(R.layout.note_group_layout)\n             .stableIdForItem(NoteGroup::getId)\n             .bindWith(rowHandler)\n             .recycleWith(rowHandler)\n             .forList())\n+        .addItem(getInstance().format(new Date()), dataBindingRepositoryPresenterOf(String.class)\n+            .layout(R.layout.footer)\n+            .itemId(BR.string)\n+            .forItem())\n         .build();\n     adapter.setHasStableIds(true);\n "},{"sha":"b90c96260d8327f76244f6259eb9a042572befd6","filename":"testapp/src/main/res/layout/footer.xml","status":"added","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/google/agera/blob/ba85a78053bede6055ebfc27456056bedb346d7d/testapp/src/main/res/layout/footer.xml","raw_url":"https://github.com/google/agera/raw/ba85a78053bede6055ebfc27456056bedb346d7d/testapp/src/main/res/layout/footer.xml","contents_url":"https://api.github.com/repos/google/agera/contents/testapp/src/main/res/layout/footer.xml?ref=ba85a78053bede6055ebfc27456056bedb346d7d","patch":"@@ -0,0 +1,32 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<!--\n+  ~ Copyright 2015 Google Inc. All Rights Reserved.\n+  ~\n+  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n+  ~ you may not use this file except in compliance with the License.\n+  ~ You may obtain a copy of the License at\n+  ~\n+  ~     http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+<layout xmlns:android=\"http://schemas.android.com/apk/res/android\">\n+  <data>\n+    <variable name=\"string\" type=\"String\"/>\n+  </data>\n+  <TextView\n+      android:textAlignment=\"textEnd\"\n+      android:gravity=\"end\"\n+      android:layout_width=\"match_parent\"\n+      android:layout_height=\"wrap_content\"\n+      android:layout_marginLeft=\"10dp\"\n+      android:layout_marginRight=\"10dp\"\n+      android:layout_marginTop=\"10dp\"\n+      android:padding=\"8dp\"\n+      android:text=\"@{string}\"\n+      android:textSize=\"20sp\"/>\n+</layout>"},{"sha":"5eeac166c9055fc9cbb50b5881f6323a0fcd4f77","filename":"testapp/src/main/res/layout/header.xml","status":"added","additions":26,"deletions":0,"changes":26,"blob_url":"https://github.com/google/agera/blob/ba85a78053bede6055ebfc27456056bedb346d7d/testapp/src/main/res/layout/header.xml","raw_url":"https://github.com/google/agera/raw/ba85a78053bede6055ebfc27456056bedb346d7d/testapp/src/main/res/layout/header.xml","contents_url":"https://api.github.com/repos/google/agera/contents/testapp/src/main/res/layout/header.xml?ref=ba85a78053bede6055ebfc27456056bedb346d7d","patch":"@@ -0,0 +1,26 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<!--\n+  ~ Copyright 2015 Google Inc. All Rights Reserved.\n+  ~\n+  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n+  ~ you may not use this file except in compliance with the License.\n+  ~ You may obtain a copy of the License at\n+  ~\n+  ~     http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+  <TextView\n+      xmlns:android=\"http://schemas.android.com/apk/res/android\"\n+      android:layout_width=\"match_parent\"\n+      android:layout_height=\"wrap_content\"\n+      android:layout_marginLeft=\"10dp\"\n+      android:layout_marginRight=\"10dp\"\n+      android:layout_marginTop=\"10dp\"\n+      android:padding=\"8dp\"\n+      android:text=\"@string/notes\"\n+      android:textSize=\"20sp\"/>"},{"sha":"0ba3dba262edf1445519020528fe92c1700db271","filename":"testapp/src/main/res/values/strings.xml","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/google/agera/blob/ba85a78053bede6055ebfc27456056bedb346d7d/testapp/src/main/res/values/strings.xml","raw_url":"https://github.com/google/agera/raw/ba85a78053bede6055ebfc27456056bedb346d7d/testapp/src/main/res/values/strings.xml","contents_url":"https://api.github.com/repos/google/agera/contents/testapp/src/main/res/values/strings.xml?ref=ba85a78053bede6055ebfc27456056bedb346d7d","patch":"@@ -15,6 +15,7 @@\n   ~ limitations under the License.\n   -->\n <resources>\n+  <string name=\"notes\">Notes</string>\n   <string name=\"agera\">Agera Notes</string>\n   <string name=\"add_note\">Add Note</string>\n   <string name=\"add\">Add</string>"}]}