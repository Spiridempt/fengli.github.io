{"sha":"d6736edeb5720036b44431925d7f10b45592da67","commit":{"author":{"name":"Max Cai","email":"maxtroy@users.noreply.github.com","date":"2016-08-16T03:50:30Z"},"committer":{"name":"Magnus Ernstsson","email":"magnus@ernstsson.net","date":"2016-08-16T03:50:30Z"},"message":"Add configurable disposer for e.g. Closeable handling (#92)","tree":{"sha":"5620b0d83ae6114a851ba422fdaabb6731c6c26f","url":"https://api.github.com/repos/google/agera/git/trees/5620b0d83ae6114a851ba422fdaabb6731c6c26f"},"url":"https://api.github.com/repos/google/agera/git/commits/d6736edeb5720036b44431925d7f10b45592da67","comment_count":0},"url":"https://api.github.com/repos/google/agera/commits/d6736edeb5720036b44431925d7f10b45592da67","html_url":"https://github.com/google/agera/commit/d6736edeb5720036b44431925d7f10b45592da67","comments_url":"https://api.github.com/repos/google/agera/commits/d6736edeb5720036b44431925d7f10b45592da67/comments","author":{"login":"maxtroy","id":16337072,"avatar_url":"https://avatars0.githubusercontent.com/u/16337072?v=3","gravatar_id":"","url":"https://api.github.com/users/maxtroy","html_url":"https://github.com/maxtroy","followers_url":"https://api.github.com/users/maxtroy/followers","following_url":"https://api.github.com/users/maxtroy/following{/other_user}","gists_url":"https://api.github.com/users/maxtroy/gists{/gist_id}","starred_url":"https://api.github.com/users/maxtroy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/maxtroy/subscriptions","organizations_url":"https://api.github.com/users/maxtroy/orgs","repos_url":"https://api.github.com/users/maxtroy/repos","events_url":"https://api.github.com/users/maxtroy/events{/privacy}","received_events_url":"https://api.github.com/users/maxtroy/received_events","type":"User","site_admin":false},"committer":{"login":"ernstsson","id":378389,"avatar_url":"https://avatars2.githubusercontent.com/u/378389?v=3","gravatar_id":"","url":"https://api.github.com/users/ernstsson","html_url":"https://github.com/ernstsson","followers_url":"https://api.github.com/users/ernstsson/followers","following_url":"https://api.github.com/users/ernstsson/following{/other_user}","gists_url":"https://api.github.com/users/ernstsson/gists{/gist_id}","starred_url":"https://api.github.com/users/ernstsson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ernstsson/subscriptions","organizations_url":"https://api.github.com/users/ernstsson/orgs","repos_url":"https://api.github.com/users/ernstsson/repos","events_url":"https://api.github.com/users/ernstsson/events{/privacy}","received_events_url":"https://api.github.com/users/ernstsson/received_events","type":"User","site_admin":false},"parents":[{"sha":"4036f9880f34e80ca7d6feb2439ebfdb7fed43da","url":"https://api.github.com/repos/google/agera/commits/4036f9880f34e80ca7d6feb2439ebfdb7fed43da","html_url":"https://github.com/google/agera/commit/4036f9880f34e80ca7d6feb2439ebfdb7fed43da"}],"stats":{"total":301,"additions":276,"deletions":25},"files":[{"sha":"a8484db072232efcbce7264428e06930121fed82","filename":"agera/src/main/java/com/google/android/agera/Common.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/google/agera/blob/d6736edeb5720036b44431925d7f10b45592da67/agera/src/main/java/com/google/android/agera/Common.java","raw_url":"https://github.com/google/agera/raw/d6736edeb5720036b44431925d7f10b45592da67/agera/src/main/java/com/google/android/agera/Common.java","contents_url":"https://api.github.com/repos/google/agera/contents/agera/src/main/java/com/google/android/agera/Common.java?ref=d6736edeb5720036b44431925d7f10b45592da67","patch":"@@ -22,16 +22,19 @@\n \n final class Common {\n   static final Function<Throwable, ? extends Result<?>> FAILED_RESULT = new FailedResult<>();\n-  static final Function IDENTITY_FUNCTION = new IdentityFunction();\n+  static final NullOperator NULL_OPERATOR = new NullOperator();\n   static final StaticCondicate TRUE_CONDICATE = new StaticCondicate(true);\n   static final StaticCondicate FALSE_CONDICATE = new StaticCondicate(false);\n \n-  private static final class IdentityFunction implements Function {\n+  private static final class NullOperator implements Function, Receiver {\n     @NonNull\n     @Override\n     public Object apply(@NonNull final Object from) {\n       return from;\n     }\n+\n+    @Override\n+    public void accept(@NonNull final Object value) {}\n   }\n \n   private static final class StaticCondicate implements Condition, Predicate {"},{"sha":"72bb6ef46e1dfa8e324bc52351ca3f90a9ca57e1","filename":"agera/src/main/java/com/google/android/agera/CompiledRepository.java","status":"modified","additions":47,"deletions":16,"changes":63,"blob_url":"https://github.com/google/agera/blob/d6736edeb5720036b44431925d7f10b45592da67/agera/src/main/java/com/google/android/agera/CompiledRepository.java","raw_url":"https://github.com/google/agera/raw/d6736edeb5720036b44431925d7f10b45592da67/agera/src/main/java/com/google/android/agera/CompiledRepository.java","contents_url":"https://api.github.com/repos/google/agera/contents/agera/src/main/java/com/google/android/agera/CompiledRepository.java?ref=d6736edeb5720036b44431925d7f10b45592da67","patch":"@@ -49,11 +49,13 @@ static Repository compiledRepository(\n       @NonNull final List<Object> directives,\n       @NonNull final Merger<Object, Object, Boolean> notifyChecker,\n       @RepositoryConfig final int concurrentUpdateConfig,\n-      @RepositoryConfig final int deactivationConfig) {\n+      @RepositoryConfig final int deactivationConfig,\n+      @NonNull final Receiver discardedValuesDisposer) {\n     final Object[] directiveArray = directives.toArray();\n     return new CompiledRepository(initialValue, compositeObservable(frequency,\n         eventSources.toArray(new Observable[eventSources.size()])),\n-        directiveArray, notifyChecker, deactivationConfig, concurrentUpdateConfig);\n+        directiveArray, notifyChecker, deactivationConfig, concurrentUpdateConfig,\n+        discardedValuesDisposer);\n   }\n \n   //region Invariants\n@@ -71,6 +73,8 @@ static Repository compiledRepository(\n   @RepositoryConfig\n   private final int concurrentUpdateConfig;\n   @NonNull\n+  private final Receiver discardedValuesDisposer;\n+  @NonNull\n   private final WorkerHandler workerHandler;\n \n   CompiledRepository(\n@@ -79,7 +83,8 @@ static Repository compiledRepository(\n       @NonNull final Object[] directives,\n       @NonNull final Merger<Object, Object, Boolean> notifyChecker,\n       @RepositoryConfig final int deactivationConfig,\n-      @RepositoryConfig final int concurrentUpdateConfig) {\n+      @RepositoryConfig final int concurrentUpdateConfig,\n+      @NonNull final Receiver discardedValuesDisposer) {\n     this.initialValue = initialValue;\n     this.currentValue = initialValue;\n     this.intermediateValue = initialValue; // non-final field but with @NonNull requirement\n@@ -88,6 +93,7 @@ static Repository compiledRepository(\n     this.notifyChecker = notifyChecker;\n     this.deactivationConfig = deactivationConfig;\n     this.concurrentUpdateConfig = concurrentUpdateConfig;\n+    this.discardedValuesDisposer = discardedValuesDisposer;\n     this.workerHandler = workerHandler();\n   }\n \n@@ -225,13 +231,20 @@ private boolean checkCancellationLocked() {\n    */\n   void acknowledgeCancel() {\n     boolean shouldStartFlow = false;\n+    Object discardedIntermediateValue = null;\n     synchronized (this) {\n       if (runState == CANCEL_REQUESTED) {\n         runState = IDLE;\n-        intermediateValue = initialValue; // GC the intermediate value but keep field non-null.\n+        if (intermediateValue != currentValue) {\n+          discardedIntermediateValue = intermediateValue;\n+          intermediateValue = currentValue; // GC the intermediate value but keep field non-null.\n+        }\n         shouldStartFlow = restartNeeded;\n       }\n     }\n+    if (discardedIntermediateValue != null) {\n+      discardedValuesDisposer.accept(discardedIntermediateValue);\n+    }\n     if (shouldStartFlow) {\n       maybeStartFlow();\n     }\n@@ -507,22 +520,40 @@ private int runEnd(@NonNull final Object[] directives, final int index) {\n \n   //region Completing, pausing and resuming flow\n \n-  private synchronized void skipAndEndFlow() {\n-    runState = IDLE;\n-    intermediateValue = initialValue; // GC the intermediate value but field must be kept non-null.\n-    checkRestartLocked();\n+  private void skipAndEndFlow() {\n+    Object discardedIntermediateValue = null;\n+    synchronized (this) {\n+      runState = IDLE;\n+      if (intermediateValue != currentValue) {\n+        discardedIntermediateValue = intermediateValue;\n+        intermediateValue = currentValue; // GC the intermediate value but keep field non-null.\n+      }\n+      checkRestartLocked();\n+    }\n+    if (discardedIntermediateValue != null) {\n+      discardedValuesDisposer.accept(discardedIntermediateValue);\n+    }\n   }\n \n   private synchronized void setNewValueAndEndFlow(@NonNull final Object newValue) {\n-    final boolean wasRunningLazily = runState == RUNNING_LAZILY;\n-    runState = IDLE;\n-    intermediateValue = initialValue; // GC the intermediate value but field must be kept non-null.\n-    if (wasRunningLazily) {\n-      currentValue = newValue; // Don't notify if this new value is produced lazily\n-    } else {\n-      setNewValueLocked(newValue); // May notify otherwise\n+    Object discardedIntermediateValue = null;\n+    synchronized (this) {\n+      final boolean wasRunningLazily = runState == RUNNING_LAZILY;\n+      runState = IDLE;\n+      if (intermediateValue != newValue) {\n+        discardedIntermediateValue = intermediateValue;\n+        intermediateValue = newValue; // GC the intermediate value but keep field non-null.\n+      }\n+      if (wasRunningLazily) {\n+        currentValue = newValue; // Don't notify if this new value is produced lazily\n+      } else {\n+        setNewValueLocked(newValue); // May notify otherwise\n+      }\n+      checkRestartLocked();\n+    }\n+    if (discardedIntermediateValue != null) {\n+      discardedValuesDisposer.accept(discardedIntermediateValue);\n     }\n-    checkRestartLocked();\n   }\n \n   private void setNewValueLocked(@NonNull final Object newValue) {"},{"sha":"a681a13bae2316cb09324cda2d47e85123640fdc","filename":"agera/src/main/java/com/google/android/agera/FunctionCompiler.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/google/agera/blob/d6736edeb5720036b44431925d7f10b45592da67/agera/src/main/java/com/google/android/agera/FunctionCompiler.java","raw_url":"https://github.com/google/agera/raw/d6736edeb5720036b44431925d7f10b45592da67/agera/src/main/java/com/google/android/agera/FunctionCompiler.java","contents_url":"https://api.github.com/repos/google/agera/contents/agera/src/main/java/com/google/android/agera/FunctionCompiler.java?ref=d6736edeb5720036b44431925d7f10b45592da67","patch":"@@ -15,7 +15,7 @@\n  */\n package com.google.android.agera;\n \n-import static com.google.android.agera.Common.IDENTITY_FUNCTION;\n+import static com.google.android.agera.Common.NULL_OPERATOR;\n import static com.google.android.agera.Common.TRUE_CONDICATE;\n import static com.google.android.agera.Preconditions.checkNotNull;\n import static java.util.Collections.emptyList;\n@@ -40,7 +40,7 @@\n   }\n \n   private void addFunction(@NonNull final Function function) {\n-    if (function != IDENTITY_FUNCTION) {\n+    if (function != NULL_OPERATOR) {\n       functions.add(function);\n     }\n   }\n@@ -55,7 +55,7 @@ public Function thenApply(@NonNull final Function function) {\n   @NonNull\n   private Function createFunction() {\n     if (functions.isEmpty()) {\n-      return IDENTITY_FUNCTION;\n+      return NULL_OPERATOR;\n     }\n     return new ChainFunction(functions.toArray(new Function[functions.size()]));\n   }\n@@ -107,7 +107,7 @@ public FList sort(@NonNull final Comparator comparator) {\n   @NonNull\n   @Override\n   public FList map(@NonNull final Function function) {\n-    if (function != IDENTITY_FUNCTION) {\n+    if (function != NULL_OPERATOR) {\n       addFunction(new MapFunction(function));\n     }\n     return this;"},{"sha":"0c134396c7c47e0cb48b27cf826497310a2ba1c2","filename":"agera/src/main/java/com/google/android/agera/Functions.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/google/agera/blob/d6736edeb5720036b44431925d7f10b45592da67/agera/src/main/java/com/google/android/agera/Functions.java","raw_url":"https://github.com/google/agera/raw/d6736edeb5720036b44431925d7f10b45592da67/agera/src/main/java/com/google/android/agera/Functions.java","contents_url":"https://api.github.com/repos/google/agera/contents/agera/src/main/java/com/google/android/agera/Functions.java?ref=d6736edeb5720036b44431925d7f10b45592da67","patch":"@@ -16,7 +16,7 @@\n package com.google.android.agera;\n \n import static com.google.android.agera.Common.FAILED_RESULT;\n-import static com.google.android.agera.Common.IDENTITY_FUNCTION;\n+import static com.google.android.agera.Common.NULL_OPERATOR;\n import static com.google.android.agera.Preconditions.checkNotNull;\n \n import com.google.android.agera.Common.StaticProducer;\n@@ -58,7 +58,7 @@\n   @NonNull\n   public static <T> Function<T, T> identityFunction() {\n     @SuppressWarnings(\"unchecked\")\n-    final Function<T, T> identityFunction = (Function<T, T>) IDENTITY_FUNCTION;\n+    final Function<T, T> identityFunction = (Function<T, T>) NULL_OPERATOR;\n     return identityFunction;\n   }\n "},{"sha":"f6d73bc84fa00caa11898b900733e696646e4432","filename":"agera/src/main/java/com/google/android/agera/RepositoryCompiler.java","status":"modified","additions":13,"deletions":1,"changes":14,"blob_url":"https://github.com/google/agera/blob/d6736edeb5720036b44431925d7f10b45592da67/agera/src/main/java/com/google/android/agera/RepositoryCompiler.java","raw_url":"https://github.com/google/agera/raw/d6736edeb5720036b44431925d7f10b45592da67/agera/src/main/java/com/google/android/agera/RepositoryCompiler.java","contents_url":"https://api.github.com/repos/google/agera/contents/agera/src/main/java/com/google/android/agera/RepositoryCompiler.java?ref=d6736edeb5720036b44431925d7f10b45592da67","patch":"@@ -15,6 +15,7 @@\n  */\n package com.google.android.agera;\n \n+import static com.google.android.agera.Common.NULL_OPERATOR;\n import static com.google.android.agera.CompiledRepository.addBindWith;\n import static com.google.android.agera.CompiledRepository.addCheck;\n import static com.google.android.agera.CompiledRepository.addEnd;\n@@ -99,6 +100,8 @@ private static void recycle(@NonNull final RepositoryCompiler compiler) {\n   private int deactivationConfig;\n   @RepositoryConfig\n   private int concurrentUpdateConfig;\n+  @NonNull\n+  private Receiver discardedValueDisposer = NULL_OPERATOR;\n \n   @Expect\n   private int expect;\n@@ -403,6 +406,14 @@ public RepositoryCompiler onConcurrentUpdate(@RepositoryConfig final int concurr\n \n   @NonNull\n   @Override\n+  public RepositoryCompiler sendDiscardedValuesTo(@NonNull final Receiver disposer) {\n+    checkExpect(CONFIG);\n+    discardedValueDisposer = checkNotNull(disposer);\n+    return this;\n+  }\n+\n+  @NonNull\n+  @Override\n   public Repository compile() {\n     Repository repository = compileRepositoryAndReset();\n     recycle(this);\n@@ -422,7 +433,7 @@ public RepositoryCompiler compileIntoRepositoryWithInitialValue(@NonNull final O\n   private Repository compileRepositoryAndReset() {\n     checkExpect(CONFIG);\n     Repository repository = compiledRepository(initialValue, eventSources, frequency, directives,\n-        notifyChecker, concurrentUpdateConfig, deactivationConfig);\n+        notifyChecker, concurrentUpdateConfig, deactivationConfig, discardedValueDisposer);\n     expect = NOTHING;\n     initialValue = null;\n     eventSources.clear();\n@@ -432,6 +443,7 @@ private Repository compileRepositoryAndReset() {\n     notifyChecker = objectsUnequal();\n     deactivationConfig = RepositoryConfig.CONTINUE_FLOW;\n     concurrentUpdateConfig = RepositoryConfig.CONTINUE_FLOW;\n+    discardedValueDisposer = NULL_OPERATOR;\n     return repository;\n   }\n "},{"sha":"a273eaebcd014c21ff4c8584c73d727c0d02737d","filename":"agera/src/main/java/com/google/android/agera/RepositoryCompilerStates.java","status":"modified","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/google/agera/blob/d6736edeb5720036b44431925d7f10b45592da67/agera/src/main/java/com/google/android/agera/RepositoryCompilerStates.java","raw_url":"https://github.com/google/agera/raw/d6736edeb5720036b44431925d7f10b45592da67/agera/src/main/java/com/google/android/agera/RepositoryCompilerStates.java","contents_url":"https://api.github.com/repos/google/agera/contents/agera/src/main/java/com/google/android/agera/RepositoryCompilerStates.java?ref=d6736edeb5720036b44431925d7f10b45592da67","patch":"@@ -17,6 +17,7 @@\n \n import android.support.annotation.NonNull;\n \n+import java.io.Closeable;\n import java.util.concurrent.Executor;\n import java.util.concurrent.RejectedExecutionException;\n \n@@ -469,6 +470,33 @@\n     RConfig<TVal> onConcurrentUpdate(@RepositoryConfig int concurrentUpdateConfig);\n \n     /**\n+     * Specifies a {@code disposer} to handle any intermediate values discarded from the data\n+     * processing flow. Intermediate values may be discarded due to the rest of the flow being\n+     * skipped by a skip directive or a termination clause ({@code thenSkip()}, {@code orSkip()} and\n+     * {@code orEnd()}), or cancelled in compliance with the deactivation or concurrent update\n+     * configuration. The disposer may want to check if the values should be disposed of in a proper\n+     * way, such as calling {@link Closeable#close()} on all {@link Closeable} values.\n+     *\n+     * <p>In each occasion where an intermediate value is discarded, the disposer will receive the\n+     * value computed by the last completed directive. If the last directive was an attempt that\n+     * failed, the disposer will receive the failed {@link Result}.\n+     *\n+     * <p>The compiled repository will only avoid sending the current repository value (accessible\n+     * from the {@link Repository#get()} method) to the disposer, if it happens to be {@code ==}\n+     * (reference-equal) to the intermediate value being discarded. This ensures that the value,\n+     * still exposed through {@link Repository#get()}, is not incorrectly disposed. However, no\n+     * similar attempt will be made for the repository's initial value. If the initial value is\n+     * disposable and {@link RepositoryConfig#RESET_TO_INITIAL_VALUE} is used, this may lead to\n+     * incorrect disposal of the initial value. The disposer should take care of this case\n+     * explicitly, or the repository should be designed to only publish values that need not be\n+     * disposed of.\n+     *\n+     * @param disposer The {@link Receiver} to receive the discarded intermediate values.\n+     */\n+    @NonNull\n+    RConfig<TVal> sendDiscardedValuesTo(@NonNull Receiver<Object> disposer);\n+\n+    /**\n      * Compiles a {@link Repository} that exhibits the previously defined behaviors.\n      */\n     @NonNull"},{"sha":"bd6099c2519db995872b08018811be30898b0af9","filename":"agera/src/test/java/com/google/android/agera/RepositoryDisposerTest.java","status":"added","additions":177,"deletions":0,"changes":177,"blob_url":"https://github.com/google/agera/blob/d6736edeb5720036b44431925d7f10b45592da67/agera/src/test/java/com/google/android/agera/RepositoryDisposerTest.java","raw_url":"https://github.com/google/agera/raw/d6736edeb5720036b44431925d7f10b45592da67/agera/src/test/java/com/google/android/agera/RepositoryDisposerTest.java","contents_url":"https://api.github.com/repos/google/agera/contents/agera/src/test/java/com/google/android/agera/RepositoryDisposerTest.java?ref=d6736edeb5720036b44431925d7f10b45592da67","patch":"@@ -0,0 +1,177 @@\n+/*\n+ * Copyright 2015 Google Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.android.agera;\n+\n+import com.google.android.agera.test.SingleSlotDelayedExecutor;\n+import com.google.android.agera.test.mocks.MockUpdatable;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.Config;\n+\n+import static com.google.android.agera.Functions.staticFunction;\n+import static com.google.android.agera.Predicates.equalTo;\n+import static com.google.android.agera.Predicates.falsePredicate;\n+import static com.google.android.agera.Predicates.truePredicate;\n+import static com.google.android.agera.Repositories.repositoryWithInitialValue;\n+import static com.google.android.agera.RepositoryConfig.CANCEL_FLOW;\n+import static com.google.android.agera.Result.failure;\n+import static com.google.android.agera.Suppliers.staticSupplier;\n+import static com.google.android.agera.test.mocks.MockUpdatable.mockUpdatable;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+import static org.mockito.MockitoAnnotations.initMocks;\n+import static org.robolectric.annotation.Config.NONE;\n+\n+@Config(manifest = NONE)\n+@RunWith(RobolectricTestRunner.class)\n+public final class RepositoryDisposerTest {\n+  private static final Object INITIAL_VALUE = new Object();\n+  private static final Object FIRST_VALUE = new Object();\n+  private static final Object SECOND_VALUE = new Object();\n+  private static final Object BREAK_VALUE = new Object();\n+  private static final Object FINAL_VALUE = new Object();\n+\n+  private MockUpdatable updatable;\n+  private SingleSlotDelayedExecutor executor;\n+  @Mock\n+  private Predicate<Object> mockPredicate;\n+  @Mock\n+  private Receiver<Object> mockDisposer;\n+\n+  @Before\n+  public void setUp() {\n+    initMocks(this);\n+    updatable = mockUpdatable();\n+    executor = new SingleSlotDelayedExecutor();\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    updatable.removeFromObservables();\n+  }\n+\n+  @Test\n+  public void shouldNotDiscardInitialValue() {\n+    Repository<Object> repository = repositoryWithInitialValue(INITIAL_VALUE)\n+        .observe()\n+        .onUpdatesPerLoop()\n+        .check(falsePredicate()).orSkip()\n+        .thenGetFrom(staticSupplier(FINAL_VALUE))\n+        .sendDiscardedValuesTo(mockDisposer)\n+        .compile();\n+\n+    updatable.addToObservable(repository);\n+\n+    verify(mockDisposer, never()).accept(any());\n+  }\n+\n+  @Test\n+  public void shouldNotDiscardPublishedValue() {\n+    Repository<Object> repository = repositoryWithInitialValue(INITIAL_VALUE)\n+        .observe()\n+        .onUpdatesPerLoop()\n+        .check(mockPredicate).orSkip()\n+        .thenTransform(staticFunction(FINAL_VALUE))\n+        .sendDiscardedValuesTo(mockDisposer)\n+        .compile();\n+    when(mockPredicate.apply(INITIAL_VALUE)).thenReturn(true);\n+    when(mockPredicate.apply(FINAL_VALUE)).thenReturn(false);\n+\n+    updatable.addToObservable(repository);\n+    updatable.removeFromObservables();\n+    updatable.addToObservable(repository);\n+\n+    verify(mockPredicate).apply(INITIAL_VALUE);\n+    verify(mockPredicate).apply(FINAL_VALUE);\n+    verify(mockDisposer, never()).accept(any());\n+  }\n+\n+  @Test\n+  public void shouldDiscardFirstValueDueToSkipClause() {\n+    Repository<Object> repository = repositoryWithInitialValue(INITIAL_VALUE)\n+        .observe()\n+        .onUpdatesPerLoop()\n+        .getFrom(staticSupplier(FIRST_VALUE))\n+        .check(falsePredicate()).orSkip()\n+        .thenGetFrom(staticSupplier(FINAL_VALUE))\n+        .sendDiscardedValuesTo(mockDisposer)\n+        .compile();\n+\n+    updatable.addToObservable(repository);\n+\n+    verify(mockDisposer).accept(FIRST_VALUE);\n+  }\n+\n+  @Test\n+  public void shouldDiscardFirstValueDueToEndClause() {\n+    Repository<Object> repository = repositoryWithInitialValue(INITIAL_VALUE)\n+        .observe()\n+        .onUpdatesPerLoop()\n+        .getFrom(staticSupplier(FIRST_VALUE))\n+        .check(falsePredicate()).orEnd(staticFunction(BREAK_VALUE))\n+        .thenGetFrom(staticSupplier(FINAL_VALUE))\n+        .sendDiscardedValuesTo(mockDisposer)\n+        .compile();\n+\n+    updatable.addToObservable(repository);\n+\n+    verify(mockDisposer).accept(FIRST_VALUE);\n+  }\n+\n+  @Test\n+  public void shouldDiscardSecondValueDueToSkipDirective() {\n+    Repository<Object> repository = repositoryWithInitialValue(INITIAL_VALUE)\n+        .observe()\n+        .onUpdatesPerLoop()\n+        .getFrom(staticSupplier(FIRST_VALUE))\n+        .check(truePredicate()).orEnd(staticFunction(BREAK_VALUE))\n+        .transform(staticFunction(SECOND_VALUE))\n+        .thenSkip()\n+        .sendDiscardedValuesTo(mockDisposer)\n+        .compile();\n+\n+    updatable.addToObservable(repository);\n+\n+    verify(mockDisposer).accept(SECOND_VALUE);\n+  }\n+\n+  @Test\n+  public void shouldDiscardFirstValueDueToDeactivation() {\n+    Repository<Object> repository = repositoryWithInitialValue(INITIAL_VALUE)\n+        .observe()\n+        .onUpdatesPerLoop()\n+        .getFrom(staticSupplier(FIRST_VALUE))\n+        .goTo(executor)\n+        .thenTransform(staticFunction(FINAL_VALUE))\n+        .onDeactivation(CANCEL_FLOW)\n+        .sendDiscardedValuesTo(mockDisposer)\n+        .compile();\n+\n+    updatable.addToObservable(repository);\n+    updatable.removeFromObservables();\n+    executor.resumeOrThrow();\n+\n+    verify(mockDisposer).accept(FIRST_VALUE);\n+  }\n+}"}]}