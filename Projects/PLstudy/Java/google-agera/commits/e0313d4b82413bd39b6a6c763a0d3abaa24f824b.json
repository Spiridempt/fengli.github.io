{"sha":"e0313d4b82413bd39b6a6c763a0d3abaa24f824b","commit":{"author":{"name":"Magnus Ernstsson","email":"magnus@ernstsson.net","date":"2016-04-21T19:21:30Z"},"committer":{"name":"Magnus Ernstsson","email":"magnus@ernstsson.net","date":"2016-04-21T21:03:56Z"},"message":"Improved performance by reducing redundant updates\n\nResolves #31","tree":{"sha":"85c79ffaf6023a3aec0921a55200c89e48f668c4","url":"https://api.github.com/repos/google/agera/git/trees/85c79ffaf6023a3aec0921a55200c89e48f668c4"},"url":"https://api.github.com/repos/google/agera/git/commits/e0313d4b82413bd39b6a6c763a0d3abaa24f824b","comment_count":0},"url":"https://api.github.com/repos/google/agera/commits/e0313d4b82413bd39b6a6c763a0d3abaa24f824b","html_url":"https://github.com/google/agera/commit/e0313d4b82413bd39b6a6c763a0d3abaa24f824b","comments_url":"https://api.github.com/repos/google/agera/commits/e0313d4b82413bd39b6a6c763a0d3abaa24f824b/comments","author":{"login":"ernstsson","id":378389,"avatar_url":"https://avatars2.githubusercontent.com/u/378389?v=3","gravatar_id":"","url":"https://api.github.com/users/ernstsson","html_url":"https://github.com/ernstsson","followers_url":"https://api.github.com/users/ernstsson/followers","following_url":"https://api.github.com/users/ernstsson/following{/other_user}","gists_url":"https://api.github.com/users/ernstsson/gists{/gist_id}","starred_url":"https://api.github.com/users/ernstsson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ernstsson/subscriptions","organizations_url":"https://api.github.com/users/ernstsson/orgs","repos_url":"https://api.github.com/users/ernstsson/repos","events_url":"https://api.github.com/users/ernstsson/events{/privacy}","received_events_url":"https://api.github.com/users/ernstsson/received_events","type":"User","site_admin":false},"committer":{"login":"ernstsson","id":378389,"avatar_url":"https://avatars2.githubusercontent.com/u/378389?v=3","gravatar_id":"","url":"https://api.github.com/users/ernstsson","html_url":"https://github.com/ernstsson","followers_url":"https://api.github.com/users/ernstsson/followers","following_url":"https://api.github.com/users/ernstsson/following{/other_user}","gists_url":"https://api.github.com/users/ernstsson/gists{/gist_id}","starred_url":"https://api.github.com/users/ernstsson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ernstsson/subscriptions","organizations_url":"https://api.github.com/users/ernstsson/orgs","repos_url":"https://api.github.com/users/ernstsson/repos","events_url":"https://api.github.com/users/ernstsson/events{/privacy}","received_events_url":"https://api.github.com/users/ernstsson/received_events","type":"User","site_admin":false},"parents":[{"sha":"424282a62bf39c725fa3cefe55ff903be48f657b","url":"https://api.github.com/repos/google/agera/commits/424282a62bf39c725fa3cefe55ff903be48f657b","html_url":"https://github.com/google/agera/commit/424282a62bf39c725fa3cefe55ff903be48f657b"}],"stats":{"total":16,"additions":7,"deletions":9},"files":[{"sha":"aef40100c6192a637e95e45f8b9969b5e04c4072","filename":"agera/src/main/java/com/google/android/agera/BaseObservable.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/google/agera/blob/e0313d4b82413bd39b6a6c763a0d3abaa24f824b/agera/src/main/java/com/google/android/agera/BaseObservable.java","raw_url":"https://github.com/google/agera/raw/e0313d4b82413bd39b6a6c763a0d3abaa24f824b/agera/src/main/java/com/google/android/agera/BaseObservable.java","contents_url":"https://api.github.com/repos/google/agera/contents/agera/src/main/java/com/google/android/agera/BaseObservable.java?ref=e0313d4b82413bd39b6a6c763a0d3abaa24f824b","patch":"@@ -117,7 +117,9 @@ synchronized void removeUpdatable(@NonNull final Updatable updatable) {\n     }\n \n     void dispatchUpdate() {\n-      handler.obtainMessage(MSG_UPDATE, this).sendToTarget();\n+      if (!handler.hasMessages(MSG_UPDATE, this)) {\n+        handler.obtainMessage(MSG_UPDATE, this).sendToTarget();\n+      }\n     }\n \n     private void add(@NonNull final Updatable updatable, @NonNull final Handler handler) {\n@@ -164,7 +166,7 @@ synchronized void sendUpdate() {\n         if (updatable != null) {\n           if (handler.getLooper() == Looper.myLooper()) {\n             updatable.update();\n-          } else {\n+          } else if (!handler.hasMessages(WorkerHandler.MSG_CALL_UPDATABLE, updatable)) {\n             handler.obtainMessage(WorkerHandler.MSG_CALL_UPDATABLE, updatable).sendToTarget();\n           }\n         }"},{"sha":"bf49c42c9ea88efffbb165edfc7227a4a31fae41","filename":"agera/src/main/java/com/google/android/agera/Repositories.java","status":"modified","additions":3,"deletions":7,"changes":10,"blob_url":"https://github.com/google/agera/blob/e0313d4b82413bd39b6a6c763a0d3abaa24f824b/agera/src/main/java/com/google/android/agera/Repositories.java","raw_url":"https://github.com/google/agera/raw/e0313d4b82413bd39b6a6c763a0d3abaa24f824b/agera/src/main/java/com/google/android/agera/Repositories.java","contents_url":"https://api.github.com/repos/google/agera/contents/agera/src/main/java/com/google/android/agera/Repositories.java?ref=e0313d4b82413bd39b6a6c763a0d3abaa24f824b","patch":"@@ -17,7 +17,6 @@\n \n import static com.google.android.agera.Observables.updateDispatcher;\n import static com.google.android.agera.Preconditions.checkNotNull;\n-import static com.google.android.agera.Preconditions.checkState;\n \n import com.google.android.agera.RepositoryCompilerStates.REventSource;\n \n@@ -37,7 +36,7 @@\n    */\n   @NonNull\n   public static <T> Repository<T> repository(@NonNull final T object) {\n-    return new SimpleRepository<>(object, false);\n+    return new SimpleRepository<>(object);\n   }\n \n   /**\n@@ -53,18 +52,16 @@\n    */\n   @NonNull\n   public static <T> MutableRepository<T> mutableRepository(@NonNull final T object) {\n-    return new SimpleRepository<>(object, true);\n+    return new SimpleRepository<>(object);\n   }\n \n   private static final class SimpleRepository<T> implements MutableRepository<T> {\n-    private final boolean mutable;\n     @NonNull\n     private final UpdateDispatcher updateDispatcher;\n     @NonNull\n     private T reference;\n \n-    SimpleRepository(@NonNull final T reference, boolean mutable) {\n-      this.mutable = mutable;\n+    SimpleRepository(@NonNull final T reference) {\n       this.updateDispatcher = updateDispatcher();\n       this.reference = checkNotNull(reference);\n     }\n@@ -77,7 +74,6 @@ public synchronized T get() {\n \n     @Override\n     public synchronized void accept(@NonNull final T reference) {\n-      checkState(mutable, \"So you cast me?\");\n       if (this.reference.equals(checkNotNull(reference))) {\n         // Keep the old reference to have a slight performance edge if GC is generational.\n         return;"}]}