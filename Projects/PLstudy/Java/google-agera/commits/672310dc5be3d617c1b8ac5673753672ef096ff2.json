{"sha":"672310dc5be3d617c1b8ac5673753672ef096ff2","commit":{"author":{"name":"Magnus Ernstsson","email":"magnus@ernstsson.net","date":"2016-12-19T13:13:13Z"},"committer":{"name":"GitHub","email":"noreply@github.com","date":"2016-12-19T13:13:13Z"},"message":"Exposed onViewRecycled to RepositoryPresenter (#129)","tree":{"sha":"ef2d8ade4fba37d1a85b3a6feebd55d3dfd9ea16","url":"https://api.github.com/repos/google/agera/git/trees/ef2d8ade4fba37d1a85b3a6feebd55d3dfd9ea16"},"url":"https://api.github.com/repos/google/agera/git/commits/672310dc5be3d617c1b8ac5673753672ef096ff2","comment_count":0},"url":"https://api.github.com/repos/google/agera/commits/672310dc5be3d617c1b8ac5673753672ef096ff2","html_url":"https://github.com/google/agera/commit/672310dc5be3d617c1b8ac5673753672ef096ff2","comments_url":"https://api.github.com/repos/google/agera/commits/672310dc5be3d617c1b8ac5673753672ef096ff2/comments","author":{"login":"ernstsson","id":378389,"avatar_url":"https://avatars2.githubusercontent.com/u/378389?v=3","gravatar_id":"","url":"https://api.github.com/users/ernstsson","html_url":"https://github.com/ernstsson","followers_url":"https://api.github.com/users/ernstsson/followers","following_url":"https://api.github.com/users/ernstsson/following{/other_user}","gists_url":"https://api.github.com/users/ernstsson/gists{/gist_id}","starred_url":"https://api.github.com/users/ernstsson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ernstsson/subscriptions","organizations_url":"https://api.github.com/users/ernstsson/orgs","repos_url":"https://api.github.com/users/ernstsson/repos","events_url":"https://api.github.com/users/ernstsson/events{/privacy}","received_events_url":"https://api.github.com/users/ernstsson/received_events","type":"User","site_admin":false},"committer":{"login":"web-flow","id":19864447,"avatar_url":"https://avatars0.githubusercontent.com/u/19864447?v=3","gravatar_id":"","url":"https://api.github.com/users/web-flow","html_url":"https://github.com/web-flow","followers_url":"https://api.github.com/users/web-flow/followers","following_url":"https://api.github.com/users/web-flow/following{/other_user}","gists_url":"https://api.github.com/users/web-flow/gists{/gist_id}","starred_url":"https://api.github.com/users/web-flow/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/web-flow/subscriptions","organizations_url":"https://api.github.com/users/web-flow/orgs","repos_url":"https://api.github.com/users/web-flow/repos","events_url":"https://api.github.com/users/web-flow/events{/privacy}","received_events_url":"https://api.github.com/users/web-flow/received_events","type":"User","site_admin":false},"parents":[{"sha":"45f0d26d72eeebd4ff73cd5b6052cdc4aef11e93","url":"https://api.github.com/repos/google/agera/commits/45f0d26d72eeebd4ff73cd5b6052cdc4aef11e93","html_url":"https://github.com/google/agera/commit/45f0d26d72eeebd4ff73cd5b6052cdc4aef11e93"}],"stats":{"total":255,"additions":213,"deletions":42},"files":[{"sha":"58e77c3b21a236d1f476e49cb91db1b6ed567d0b","filename":"extensions/rvadapter/src/main/java/com/google/android/agera/rvadapter/RepositoryAdapter.java","status":"modified","additions":26,"deletions":2,"changes":28,"blob_url":"https://github.com/google/agera/blob/672310dc5be3d617c1b8ac5673753672ef096ff2/extensions/rvadapter/src/main/java/com/google/android/agera/rvadapter/RepositoryAdapter.java","raw_url":"https://github.com/google/agera/raw/672310dc5be3d617c1b8ac5673753672ef096ff2/extensions/rvadapter/src/main/java/com/google/android/agera/rvadapter/RepositoryAdapter.java","contents_url":"https://api.github.com/repos/google/agera/contents/extensions/rvadapter/src/main/java/com/google/android/agera/rvadapter/RepositoryAdapter.java?ref=672310dc5be3d617c1b8ac5673753672ef096ff2","patch":"@@ -36,7 +36,9 @@\n \n import java.util.ArrayList;\n import java.util.Arrays;\n+import java.util.IdentityHashMap;\n import java.util.List;\n+import java.util.Map;\n \n /**\n  * A specialized {@link RecyclerView.Adapter} that presents the data from a sequence of\n@@ -270,6 +272,8 @@ public void onActivityPaused(final Activity anyActivity) {\n   @NonNull\n   private final RepositoryPresenter<Object>[] presenters;\n   @NonNull\n+  private final Map<ViewHolder, RepositoryPresenter<Object>> presenterForViewHolder;\n+  @NonNull\n   private final Observable observable;\n   @NonNull\n   private final int[] endPositions;\n@@ -298,6 +302,7 @@ public RepositoryAdapter(@NonNull final Builder builder) {\n     this.repositoryCount = count;\n     this.repositories = repositories;\n     this.presenters = presenters;\n+    this.presenterForViewHolder = new IdentityHashMap<>();\n     this.observable = compositeObservable(observables);\n     this.endPositions = new int[count];\n     this.dataInvalid = true;\n@@ -379,8 +384,27 @@ public final void onBindViewHolder(final ViewHolder holder, final int position)\n     resolveIndices(position);\n     int resolvedRepositoryIndex = this.resolvedRepositoryIndex;\n     int resolvedItemIndex = this.resolvedItemIndex;\n-    presenters[resolvedRepositoryIndex].bind(\n-        data[resolvedRepositoryIndex], resolvedItemIndex, holder);\n+    final RepositoryPresenter<Object> presenter = presenters[resolvedRepositoryIndex];\n+    presenterForViewHolder.put(holder, presenter);\n+    presenter.bind(data[resolvedRepositoryIndex], resolvedItemIndex, holder);\n+  }\n+\n+  @Override\n+  public boolean onFailedToRecycleView(final ViewHolder holder) {\n+    recycle(holder);\n+    return super.onFailedToRecycleView(holder);\n+  }\n+\n+  @Override\n+  public void onViewRecycled(final ViewHolder holder) {\n+    recycle(holder);\n+  }\n+\n+  private void recycle(@NonNull final ViewHolder holder) {\n+    final RepositoryPresenter<Object> presenter = presenterForViewHolder.remove(holder);\n+    if (presenter != null) {\n+      presenter.recycle(holder);\n+    }\n   }\n \n   /**"},{"sha":"4e3bc55eb9ab99e9e05b7afcd26b3466574c5d1b","filename":"extensions/rvadapter/src/main/java/com/google/android/agera/rvadapter/RepositoryPresenter.java","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/google/agera/blob/672310dc5be3d617c1b8ac5673753672ef096ff2/extensions/rvadapter/src/main/java/com/google/android/agera/rvadapter/RepositoryPresenter.java","raw_url":"https://github.com/google/agera/raw/672310dc5be3d617c1b8ac5673753672ef096ff2/extensions/rvadapter/src/main/java/com/google/android/agera/rvadapter/RepositoryPresenter.java","contents_url":"https://api.github.com/repos/google/agera/contents/extensions/rvadapter/src/main/java/com/google/android/agera/rvadapter/RepositoryPresenter.java?ref=672310dc5be3d617c1b8ac5673753672ef096ff2","patch":"@@ -66,4 +66,13 @@ public long getItemId(@NonNull final T data, final int index) {\n    *     object will be of that custom type.\n    */\n   public abstract void bind(@NonNull T data, int index, @NonNull RecyclerView.ViewHolder holder);\n+\n+  /**\n+   * Called when the given {@code holder} is recycled.\n+   *\n+   * @param holder The view holder that holds the view. If a subclass of {@link RepositoryAdapter}\n+   *     is used, which returns a custom view holder for this item's layout resource ID, then this\n+   *     object will be of that custom type.\n+   */\n+  public void recycle(@NonNull final RecyclerView.ViewHolder holder) {}\n }"},{"sha":"187bf0a34a710dd4cf767b085f0d9c1ba54666ba","filename":"extensions/rvadapter/src/main/java/com/google/android/agera/rvadapter/RepositoryPresenterCompiler.java","status":"modified","additions":47,"deletions":16,"changes":63,"blob_url":"https://github.com/google/agera/blob/672310dc5be3d617c1b8ac5673753672ef096ff2/extensions/rvadapter/src/main/java/com/google/android/agera/rvadapter/RepositoryPresenterCompiler.java","raw_url":"https://github.com/google/agera/raw/672310dc5be3d617c1b8ac5673753672ef096ff2/extensions/rvadapter/src/main/java/com/google/android/agera/rvadapter/RepositoryPresenterCompiler.java","contents_url":"https://api.github.com/repos/google/agera/contents/extensions/rvadapter/src/main/java/com/google/android/agera/rvadapter/RepositoryPresenterCompiler.java?ref=672310dc5be3d617c1b8ac5673753672ef096ff2","patch":"@@ -20,9 +20,10 @@\n \n import com.google.android.agera.Binder;\n import com.google.android.agera.Function;\n+import com.google.android.agera.Receiver;\n import com.google.android.agera.Result;\n import com.google.android.agera.rvadapter.RepositoryPresenterCompilerStates.RPLayout;\n-import com.google.android.agera.rvadapter.RepositoryPresenterCompilerStates.RPViewBinderStableIdCompile;\n+import com.google.android.agera.rvadapter.RepositoryPresenterCompilerStates.RPViewBinderRecycleStableIdCompile;\n \n import android.support.annotation.LayoutRes;\n import android.support.annotation.NonNull;\n@@ -32,31 +33,33 @@\n import java.util.List;\n \n @SuppressWarnings({\"unchecked, rawtypes\"})\n-final class RepositoryPresenterCompiler implements RPLayout, RPViewBinderStableIdCompile {\n+final class RepositoryPresenterCompiler implements RPLayout, RPViewBinderRecycleStableIdCompile {\n   @NonNull\n-  private static final NullBinder NULL_BINDER = new NullBinder();\n+  private static final NullHandler NULL_HANDLER = new NullHandler();\n   private Function<Object, Integer> layoutForItem;\n   @NonNull\n-  private Binder binder = NULL_BINDER;\n+  private Binder binder = NULL_HANDLER;\n+  @NonNull\n+  private Receiver recycler = NULL_HANDLER;\n   @NonNull\n   private Function<Object, Long> stableIdForItem = staticFunction(RecyclerView.NO_ID);\n \n   @NonNull\n   @Override\n   public RepositoryPresenter<List> forList() {\n-    return new ListBasicRepositoryPresenter(layoutForItem, binder, stableIdForItem);\n+    return new ListBasicRepositoryPresenter(layoutForItem, binder, recycler, stableIdForItem);\n   }\n \n   @NonNull\n   @Override\n   public RepositoryPresenter<Result> forResult() {\n-    return new SingleResultRepositoryPresenter(layoutForItem, binder, stableIdForItem);\n+    return new SingleResultRepositoryPresenter(layoutForItem, binder, recycler, stableIdForItem);\n   }\n \n   @NonNull\n   @Override\n   public RepositoryPresenter<Result<List>> forResultList() {\n-    return new ListResultRepositoryPresenter(layoutForItem, binder, stableIdForItem);\n+    return new ListResultRepositoryPresenter(layoutForItem, binder, recycler, stableIdForItem);\n   }\n \n   @NonNull\n@@ -87,9 +90,19 @@ public Object stableIdForItem(@NonNull final Function stableIdForItem) {\n     return this;\n   }\n \n-  private static final class NullBinder implements Binder {\n+  @NonNull\n+  @Override\n+  public Object recycleWith(@NonNull final Receiver recycler) {\n+    this.recycler = recycler;\n+    return this;\n+  }\n+\n+  private static final class NullHandler implements Binder, Receiver {\n     @Override\n     public void bind(@NonNull Object o, @NonNull Object o2) {}\n+\n+    @Override\n+    public void accept(@NonNull final Object o) {}\n   }\n \n   private abstract static class BasicRepositoryPresenter<TVal, T>\n@@ -100,12 +113,16 @@ public void bind(@NonNull Object o, @NonNull Object o2) {}\n     private final Binder<TVal, View> binder;\n     @NonNull\n     private final Function<TVal, Long> stableIdForItem;\n+    @NonNull\n+    private final Receiver<View> recycler;\n \n     BasicRepositoryPresenter(@NonNull final Function<Object, Integer> layoutId,\n         @NonNull final Binder<TVal, View> binder,\n+        @NonNull final Receiver<View> recycler,\n         @NonNull final Function<TVal, Long> stableIdForItem) {\n       this.layoutId = checkNotNull(layoutId);\n       this.binder = checkNotNull(binder);\n+      this.recycler = checkNotNull(recycler);\n       this.stableIdForItem = stableIdForItem;\n     }\n \n@@ -128,14 +145,22 @@ public void bind(@NonNull final T data, final int index,\n         @NonNull final RecyclerView.ViewHolder holder) {\n       binder.bind(getValue(data, index), holder.itemView);\n     }\n+\n+    @Override\n+    public void recycle(@NonNull final RecyclerView.ViewHolder holder) {\n+      super.recycle(holder);\n+      recycler.accept(holder.itemView);\n+    }\n   }\n \n   private static final class ListBasicRepositoryPresenter<T>\n       extends BasicRepositoryPresenter<T, List<T>> {\n \n     public ListBasicRepositoryPresenter(@NonNull final Function<Object, Integer> layoutId,\n-        @NonNull final Binder<T, View> binder, Function<T, Long> stableIdForItem) {\n-      super(layoutId, binder, stableIdForItem);\n+        @NonNull final Binder<T, View> binder,\n+        @NonNull final Receiver<View> recycler,\n+        @NonNull final Function<T, Long> stableIdForItem) {\n+      super(layoutId, binder, recycler, stableIdForItem);\n     }\n \n     @Override\n@@ -154,8 +179,10 @@ protected T getValue(@NonNull final List<T> data, final int index) {\n       extends BasicRepositoryPresenter<TVal, Result<T>> {\n \n     ResultRepositoryPresenter(@NonNull final Function<Object, Integer> layoutId,\n-        @NonNull final Binder<TVal, View> binder, Function<TVal, Long> stableIdForItem) {\n-      super(layoutId, binder, stableIdForItem);\n+        @NonNull final Binder<TVal, View> binder,\n+        @NonNull final Receiver<View> recycler,\n+        @NonNull final Function<TVal, Long> stableIdForItem) {\n+      super(layoutId, binder, recycler, stableIdForItem);\n     }\n \n     @NonNull\n@@ -178,8 +205,10 @@ public final int getItemCount(@NonNull final Result<T> data) {\n   private static final class SingleResultRepositoryPresenter<T>\n       extends ResultRepositoryPresenter<T, T> {\n     public SingleResultRepositoryPresenter(@NonNull final Function<Object, Integer> layoutId,\n-        @NonNull final Binder<T, View> binder, Function stableIdForItem) {\n-      super(layoutId, binder, stableIdForItem);\n+        @NonNull final Binder<T, View> binder,\n+        @NonNull final Receiver<View> recycler,\n+        @NonNull final Function<T, Long> stableIdForItem) {\n+      super(layoutId, binder, recycler, stableIdForItem);\n     }\n \n     @Override\n@@ -198,8 +227,10 @@ protected T getResultValue(@NonNull final T data, final int index) {\n       extends ResultRepositoryPresenter<T, List<T>> {\n \n     public ListResultRepositoryPresenter(@NonNull final Function<Object, Integer> layoutId,\n-        @NonNull final Binder<T, View> binder, Function stableIdForItem) {\n-      super(layoutId, binder, stableIdForItem);\n+        @NonNull final Binder<T, View> binder,\n+        @NonNull final Receiver<View> recycler,\n+        @NonNull final Function<T, Long> stableIdForItem) {\n+      super(layoutId, binder, recycler, stableIdForItem);\n     }\n \n     @Override"},{"sha":"6e4d9443b1ad76d0f7d48cd8a651061f5fc04f24","filename":"extensions/rvadapter/src/main/java/com/google/android/agera/rvadapter/RepositoryPresenterCompilerStates.java","status":"modified","additions":39,"deletions":21,"changes":60,"blob_url":"https://github.com/google/agera/blob/672310dc5be3d617c1b8ac5673753672ef096ff2/extensions/rvadapter/src/main/java/com/google/android/agera/rvadapter/RepositoryPresenterCompilerStates.java","raw_url":"https://github.com/google/agera/raw/672310dc5be3d617c1b8ac5673753672ef096ff2/extensions/rvadapter/src/main/java/com/google/android/agera/rvadapter/RepositoryPresenterCompilerStates.java","contents_url":"https://api.github.com/repos/google/agera/contents/extensions/rvadapter/src/main/java/com/google/android/agera/rvadapter/RepositoryPresenterCompilerStates.java?ref=672310dc5be3d617c1b8ac5673753672ef096ff2","patch":"@@ -29,8 +29,8 @@\n import java.util.List;\n \n /**\n- * Container of the compiler state interfaces supporting the creation of a\n- * {@link RepositoryPresenter}.\n+ * Container of the compiler state interfaces supporting the creation of a {@link\n+ * RepositoryPresenter}.\n  */\n public interface RepositoryPresenterCompilerStates {\n \n@@ -69,19 +69,31 @@\n   }\n \n   /**\n-   * Compiler state to specify how to generate stable IDs when\n-   * {@link android.support.v7.widget.RecyclerView.Adapter#setHasStableIds(boolean)} is true.\n+   * Compiler state to specify how to recycle the {@code View}.\n+   */\n+  interface RPRecycle<TRet> {\n+\n+    /**\n+     * Specifies a {@link Receiver} to recycle the {@code View}.\n+     */\n+    @NonNull\n+    TRet recycleWith(@NonNull Receiver<View> recycler);\n+  }\n+\n+  /**\n+   * Compiler state to specify how to generate stable IDs when {@link\n+   * android.support.v7.widget.RecyclerView.Adapter#setHasStableIds(boolean)} is true.\n    */\n   interface RPStableId<TVal, TRet> {\n \n     /**\n-     * Specifies a {@link Function} providing a stable id for the given item.\n-     * Called only if stable IDs are enabled with {@link RepositoryAdapter#setHasStableIds\n-     * RepositoryAdapter.setHasStableIds(true)}, and therefore this method is optional with a\n-     * default implementation of returning {@link RecyclerView#NO_ID}. If stable IDs are enabled,\n-     * the returned ID and the layout returned by {@link RPLayout#layoutForItem(Function)} or\n-     * {@link RPLayout#layout(int)} for the given item should together uniquely identify this item\n-     * in the whole {@link RecyclerView} throughout all changes.\n+     * Specifies a {@link Function} providing a stable id for the given item. Called only if stable\n+     * IDs are enabled with {@link RepositoryAdapter#setHasStableIds RepositoryAdapter.setHasStableIds(true)},\n+     * and therefore this method is optional with a default implementation of returning {@link\n+     * RecyclerView#NO_ID}. If stable IDs are enabled, the returned ID and the layout returned by\n+     * {@link RPLayout#layoutForItem(Function)} or {@link RPLayout#layout(int)} for the given item\n+     * should together uniquely identify this item in the whole {@link RecyclerView} throughout all\n+     * changes.\n      */\n     @NonNull\n     TRet stableIdForItem(@NonNull Function<? super TVal, Long> stableIdForItem);\n@@ -100,29 +112,35 @@\n     RepositoryPresenter<List<TVal>> forList();\n \n     /**\n-     * Creates a {@link RepositoryPresenter} for a @{link Repository} of a {@link Result} where\n-     * the item in the {@link Result} will be bound to the @{link RecyclerView} if present.\n+     * Creates a {@link RepositoryPresenter} for a @{link Repository} of a {@link Result} where the\n+     * item in the {@link Result} will be bound to the @{link RecyclerView} if present.\n      */\n     @NonNull\n     RepositoryPresenter<Result<TVal>> forResult();\n \n     /**\n-     * Creates a {@link RepositoryPresenter} for a @{link Repository} of a {@link Result}\n-     * containing a {@link List} where each item in the {@link List} will be bound to the\n-     * {@link RecyclerView}.\n+     * Creates a {@link RepositoryPresenter} for a @{link Repository} of a {@link Result} containing\n+     * a {@link List} where each item in the {@link List} will be bound to the {@link\n+     * RecyclerView}.\n      */\n     @NonNull\n     RepositoryPresenter<Result<List<TVal>>> forResultList();\n   }\n \n   /**\n-   * Compiler state allowing to specify view binder, view recycler or compile.\n+   * Compiler state allowing to specify Recycle or compile.\n+   */\n+  interface RPRecycleCompile<TVal> extends RPRecycle<RPCompile<TVal>>, RPCompile<TVal> {}\n+\n+  /**\n+   * Compiler state allowing to specify view binder, view recycler, function or compile.\n    */\n-  interface RPViewBinderCompile<TVal> extends RPViewBinder<TVal, RPCompile<TVal>>,\n-      RPCompile<TVal> {}\n+  interface RPViewBinderRecycleCompile<TVal> extends RPRecycleCompile<TVal>,\n+      RPViewBinder<TVal, RPRecycleCompile<TVal>> {}\n+\n   /**\n    * Compiler state allowing to specify view binder, view recycler, stable id function or compile.\n    */\n-  interface RPViewBinderStableIdCompile<TVal> extends RPViewBinderCompile<TVal>,\n-      RPStableId<TVal, RPViewBinderCompile<TVal>> {}\n+  interface RPViewBinderRecycleStableIdCompile<TVal> extends RPViewBinderRecycleCompile<TVal>,\n+      RPStableId<TVal, RPViewBinderRecycleCompile<TVal>> {}\n }"},{"sha":"81374c5553994d37d42d5f219f548da8b0fb7223","filename":"extensions/rvadapter/src/main/java/com/google/android/agera/rvadapter/RepositoryPresenters.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/google/agera/blob/672310dc5be3d617c1b8ac5673753672ef096ff2/extensions/rvadapter/src/main/java/com/google/android/agera/rvadapter/RepositoryPresenters.java","raw_url":"https://github.com/google/agera/raw/672310dc5be3d617c1b8ac5673753672ef096ff2/extensions/rvadapter/src/main/java/com/google/android/agera/rvadapter/RepositoryPresenters.java","contents_url":"https://api.github.com/repos/google/agera/contents/extensions/rvadapter/src/main/java/com/google/android/agera/rvadapter/RepositoryPresenters.java?ref=672310dc5be3d617c1b8ac5673753672ef096ff2","patch":"@@ -18,7 +18,7 @@\n import com.google.android.agera.Repository;\n import com.google.android.agera.Result;\n import com.google.android.agera.rvadapter.RepositoryPresenterCompilerStates.RPLayout;\n-import com.google.android.agera.rvadapter.RepositoryPresenterCompilerStates.RPViewBinderStableIdCompile;\n+import com.google.android.agera.rvadapter.RepositoryPresenterCompilerStates.RPViewBinderRecycleStableIdCompile;\n \n import android.support.annotation.NonNull;\n import android.support.annotation.Nullable;\n@@ -37,7 +37,7 @@\n    */\n   @SuppressWarnings({\"unchecked\", \"UnusedParameters\"})\n   @NonNull\n-  public static <T> RPLayout<T, RPViewBinderStableIdCompile<T>> repositoryPresenterOf(\n+  public static <T> RPLayout<T, RPViewBinderRecycleStableIdCompile<T>> repositoryPresenterOf(\n       @Nullable final Class<T> type) {\n     return new RepositoryPresenterCompiler();\n   }"},{"sha":"5f6f55d8c0c34a75c36f9445f2b7d439ef137ca7","filename":"extensions/rvadapter/src/test/java/com/google/android/agera/rvadapter/RepositoryAdapterTest.java","status":"modified","additions":63,"deletions":0,"changes":63,"blob_url":"https://github.com/google/agera/blob/672310dc5be3d617c1b8ac5673753672ef096ff2/extensions/rvadapter/src/test/java/com/google/android/agera/rvadapter/RepositoryAdapterTest.java","raw_url":"https://github.com/google/agera/raw/672310dc5be3d617c1b8ac5673753672ef096ff2/extensions/rvadapter/src/test/java/com/google/android/agera/rvadapter/RepositoryAdapterTest.java","contents_url":"https://api.github.com/repos/google/agera/contents/extensions/rvadapter/src/test/java/com/google/android/agera/rvadapter/RepositoryAdapterTest.java?ref=672310dc5be3d617c1b8ac5673753672ef096ff2","patch":"@@ -187,6 +187,69 @@ public void shouldUpdateOnAdditionalObservablesWhenObserving() {\n   }\n \n   @Test\n+  public void shouldCallRecycleForOnViewRecycled() {\n+    when(repositoryPresenter.getItemCount(ALTERNATIVE_REPOSITORY_ITEM)).thenReturn(1);\n+    repositoryAdapter.getItemCount(); //Trigger a refresh\n+\n+    repositoryAdapter.startObserving();\n+    repository.accept(ALTERNATIVE_REPOSITORY_ITEM);\n+    runUiThreadTasksIncludingDelayedTasks();\n+    repositoryAdapter.stopObserving();\n+    repositoryAdapter.onBindViewHolder(viewHolder, 0);\n+\n+    repositoryAdapter.onViewRecycled(viewHolder);\n+\n+    verify(repositoryPresenter).recycle(viewHolder);\n+  }\n+\n+  @Test\n+  public void shouldCallRecycleForOnFailedToRecycleView() {\n+    when(repositoryPresenter.getItemCount(ALTERNATIVE_REPOSITORY_ITEM)).thenReturn(1);\n+    repositoryAdapter.getItemCount(); //Trigger a refresh\n+\n+    repositoryAdapter.startObserving();\n+    repository.accept(ALTERNATIVE_REPOSITORY_ITEM);\n+    runUiThreadTasksIncludingDelayedTasks();\n+    repositoryAdapter.stopObserving();\n+    repositoryAdapter.onBindViewHolder(viewHolder, 0);\n+\n+    repositoryAdapter.onFailedToRecycleView(viewHolder);\n+\n+    verify(repositoryPresenter).recycle(viewHolder);\n+  }\n+\n+  public void shouldCallRecycleForOnViewRecycledForSecondPresenter() {\n+    when(repositoryPresenter.getItemCount(ALTERNATIVE_REPOSITORY_ITEM)).thenReturn(1);\n+    repositoryAdapter.getItemCount(); //Trigger a refresh\n+\n+    repositoryAdapter.startObserving();\n+    repository.accept(ALTERNATIVE_REPOSITORY_ITEM);\n+    runUiThreadTasksIncludingDelayedTasks();\n+    repositoryAdapter.stopObserving();\n+    repositoryAdapter.onBindViewHolder(viewHolder, 1);\n+\n+    repositoryAdapter.onViewRecycled(viewHolder);\n+\n+    verify(secondRepositoryPresenter).recycle(viewHolder);\n+  }\n+\n+  @Test\n+  public void shouldCallRecycleForOnFailedToRecycleViewForSecondPresenter() {\n+    when(repositoryPresenter.getItemCount(ALTERNATIVE_REPOSITORY_ITEM)).thenReturn(1);\n+    repositoryAdapter.getItemCount(); //Trigger a refresh\n+\n+    repositoryAdapter.startObserving();\n+    repository.accept(ALTERNATIVE_REPOSITORY_ITEM);\n+    runUiThreadTasksIncludingDelayedTasks();\n+    repositoryAdapter.stopObserving();\n+    repositoryAdapter.onBindViewHolder(viewHolder, 1);\n+\n+    repositoryAdapter.onFailedToRecycleView(viewHolder);\n+\n+    verify(secondRepositoryPresenter).recycle(viewHolder);\n+  }\n+\n+  @Test\n   public void shouldUpdateOnChangingRepositoryWhenObserving() {\n     when(repositoryPresenter.getItemCount(ALTERNATIVE_REPOSITORY_ITEM)).thenReturn(1);\n     repositoryAdapter.getItemCount(); //Trigger a refresh"},{"sha":"ed579d7cf9c39adc54c3b1d43255a1f4c8cb4f28","filename":"extensions/rvadapter/src/test/java/com/google/android/agera/rvadapter/RepositoryPresentersTest.java","status":"modified","additions":27,"deletions":1,"changes":28,"blob_url":"https://github.com/google/agera/blob/672310dc5be3d617c1b8ac5673753672ef096ff2/extensions/rvadapter/src/test/java/com/google/android/agera/rvadapter/RepositoryPresentersTest.java","raw_url":"https://github.com/google/agera/raw/672310dc5be3d617c1b8ac5673753672ef096ff2/extensions/rvadapter/src/test/java/com/google/android/agera/rvadapter/RepositoryPresentersTest.java","contents_url":"https://api.github.com/repos/google/agera/contents/extensions/rvadapter/src/test/java/com/google/android/agera/rvadapter/RepositoryPresentersTest.java?ref=672310dc5be3d617c1b8ac5673753672ef096ff2","patch":"@@ -14,6 +14,7 @@\n import com.google.android.agera.Binder;\n import com.google.android.agera.Function;\n import com.google.android.agera.Functions;\n+import com.google.android.agera.Receiver;\n import com.google.android.agera.Result;\n \n import android.support.v7.widget.RecyclerView;\n@@ -25,7 +26,6 @@\n import org.robolectric.RobolectricTestRunner;\n import org.robolectric.annotation.Config;\n \n-import java.util.Arrays;\n import java.util.List;\n \n @RunWith(RobolectricTestRunner.class)\n@@ -44,6 +44,8 @@\n   @Mock\n   private Binder<String, View> binder;\n   @Mock\n+  private Receiver<View> recycler;\n+  @Mock\n   private Function<String,Integer> layoutForItem;\n   private RecyclerView.ViewHolder viewHolder;\n   @Mock\n@@ -100,6 +102,30 @@ public void shouldBindRepositoryPresenterOfList() {\n   }\n \n   @Test\n+  public void shouldRecycleViewInRepositoryPresenter() {\n+    final RepositoryPresenter<List<String>> listRepositoryPresenter =\n+        repositoryPresenterOf(String.class)\n+            .layout(LAYOUT_ID)\n+            .bindWith(binder)\n+            .recycleWith(recycler)\n+            .forList();\n+    listRepositoryPresenter.bind(STRING_LIST, 1, viewHolder);\n+    listRepositoryPresenter.recycle(viewHolder);\n+    verify(recycler).accept(view);\n+  }\n+\n+  @Test\n+  public void shouldHandleRecycleWithoutRecycler() {\n+    final RepositoryPresenter<List<String>> listRepositoryPresenter =\n+        repositoryPresenterOf(String.class)\n+            .layout(LAYOUT_ID)\n+            .bindWith(binder)\n+            .forList();\n+    listRepositoryPresenter.bind(STRING_LIST, 1, viewHolder);\n+    listRepositoryPresenter.recycle(viewHolder);\n+  }\n+\n+  @Test\n   public void shouldReturnZeroForCountOfRepositoryPresenterOfFailedResult() {\n     final RepositoryPresenter<Result<String>> resultRepositoryPresenter =\n         repositoryPresenterOf(String.class)"}]}